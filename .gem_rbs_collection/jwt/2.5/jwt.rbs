module JWT
  interface _Algo
    def alg: () -> ::String
    def sign: (data: ::String, signing_key: untyped) -> ::String
    def valid_alg?: (String alg_to_validate) -> boolish
    def verify: (data: untyped, signature: ::String, verification_key: untyped) -> boolish
  end

  def self?.encode: (untyped payload, untyped key, ?::String | _Algo algorithm, ?::Hash[::String | ::Symbol, untyped] header_fields) -> ::String

  def self?.decode: (String jwt, ?untyped? key, ?boolish verify, ?::Hash[Symbol, untyped] options) ?{ (Hash[::String, untyped] header, ?untyped payload) -> untyped } -> [untyped, Hash[::String, untyped]]


  class EncodeError < StandardError
  end
  class DecodeError < StandardError
  end
  class RequiredDependencyError < StandardError
  end

  class VerificationError < DecodeError
  end
  class ExpiredSignature < DecodeError
  end
  class IncorrectAlgorithm < DecodeError
  end
  class ImmatureSignature < DecodeError
  end
  class InvalidIssuerError < DecodeError
  end
  class UnsupportedEcdsaCurve < IncorrectAlgorithm
  end
  class InvalidIatError < DecodeError
  end
  class InvalidAudError < DecodeError
  end
  class InvalidSubError < DecodeError
  end
  class InvalidJtiError < DecodeError
  end
  class InvalidPayload < DecodeError
  end
  class MissingRequiredClaim < DecodeError
  end

  class JWKError < DecodeError
  end
end
