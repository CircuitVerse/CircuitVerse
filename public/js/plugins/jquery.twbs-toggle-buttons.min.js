/*
 Twitter Bootstrap Toogle Buttons 0.0.3
 Available under the MIT license.
 See https://github.com/prokki/twbs-toggle-buttons for more information.
*/

//* *  The file has been modified

var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.findInternal = function (a, b, c) {
    a instanceof String && (a = String(a));
    for (var d = a.length, e = 0; e < d; e++) {
        var f = a[e];
        if (b.call(c, f, e, a)) return { i: e, v: f };
    }
    return { i: -1, v: void 0 };
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || typeof Object.defineProperties === 'function'
    ? Object.defineProperty
    : function (a, b, c) {
        a != Array.prototype && a != Object.prototype && (a[b] = c.value);
    };
$jscomp.getGlobal = function (a) {
    return typeof window !== 'undefined' && window === a
        ? a
        : typeof global !== 'undefined' && global != null
            ? global
            : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.polyfill = function (a, b, c, d) {
    if (b) {
        c = $jscomp.global;
        a = a.split('.');
        for (d = 0; d < a.length - 1; d++) {
            var e = a[d];
            e in c || (c[e] = {});
            c = c[e];
        }
        a = a[a.length - 1];
        d = c[a];
        b = b(d);
        b != d
      && b != null
      && $jscomp.defineProperty(c, a, {
          configurable: !0,
          writable: !0,
          value: b,
      });
    }
};
$jscomp.polyfill(
    'Array.prototype.find',
    (a) => a || function (a, c) {
        return $jscomp.findInternal(this, a, c).v;
    },
    'es6',
    'es3',
);
var TwbsToggleButtons = function (a, b) {
    this.$_element = a;
    this._initializeOptions(b);
    this._initializeDOM();
    this.$_element
        .find(this._options.twbsBtnSelector)
        .on('click', this._eventClick.bind(this));
    this.$_element.data('twbsToggleButtons', this);
};
TwbsToggleButtons.TYPE_RADIO = function () {
    return 1;
};
TwbsToggleButtons.TYPE_CHECKBOX = function () {
    return 2;
};
TwbsToggleButtons.DEFAULTS = function () {
    return {
        twbsBtnSelector: "[role='button']",
        classActive: 'active-btn',
        classInactive: 'inactive-btn',
    };
};
TwbsToggleButtons.ACTIVE_CLASS = function () {
    return 'active';
};
TwbsToggleButtons.prototype._getInputType = function () {
    var a = 0;
    var b = 0;
    this.$_element.find(':input').each(function () {
        if (this.getAttribute('type') === 'radio') a++;
        else if (this.getAttribute('type') === 'checkbox') b++;
        else {
            throw (
                `All input fields must be either of type 'radio' or of type 'checkbox, found '${
                    this.getAttribute('type')
                }'`
            );
        }
    });
    if (a !== 0 && b !== 0) throw "All input fields must be either of type 'radio' or of type 'checkbox, found both.";
    return b > 0
        ? TwbsToggleButtons.TYPE_CHECKBOX()
        : TwbsToggleButtons.TYPE_RADIO();
};
TwbsToggleButtons.prototype._initializeOptions = function (a) {
    this._options = $.extend({}, TwbsToggleButtons.DEFAULTS(), a || {});
    typeof this._options.classActive === 'string'
    && (this._options.classActive = [this._options.classActive]);
    typeof this._options.classInactive === 'string'
    && (this._options.classInactive = [this._options.classInactive]);
};
TwbsToggleButtons.prototype._resetDOM = function (a) {
    this.$_element.find(this._options.twbsBtnSelector).each(
        (b, c) => {
            a.indexOf(c) !== -1 ? this._activateButton(c) : this._deactivateButton(c);
        },
    );
};
TwbsToggleButtons.prototype._initializeDOM = function () {
    var a = this.$_element.find(this._options.twbsBtnSelector);
    var b = a.filter(`.${TwbsToggleButtons.ACTIVE_CLASS()}`).toArray();
    b.length > 1
    && this._getInputType() === TwbsToggleButtons.TYPE_RADIO()
    && (b = [b.pop()]);
    a.each(
        (a, d) => {
            b.indexOf(d) !== -1
                ? d.setAttribute('aria-pressed', 'true')
                : d.setAttribute('aria-pressed', 'false');
        },
    );
    this._resetDOM(b);
};
TwbsToggleButtons.prototype._eventClick = function (a) {
    var b = this.$_element
        .find(this._options.twbsBtnSelector)
        .filter(function () {
            return this.getAttribute('aria-pressed') === 'true';
        })
        .toArray();
    var c = a.currentTarget;
    this._getInputType() === TwbsToggleButtons.TYPE_RADIO()
        ? ((b = [c]),
        c.getAttribute('aria-pressed') === 'true'
        && (this.$_element
            .find(this._options.twbsBtnSelector)
            .find(':input[required]').length
        === 0
            ? (b = [])
            : a.stopPropagation()))
        : c.getAttribute('aria-pressed') === 'true' && b.indexOf(c) !== -1
            ? b.splice(b.indexOf(c), 1)
            : b.push(c);
    this._resetDOM(b);
    window.setTimeout(() => {
        a.target.dispatchEvent(new Event('twbsToggleButtons:activate'));
    }, 0);
    return !0;
};
TwbsToggleButtons.prototype._activateButton = function (a) {
    void 0 !== a.dataset.twbsToggleButtonsClassActive
  && a.dataset.twbsToggleButtonsClassActive.length > 0
        ? a.classList.add(a.dataset.twbsToggleButtonsClassActive)
        : this._options.classActive.forEach((b) => {
            a.classList.add(b);
        });
    this._options.classInactive.forEach((b) => {
        a.classList.remove(b);
    });
    $(a).find(':input').prop('checked', !0);
    $(a).find(':input').attr('checked', 'checked');
    (this._getInputType() !== TwbsToggleButtons.TYPE_RADIO()
    && this._getInputType() !== TwbsToggleButtons.TYPE_CHECKBOX())
    || a.getAttribute('aria-pressed') !== 'false'
    || window.setTimeout(() => {
        a.classList.remove(TwbsToggleButtons.ACTIVE_CLASS());
        a.setAttribute('aria-pressed', 'true');
    }, 0);
};
TwbsToggleButtons.prototype._deactivateButton = function (a) {
    void 0 !== a.dataset.twbsToggleButtonsClassActive
    && a.dataset.twbsToggleButtonsClassActive.length > 0
    && a.classList.remove(a.dataset.twbsToggleButtonsClassActive);
    this._options.classActive.forEach((b) => {
        a.classList.remove(b);
    });
    this._options.classInactive.forEach((b) => {
        a.classList.add(b);
    });
    $(a).find(':input').prop('checked', !1);
    $(a).find(':input').attr('checked', null);
    (this._getInputType() !== TwbsToggleButtons.TYPE_RADIO()
    && this._getInputType() !== TwbsToggleButtons.TYPE_CHECKBOX())
    || a.getAttribute('aria-pressed') !== 'true'
    || window.setTimeout(() => {
        a.classList.remove(TwbsToggleButtons.ACTIVE_CLASS());
        a.setAttribute('aria-pressed', 'false');
    }, 0);
};
(function (a) {
    a.fn.twbsToggleButtons == null
    && (a.fn.twbsToggleButtons = function (b) {
        var c = ['clear', 'destroy'];
        b = b || {};
        if (typeof b === 'object') {
            return (
                this.each(function () {
                    var c = a.extend(!0, {}, b);
                    void 0 === a(this).data('twbsToggleButtons')
                        ? new TwbsToggleButtons(a(this), c)
                        : ((c = a(this).data('twbsToggleButtons')),
                        c === null
                  && window.console
                  && console.error
                  && console.warn(
                      `Error on Initialization as TwbsToggleButtons: ${this}`,
                  ));
                }),
                this
            );
        }
        if (typeof b === 'string') {
            var d;
            var e = Array.prototype.slice.call(arguments, 1);
            this.each(function () {
                var c = a(this).data('twbsToggleButtons');
                c == null && window.console && console.error
                    ? console.error(
                        `The twbsToggleButtons('${
                            b
                        }') method was called on an element that is not using TwbsToggleButtons.`,
                    )
                    : typeof c[b] !== 'function'
              && console.error(
                  `Method '${b}' is not implemented in TwbsToggleButtons.`,
              );
                d = c[b].apply(c, e);
            });
            return a.inArray(b, c) > -1 ? this : d;
        }
        throw Error(`Invalid arguments for TwbsToggleButtons: ${b}`);
    });
}(jQuery));
