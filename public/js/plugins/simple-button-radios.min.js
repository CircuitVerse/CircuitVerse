/*!
 * Simple button radios 1.0.2
 * http://joelthorner.github.io/simple-button-radios/
 *
 * Copyright 2018 Joel Thorner - @joelthorner
 */
!(function ($) {
    "use strict";
    function init() {
        var inputId;
        (plugin.aditionalListeners = []),
            (inputId = plugin.$element.attr("id")),
            "undefined" != $.type(inputId) && inputId.length
                ? (plugin.labelToInput = 'label[for="' + inputId + '"]')
                : (plugin.labelToInput = "label"),
            (function () {
                plugin.$element.addClass("sbr-init");
                var isAlreadyChecked = !1;
                plugin.$element.prop("checked") && (isAlreadyChecked = !0);
                (plugin.isChecked = isAlreadyChecked),
                    (plugin.inputName = plugin.$element.attr("name"));
                var thisId = plugin.$element.attr("id");
                "undefined" != $.type(thisId) && thisId.length
                    ? (plugin.uuid = plugin.$element.attr("id") + "-sbr")
                    : (plugin.uuid = (function () {
                          function s4() {
                              return Math.floor(65536 * (1 + Math.random()))
                                  .toString(16)
                                  .substring(1);
                          }
                          return (
                              "sbr-" +
                              s4() +
                              s4() +
                              "-" +
                              s4() +
                              "-" +
                              s4() +
                              "-" +
                              s4()
                          );
                      })());
                var btnClasses =
                    "sbr-btn " +
                    plugin.options.buttonClass +
                    (isAlreadyChecked ? " sbr-checked" : " sbr-no-checked");
                plugin.$element.prop("disabled") &&
                    (btnClasses += " sbr-disabled");
                var btnHtml = isAlreadyChecked
                        ? plugin.options.checkedIcon
                        : plugin.options.nonCheckedIcon,
                    btn = $("<button/>", {
                        id: plugin.uuid,
                        html: btnHtml,
                        class: btnClasses,
                        "data-sbr-name": plugin.inputName,
                    });
                $.each(plugin.options.btnAttributes, function (index, val) {
                    btn.attr(index, val);
                }),
                    (plugin.$btn = btn),
                    plugin.$element.after(plugin.$btn);
            })(),
            (function () {
                if ("string" === $.type(plugin.options.wrapContainer))
                    switch (plugin.options.wrapContainer) {
                        case "none":
                            break;
                        case "input":
                            plugin.$element
                                .add(plugin.$btn)
                                .wrapAll('<div class="sbr-container"></div>');
                            break;
                        case "all":
                            (plugin.labelToInput
                                ? plugin.$element
                                      .add(plugin.$btn)
                                      .add(
                                          plugin.$element.parent(
                                              plugin.labelToInput
                                          )
                                      )
                                      .add(
                                          plugin.$element.siblings(
                                              plugin.labelToInput
                                          )
                                      )
                                      .add(
                                          plugin.$element
                                              .parent()
                                              .find(plugin.labelToInput)
                                      )
                                : plugin.$element.add(plugin.$btn)
                            ).wrapAll('<div class="sbr-container"></div>');
                            break;
                    }
            })(),
            plugin.$btn.on("click.sbr", function (event) {
                $(this).prev(".sbr-init").click();
            }),
            plugin.$element.on("change.sbr", function (event) {
                var thisData = $(this).data("simpleButtonRadios"),
                    self = $(this);
                "function" === $.type(thisData.options.onChange) &&
                    thisData.options.onChange.call(self, thisData),
                    $('[name="' + thisData.inputName + '"]').each(function (
                        index,
                        el
                    ) {
                        var thisData = $(this).data("simpleButtonRadios");
                        (thisData.isChecked = $(this).prop("checked")),
                            thisData.isChecked
                                ? $(thisData.$btn)
                                      .addClass("sbr-checked")
                                      .removeClass("sbr-no-checked")
                                      .html(thisData.options.checkedIcon)
                                : $(thisData.$btn)
                                      .removeClass("sbr-checked")
                                      .addClass("sbr-no-checked")
                                      .html(thisData.options.nonCheckedIcon);
                    }),
                    "function" === $.type(thisData.options.changeCallback) &&
                        thisData.options.changeCallback.call(self, thisData);
            }),
            plugin.$element.on("focus.sbr", function (event) {
                var thisData = $(this).data("simpleButtonRadios");
                $(this), thisData.$btn.focus();
            }),
            "function" === $.type(plugin.options.onInit) &&
                plugin.options.onInit.call(plugin.$element, plugin);
    }
    var plugin,
        simpleButtonRadios = function (el, options) {
            (plugin = this).$element = $(el);
            (this.options = $.extend(
                {
                    buttonClass: "sbr-default",
                    checkedIcon:
                        '<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="-725.53 115.775 1451.338 1451.338"><path d="M.141 376.731c-256.717 0-464.713 207.995-464.713 464.713 0 256.72 207.997 464.715 464.713 464.715 256.718 0 464.712-207.995 464.712-464.715 0-256.718-207.994-464.713-464.712-464.713z"/></svg>',
                    nonCheckedIcon: "",
                    wrapContainer: "none",
                    btnAttributes: { type: "button" },
                    onInit: null,
                    onChange: null,
                    changeCallback: null,
                    onDestroy: null,
                },
                options
            )),
                init();
        };
    (simpleButtonRadios.prototype = {
        destroy: function () {
            var thisData = $(this).data("simpleButtonRadios");
            thisData.$btn.remove(),
                thisData.$element.removeClass("sbr-init"),
                thisData.$element.off("change.sbr"),
                thisData.labelToInput &&
                    (thisData.$element
                        .siblings(thisData.labelToInput)
                        .off("click.sbr"),
                    thisData.$element
                        .parent()
                        .find(thisData.labelToInput)
                        .off("click.sbr"),
                    thisData.$element
                        .parent(thisData.labelToInput)
                        .off("click.sbr")),
                $.each(thisData.aditionalListeners, function (index, val) {
                    val.off("click.sbr");
                }),
                "function" === $.type(plugin.options.onDestroy) &&
                    plugin.options.onDestroy.call(thisData.$element, thisData),
                thisData.$element.removeData("simpleButtonRadios");
        },
        disable: function (bool) {
            var thisData = $(this).data("simpleButtonRadios");
            $(this);
            !0 === bool
                ? (thisData.$element.prop("disabled", !0),
                  thisData.$btn.addClass("sbr-disabled"))
                : !1 === bool &&
                  (thisData.$element.prop("disabled", !1),
                  thisData.$btn.removeClass("sbr-disabled"));
        },
        addListener: function (newNode) {
            var thisData = $(this).data("simpleButtonRadios"),
                _self = $(this);
            "object" === $.type(newNode) &&
                thisData &&
                (thisData.aditionalListeners.push(newNode),
                newNode.on("click.sbr", function (event) {
                    _self.click();
                }));
        },
    }),
        ($.fn.simpleButtonRadios = function (options) {
            var args = Array.prototype.slice.call(arguments);
            return (
                args.shift(),
                this.each(function () {
                    var $element = $(this),
                        data = $element.data("simpleButtonRadios");
                    !data &&
                        $element.is('input[type="radio"]') &&
                        $element.data(
                            "simpleButtonRadios",
                            (data = new simpleButtonRadios(this, options))
                        ),
                        "string" == typeof options &&
                            data[options].apply(this, args);
                })
            );
        }),
        ($.fn.simpleButtonRadios.Constructor = simpleButtonRadios);
})(window.jQuery);
