<body style="font-family: sans-serif;">
    <br><br>
    <div class="container" style="position: relative;">
        <h1 style="text-align: center"><b>Create Test</b></h1>
        
        <button class="tablink" id="seqSelect" onclick="changeMode('seq')">Sequential Test</button>
        <button class="tablink tab-selected" id="combSelect" onclick="changeMode('comb')">Combinational Test</button>
        <!-- Default table -->
        <table class="tb-table label-table" id="testBenchTable">
            <tr>
                <th colspan="1"></th>
                <th colspan="3" id="tb-inputs-head">INPUTS<button class="table-button" id="plus-1" onclick="addInput()">+</button>
                <th colspan="3" id="tb-outputs-head">OUTPUTS<button class="table-button" id="plus-1" onclick="addOutput()">+</button>
            </tr>
            <tr>
                <th>Label</th>
                <th style="background-color: #aaf" contenteditable="true">inp1</th>
                <th style="background-color: #aaf" contenteditable="true">inp2</th>
                <th style="background-color: #aaf" contenteditable="true">inp3</th>
                <th style="background-color: #afa" contenteditable="true">out1</th>
                <th style="background-color: #afa" contenteditable="true">out2</th>
                <th style="background-color: #afa" contenteditable="true">out3</th>
            </tr>
            <tr>
                <td>Bitwidth</td>
                <td contenteditable="true">1</td>
                <td contenteditable="true">1</td>
                <td contenteditable="true">1</td>
                <td contenteditable="true">1</td>
                <td contenteditable="true">1</td>
                <td contenteditable="true">1</td>
            </tr>
        </table>
        <div id="dataGroup">
            <div id="data-group-1" class="data-group">
                <h3 id="data-group-title-1" contenteditable="true">Group 1</h3>
                <h5>Click + to add tests to the group</h5>
                <table style="width:100%" contenteditable="true" class="tb-table" id="data-table-1">
                </table>
                <button class="lower-button plus-button latest-button" id="plus-1" onclick="addCase(0)">+</button>
            </div>
        </div>
        <div class="buttons-alignment" style="display: inline-flex;">
            <button class="lower-button" onclick="addGroup()">New Group</button>
        </div>
        <div style="float: right; display: inline-block;">
            <button onclick="parse();" class="lower-button save-buton">Save</button>
        </div>
    </div>

</body>
<style>

    .tb-test-title{
        text-align: center;
        margin-top: 50px;
    }

    .lower-button {
        height: 40px;
        width: auto;
        min-width: 40px;
        background-color: #ffffff;
        border: 2px solid black;
        color: black;
        /*padding: 20px;*/
        text-align: center;
        text-decoration: none;
        display: inline-block;
        /*font-size: 16px;*/
        margin: 4px 2px;
        border-radius: 4px;
    }

    .table-button {
        height: 20px;
        width: 20px;
        /*min-width: 40px;*/
        background-color: #ffffff;
        border: 2px solid black;
        color: black;
        /*padding: 20px;*/
        text-align: center;
        text-decoration: none;
        display: inline-block;
        /*font-size: 16px;*/
        margin: 4px 2px;
        border-radius: 5px;
    }


    .plus-button {
        font-size: 25px;
    }

    .save-buton {
        background-color: #42b983;
        color: white;
        border: 1px solid gray;
        min-width: 70px;
    }

    .latest-button {
        float: left;
    }

    .buttons-alignment {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
    }

    .tablink {
      background-color: #555;
      color: white;
      float: left;
      border: 1px solid white;
      outline: none;
      cursor: pointer;
      padding: 14px 16px;
      font-size: 17px;
      width: 50%;
    }

/* Change background color of buttons on hover */
    .tablink:hover {
      background-color: #a5dfc5;
    }

    .tablink:active {
      outline: none;
    }

    .tablink.tab-selected {
        background-color: #42b983;
        color: #fff;
        outline: none;
    }

    .data-group {
        margin-top: 2%;
    }

    .tb-table th, td {
        border: 2px solid black;
        border-collapse: collapse;
    }
    .tb-table th, td {
        padding: 15px;
        text-align: center;
    }
    .tb-table th {
        text-align: center;
    }

    .tb-table {
        table-layout: fixed;
        width: 100%;
        border-spacing: 5px;
    }

    .label-table {
        margin-top: 100px;
    }

    .inp {
        bgcolor:"red";
    }

</style>


<script>
    var mode = "comb";
    var groupIndex = 0;
    var inputCount = 3;
    var outputCount = 3;
    var cases = [0];

    function dataReset() {
        groupIndex = 0;
        inputCount = 3;
        outputCount = 3;
        cases = [0];
    }

    function changeMode(m) {
        if(mode === m) return;
        dataReset();
        mode = m;
        $(`#combSelect`).removeClass('tab-selected');
        $(`#seqSelect`).removeClass('tab-selected');
        $("#tb-new-group").css("visibility", m === "seq" ? "visible" : "hidden");
        $(`#${m}Select`).addClass('tab-selected');
        $("#dataGroup").empty();
        initTable();

    }

    function initTable() {
        const s = 
        `
        <div id="data-group-1" class="data-group">
            <h3 id="data-group-title-1" contenteditable="true">${mode === "comb"? "Group" : "Set"} ${groupIndex + 1}</h3>
            <h5>Click + to add tests to the ${mode === "comb"? "group" : "set"}</h5>
            <table style="width:100%" contenteditable="true" class="tb-table" id="data-table-1">
            </table>
            <button class="lower-button plus-button latest-button" id="plus-1" onclick="addCase(0)" style="font-size: 25px;">+</button>
        </div>
        `;
        $("#dataGroup").append(s);
    }

    function addCase(grp) {
        let current_group_table = $(`#data-table-${grp + 1}`);
        let s = `<tr>\n<td>${++cases[grp]}</td>\n`;
        for(let i = 0; i < inputCount + outputCount; i ++) s += "<td>0</td>";
        s += "</tr>"
        current_group_table.append(s);
    }

    function addGroup() {
        $(".plus-button").removeClass("latest-button");
        const s = 
        `
        <div id="data-group-${++groupIndex + 1}" class="data-group">
            <h3 id="data-group-title-${groupIndex + 1}" contenteditable="true">${mode === "comb"? "Group" : "Set"} ${groupIndex + 1}</h3>
            <h5>Click + to add tests to the ${mode === "comb"? "group" : "set"}</h5>
            <table style="width:100%" contenteditable="true" class="tb-table" id="data-table-${groupIndex + 1}">
            </table>
            <button class="lower-button plus-button latest-button" id="plus-${groupIndex + 1}" onclick="addCase(${groupIndex})" style="font-size: 25px;">+</button>
        </div>
        `;
        cases[groupIndex] = 0;
        $("#dataGroup").append(s);
    }

    function addInput() {
        // Change head table contents
        inputCount++;
        $("#testBenchTable").find("tr").each(function() {
            const s_head = `<th style="background-color: #aaf" contenteditable="true">inp${inputCount}</th>`;
            const s_data = '<td contenteditable="true">1</td>';
            $(this).find("th").eq(inputCount - 1).after(s_head);
            $(this).find("td").eq(inputCount - 1).after(s_data);
        });
        $("#tb-inputs-head").attr("colspan", inputCount);

        // Change data tables' contents

        $("#dataGroup").find("table").each(function() {
            $(this).find("tr").each(function() {
                let s = '<td contenteditable="true">0</td>';
                $(this).find("td").eq(inputCount - 1).after(s);
            });
        });


    }

    function addOutput() {
        // Change head table contents
        outputCount++;
        $("#testBenchTable").find("tr").each(function() {
            const s_head = `<th style="background-color: #afa" contenteditable="true">out${outputCount}</th>`
            const s_data = '<td contenteditable="true">1</td>';
            $(this).find("th").eq(inputCount + outputCount - 1).after(s_head);
            $(this).find("td").eq(inputCount + outputCount - 1).after(s_data);
        });
        $("#tb-outputs-head").attr("colspan", outputCount);

        // Change data tables' contents

        $("#dataGroup").find("table").each(function() {
            $(this).find("tr").each(function() {
                let s = '<td contenteditable="true">0</td>';
                $(this).find("td").eq(inputCount + outputCount - 1).after(s);
            });
        });

    }

    /* Returns input/output(keys) and their bitwidths(values) */
    function getBitWidths() {
        let bitwidths = {};
        $("#testBenchTable").find("tr").eq(1).find("th").slice(1).each(function(index) {
            const inp = $(this).html();
            const bw =  $("#testBenchTable").find("tr").eq(2).find("td").slice(1).eq(index).html();
            bitwidths[inp] = Number(bw);
        });
        return bitwidths;
    }

    /* Returns array of objects containing groups and their values for all inputs/outputs */
    function getData() {
        let io = [];
        for(let inp_i = 0; inp_i < inputCount + outputCount; inp_i++){

            const bitwidths = getBitWidths();
            const label = Object.keys(bitwidths)[inp_i];
            const bw = bitwidths[label]; 
            let input = { bitwidth: bw, label: label, groups: []};

            for(let group_i = 0; group_i <= groupIndex; group_i++){
                let group = {};
                group.n = cases[group_i];
                group.label = $(`#data-group-title-${group_i + 1}`).html();
                group.values = [];
                const group_table = $(`#data-table-${group_i + 1}`);
                group_table.find("tr").each(function() {
                    group.values.push($(this).find("td").slice(1).eq(inp_i).html());
                });
                input.groups.push(group);
            }
            io.push(input);
        }
        return {"inputs": io.slice(0, inputCount), "outputs": io.slice(inputCount, inputCount + outputCount)};
    }

    function parse() {
        let data = {};
        const tableData = getData();
        data.type = mode;
        data.inputs = tableData.inputs;
        data.outputs = tableData.outputs;

        console.log(data);
        return data;
    }

    function loadData(data) {

    }


</script>
