<link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
<script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
<div class="container projects-new-container">
  <div class="row center-row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
      <h1 class="submain-heading">Add question</h1>
    </div>
  </div>
  <div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
      <div class="form-container">
      <p>
      <%= link_to 'Create Circuit boilerplate and Test Data', '#', id: 'createCircuitDataLink' %>
      </p>
      <%= form_with(model: @question, local: true, id: "questionForm", "data-controller": "question") do |form| %>
        <% if @question.errors.any? %>
          <div class="error-message">
            <ul>
              <% @question.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>
        <div class="field form-group">
          <h6><%= form.label :heading %></h6>
          <%= form.text_field :heading, class: "form-control form-input", id: "question_heading" %>
        </div>
        <div class="field form-group" style="display:none">
        <h6><%= form.label :qid %></h6>
        <%= form.text_field :qid, class: "form-control form-input", id: "question_heading" %>
        </div>
        <div class="field form-group">
          <h6><%= form.label :statement %></h6>
          <%= form.text_area :statement, class: "form-control form-input", id: "markdown-editor" %>
        </div>
        <div class="field form-group">
          <h6><%= form.label :category_id %></h6>
          <%= form.select :category_id, QuestionCategory.all.collect { |c| [c.name, c.id] }, { prompt: 'Select Category' }, class: "form-control form-input", id: "question_category_id" %>
        </div>
        <div class="field form-group">
          <h6><%= form.label :difficulty_level %></h6>
          <%= form.select :difficulty_level, Question.difficulty_levels.keys.collect { |d| [d.humanize.capitalize, d] }, { prompt: 'Select Difficulty Level' }, class: "form-control form-input", id: "question_difficulty_level", required: true %>
        </div>
        <div class="field form-group">
          <%= form.submit class: "btn primary-button" %> &nbsp;
          <%= link_to 'Back', questions_path, class: "anchor-text" %>
        </div>
      <% end %>
      </div>
    </div>
  </div>
</div>
<script>
const qid = "<%= @question.qid %>";
document.addEventListener("DOMContentLoaded", function() {
  const createCircuitDataLink = document.getElementById("createCircuitDataLink");
  createCircuitDataLink.addEventListener("click", function(event) {
    event.preventDefault();
    const questionId = "<%= @question.qid %>";
    if(localStorage.getItem(questionId) === null){
      localStorage.setItem(questionId, "");
    }
    window.location.href = `/simulator?question_id=${questionId}`;
  });
  const simplemde = new SimpleMDE({ element: document.getElementById("markdown-editor") });
  function saveToLocalStorage() {
    const heading = document.getElementById("question_heading").value;
    const statement = simplemde.value();
    const category = document.getElementById("question_category_id").value;
    const difficulty = document.getElementById("question_difficulty_level").value;

    localStorage.setItem("question_heading", heading);
    localStorage.setItem("question_statement", statement);
    localStorage.setItem("question_category", category);
    localStorage.setItem("question_difficulty", difficulty);
  }
  document.getElementById("question_heading").addEventListener("input", saveToLocalStorage);
  simplemde.codemirror.on("change", saveToLocalStorage);
  document.getElementById("question_category_id").addEventListener("change", saveToLocalStorage);
  document.getElementById("question_difficulty_level").addEventListener("change", saveToLocalStorage);
  document.getElementById("questionForm").addEventListener("submit", function(event) {
    const questionId = "<%= @question.qid %>";
    const circuitBoilerplate = localStorage.getItem(questionId);
    const testData = JSON.parse(localStorage.getItem(questionId)).scopes[0].testbenchData;
    const circuitBoilerplateInput = document.createElement("input");
    circuitBoilerplateInput.type = "hidden";
    circuitBoilerplateInput.name = "question[circuit_boilerplate]";
    circuitBoilerplateInput.value = circuitBoilerplate;
    this.appendChild(circuitBoilerplateInput);
    const testDataInput = document.createElement("input");
    testDataInput.type = "hidden";
    testDataInput.name = "question[test_data]";
    testDataInput.value = JSON.stringify(testData);
    this.appendChild(testDataInput);
    alert('Question has been added');
    localStorage.removeItem("question_heading");
    localStorage.removeItem("question_statement");
    localStorage.removeItem("question_category");
    localStorage.removeItem("question_difficulty");
    localStorage.removeItem(qid);
  });
  if (localStorage.getItem("question_heading")) {
    document.getElementById("question_heading").value = localStorage.getItem("question_heading");
  }
  if (localStorage.getItem("question_statement")) {
    simplemde.value(localStorage.getItem("question_statement"));
  }
  if (localStorage.getItem("question_category")) {
    document.getElementById("question_category_id").value = localStorage.getItem("question_category");
  }
  if (localStorage.getItem("question_difficulty")) {
    document.getElementById("question_difficulty_level").value = localStorage.getItem("question_difficulty");
  }
});
</script>
