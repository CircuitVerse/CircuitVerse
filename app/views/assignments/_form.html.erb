<link rel="stylesheet" type="text/css" href="/css/restrictedElements.css">
<script src="/js/metadata.json"></script>

<%= form_with(model: [group,@assignment], local: true, html: {onsubmit:"beforeSubmit()"}, multipart: true ,id:"assignmentForm") do |form| %>
  <% if @assignment.errors.any? %>
    <div id="error-explanation">
      <h6><%= pluralize(@assignment.errors.count, "error") %> prohibited this assignment from being saved:</h6>
      <ul>
        <% @assignment.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div id="name-field" class="form-group">
    <h6><%= form.label :name %></h6>
    <%= form.text_field :name, id: :assignment_name, class: 'form-control editprofile-data-field' %>
  </div>
  <div id="description" class="form-group">
    <h6><%= form.label :description %></h6>
    <%= render :partial => 'editor/index', :locals => {:content => @assignment.description} %>
  </div>
  <div id="deadline-field" class="form-group newproject-tag-field">
    <h6><%= form.label :deadline %></h6> (<span id='remaining-time'><b>(something went wrong when loading script)</b></span>)
    <input id="assignment_deadline" name="assignment[deadline]" type="text" class="form-control editprofile-data-field">
  </div>
  <div id="grade-field" class="form-group newproject-tag-field">
    <h6><%= form.label :grading_scale %></h6>
    <% if @assignment.new_record? %>
      <span> (Cannot be changed once set)</span>
      <%= form.select :grading_scale, [["No Grade", :no_scale], ["Letter(A-F)", :letter], ["Percent(1-100)", :percent], ["Custom", :custom]], {}, class: 'form-control editprofile-data-field' %>
    <% else %>
      <div class="newassignment-grade-noedit">
        <p><%= AssignmentDecorator.new(@assignment).graded %> - Cannot be edited</p>
      </div>
    <% end %>
  </div>

  <div id="restrictions-field" class="form-group">
    <label for="restrict-elements" class="checkpoint-primary-container newproject-checkbox-label"><h6>Enable elements restriction:</h6>
      <%= check_box_tag "restrict-elements", "1", checked: @assignment.elements_restricted? %>
      <div class="checkpoint-primary"></div>
    </label>
    <div class="restricted-elements-list"> <!-- Operated by script --> </div>
  </div>

  <div class="actions form-group">
    <%= form.submit class: 'btn button-primary' %> &nbsp;
    <%= link_to 'Back', :back, class: 'anchor-text' %>
  </div>
<% end %>

<script type="text/javascript">
  $(document).ready(function() {
    loadRestrictions(`JSON.parse(<%= raw @assignment.restrictions %>)`);
    loadDeadlinePicker();
  })

  function loadDeadlinePicker() {
    $('#assignment_deadline').datetimepicker({
      format: 'd/m/Y H:i',
      minDate: formatDate(new Date(),'d/m/Y'),
      validateOnBlur: false,
      step: 30,
      value: defaultAssignmentDate()
    });
    $('#assignment_deadline').change(function()
    {
      const newDate = Date.parseDate($('#assignment_deadline').val(),'d/m/Y H:i');
      const remainingTimeLabel = $('#remaining-time');
      const remainingSeconds = (newDate - Date.now()) / 1000;

      if(newDate == null || remainingSeconds <= 0){
        $('#assignment_deadline').datetimepicker({value: defaultAssignmentDate()});
        $('#assignment_deadline').change();
        return;
      }
      $('#assignment_deadline').datetimepicker({value: newDate});
      updateRemainingTime(remainingTimeLabel,newDate);
    });
    $('#assignment_deadline').change();
  }
  function updateRemainingTime(label,toDate) {
    const timeString = convertSecondsToReadableString((toDate - Date.now()) / 1000);
    label.html(`Time remaining: ${timeString}`);
  }
  function defaultAssignmentDate() {
    let date = new Date();
    date.setDate(date.getDate() + 7);
    date = formatDate(date,'d/M/y');

    let hour = formatDate(new Date(),'H');
    let minutes = formatDate(new Date(),'m');
    if(minutes < 30) {
      minutes = 30;
    }
    else {
      minutes = '00';
      hour++;
    }
    return date + ' ' + hour + ':' + minutes;
  }
  function beforeSubmit() {
      cleanEditor();
      generateRestrictions();
      generateDate();
  }
  function generateDate() {
    const splittedDate = $('#assignment_deadline').val().split(/[\s,/:]+/);
    let pickerDate = new Date(splittedDate[2], splittedDate[1]-1, splittedDate[0], splittedDate[3], splittedDate[4]);
    const pickerUnix = pickerDate.getTime();
    const pickerUnixWithTimezone = new Date(pickerUnix + new Date().getTimezoneOffset()*60*1000);
    $('#assignment_deadline').val(formatDate(pickerUnixWithTimezone,"yyyy-MM-ddTHH:mm"));
  }
  function cleanEditor() {
    $('<input />').attr('type', 'hidden')
      .attr('name', 'description')
      .attr('value', $("#trumbowyg-editor").cleanHtml())
      .appendTo('#assignmentForm');
  }
  function generateRestrictions() {
    let updated_restrictions = [];
    if ($('#restrict-elements').is(":checked")) {
      let restricted_elements = $('.element-restriction');
      for (let i = 0; i < restricted_elements.length; i++) {
        let temp = $(restricted_elements[i]);
        if (temp.is(":checked"))
          updated_restrictions.push(temp.val());
      }
    }
    $('<input />').attr('type', 'hidden')
        .attr('name', 'assignment[restrictions]')
        .attr('value', JSON.stringify(updated_restrictions))
        .appendTo('#assignmentForm');
  }

</script>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-datetimepicker/2.4.5/jquery.datetimepicker.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-datetimepicker/2.4.5/jquery.datetimepicker.min.js"></script>
