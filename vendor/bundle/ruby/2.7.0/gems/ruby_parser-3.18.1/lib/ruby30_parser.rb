#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby30Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-639,682,685,307,638,-118,307,-639,-639,-639,228,229,-639,-639,-639',
'-112,-639,-119,1136,-114,638,638,228,229,-639,904,-639,-639,-639,228',
'229,854,3,817,1131,855,-639,-639,234,-639,-639,-639,-639,-639,-104,302',
'-759,638,-126,-113,-125,818,1130,-121,-123,638,854,904,130,239,929,-90',
'1012,-111,681,684,-532,-639,-639,-639,-639,-639,-639,-639,-639,-639',
'-639,-639,-639,-639,-639,638,-112,-639,-639,-639,-114,-639,-639,840',
'309,-639,-120,309,-639,-639,1137,-639,1177,-639,239,-639,235,-639,-639',
'-639,-639,-639,-639,-639,-109,-639,239,-639,1039,-744,-113,-112,134',
'239,-112,-114,-110,133,-114,611,-639,-639,-639,-639,-111,-639,-118,-639',
'134,134,-642,-112,-639,133,133,-114,-639,-642,-642,-642,-639,-119,-642',
'-642,-642,-113,-642,-117,-113,-116,-126,-125,-112,-114,-642,134,-642',
'-642,-642,-111,133,1011,-111,134,-121,-113,-642,-642,133,-642,-642,-642',
'-642,-642,-123,-122,1039,-120,225,-111,-122,-124,937,134,307,-653,612',
'611,133,134,666,-111,1112,671,133,-759,238,-642,-642,-642,-642,-642',
'-642,-642,-642,-642,-642,-642,-642,-642,-642,376,307,-642,-642,-642',
'936,-642,-642,112,113,-642,112,113,-642,-642,239,-642,-654,-642,226',
'-642,239,-642,-642,-642,-642,-642,-642,-642,-118,-642,-124,-642,-118',
'-118,-744,-745,376,304,666,668,667,-744,612,-119,-642,-642,-642,-642',
'-119,-642,666,-642,-126,-125,-320,-771,-642,-126,-125,309,-642,-320',
'-320,-320,-642,304,-121,-320,-320,608,-320,-121,608,-113,-115,-119,-123',
'-122,-320,-120,611,-123,-122,611,-120,114,115,309,114,115,-320,-320',
'-771,-320,-320,-320,-320,-320,956,668,667,664,234,525,957,496,937,666',
'-745,233,526,668,667,619,618,227,619,618,231,771,869,-320,-320,-320',
'-320,-320,-320,-320,-320,-320,-320,-320,-320,-320,-320,230,236,-320',
'-320,-320,936,710,-320,576,-124,-320,899,612,-320,-124,612,236,-653',
'-320,991,-320,645,-320,-320,-320,-320,-320,-320,-320,-126,-320,235,-320',
'668,667,603,-361,600,599,598,608,601,871,-361,900,-320,-320,-654,-115',
'297,-320,611,-361,666,704,-748,991,-320,-117,-109,-126,-320,-748,-748',
'-748,-124,845,-125,-748,-748,-121,-748,361,606,-639,-126,-118,576,704',
'-748,-748,-639,616,615,619,618,234,228,229,-110,666,-748,-748,493,-748',
'-748,-748,-748,-748,99,-361,-651,494,-123,-642,-652,-119,100,-651,666',
'362,-642,-652,-121,668,667,664,-651,612,-116,-112,-652,-748,-748,-748',
'-748,-748,-748,-748,-748,-748,-748,-748,-748,-748,-748,-125,-121,-748',
'-748,-748,-649,711,-748,228,229,-748,666,-649,-748,235,668,667,669,-748',
'705,-748,239,-748,-748,-748,-748,-748,-748,-748,-651,-748,-748,-748',
'-652,668,667,674,603,404,600,599,598,608,601,234,-748,-748,705,-113',
'-648,-748,568,666,611,414,-748,-648,-748,1027,886,566,-748,-748,-748',
'-748,-122,854,-748,-748,-748,929,-748,668,667,679,606,662,886,-123,-748',
'-748,-748,-748,-748,616,615,619,618,417,-114,420,-748,-748,-311,-748',
'-748,-748,-748,-748,134,-311,-111,910,-650,133,234,-123,906,235,-311',
'-650,907,578,668,667,686,829,-120,-120,828,612,494,-748,-748,-748,-748',
'-748,-748,-748,-748,-748,-748,-748,-748,-748,-748,-120,645,-748,-748',
'-748,-647,901,-748,-644,845,-748,423,-647,-748,-748,-644,-748,440,-748',
'445,-748,-311,-748,-748,-748,-748,-748,-748,-748,-645,-748,-748,-748',
'235,495,829,-645,603,831,600,599,598,608,601,234,-748,-748,-748,-748',
'-646,-748,649,-748,611,134,-320,-646,-748,497,133,647,-748,-320,-320',
'-320,-122,498,-320,-320,-320,261,-320,442,234,238,606,533,444,443,-320',
'697,-320,-320,-320,616,615,619,618,545,695,548,-320,-320,-321,-320,-320',
'-320,-320,-320,134,-321,550,258,234,133,-320,260,259,235,-321,857,134',
'-320,134,924,925,133,-745,133,859,612,-320,-320,-320,-320,-320,-320',
'-320,-320,-320,-320,-320,-320,-320,-320,-320,134,235,-320,-320,-320',
'133,902,-320,278,279,-320,-89,829,-320,-320,831,-320,239,-320,561,-320',
'-321,-320,-320,-320,-320,-320,-320,-320,562,-320,235,-320,-320,569,603',
'314,600,599,598,608,601,-321,277,276,-320,-320,-320,-320,-321,-320,611',
'-320,829,239,-320,831,-320,-321,619,618,-320,-320,-320,-320,-124,376',
'904,-320,-320,1141,-320,239,606,603,1232,600,599,598,-320,601,376,616',
'615,619,618,137,138,139,140,141,-320,-320,-320,-320,-320,-320,-320,-320',
'304,-320,234,573,234,579,-745,-321,261,1206,-320,1212,583,810,987,991',
'261,-660,859,612,1210,623,814,-320,-320,-320,-320,-320,-320,-320,-320',
'-320,-320,-320,-320,-320,-320,228,229,-320,-320,-320,239,710,-320,1175',
'1176,-320,258,645,-320,433,260,259,650,-320,651,-320,-320,-320,-320',
'-320,-320,-320,-320,-320,235,-320,235,-320,987,991,603,234,600,599,598',
'608,601,673,1206,677,-320,-320,680,-320,683,-320,611,859,690,691,-748',
'-293,-320,693,694,698,-320,-748,-748,-748,-124,239,702,-748,-748,261',
'-748,603,606,600,599,598,703,601,-748,-748,304,715,261,619,618,261,122',
'121,123,124,-748,-748,261,-748,-748,-748,-748,-748,261,235,753,258,126',
'125,127,260,259,256,257,810,137,138,139,140,141,112,113,612,814,239',
'358,-748,-748,-748,-748,-748,-748,-748,-748,-748,-748,-748,-748,-748',
'-748,759,239,-748,-748,-748,239,711,-748,440,239,-748,1016,1017,-748',
'-104,1018,128,129,-748,775,-748,239,-748,-748,-748,-748,-748,-748,-748',
'582,-748,-748,-748,786,109,99,101,102,103,105,792,795,239,100,110,-748',
'-748,797,-748,239,-748,93,800,803,97,104,106,-748,114,115,804,-748,806',
'808,819,-122,8,89,90,91,12,82,820,822,795,83,84,795,239,-741,87,-742',
'85,86,88,34,35,80,81,137,138,139,140,141,92,32,31,122,121,123,124,832',
'603,22,600,599,598,833,601,11,52,10,13,126,125,127,116,65,118,117,119',
'550,120,128,129,836,112,113,795,48,49,47,-639,795,-642,795,861,872,873',
'-639,810,-642,-294,887,-741,533,-742,533,-639,814,-642,44,239,904,37',
'261,905,67,68,928,904,69,931,39,297,943,-741,51,-742,945,548,271,272',
'550,786,23,239,304,304,786,109,99,101,102,103,105,261,258,980,100,110',
'260,259,256,257,981,-639,93,-642,239,97,104,106,991,114,115,795,795',
'45,46,333,89,90,91,12,82,239,239,1021,83,84,-295,239,-748,87,1026,85',
'86,88,34,35,80,81,137,138,139,140,141,92,32,31,122,121,123,124,745,1030',
'22,261,239,239,1052,1053,11,52,335,13,126,125,127,116,65,118,117,119',
'1054,120,128,129,1056,112,113,1075,48,49,47,-748,239,786,-293,258,1082',
'239,-748,260,259,256,257,-744,1085,1087,803,-748,818,1090,44,1092,1092',
'337,239,795,67,68,795,795,69,239,39,795,1122,-748,51,603,239,600,599',
'598,1124,601,23,-296,1125,1126,1127,109,99,101,102,103,105,1128,239',
'239,100,110,239,904,1135,239,1142,-748,93,803,1145,97,104,106,1149,114',
'115,810,1151,45,46,333,89,90,91,12,82,1153,239,1155,83,84,1171,1172',
'795,87,1184,85,86,88,34,35,80,81,253,1185,904,1192,1194,92,32,31,122',
'121,123,124,1204,603,22,600,599,598,1207,601,11,52,335,13,126,125,127',
'116,65,118,117,119,956,120,128,129,1213,112,113,1214,48,49,47,261,265',
'266,267,268,278,279,273,274,269,270,1092,254,255,1092,1092,271,272,1234',
'44,803,252,37,1238,1240,67,68,1242,1244,69,1244,39,258,792,264,51,260',
'259,256,257,277,276,262,23,263,1172,1258,795,109,99,101,102,103,105',
'1234,-745,-744,100,110,239,275,1092,1271,1244,1244,93,1244,1234,97,104',
'106,1244,114,115,,,45,46,333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88',
'34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,699,11,52,335,13',
'126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,261,265',
'266,267,268,278,279,273,274,269,270,,254,255,,,271,272,,44,,,37,,,67',
'68,,,69,,39,258,,264,51,260,259,256,257,277,276,262,23,263,,,,109,99',
'101,102,103,105,,,,100,110,,275,,-266,,,93,,,97,104,106,,114,115,,,45',
'46,333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32',
'31,122,121,123,124,,,22,,,,,699,11,52,335,13,126,125,127,116,65,118',
'117,119,,120,128,129,,112,113,,48,49,47,261,265,266,267,268,278,279',
'273,274,269,270,,254,255,,,271,272,,44,,,337,,,67,68,,,69,,39,258,,264',
'51,260,259,256,257,277,276,262,23,263,,,,109,99,101,102,103,105,,,,100',
'110,,275,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12,82,,,',
'83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22',
',,,,953,11,52,335,13,126,125,127,116,65,118,117,119,,120,128,129,,112',
'113,,48,49,47,261,265,266,267,268,278,279,273,274,269,270,,254,255,',
',271,272,,44,,,337,,,67,68,,,69,,39,258,,264,51,260,259,256,257,277',
'276,262,23,263,,,,109,99,101,102,103,105,,,,100,110,,275,,,,,93,,,97',
'104,106,,114,115,,,45,46,333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88',
'34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,984,11,52,335,13',
'126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,261,265',
'266,267,268,278,279,273,274,269,270,,254,255,,,271,272,,44,,,37,,,67',
'68,,,69,,39,258,,264,51,260,259,256,257,277,276,262,23,263,,,,109,99',
'101,102,103,105,,,,100,110,,275,,,,,93,,,97,104,106,,114,115,,,45,46',
'333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31',
'122,121,123,124,,1188,22,600,599,598,,601,11,52,335,13,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,261,265,266,267,268,278',
'279,273,274,269,270,,254,255,,,271,272,,44,,,37,,,67,68,,,69,,39,258',
',264,51,260,259,256,257,277,276,262,23,263,,,,109,99,101,102,103,105',
',,,100,110,,275,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12',
'82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124',
',1188,22,600,599,598,,601,11,52,335,13,126,125,127,116,65,118,117,119',
',120,128,129,,112,113,,48,49,47,261,265,266,267,268,278,279,273,274',
'269,270,,254,255,,,271,272,,44,,,37,,,67,68,,,69,,39,258,,264,51,260',
'259,256,257,277,276,262,23,263,,,,109,99,101,102,103,105,,,,100,110',
'239,275,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12,82,,,,83',
'84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,',
',,,11,52,335,13,126,125,127,116,65,118,117,119,,120,128,129,,112,113',
',48,49,47,261,265,266,267,268,278,279,273,274,269,270,,254,255,,,271',
'272,,44,,,37,,,67,68,,,69,,39,258,,264,51,260,259,256,257,277,276,262',
'23,263,,,,109,99,101,102,103,105,,,,100,110,,275,,,,,93,,,97,104,106',
',114,115,,,45,46,333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80',
'81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,11,52,335,13,126,125,127',
'116,65,118,117,119,,120,128,129,,112,113,,48,49,47,261,265,266,267,268',
'278,279,273,274,269,270,,254,255,,,271,272,,44,,,37,,,67,68,,,69,,39',
'258,,264,51,260,259,256,257,277,276,262,23,263,,,,109,99,101,102,103',
'105,,,,100,110,,275,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91',
'12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123',
'124,,,22,,,,,,11,52,335,13,126,125,127,116,65,118,117,119,,120,128,129',
',112,113,,48,49,47,261,265,266,267,268,278,279,273,274,269,270,,254',
'255,,,271,272,,44,,,37,,,67,68,,,69,,39,258,,264,51,260,259,256,257',
'277,276,262,23,263,,,,109,99,101,102,103,105,,,,100,110,,275,,,,,93',
',,97,104,106,,114,115,,,45,46,333,89,90,91,12,82,,,,83,84,,,,87,,85',
'86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,11,52,335',
'13,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,261',
'265,266,267,268,278,279,273,274,269,270,,254,255,,,271,272,,44,,,37',
',,67,68,,,69,,39,258,,264,51,260,259,256,257,277,276,262,23,263,,,,109',
'99,101,102,103,105,,,,100,110,,275,,,,,93,,,97,104,106,,114,115,,,45',
'46,8,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32',
'31,122,121,123,124,,,22,,,,,,11,52,10,13,126,125,127,116,65,118,117',
'119,,120,128,129,,112,113,,48,49,47,261,265,266,267,268,278,279,273',
'274,269,270,,254,255,,,271,272,,44,,,37,,,67,68,,,69,,39,258,,264,51',
'260,259,256,257,277,276,262,23,263,,,,109,99,101,102,103,105,,,,100',
'110,,275,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12,82,,,',
'83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22',
',,,,,11,52,335,13,126,125,127,116,65,118,117,119,,120,128,129,,112,113',
',48,49,47,261,265,266,267,268,278,279,273,274,269,270,,-772,-772,,,271',
'272,,44,,,37,,,67,68,,,69,,39,258,,264,51,260,259,256,257,277,276,262',
'23,263,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114',
'115,,,45,46,333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81',
',,,,,92,32,31,122,121,123,124,,,22,,,,,,11,52,335,13,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,261,265,266,267,268,278',
'279,273,274,269,270,,-772,-772,,,271,272,,44,,,37,,,67,68,,,69,,39,258',
',264,51,260,259,256,257,277,276,262,23,263,,,,109,99,101,102,103,105',
',,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12,82',
',,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,',
',22,,,,,,11,52,335,13,126,125,127,116,65,118,117,119,,120,128,129,,112',
'113,,48,49,47,261,265,266,267,268,278,279,273,274,269,270,,-772,-772',
',,271,272,,44,,,37,,,67,68,,,69,,39,258,,264,51,260,259,256,257,277',
'276,262,23,263,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104',
'106,,114,115,,,45,46,333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34',
'35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,11,52,335,13,126,125',
'127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,261,265,266,267',
'268,278,279,273,274,269,270,,-772,-772,,,271,272,,44,,,37,,,67,68,,',
'69,,39,258,,264,51,260,259,256,257,277,276,262,23,263,,,,109,99,101',
'102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,333,89',
'90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121',
'123,124,,603,22,600,599,598,,601,11,52,335,13,126,125,127,116,65,118',
'117,119,,120,128,129,,112,113,,48,49,47,261,-772,-772,-772,-772,278',
'279,,810,-772,-772,,,,,,271,272,,44,,,37,,,67,68,,,69,,39,258,,264,51',
'260,259,256,257,277,276,262,23,263,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12,82,,,,83',
'84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,603,22',
'600,599,598,,601,11,52,335,13,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,261,-772,-772,-772,-772,278,279,,810,-772,-772',
',,,,,271,272,,44,,,37,,,67,68,,,69,,39,258,,264,51,260,259,256,257,277',
'276,262,23,263,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104',
'106,,114,115,,,45,46,333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34',
'35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,11,52,335,13,126,125',
'127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,261,-772,-772',
'-772,-772,278,279,,,-772,-772,,,,,,271,272,,44,,,37,,,67,68,,,69,,39',
'258,,264,51,260,259,256,257,277,276,262,23,263,,,,109,99,101,102,103',
'105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12',
'82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124',
',,22,,,,,,11,52,335,13,126,125,127,116,65,118,117,119,,120,128,129,',
'112,113,,48,49,47,261,-772,-772,-772,-772,278,279,,,-772,-772,,,,,,271',
'272,,44,,,37,,,67,68,,,69,,39,258,,264,51,260,259,256,257,277,276,262',
'23,263,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114',
'115,,,45,46,333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81',
',,,,,92,32,31,122,121,123,124,,,22,,,,,,11,52,335,13,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,261,-772,-772,-772,-772',
'278,279,,,-772,-772,,,,,,271,272,,44,,,37,,,67,68,,,69,,39,258,,264',
'51,260,259,256,257,277,276,262,23,263,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12,82,,,,83',
'84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,',
',,,11,52,335,13,126,125,127,116,65,118,117,119,,120,128,129,,112,113',
',48,49,47,261,-772,-772,-772,-772,278,279,,,-772,-772,,,,,,271,272,',
'44,,,37,,,67,68,,,69,,39,258,,264,51,260,259,256,257,277,276,262,23',
'263,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114',
'115,,,45,46,333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81',
',,,,,92,32,31,122,121,123,124,,,22,,,,,,11,52,335,13,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,261,265,266,267,268,278',
'279,,,269,270,,,,,,271,272,,44,,,37,,,67,68,,,69,,39,258,,264,51,260',
'259,256,257,277,276,262,23,263,,,,109,99,101,102,103,105,,,,100,110',
',,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12,82,,,,83,84,',
',,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,11',
'52,335,13,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49',
'47,261,265,266,267,268,278,279,273,,269,270,,,,,,271,272,,44,,,37,,',
'67,68,,,69,,39,258,,264,51,260,259,256,257,277,276,262,23,263,,,,109',
'99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46',
'333,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31',
'122,121,123,124,,,22,,,,,,11,52,335,13,126,125,127,116,65,118,117,119',
',120,128,129,,112,113,,48,49,47,261,,,,,,,,,,,,,,,,271,272,,44,,,37',
',,67,68,,,69,,39,258,,264,51,260,259,256,257,,,262,23,263,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,333',
'89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122',
'121,123,124,,,22,,,,,,11,52,335,13,126,125,127,116,65,118,117,119,,120',
'128,129,,112,113,,48,49,47,261,,,,,,,,,,,,,,,,271,272,,44,,,37,,,67',
'68,,,69,,39,258,,264,51,260,259,256,257,,,262,23,263,,,,109,99,101,102',
'103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90',
'91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121',
'123,124,,,22,,,,,,11,52,335,13,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,261,,,,,,,,,,,,,,,,271,272,,44,,,37,,,67,68,',
',69,,39,258,,264,51,260,259,256,257,,,,23,,,,,109,99,101,102,103,105',
',,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,333,89,90,91,12,82',
',,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,',
',22,,,,,,11,52,335,13,126,125,127,116,65,118,117,119,,120,128,129,,112',
'113,,48,49,47,261,,,,,,,,,,,,,,,,271,272,,44,,,37,,,67,68,,,69,,39,258',
',264,51,260,259,256,257,,,,23,,,,,109,99,101,102,103,105,,,,100,110',
',,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,12,82,,,,83,84,,,,87',
',85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,11,52',
'10,13,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47',
',,,,,,,,,,,,,,,,,,,44,,,37,,,67,68,,,69,,39,,,,51,,,,,,,,23,,,,,109',
'99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46',
'89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,-457,114,115,,,45,46,-457,-457,-457,,,-457,-457,-457,603,-457',
'600,599,598,608,601,,,-457,-457,-457,-457,,,,611,,,,,-457,-457,,-457',
'-457,-457,-457,-457,,,,,,,,,,606,,,,,,,,,616,615,619,618,,-457,-457',
'-457,-457,-457,-457,-457,-457,-457,-457,-457,-457,-457,-457,,,-457,-457',
'-457,,,-457,,304,-457,,,-457,-457,,-457,612,-457,,-457,,-457,-457,-457',
'-457,-457,-457,-457,,-457,-457,-457,603,,600,599,598,608,601,,,,,,-457',
'-457,,-457,611,-457,-329,,,,,,-457,-329,-329,-329,-457,,-329,-329,-329',
',-329,,,,606,,,,-329,,-329,-329,,616,615,619,618,,,,-329,-329,,-329',
'-329,-329,-329,-329,,,,,,,,,,,,,,239,,,,,,,,612,,-329,-329,-329,-329',
'-329,-329,-329,-329,-329,-329,-329,-329,-329,-329,,,-329,-329,-329,',
',-329,,314,-329,,,-329,-329,,-329,,-329,,-329,,-329,-329,-329,-329,-329',
'-329,-329,,-329,,-329,,,,,,,,,,,,,-329,-329,,-329,,-329,89,90,91,,82',
',-329,,83,84,-329,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123',
'124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,326,120,128,129',
',112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,323,,321',
',51,,,,,,,,249,,,,,109,324,101,102,103,105,,,,100,110,,,,,,,93,,327',
'97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34',
'35,80,81,,,,,,92,32,31,122,121,123,124,,,251,,,,,,,52,,,126,125,127',
'116,65,118,117,119,326,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,',
',,,,,244,,,250,,,67,68,,,69,,323,,321,,51,,,,,,,,249,,,,,109,324,101',
'102,103,105,,,,100,110,,,,,,,93,,327,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121',
'123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,326,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,323',
',321,,51,,,,,,,,249,,,,,109,324,101,102,103,105,,,,100,110,,,,,,,93',
',327,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86',
'88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126',
'125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,',
',,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102',
'103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,',
'82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123',
'124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112',
'113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,',
',,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,',
'114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81',
',,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65',
'118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,',
',250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,',
'87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,',
',,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49',
'47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,',
'109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45',
'46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357',
'122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120',
'128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69',
',,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,',
'97,104,106,-312,114,115,,,45,46,-312,-312,-312,,,-312,-312,-312,603',
'-312,600,599,598,608,601,,,-312,,-312,-312,-312,,,611,122,121,123,124',
'-312,-312,,-312,-312,-312,-312,-312,,,,,126,125,127,,,606,,,,,,,,112',
'113,,619,618,358,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312',
'-312,-312,-312,,,-312,-312,-312,,,-312,,,-312,,,-312,-312,,-312,612',
'-312,,-312,,-312,-312,-312,-312,-312,-312,-312,,-312,,-312,,109,99,101',
'102,103,105,,,,100,110,-312,-312,-312,-312,,-312,93,-312,,97,104,106',
'-312,114,115,-771,-312,89,90,91,12,82,-771,-771,-771,83,84,-771,-771',
'-771,87,-771,85,86,88,34,35,80,81,-771,-771,-771,-771,,92,32,31,122',
'121,123,124,-771,-771,22,-771,-771,-771,-771,-771,11,52,,13,126,125',
'127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,-771,-771,-771',
'-771,-771,-771,-771,-771,-771,-771,-771,-771,-771,-771,,,-771,-771,-771',
'44,,-771,37,304,-771,67,68,-771,-771,69,-771,39,-771,,-771,51,-771,-771',
'-771,-771,-771,-771,-771,23,-771,-771,-771,,109,99,101,102,103,105,',
',,100,110,-771,-771,,-771,,-771,93,,,97,104,106,-771,114,115,,-771,45',
'46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122',
'121,123,124,,,22,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104',
'106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80',
'81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,,52,,,126,125,127,116,65',
'118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,',
',250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,',
'87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,,52',
',,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,',
',,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99',
'101,102,103,105,,,,100,110,134,,,,,133,93,,,97,104,106,,114,115,,,45',
'46,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31',
'122,121,123,124,,,22,,,,,,11,52,10,13,126,125,127,116,65,118,117,119',
',120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,44,,,37,,,67,68,',
',69,,39,,,,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110,,,,,,433',
'93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86',
'88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,,52,,,126,125',
'127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,',
',,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102,103',
'105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,',
',,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,',
'22,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,',
'48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,23',
',,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32',
'31,122,121,123,124,,,22,,,,,,,52,,,126,125,127,116,65,118,117,119,,120',
'128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69',
',,,,,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35',
'80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,12,82,,,,83,84,',
',,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,11',
'52,,13,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47',
',,,,,,,,,,,,,,,,,,,44,,,37,,,67,68,,,69,,39,,,,51,,,,,,,,23,,,,,109',
'99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46',
'89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,450',
',,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35',
'80,81,,,,,,92,32,31,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,450,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105',
',,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83',
'84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,',
',,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49',
'47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109',
'99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46',
'89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122',
'121,123,124,,,22,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104',
'106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80',
'81,,,,,,92,32,31,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65',
'118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,',
',250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,',
'87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,251,,,,,,,52',
',,126,125,127,116,65,118,117,119,326,120,128,129,,112,113,,48,49,47',
',,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,323,,321,,51,,,,,,,,249,',
',,,109,324,101,102,103,105,,,,100,110,,,,,,,93,,327,97,104,106,,114',
'115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92',
'32,31,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119',
',120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68',
',,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,',
'93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86',
'88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,,52,,,126,125',
'127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,',
',,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102,103',
'105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,',
',,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,',
'22,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,',
'48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,23',
',,,,109,99,101,102,103,105,,,,100,110,239,,,,,,93,,,97,104,106,,114',
'115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,',
',92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118',
'117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250',
',,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110',
',,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,',
'85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52',
',,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,',
',,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355',
'80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67',
'68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,',
',,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,',
',,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355',
'80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67',
'68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,',
',,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,',
',,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355',
'80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67',
'68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,',
',,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,',
',,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355',
'80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67',
'68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,',
',,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,',
',,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355',
'80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,251,,,,',
',,52,,,126,125,127,116,65,118,117,119,326,120,128,129,,112,113,,48,49',
'47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,323,,321,,51,,,,,,,,249',
',,,,109,324,101,102,103,105,,,,100,110,,,,,,,93,,327,97,104,106,,114',
'115,,,45,535,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,',
'92,32,31,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,326,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250',
',,67,68,,,69,,323,,321,,51,,,,,,,,249,,,,,109,324,101,102,103,105,,',
',100,110,,,,,,,93,,327,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83',
'84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,251,',
',,,,,52,,,126,125,127,116,65,118,117,119,326,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,323,,321,,51,,,,,,',
',249,,,,,109,324,101,102,103,105,,,,100,110,239,,,,,,93,,327,97,104',
'106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80',
'81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67',
'68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,',
',,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,',
',,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121',
'123,124,,,22,,,,,,11,52,,13,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,44,,,37,,,67,68,,,69,,39,',
',,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104',
'106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80',
'81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,582,,67,68,,,69,,,,,,51,,,,,,,,249',
',,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,326,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250',
',,67,68,,,69,,323,,,,51,,,,,,,,249,,,,,109,324,101,102,103,105,,,,100',
'110,,,,,,,93,,327,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,326,120,128,129,,112,113,',
'48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249',
',,,,109,324,101,102,103,105,,,,100,110,,,,,,,93,,327,97,104,106,,114',
'115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92',
'32,31,122,121,123,124,,,22,,,,,,,52,,,126,125,127,116,65,118,117,119',
',120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68',
',,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93',
',,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88',
'354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125',
'127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,',
',,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103',
'105,,,,100,110,,,,,,,93,,,97,104,106,-749,114,115,,,45,46,-749,-749',
'-749,,,-749,-749,-749,603,-749,600,599,598,608,601,,,-749,-749,-749',
'-749,-749,,,611,,,,,-749,-749,,-749,-749,-749,-749,-749,,,,,,,,,,606',
',,,,,,,,616,615,619,618,,-749,-749,-749,-749,-749,-749,-749,-749,-749',
'-749,-749,-749,-749,-749,,,-749,-749,-749,,,-749,,,-749,,,-749,-749',
',-749,612,-749,,-749,,-749,-749,-749,-749,-749,-749,-749,,-749,-749',
'-749,603,,600,599,598,608,601,,,,,,-749,-749,-749,-749,611,-749,-750',
'-749,,,,,-749,-750,-750,-750,-749,,-750,-750,-750,,-750,,,,606,,,,-750',
'-750,-750,-750,-750,,,619,618,,,,-750,-750,,-750,-750,-750,-750,-750',
',,,,,,,,,,,,,,,,,,,,,612,,-750,-750,-750,-750,-750,-750,-750,-750,-750',
'-750,-750,-750,-750,-750,,,-750,-750,-750,,,-750,,,-750,,,-750,-750',
',-750,,-750,,-750,,-750,-750,-750,-750,-750,-750,-750,,-750,-750,-750',
',,,,,,,,,,,,-750,-750,-750,-750,,-750,,-750,,89,90,91,-750,82,,,-750',
'83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,326,120,128,129,,112,113,',
'48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,323,,321,,51,,,',
',,,,249,,,,,109,324,101,102,103,105,,,,100,110,,,,,,,93,,327,97,104',
'106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80',
'81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67',
'68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,',
',,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,,52,,,126',
'125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,',
',,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102',
'103,105,,,,100,110,,,,,,,93,,,97,104,106,-771,114,115,,,45,46,-771,-771',
'-771,,,-771,-771,-771,,-771,122,121,123,124,,,,-771,-771,-771,,,,,,',
'126,125,127,-771,-771,,-771,-771,-771,-771,-771,,,112,113,,,,358,,,',
',,603,,600,599,598,608,601,,,,,,,,,,611,,,,,-771,,,,,,,-771,,,,,304',
'-771,,,,606,,,,,109,99,101,102,103,105,619,618,,100,110,,-771,-771,',
',,93,,,97,104,106,,114,115,-771,,89,90,91,-771,82,,,,83,84,-771,,612',
'87,-771,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,326,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250',
',,67,68,,,69,,768,,321,,51,,,,,,,,249,,,,,109,324,101,102,103,105,,',
',100,110,,,,,,,93,,327,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83',
'84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,326,120,128,129,,112,113,',
'48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,321,,51,,,,,,',
',249,,,,,109,324,101,102,103,105,,,,100,110,,,,,,,93,,327,97,104,106',
',114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81',
',,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65',
'118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,',
',250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,12,82,,,,83,84,',
',,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,11',
'52,335,13,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49',
'47,,,,,,,,,,,,,,,,,,,,44,,,37,,,67,68,,,69,,39,,,,51,,,,,,,,23,,,,,109',
'99,101,102,103,105,,,,100,110,,,,,,433,93,,,97,104,106,,114,115,,,45',
'46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,326,120',
'128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69',
',323,,321,,51,,,,,,,,249,,,,,109,324,101,102,103,105,,,,100,110,,,,',
',,93,,327,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,',
',,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35',
'80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,',
'87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,',
',,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49',
'47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,',
'109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45',
'46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357',
'122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120',
'128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69',
',,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,',
'97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354',
'355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127',
'116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,',
',,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105',
',,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83',
'84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,251,',
',,,,,52,,,126,125,127,116,65,118,117,119,326,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,323,,321,,51,,,,,,',
',249,,,,,109,324,101,102,103,105,,,,100,110,,,,,,,93,,327,97,104,106',
',114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,',
',,,,92,32,31,122,121,123,124,,,22,,,,,,,52,,,126,125,127,116,65,118',
'117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250',
',,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110',
',,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,12,82,,,,83,84,,,,87',
',85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,11,52',
',13,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,',
',,,,,,,,,,,,,,,,,,44,,,37,,,67,68,,,69,,39,,,,51,,,,,,,,23,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,878',
',,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35',
'80,81,,,,,,92,32,31,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,251,,,,',
',,52,,,126,125,127,116,65,118,117,119,326,120,128,129,,112,113,,48,49',
'47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,323,,321,,51,,,,,,,,249',
',,,,109,324,101,102,103,105,,,,100,110,,,,,,,93,,327,97,104,106,,114',
'115,,,45,46,89,90,91,12,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,',
',92,32,31,122,121,123,124,,,22,,,,,,11,52,,13,126,125,127,116,65,118',
'117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,44,,,37,',
',67,68,,,69,,39,,,,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110',
',,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,',
'85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52',
',,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,',
',,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,326,120',
'128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69',
',768,,321,,51,,,,,,,,249,,,,,109,324,101,102,103,105,,,,100,110,,,,',
',,93,,327,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,326,120,128,129,,112,113,,48,49,47,',
',,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,321,,51,,,,,,,,249,,,,,109',
'324,101,102,103,105,,,,100,110,,,,,,,93,,327,97,104,106,,114,115,,,45',
'46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35',
'80,81,,,,,,92,32,31,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244',
',,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,',
'100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84',
',,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,251,,,,',
',,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47',
',,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109',
'99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46',
'89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,',
',,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355',
'80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116',
'65,118,117,119,326,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,',
',244,,,250,,,67,68,,,69,,768,,321,,51,,,,,,,,249,,,,,109,324,101,102',
'103,105,,,,100,110,,,,,,,93,,327,97,104,106,,114,115,,,45,535,89,90',
'91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121',
'123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129',
',112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51',
',,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106',
',114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81',
',,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65',
'118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,',
',250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,',
'87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,',
',,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49',
'47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,450,,,,51,,,,,,,,249,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67',
'68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,',
',,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,326,120,128,129,,112,113,,48,49,47,',
',,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,768,,,,51,,,,,,,,249,,,,,109',
'324,101,102,103,105,,,,100,110,,,,,,,93,,327,97,104,106,,114,115,,,45',
'46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357',
'122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,326',
'120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68',
',,69,,,,,,51,,,,,,,,249,,,,,109,324,101,102,103,105,,,,100,110,,,,,',
',93,,327,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,',
',,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,998,,,,51,,,,,,,,249,,,,,109',
'99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46',
'89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,326,120',
'128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69',
',323,,321,,51,,,,,,,,249,,,,,109,324,101,102,103,105,,,,100,110,,,,',
',,93,,327,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,',
',,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121',
'123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129',
',112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51',
',,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106',
',114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81',
',,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65',
'118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,',
',250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,',
'87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,',
',,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49',
'47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,',
'109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45',
'46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357',
'122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120',
'128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69',
',,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,',
'97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354',
'355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127',
'116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,',
',,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105',
',,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83',
'84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48',
'49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
',,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92',
'349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117',
'119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67',
'68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,',
',,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85',
'86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,',
',126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,',
',,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121',
'123,124,,,22,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129',
',112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51',
',,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106',
',114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81',
',,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65',
'118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,',
',250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102,103,105,,,,100',
'110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,',
'87,,85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,,52',
',,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,',
',,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,326,120',
'128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69',
',,,321,,51,,,,,,,,249,,,,,109,324,101,102,103,105,,,,100,110,,,,,,,93',
',327,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86',
'88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,52,,,126',
'125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,',
',,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,249,,,,,109,99,101,102',
'103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,',
'82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123',
'124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112',
'113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,1179,,,,51',
',,,,,,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106',
',114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,',
',,,,92,32,31,122,121,123,124,,,22,,,,,,,52,,,126,125,127,116,65,118',
'117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250',
',,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102,103,105,,,,100,110',
',,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,',
'85,86,88,34,35,80,81,,,,,,92,32,31,122,121,123,124,,,22,,,,,,,52,,,126',
'125,127,116,65,118,117,119,,120,128,129,,112,113,,48,49,47,,,,,,,,,',
',,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,,,,,23,,,,,109,99,101,102',
'103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,45,46,89,90,91,',
'82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123',
'124,,,251,,,,,,,52,,,126,125,127,116,65,118,117,119,,120,128,129,,112',
'113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,,250,,,67,68,,,69,,,,,,51,,,,',
',,,249,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,',
'114,115,,,45,46,89,90,91,,82,,,,83,84,,,,87,,85,86,88,34,35,80,81,,',
',,,92,32,31,122,121,123,124,,,251,,,,,,,52,,,126,125,127,116,65,118',
'117,119,326,120,128,129,,112,113,,48,49,47,,,,,,,,,,,,,,,,,,,,244,,',
'250,,,67,68,,,69,,323,,321,,51,,,,,,,,249,,,,,109,324,101,102,103,105',
',,,100,110,,,,,,,93,,327,97,104,106,,114,115,,,45,46,89,90,91,,82,,',
',83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124',
',,251,,,,,,,350,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113',
',,,358,,,,,,603,,600,599,598,608,601,,,,,,,,346,,611,342,,,67,68,,,69',
',341,,,,,,,,,,,,606,,,,,109,99,101,102,103,105,619,618,,100,110,,,,',
',,93,,,97,104,106,,114,115,89,90,91,,82,,,,83,84,,,,87,612,85,86,88',
'354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,350,,,126',
'125,127,116,65,118,117,119,,120,128,129,,112,113,,,,358,,,,,,603,,600',
'599,598,608,601,,,,,,,,346,,611,250,,,67,68,,,69,,,,,,,,,,,,,,606,,',
',,109,99,101,102,103,105,619,618,,100,110,,,,360,,,93,,,97,104,106,',
'114,115,89,90,91,,82,,,,83,84,,,,87,612,85,86,88,354,355,80,81,,,,,',
'92,349,357,122,121,123,124,,,251,,,,,,,350,,,126,125,127,116,65,118',
'117,119,,120,128,129,,112,113,,,,358,,,,,,603,,600,599,598,608,601,',
',,,,,,398,,611,37,,,67,68,,,69,,39,,,,,,,,,,,,606,,,,,109,99,101,102',
'103,105,619,618,,100,110,,,,,,,93,,,97,104,106,,114,115,89,90,91,,82',
',,,83,84,,,,87,612,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123',
'124,,,251,,,,,,,350,,,126,125,127,116,65,118,117,119,,120,128,129,,112',
'113,,,,358,,,,,,603,,600,599,598,608,601,,,,,,,,346,,611,250,,,67,68',
',,69,,,,,,,,,,,,,,606,,,,,109,99,101,102,103,105,619,618,,100,110,,',
',564,,,93,,,97,104,106,,114,115,89,90,91,,82,,,,83,84,,,,87,612,85,86',
'88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,350,,,126',
'125,127,116,65,118,117,119,,120,128,129,,112,113,,,,358,,,,,,603,,600',
'599,598,608,601,,,,,,,,346,,611,342,,,67,68,,,69,,,,,,,,,,,,,,606,,',
',,109,99,101,102,103,105,619,618,,100,110,,,,,,,93,,,97,104,106,,114',
'115,89,90,91,,82,,,,83,84,,,,87,612,85,86,88,354,355,80,81,,,,,,92,349',
'357,122,121,123,124,,,251,,,,,,,350,,,126,125,127,652,65,118,117,653',
',120,128,129,,112,113,,,,358,,,,,,603,,600,599,598,608,601,,,,,,,,654',
',611,250,,,67,68,,,69,,,,,,,,,,,,,,606,,,,,109,99,101,102,103,105,619',
'618,,100,110,,,,,,,93,,,97,104,106,,114,115,89,90,91,,82,,,,83,84,,',
',87,612,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251',
',,,,,,350,,,126,125,127,652,65,118,117,653,,120,128,129,,112,113,,,',
'358,,,,,,,,,,,,,,,,,,,,654,,,250,,,67,68,,,69,,,,,,,,,,,,,,,,,,,109',
'99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,89,90,91',
',82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123',
'124,,,251,,,,,,,350,,,126,125,127,116,65,118,117,119,,120,128,129,,112',
'113,,,,358,,,,,,,,,,,,,,,,,,,,346,,,342,,,67,68,,,69,,,,,,,,,,,,,,,',
',,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115',
'89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357',
'122,121,123,124,,,251,,,,,,,350,,,126,125,127,116,65,118,117,119,,120',
'128,129,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,346,,,342,,,67,68,,,69,,',
',,,,,,,,,,,,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104',
'106,,114,115,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,',
',,92,349,357,122,121,123,124,,,251,,,,,,,350,,,126,125,127,116,65,118',
'117,119,,120,128,129,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,346,,,342,,',
'67,68,,,69,,,,,,,,,,,,,,,,,,,109,99,101,102,103,105,,,,100,110,,,,,',
',93,,,97,104,106,,114,115,89,90,91,,82,,,,83,84,,,,87,,85,86,88,354',
'355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,,350,,,126,125',
'127,116,65,118,117,119,,120,128,129,,112,113,,,,358,,,,,,,,,,,,,,,,',
',,,346,,,342,,,67,68,,,69,,,,,,,,,,,,,,,,,,,109,99,101,102,103,105,',
',,100,110,,,,,,,93,,,97,104,106,,114,115,89,90,91,,82,,,,83,84,,,,87',
',85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124,,,251,,,,,,',
'350,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113,,,,358,,',
',,,,,,,,,,,,,,,,,1157,,,250,,,67,68,,,69,,,,,,,,,,,,,,,,,,,109,99,101',
'102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,89,90,91,,82,',
',,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122,121,123,124',
',,251,,,,,,,350,,,126,125,127,116,65,118,117,119,,120,128,129,,112,113',
',,,358,,,,,,,,,,,,,,,,,,,,1164,,,250,,,67,68,,,69,,,,,,,,,,,,,,,,,,',
'109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,89',
'90,91,,82,,,,83,84,,,,87,,85,86,88,354,355,80,81,,,,,,92,349,357,122',
'121,123,124,,,251,,,,,,,350,,,126,125,127,116,65,118,117,119,,120,128',
'129,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,1157,,,250,,,67,68,,,69,,,,,',
',,,,,,,,,,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106',
',114,115,192,203,193,216,189,209,199,198,219,220,214,197,196,191,217',
'221,222,201,190,204,208,210,202,195,,,,211,218,213,212,205,215,200,188',
'207,206,,,,,,187,194,185,186,182,183,184,145,147,144,,146,,,,,,,,,177',
'178,,173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,',
',,,,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181,109',
',,,,,,,,,110,,,,,,,,,174,192,203,193,216,189,209,199,198,219,220,214',
'197,196,191,217,221,222,201,190,204,208,210,202,195,,,,211,218,213,212',
'205,215,200,188,207,206,,,,,,187,194,185,186,182,183,184,145,147,,,146',
',,,,,,,,177,178,,173,155,156,157,164,161,163,,,158,159,,,,179,180,165',
'166,,,,,,,,,,,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153',
',,181,109,,,,,,,,,,110,,,,,,,,,174,192,203,193,216,189,209,199,198,219',
'220,214,197,196,191,217,221,222,201,190,204,208,210,202,195,,,,211,218',
'213,291,290,292,289,188,207,206,,,,,,187,194,185,186,286,287,288,284',
'147,118,117,285,,120,,,,,,,177,178,,173,155,156,157,164,161,163,,,158',
'159,,,,179,180,165,166,,,,,,296,,,,,,,,170,169,,154,176,172,171,167',
'168,162,160,152,175,153,,,181,,,,,,,,,,,,,,,,,,,,174,192,203,193,216',
'189,209,199,198,219,220,214,197,196,191,217,221,222,201,190,204,208',
'210,202,195,,,,211,218,213,212,205,215,200,188,207,206,,,,,,187,194',
'185,186,182,183,184,145,147,430,429,146,,431,,,,,,,177,178,,173,155',
'156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,,,,,,,,,170,169',
',154,176,172,171,167,168,162,160,152,175,153,,,181,,,,,,,,,,,,,,,,,',
',,174,192,203,193,216,189,209,199,198,219,220,214,197,196,191,217,221',
'222,201,190,204,208,210,202,195,,,,211,218,213,212,205,215,200,188,207',
'206,,,,,,187,194,185,186,182,183,184,145,147,,,146,,,,,,,,,177,178,',
'173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,,,,,,',
',,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181,109,,,',
',,,,,,110,,,,,,,,,174,192,203,193,216,189,209,199,198,219,220,214,197',
'196,191,217,221,222,201,190,204,208,210,202,195,,,,211,218,213,212,205',
'215,200,188,207,206,,,,,,187,194,185,186,182,183,184,145,147,,,146,',
',,,,,,,177,178,,173,155,156,157,164,161,163,,,158,159,,,,179,180,165',
'166,,,,,,,,,,,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153',
',,181,109,,,,,,,,,,110,,,,,,,,,174,192,203,193,216,189,209,199,198,219',
'220,214,197,196,191,217,221,222,201,190,204,208,210,202,195,,,,211,218',
'213,212,205,215,200,188,207,206,,,,,,187,194,185,186,182,183,184,145',
'147,,,146,,,,,,,,,177,178,,173,155,156,157,164,161,163,,,158,159,,,',
'179,180,165,166,,,,,,,,,,,,,,170,169,,154,176,172,171,167,168,162,160',
'152,175,153,,,181,,,,,122,121,123,124,,,,,,,,,,,,174,126,125,127,745',
',,,748,,,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728',
',,,,,,,,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125,127,745',
',,,748,,,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728',
',,,,,,,,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125,127,745',
',,,748,,,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728',
',919,,,,,,,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,239,,,,,,93',
',,97,104,106,,114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125',
'127,745,,,,748,,,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727',
',,728,,,,,,,,,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93',
',,97,104,106,,114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125',
'127,745,,,,748,1039,,,,,112,113,,,,358,611,,,,,,,,,,,,,,,,,,,747,,,729',
',,,727,,,728,,919,,,,,,,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110',
',,,,,,93,,612,97,104,106,,114,115,,,733,734,122,121,123,124,,,,,,,,',
',,,,126,125,127,745,,,,748,1039,,,,,112,113,,,,358,611,,,,,,,,,,,,,',
',,,,,747,,,729,,,,727,,,728,,919,,,,,,,,,,,,,746,,,,109,99,101,102,103',
'105,,,,100,110,,,,,,,93,,612,97,104,106,,114,115,,,733,734,122,121,123',
'124,,,,,,,,,,,,,126,125,127,745,,,,748,,,,,,112,113,,,,358,,,,,,,,,',
',,,,,,,,,,747,,,729,,,,727,,,728,,1051,,,,,,,,,,,,,746,,,,109,99,101',
'102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,733,734,122',
'121,123,124,,,,,,,,,,,,,126,125,127,745,,,,748,,,,,,112,113,,,,358,',
',,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728,,,,,,,,,,,,,,,746,,,,109,99',
'101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,733,734',
'122,121,123,124,,,,,,,,,,,,,126,125,127,745,,,,748,1039,,,,,112,113',
',,,358,611,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728,,919,,,,,,,,,,,',
',746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,612,97,104,106,',
'114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125,127,745,,,,748',
',,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728,,,,,,',
',,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106',
',114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125,127,745,,,,748',
',,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728,,,,,,',
',,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106',
',114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125,127,745,,,,748',
',,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728,,,,,,',
',,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104,106',
',114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125,127,745,,,,748',
',,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728,,919,',
',,,,,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97,104',
'106,,114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125,127,745,',
',,748,,,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728',
',,,,,,,,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,,,97',
'104,106,,114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125,127,745',
',,,748,,,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,,,728',
',919,,,,,,,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93,',
',97,104,106,,114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125,127',
'745,,,,748,,,,,,112,113,,,,358,,,,,,,,,,,,,,,,,,,,747,,,729,,,,727,',
',728,,,,,,,,,,,,,,,746,,,,109,99,101,102,103,105,,,,100,110,,,,,,,93',
',,97,104,106,,114,115,,,733,734,122,121,123,124,,,,,,,,,,,,,126,125',
'127,745,,,,748,,,,,,112,113,,,,358,,,,,,,,122,121,123,124,,,,,,,,,747',
',,729,126,125,127,727,,,728,,,,,,,112,113,,,,358,,,746,,,,109,99,101',
'102,103,105,,,,100,110,,,,,,,93,,,97,104,106,,114,115,,,733,734,,,603',
',600,599,598,608,601,,,,109,99,101,102,103,105,611,,,100,110,,,,,,,93',
',,97,104,106,,114,115,,603,606,600,599,598,608,601,,,,616,615,619,618',
',,611,603,,600,599,598,608,601,,,,,,,,,,611,,,,,606,,,,,,,,612,616,615',
'619,618,,,,,606,597,,,473,477,,,474,616,615,619,618,,,,,177,178,,173',
'155,156,157,164,161,163,,612,158,159,,,,179,180,165,166,597,,,,,304',
',612,,,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181',
',,,,480,484,,,479,,,,,,,,,177,178,174,173,155,156,157,164,161,163,,',
'158,159,,,,179,180,165,166,,,,,,304,,,,,,,,170,169,,154,176,172,171',
'167,168,162,160,152,175,153,,,181,,,,,531,477,,,532,,,,,,,,,177,178',
'174,173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,,',
',,,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181,,,',
',716,477,,,717,,,,,,,,,177,178,174,173,155,156,157,164,161,163,,,158',
'159,,,,179,180,165,166,,,,,,304,,,,,,,,170,169,,154,176,172,171,167',
'168,162,160,152,175,153,,,181,,,,,718,484,,,719,,,,,,,,,177,178,174',
'173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,304,,',
',,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181,,,,',
'779,477,,,780,,,,,,,,,177,178,174,173,155,156,157,164,161,163,,,158',
'159,,,,179,180,165,166,,,,,,304,,,,,,,,170,169,,154,176,172,171,167',
'168,162,160,152,175,153,,,181,,,,,782,484,,,783,,,,,,,,,177,178,174',
'173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,304,,',
',,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181,,,,',
'716,477,,,717,,,,,,,,,177,178,174,173,155,156,157,164,161,163,,,158',
'159,,,,179,180,165,166,,,,,,304,,,,,,,,170,169,,154,176,172,171,167',
'168,162,160,152,175,153,,,181,,,,,718,484,,,719,,,,,,,,,177,178,174',
'173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,304,,',
',,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181,,,,',
'849,477,,,850,,,,,,,,,177,178,174,173,155,156,157,164,161,163,,,158',
'159,,,,179,180,165,166,,,,,,304,,,,,,,,170,169,,154,176,172,171,167',
'168,162,160,152,175,153,,,181,,,,,851,484,,,852,,,,,,,,,177,178,174',
'173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,304,,',
',,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181,,,,',
'880,477,,,881,,,,,,,,,177,178,174,173,155,156,157,164,161,163,,,158',
'159,,,,179,180,165,166,,,,,,304,,,,,,,,170,169,,154,176,172,171,167',
'168,162,160,152,175,153,,,181,,,,,883,484,,,882,,,,,,,,,177,178,174',
'173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,304,,',
',,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181,,,,',
'1002,484,,,1003,,,,,,,,,177,178,174,173,155,156,157,164,161,163,,,158',
'159,,,,179,180,165,166,,,,,,304,,,,,,,,170,169,,154,176,172,171,167',
'168,162,160,152,175,153,,,181,,,,,531,477,,,532,,,,,,,,,177,178,174',
'173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,304,,',
',,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,603,181,600',
'599,598,608,601,,,,,,,,,,611,,,,,174,,,,,,,,,,,,,,,,,606,1248,484,,',
'1247,,,,616,615,619,618,,177,178,,173,155,156,157,164,161,163,,,158',
'159,,,,179,180,165,166,,,,,,304,,,,,612,,,170,169,,154,176,172,171,167',
'168,162,160,152,175,153,,,181,,,,,1251,477,,,1252,,,,,,,,,177,178,174',
'173,155,156,157,164,161,163,,,158,159,,,,179,180,165,166,,,,,,304,,',
',,,,,170,169,,154,176,172,171,167,168,162,160,152,175,153,,,181,,,,',
'1253,484,,,1254,,,,,,,,,177,178,174,173,155,156,157,164,161,163,,,158',
'159,,,,179,180,165,166,,,,,,304,,,,,,,,170,169,,154,176,172,171,167',
'168,162,160,152,175,153,,603,181,600,599,598,608,601,,,,,,,,,,611,,',
',,174,,,,,,,,,,,,,,,,,606,,,,,,,,,616,615,619,618,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,612' ]
        racc_action_table = arr = ::Array.new(30426, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'116,421,424,70,387,395,756,116,116,116,489,489,116,116,116,779,116,396',
'1051,780,388,1081,752,752,116,911,116,116,116,789,789,654,1,613,1040',
'654,116,116,28,116,116,116,116,116,774,28,728,1102,399,782,650,613,1040',
'849,850,1105,747,1107,3,728,747,774,865,950,421,424,911,116,116,116',
'116,116,116,116,116,116,116,116,116,116,116,999,779,116,116,116,780',
'116,116,640,70,116,1000,756,116,116,1051,116,1107,116,489,116,28,116',
'116,116,116,116,116,116,395,116,752,116,920,782,782,779,387,789,779',
'780,396,387,780,920,116,116,116,116,950,116,1161,116,388,1081,119,779',
'116,388,1081,780,116,119,119,119,116,1162,119,119,119,782,119,399,782',
'650,1165,1213,849,850,119,1102,119,119,119,950,1102,865,950,1105,1251',
'782,119,119,1105,119,119,119,119,119,1252,1253,1128,1265,13,950,851',
'852,754,640,30,242,920,1128,640,999,412,1000,999,412,999,907,22,119',
'119,119,119,119,119,119,119,119,119,119,119,119,119,53,351,119,119,119',
'754,119,119,47,47,119,358,358,119,119,907,119,243,119,15,119,22,119',
'119,119,119,119,119,119,1161,119,1254,119,242,1161,851,852,54,30,552',
'412,412,1253,1128,1162,119,119,119,119,1162,119,675,119,1165,1213,479',
'53,119,1165,1213,30,119,479,479,479,119,351,1251,479,479,800,479,1251',
'1142,851,852,243,1252,1253,479,1265,800,1252,1253,1142,1265,47,47,351',
'358,358,479,479,54,479,479,479,479,479,791,552,552,552,19,283,791,245',
'944,678,1254,19,283,675,675,800,800,16,1142,1142,19,552,675,479,479',
'479,479,479,479,479,479,479,479,479,479,479,479,18,457,479,479,479,944',
'479,479,495,1254,479,716,800,479,1254,1142,20,42,479,1180,479,1180,479',
'479,479,479,479,479,479,245,479,19,479,678,678,377,55,377,377,377,377',
'377,678,55,717,479,479,43,479,26,479,377,55,408,880,480,1257,479,20',
'42,457,479,480,480,480,479,1257,495,480,480,716,480,41,377,284,20,42',
'362,473,480,480,284,377,377,377,377,241,17,17,43,410,480,480,241,480',
'480,480,480,480,96,55,343,241,717,285,344,43,96,343,415,44,285,344,880',
'408,408,408,343,377,362,473,344,480,480,480,480,480,480,480,480,480',
'480,480,480,480,480,362,473,480,480,480,286,480,480,386,386,480,418',
'286,480,241,410,410,410,480,881,480,52,480,480,480,480,480,480,480,343',
'480,480,480,344,415,415,415,406,78,406,406,406,406,406,345,480,480,474',
'480,287,480,345,426,406,103,718,287,480,903,700,345,480,718,718,718',
'480,910,718,718,718,910,718,418,418,418,406,406,1023,881,718,718,718',
'718,718,406,406,406,406,104,474,105,718,718,347,718,718,718,718,718',
'5,347,700,726,288,5,363,474,726,345,347,288,726,363,426,426,426,629',
'903,700,629,406,363,718,718,718,718,718,718,718,718,718,718,718,718',
'718,718,1023,643,718,718,718,289,718,718,290,643,718,106,289,718,718',
'290,718,142,718,223,718,347,718,718,718,718,718,718,718,291,718,718',
'718,363,244,630,291,662,630,662,662,662,662,662,397,718,718,718,718',
'292,718,397,718,662,330,719,292,718,246,330,397,718,719,719,719,718',
'247,719,719,719,503,719,144,456,251,662,303,144,144,719,456,719,719',
'719,662,662,662,662,318,456,319,719,719,569,719,719,719,719,719,392',
'569,322,503,656,392,783,503,503,397,569,656,621,783,1008,730,730,621',
'783,1008,656,662,783,719,719,719,719,719,719,719,719,719,719,719,719',
'719,719,1117,456,719,719,719,1117,719,719,50,50,719,336,634,719,719',
'634,719,338,719,339,719,569,719,719,719,719,719,719,719,340,719,656',
'719,783,346,804,349,804,804,804,804,804,855,50,50,719,719,719,719,855',
'719,804,719,985,350,882,985,719,855,803,803,719,882,882,882,719,352',
'1057,882,882,1057,882,1186,804,606,1186,606,606,606,882,606,353,804',
'804,804,804,9,9,9,9,9,882,882,1003,882,882,882,882,882,357,1003,1156',
'359,1163,366,1003,855,368,1156,1003,1163,372,606,835,835,504,374,1156',
'804,1163,378,606,882,882,882,882,882,882,882,882,882,882,882,882,882',
'882,863,863,882,882,882,382,882,882,1106,1106,882,504,393,882,394,504',
'504,398,882,400,882,1003,882,882,882,882,882,882,882,1156,882,1163,882',
'1220,1220,806,1205,806,806,806,806,806,414,1205,417,882,882,420,882',
'423,882,806,1205,446,448,883,449,882,451,454,458,882,883,883,883,882',
'468,471,883,883,518,883,810,806,810,810,810,472,810,883,883,481,491',
'505,806,806,506,733,733,733,733,883,883,507,883,883,883,883,883,508',
'1205,528,518,733,733,733,518,518,518,518,810,334,334,334,334,334,733',
'733,806,810,536,733,883,883,883,883,883,883,883,883,883,883,883,883',
'883,883,537,538,883,883,883,542,883,883,558,559,883,867,867,883,560',
'867,867,867,883,563,883,565,883,883,883,883,883,883,883,570,883,883',
'883,574,733,733,733,733,733,733,584,585,588,733,733,883,883,589,883',
'590,883,733,591,592,733,733,733,883,733,733,594,883,595,605,617,883',
'2,2,2,2,2,2,620,622,624,2,2,625,626,652,2,653,2,2,2,2,2,2,2,381,381',
'381,381,381,2,2,2,2,2,2,2,631,980,2,980,980,980,632,980,2,2,2,2,2,2',
'2,2,2,2,2,2,635,2,2,2,637,2,2,641,2,2,2,652,642,653,644,658,682,685',
'652,980,653,692,701,652,706,653,712,652,980,653,2,720,721,2,511,723',
'2,2,746,749,2,750,2,755,761,652,2,653,763,765,511,511,767,776,2,778',
'781,784,785,2,2,2,2,2,2,788,511,812,2,2,511,511,511,511,813,652,2,653',
'815,2,2,2,837,2,2,843,844,2,2,37,37,37,37,37,37,848,866,874,37,37,877',
'879,1002,37,888,37,37,37,37,37,37,37,557,557,557,557,557,37,37,37,37',
'37,37,37,904,906,37,519,912,913,917,918,37,37,37,37,37,37,37,37,37,37',
'37,37,919,37,37,37,922,37,37,941,37,37,37,1002,942,949,960,519,961,964',
'1002,519,519,519,519,1002,966,967,969,1002,971,973,37,974,976,37,979',
'986,37,37,992,1001,37,1005,37,1009,1013,1002,37,981,1014,981,981,981',
'1020,981,37,1022,1032,1033,1034,37,37,37,37,37,37,1035,1043,1044,37',
'37,1045,1049,1050,1055,1061,1002,37,1062,1064,37,37,37,1065,37,37,981',
'1066,37,37,225,225,225,225,225,225,1068,1069,1070,225,225,1097,1098',
'1116,225,1120,225,225,225,225,225,225,225,24,1121,1129,1136,1138,225',
'225,225,225,225,225,225,1154,814,225,814,814,814,1157,814,225,225,225',
'225,225,225,225,225,225,225,225,225,1159,225,225,225,1164,225,225,1167',
'225,225,225,24,24,24,24,24,24,24,24,24,24,24,1168,24,24,1169,1170,24',
'24,1193,225,1195,24,225,1198,1199,225,225,1200,1201,225,1203,225,24',
'1209,24,225,24,24,24,24,24,24,24,225,24,1219,1225,1230,225,225,225,225',
'225,225,1233,1247,1248,225,225,1250,24,1255,1261,1262,1263,225,1264',
'1270,225,225,225,1276,225,225,,,225,225,250,250,250,250,250,250,,,,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,461,250,250,250,250,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,,250,250,250,461,461,461,461,461,461,461,461,461,461',
'461,,461,461,,,461,461,,250,,,250,,,250,250,,,250,,250,461,,461,250',
'461,461,461,461,461,461,461,250,461,,,,250,250,250,250,250,250,,,,250',
'250,,461,,461,,,250,,,250,250,250,,250,250,,,250,250,337,337,337,337',
'337,337,,,,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337,337',
'337,337,337,337,337,,,337,,,,,467,337,337,337,337,337,337,337,337,337',
'337,337,337,,337,337,337,,337,337,,337,337,337,467,467,467,467,467,467',
'467,467,467,467,467,,467,467,,,467,467,,337,,,337,,,337,337,,,337,,337',
'467,,467,337,467,467,467,467,467,467,467,337,467,,,,337,337,337,337',
'337,337,,,,337,337,,467,,,,,337,,,337,337,337,,337,337,,,337,337,342',
'342,342,342,342,342,,,,342,342,,,,342,,342,342,342,342,342,342,342,',
',,,,342,342,342,342,342,342,342,,,342,,,,,790,342,342,342,342,342,342',
'342,342,342,342,342,342,,342,342,342,,342,342,,342,342,342,790,790,790',
'790,790,790,790,790,790,790,790,,790,790,,,790,790,,342,,,342,,,342',
'342,,,342,,342,790,,790,342,790,790,790,790,790,790,790,342,790,,,,342',
'342,342,342,342,342,,,,342,342,,790,,,,,342,,,342,342,342,,342,342,',
',342,342,373,373,373,373,373,373,,,,373,373,,,,373,,373,373,373,373',
'373,373,373,,,,,,373,373,373,373,373,373,373,,,373,,,,,823,373,373,373',
'373,373,373,373,373,373,373,373,373,,373,373,373,,373,373,,373,373,373',
'823,823,823,823,823,823,823,823,823,823,823,,823,823,,,823,823,,373',
',,373,,,373,373,,,373,,373,823,,823,373,823,823,823,823,823,823,823',
'373,823,,,,373,373,373,373,373,373,,,,373,373,,823,,,,,373,,,373,373',
'373,,373,373,,,373,373,379,379,379,379,379,379,,,,379,379,,,,379,,379',
'379,379,379,379,379,379,,,,,,379,379,379,379,379,379,379,,1122,379,1122',
'1122,1122,,1122,379,379,379,379,379,379,379,379,379,379,379,379,,379',
'379,379,,379,379,,379,379,379,316,316,316,316,316,316,316,316,316,316',
'316,,316,316,,,316,316,,379,,,379,,,379,379,,,379,,379,316,,316,379',
'316,316,316,316,316,316,316,379,316,,,,379,379,379,379,379,379,,,,379',
'379,,316,,,,,379,,,379,379,379,,379,379,,,379,379,380,380,380,380,380',
'380,,,,380,380,,,,380,,380,380,380,380,380,380,380,,,,,,380,380,380',
'380,380,380,380,,1232,380,1232,1232,1232,,1232,380,380,380,380,380,380',
'380,380,380,380,380,380,,380,380,380,,380,380,,380,380,380,522,522,522',
'522,522,522,522,522,522,522,522,,522,522,,,522,522,,380,,,380,,,380',
'380,,,380,,380,522,,522,380,522,522,522,522,522,522,522,380,522,,,,380',
'380,380,380,380,380,,,,380,380,522,522,,,,,380,,,380,380,380,,380,380',
',,380,380,390,390,390,390,390,390,,,,390,390,,,,390,,390,390,390,390',
'390,390,390,,,,,,390,390,390,390,390,390,390,,,390,,,,,,390,390,390',
'390,390,390,390,390,390,390,390,390,,390,390,390,,390,390,,390,390,390',
'581,581,581,581,581,581,581,581,581,581,581,,581,581,,,581,581,,390',
',,390,,,390,390,,,390,,390,581,,581,390,581,581,581,581,581,581,581',
'390,581,,,,390,390,390,390,390,390,,,,390,390,,581,,,,,390,,,390,390',
'390,,390,390,,,390,390,391,391,391,391,391,391,,,,391,391,,,,391,,391',
'391,391,391,391,391,391,,,,,,391,391,391,391,391,391,391,,,391,,,,,',
'391,391,391,391,391,391,391,391,391,391,391,391,,391,391,391,,391,391',
',391,391,391,885,885,885,885,885,885,885,885,885,885,885,,885,885,,',
'885,885,,391,,,391,,,391,391,,,391,,391,885,,885,391,885,885,885,885',
'885,885,885,391,885,,,,391,391,391,391,391,391,,,,391,391,,885,,,,,391',
',,391,391,391,,391,391,,,391,391,636,636,636,636,636,636,,,,636,636',
',,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636',
',,636,,,,,,636,636,636,636,636,636,636,636,636,636,636,636,,636,636',
'636,,636,636,,636,636,636,1060,1060,1060,1060,1060,1060,1060,1060,1060',
'1060,1060,,1060,1060,,,1060,1060,,636,,,636,,,636,636,,,636,,636,1060',
',1060,636,1060,1060,1060,1060,1060,1060,1060,636,1060,,,,636,636,636',
'636,636,636,,,,636,636,,1060,,,,,636,,,636,636,636,,636,636,,,636,636',
'639,639,639,639,639,639,,,,639,639,,,,639,,639,639,639,639,639,639,639',
',,,,,639,639,639,639,639,639,639,,,639,,,,,,639,639,639,639,639,639',
'639,639,639,639,639,639,,639,639,639,,639,639,,639,639,639,1078,1078',
'1078,1078,1078,1078,1078,1078,1078,1078,1078,,1078,1078,,,1078,1078',
',639,,,639,,,639,639,,,639,,639,1078,,1078,639,1078,1078,1078,1078,1078',
'1078,1078,639,1078,,,,639,639,639,639,639,639,,,,639,639,,1078,,,,,639',
',,639,639,639,,639,639,,,639,639,687,687,687,687,687,687,,,,687,687',
',,,687,,687,687,687,687,687,687,687,,,,,,687,687,687,687,687,687,687',
',,687,,,,,,687,687,687,687,687,687,687,687,687,687,687,687,,687,687',
'687,,687,687,,687,687,687,1099,1099,1099,1099,1099,1099,1099,1099,1099',
'1099,1099,,1099,1099,,,1099,1099,,687,,,687,,,687,687,,,687,,687,1099',
',1099,687,1099,1099,1099,1099,1099,1099,1099,687,1099,,,,687,687,687',
'687,687,687,,,,687,687,,1099,,,,,687,,,687,687,687,,687,687,,,687,687',
'853,853,853,853,853,853,,,,853,853,,,,853,,853,853,853,853,853,853,853',
',,,,,853,853,853,853,853,853,853,,,853,,,,,,853,853,853,853,853,853',
'853,853,853,853,853,853,,853,853,853,,853,853,,853,853,853,364,364,364',
'364,364,364,364,364,364,364,364,,364,364,,,364,364,,853,,,853,,,853',
'853,,,853,,853,364,,364,853,364,364,364,364,364,364,364,853,364,,,,853',
'853,853,853,853,853,,,,853,853,,,,,,,853,,,853,853,853,,853,853,,,853',
'853,864,864,864,864,864,864,,,,864,864,,,,864,,864,864,864,864,864,864',
'864,,,,,,864,864,864,864,864,864,864,,,864,,,,,,864,864,864,864,864',
'864,864,864,864,864,864,864,,864,864,864,,864,864,,864,864,864,365,365',
'365,365,365,365,365,365,365,365,365,,365,365,,,365,365,,864,,,864,,',
'864,864,,,864,,864,365,,365,864,365,365,365,365,365,365,365,864,365',
',,,864,864,864,864,864,864,,,,864,864,,,,,,,864,,,864,864,864,,864,864',
',,864,864,868,868,868,868,868,868,,,,868,868,,,,868,,868,868,868,868',
'868,868,868,,,,,,868,868,868,868,868,868,868,,,868,,,,,,868,868,868',
'868,868,868,868,868,868,868,868,868,,868,868,868,,868,868,,868,868,868',
'501,501,501,501,501,501,501,501,501,501,501,,501,501,,,501,501,,868',
',,868,,,868,868,,,868,,868,501,,501,868,501,501,501,501,501,501,501',
'868,501,,,,868,868,868,868,868,868,,,,868,868,,,,,,,868,,,868,868,868',
',868,868,,,868,868,938,938,938,938,938,938,,,,938,938,,,,938,,938,938',
'938,938,938,938,938,,,,,,938,938,938,938,938,938,938,,,938,,,,,,938',
'938,938,938,938,938,938,938,938,938,938,938,,938,938,938,,938,938,,938',
'938,938,502,502,502,502,502,502,502,502,502,502,502,,502,502,,,502,502',
',938,,,938,,,938,938,,,938,,938,502,,502,938,502,502,502,502,502,502',
'502,938,502,,,,938,938,938,938,938,938,,,,938,938,,,,,,,938,,,938,938',
'938,,938,938,,,938,938,958,958,958,958,958,958,,,,958,958,,,,958,,958',
'958,958,958,958,958,958,,,,,,958,958,958,958,958,958,958,,1171,958,1171',
'1171,1171,,1171,958,958,958,958,958,958,958,958,958,958,958,958,,958',
'958,958,,958,958,,958,958,958,512,512,512,512,512,512,512,,1171,512',
'512,,,,,,512,512,,958,,,958,,,958,958,,,958,,958,512,,512,958,512,512',
'512,512,512,512,512,958,512,,,,958,958,958,958,958,958,,,,958,958,,',
',,,,958,,,958,958,958,,958,958,,,958,958,991,991,991,991,991,991,,,',
'991,991,,,,991,,991,991,991,991,991,991,991,,,,,,991,991,991,991,991',
'991,991,,1172,991,1172,1172,1172,,1172,991,991,991,991,991,991,991,991',
'991,991,991,991,,991,991,991,,991,991,,991,991,991,513,513,513,513,513',
'513,513,,1172,513,513,,,,,,513,513,,991,,,991,,,991,991,,,991,,991,513',
',513,991,513,513,513,513,513,513,513,991,513,,,,991,991,991,991,991',
'991,,,,991,991,,,,,,,991,,,991,991,991,,991,991,,,991,991,1006,1006',
'1006,1006,1006,1006,,,,1006,1006,,,,1006,,1006,1006,1006,1006,1006,1006',
'1006,,,,,,1006,1006,1006,1006,1006,1006,1006,,,1006,,,,,,1006,1006,1006',
'1006,1006,1006,1006,1006,1006,1006,1006,1006,,1006,1006,1006,,1006,1006',
',1006,1006,1006,514,514,514,514,514,514,514,,,514,514,,,,,,514,514,',
'1006,,,1006,,,1006,1006,,,1006,,1006,514,,514,1006,514,514,514,514,514',
'514,514,1006,514,,,,1006,1006,1006,1006,1006,1006,,,,1006,1006,,,,,',
',1006,,,1006,1006,1006,,1006,1006,,,1006,1006,1011,1011,1011,1011,1011',
'1011,,,,1011,1011,,,,1011,,1011,1011,1011,1011,1011,1011,1011,,,,,,1011',
'1011,1011,1011,1011,1011,1011,,,1011,,,,,,1011,1011,1011,1011,1011,1011',
'1011,1011,1011,1011,1011,1011,,1011,1011,1011,,1011,1011,,1011,1011',
'1011,515,515,515,515,515,515,515,,,515,515,,,,,,515,515,,1011,,,1011',
',,1011,1011,,,1011,,1011,515,,515,1011,515,515,515,515,515,515,515,1011',
'515,,,,1011,1011,1011,1011,1011,1011,,,,1011,1011,,,,,,,1011,,,1011',
'1011,1011,,1011,1011,,,1011,1011,1012,1012,1012,1012,1012,1012,,,,1012',
'1012,,,,1012,,1012,1012,1012,1012,1012,1012,1012,,,,,,1012,1012,1012',
'1012,1012,1012,1012,,,1012,,,,,,1012,1012,1012,1012,1012,1012,1012,1012',
'1012,1012,1012,1012,,1012,1012,1012,,1012,1012,,1012,1012,1012,516,516',
'516,516,516,516,516,,,516,516,,,,,,516,516,,1012,,,1012,,,1012,1012',
',,1012,,1012,516,,516,1012,516,516,516,516,516,516,516,1012,516,,,,1012',
'1012,1012,1012,1012,1012,,,,1012,1012,,,,,,,1012,,,1012,1012,1012,,1012',
'1012,,,1012,1012,1077,1077,1077,1077,1077,1077,,,,1077,1077,,,,1077',
',1077,1077,1077,1077,1077,1077,1077,,,,,,1077,1077,1077,1077,1077,1077',
'1077,,,1077,,,,,,1077,1077,1077,1077,1077,1077,1077,1077,1077,1077,1077',
'1077,,1077,1077,1077,,1077,1077,,1077,1077,1077,517,517,517,517,517',
'517,517,,,517,517,,,,,,517,517,,1077,,,1077,,,1077,1077,,,1077,,1077',
'517,,517,1077,517,517,517,517,517,517,517,1077,517,,,,1077,1077,1077',
'1077,1077,1077,,,,1077,1077,,,,,,,1077,,,1077,1077,1077,,1077,1077,',
',1077,1077,1079,1079,1079,1079,1079,1079,,,,1079,1079,,,,1079,,1079',
'1079,1079,1079,1079,1079,1079,,,,,,1079,1079,1079,1079,1079,1079,1079',
',,1079,,,,,,1079,1079,1079,1079,1079,1079,1079,1079,1079,1079,1079,1079',
',1079,1079,1079,,1079,1079,,1079,1079,1079,520,520,520,520,520,520,520',
',,520,520,,,,,,520,520,,1079,,,1079,,,1079,1079,,,1079,,1079,520,,520',
'1079,520,520,520,520,520,520,520,1079,520,,,,1079,1079,1079,1079,1079',
'1079,,,,1079,1079,,,,,,,1079,,,1079,1079,1079,,1079,1079,,,1079,1079',
'1113,1113,1113,1113,1113,1113,,,,1113,1113,,,,1113,,1113,1113,1113,1113',
'1113,1113,1113,,,,,,1113,1113,1113,1113,1113,1113,1113,,,1113,,,,,,1113',
'1113,1113,1113,1113,1113,1113,1113,1113,1113,1113,1113,,1113,1113,1113',
',1113,1113,,1113,1113,1113,521,521,521,521,521,521,521,521,,521,521',
',,,,,521,521,,1113,,,1113,,,1113,1113,,,1113,,1113,521,,521,1113,521',
'521,521,521,521,521,521,1113,521,,,,1113,1113,1113,1113,1113,1113,,',
',1113,1113,,,,,,,1113,,,1113,1113,1113,,1113,1113,,,1113,1113,1160,1160',
'1160,1160,1160,1160,,,,1160,1160,,,,1160,,1160,1160,1160,1160,1160,1160',
'1160,,,,,,1160,1160,1160,1160,1160,1160,1160,,,1160,,,,,,1160,1160,1160',
'1160,1160,1160,1160,1160,1160,1160,1160,1160,,1160,1160,1160,,1160,1160',
',1160,1160,1160,523,,,,,,,,,,,,,,,,523,523,,1160,,,1160,,,1160,1160',
',,1160,,1160,523,,523,1160,523,523,523,523,,,523,1160,523,,,,1160,1160',
'1160,1160,1160,1160,,,,1160,1160,,,,,,,1160,,,1160,1160,1160,,1160,1160',
',,1160,1160,1173,1173,1173,1173,1173,1173,,,,1173,1173,,,,1173,,1173',
'1173,1173,1173,1173,1173,1173,,,,,,1173,1173,1173,1173,1173,1173,1173',
',,1173,,,,,,1173,1173,1173,1173,1173,1173,1173,1173,1173,1173,1173,1173',
',1173,1173,1173,,1173,1173,,1173,1173,1173,580,,,,,,,,,,,,,,,,580,580',
',1173,,,1173,,,1173,1173,,,1173,,1173,580,,580,1173,580,580,580,580',
',,580,1173,580,,,,1173,1173,1173,1173,1173,1173,,,,1173,1173,,,,,,,1173',
',,1173,1173,1173,,1173,1173,,,1173,1173,1183,1183,1183,1183,1183,1183',
',,,1183,1183,,,,1183,,1183,1183,1183,1183,1183,1183,1183,,,,,,1183,1183',
'1183,1183,1183,1183,1183,,,1183,,,,,,1183,1183,1183,1183,1183,1183,1183',
'1183,1183,1183,1183,1183,,1183,1183,1183,,1183,1183,,1183,1183,1183',
'509,,,,,,,,,,,,,,,,509,509,,1183,,,1183,,,1183,1183,,,1183,,1183,509',
',509,1183,509,509,509,509,,,,1183,,,,,1183,1183,1183,1183,1183,1183',
',,,1183,1183,,,,,,,1183,,,1183,1183,1183,,1183,1183,,,1183,1183,1221',
'1221,1221,1221,1221,1221,,,,1221,1221,,,,1221,,1221,1221,1221,1221,1221',
'1221,1221,,,,,,1221,1221,1221,1221,1221,1221,1221,,,1221,,,,,,1221,1221',
'1221,1221,1221,1221,1221,1221,1221,1221,1221,1221,,1221,1221,1221,,1221',
'1221,,1221,1221,1221,510,,,,,,,,,,,,,,,,510,510,,1221,,,1221,,,1221',
'1221,,,1221,,1221,510,,510,1221,510,510,510,510,,,,1221,,,,,1221,1221',
'1221,1221,1221,1221,,,,1221,1221,,,,,,,1221,,,1221,1221,1221,,1221,1221',
',,1221,1221,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8',
',,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,',
',,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,',
',8,8,8,,8,8,,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23',
',,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23',
'23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,',
'23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,31,23',
'23,,,23,23,31,31,31,,,31,31,31,822,31,822,822,822,822,822,,,31,31,31',
'31,,,,822,,,,,31,31,,31,31,31,31,31,,,,,,,,,,822,,,,,,,,,822,822,822',
'822,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31',
',,31,31,,31,822,31,,31,,31,31,31,31,31,31,31,,31,31,31,936,,936,936',
'936,936,936,,,,,,31,31,,31,936,31,32,,,,,,31,32,32,32,31,,32,32,32,',
'32,,,,936,,,,32,,32,32,,936,936,936,936,,,,32,32,,32,32,32,32,32,,,',
',,,,,,,,,,936,,,,,,,,936,,32,32,32,32,32,32,32,32,32,32,32,32,32,32',
',,32,32,32,,,32,,32,32,,,32,32,,32,,32,,32,,32,32,32,32,32,32,32,,32',
',32,,,,,,,,,,,,,32,32,,32,,32,33,33,33,,33,,32,,33,33,32,,,33,,33,33',
'33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33',
'33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33',
',,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,',
',,,,33,,33,33,33,33,,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34',
'34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34',
'34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34',
',,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,',
',,,,34,,34,34,34,34,,34,34,,,34,34,35,35,35,,35,,,,35,35,,,,35,,35,35',
'35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35',
'35,35,35,35,35,35,35,35,,35,35,,35,35,35,,,,,,,,,,,,,,,,,,,,35,,,35',
',,35,35,,,35,,35,,35,,35,,,,,,,,35,,,,,35,35,35,35,35,35,,,,35,35,,',
',,,,35,,35,35,35,35,,35,35,,,35,35,45,45,45,,45,,,,45,45,,,,45,,45,45',
'45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45',
'45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,',
'45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45',
',,45,45,45,,45,45,,,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46',
'46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46',
'46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46',
',,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46',
',46,46,,,46,46,48,48,48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,',
',,48,48,48,48,48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48',
'48,,48,48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48',
',,,,,,,48,,,,,48,48,48,48,48,48,,,,48,48,,,,,,,48,,,48,48,48,,48,48',
',,48,48,49,49,49,,49,,,,49,49,,,,49,,49,49,49,49,49,49,49,,,,,,49,49',
'49,49,49,49,49,,,49,,,,,,,49,,,49,49,49,49,49,49,49,49,,49,49,49,,49',
'49,,49,49,49,,,,,,,,,,,,,,,,,,,,49,,,49,,,49,49,,,49,,,,,,49,,,,,,,',
'49,,,,,49,49,49,49,49,49,,,,49,49,,,,,,,49,,,49,49,49,,49,49,,,49,49',
'51,51,51,,51,,,,51,51,,,,51,,51,51,51,51,51,51,51,,,,,,51,51,51,51,51',
'51,51,,,51,,,,,,,51,,,51,51,51,51,51,51,51,51,,51,51,51,,51,51,,51,51',
'51,,,,,,,,,,,,,,,,,,,,51,,,51,,,51,51,,,51,,,,,,51,,,,,,,,51,,,,,51',
'51,51,51,51,51,,,,51,51,,,,,,,51,,,51,51,51,65,51,51,,,51,51,65,65,65',
',,65,65,65,1087,65,1087,1087,1087,1087,1087,,,65,,65,65,65,,,1087,734',
'734,734,734,65,65,,65,65,65,65,65,,,,,734,734,734,,,1087,,,,,,,,734',
'734,,1087,1087,734,65,65,65,65,65,65,65,65,65,65,65,65,65,65,,,65,65',
'65,,,65,,,65,,,65,65,,65,1087,65,,65,,65,65,65,65,65,65,65,,65,,65,',
'734,734,734,734,734,734,,,,734,734,65,65,65,65,,65,734,65,,734,734,734',
'65,734,734,475,65,67,67,67,67,67,475,475,475,67,67,475,475,475,67,475',
'67,67,67,67,67,67,67,475,475,475,475,,67,67,67,67,67,67,67,475,475,67',
'475,475,475,475,475,67,67,,67,67,67,67,67,67,67,67,67,,67,67,67,,67',
'67,,67,67,67,475,475,475,475,475,475,475,475,475,475,475,475,475,475',
',,475,475,475,67,,475,67,475,475,67,67,475,475,67,475,67,475,,475,67',
'475,475,475,475,475,475,475,67,475,475,475,,67,67,67,67,67,67,,,,67',
'67,475,475,,475,,475,67,,,67,67,67,475,67,67,,475,67,67,72,72,72,,72',
',,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72',
',,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,72,72,72,,,,,,',
',,,,,,,,,,,,,72,,,72,,,72,72,,,72,,,,,,72,,,,,,,,72,,,,,72,72,72,72',
'72,72,,,,72,72,,,,,,,72,,,72,72,72,,72,72,,,72,72,73,73,73,,73,,,,73',
'73,,,,73,,73,73,73,73,73,73,73,,,,,,73,73,73,73,73,73,73,,,73,,,,,,',
'73,,,73,73,73,73,73,73,73,73,,73,73,73,,73,73,,73,73,73,,,,,,,,,,,,',
',,,,,,,73,,,73,,,73,73,,,73,,,,,,73,,,,,,,,73,,,,,73,73,73,73,73,73',
',,,73,73,,,,,,,73,,,73,73,73,,73,73,,,73,73,76,76,76,,76,,,,76,76,,',
',76,,76,76,76,76,76,76,76,,,,,,76,76,76,76,76,76,76,,,76,,,,,,,76,,',
'76,76,76,76,76,76,76,76,,76,76,76,,76,76,,76,76,76,,,,,,,,,,,,,,,,,',
',,76,,,76,,,76,76,,,76,,,,,,76,,,,,,,,76,,,,,76,76,76,76,76,76,,,,76',
'76,76,,,,,76,76,,,76,76,76,,76,76,,,76,76,132,132,132,132,132,,,,132',
'132,,,,132,,132,132,132,132,132,132,132,,,,,,132,132,132,132,132,132',
'132,,,132,,,,,,132,132,132,132,132,132,132,132,132,132,132,132,,132',
'132,132,,132,132,,132,132,132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132',
',,132,,132,,,,132,,,,,,,,132,,,,,132,132,132,132,132,132,,,,132,132',
',,,,,132,132,,,132,132,132,,132,132,,,132,132,137,137,137,,137,,,,137',
'137,,,,137,,137,137,137,137,137,137,137,,,,,,137,137,137,137,137,137',
'137,,,137,,,,,,,137,,,137,137,137,137,137,137,137,137,,137,137,137,',
'137,137,,137,137,137,,,,,,,,,,,,,,,,,,,,137,,,137,,,137,137,,,137,,',
',,,137,,,,,,,,137,,,,,137,137,137,137,137,137,,,,137,137,,,,,,,137,',
',137,137,137,,137,137,,,137,137,138,138,138,,138,,,,138,138,,,,138,',
'138,138,138,138,138,138,138,,,,,,138,138,138,138,138,138,138,,,138,',
',,,,,138,,,138,138,138,138,138,138,138,138,,138,138,138,,138,138,,138',
'138,138,,,,,,,,,,,,,,,,,,,,138,,,138,,,138,138,,,138,,,,,,138,,,,,,',
',138,,,,,138,138,138,138,138,138,,,,138,138,,,,,,,138,,,138,138,138',
',138,138,,,138,138,139,139,139,,139,,,,139,139,,,,139,,139,139,139,139',
'139,139,139,,,,,,139,139,139,139,139,139,139,,,139,,,,,,,139,,,139,139',
'139,139,139,139,139,139,,139,139,139,,139,139,,139,139,139,,,,,,,,,',
',,,,,,,,,,139,,,139,,,139,139,,,139,,,,,,139,,,,,,,,139,,,,,139,139',
'139,139,139,139,,,,139,139,,,,,,,139,,,139,139,139,,139,139,,,139,139',
'140,140,140,,140,,,,140,140,,,,140,,140,140,140,140,140,140,140,,,,',
',140,140,140,140,140,140,140,,,140,,,,,,,140,,,140,140,140,140,140,140',
'140,140,,140,140,140,,140,140,,140,140,140,,,,,,,,,,,,,,,,,,,,140,,',
'140,,,140,140,,,140,,,,,,140,,,,,,,,140,,,,,140,140,140,140,140,140',
',,,140,140,,,,,,,140,,,140,140,140,,140,140,,,140,140,141,141,141,141',
'141,,,,141,141,,,,141,,141,141,141,141,141,141,141,,,,,,141,141,141',
'141,141,141,141,,,141,,,,,,141,141,,141,141,141,141,141,141,141,141',
'141,,141,141,141,,141,141,,141,141,141,,,,,,,,,,,,,,,,,,,,141,,,141',
',,141,141,,,141,,141,,,,141,,,,,,,,141,,,,,141,141,141,141,141,141,',
',,141,141,,,,,,,141,,,141,141,141,,141,141,,,141,141,226,226,226,,226',
',,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226,226,226',
'226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226',
'226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226',
',226,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,',
'226,,,226,226,226,,226,226,,,226,226,227,227,227,,227,,,,227,227,,,',
'227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,',
'227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,,227,227',
',227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,227,,,,227',
',,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,,,227,227',
'227,,227,227,,,227,227,228,228,228,,228,,,,228,228,,,,228,,228,228,228',
'228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228',
'228,228,228,228,228,228,228,,228,228,228,,228,228,,228,228,228,,,,,',
',,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228,,,,,228',
'228,228,228,228,228,,,,228,228,,,,,,,228,,,228,228,228,,228,228,,,228',
'228,229,229,229,,229,,,,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229',
'229,229,229,,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229',
',,,229,229,,,,,,,229,,,229,229,229,,229,229,,,229,229,230,230,230,,230',
',,,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230',
'230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230,230',
'230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230',
',,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,,,,,,,230',
',,230,230,230,,230,230,,,230,230,231,231,231,,231,,,,231,231,,,,231',
',231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231',
',,,,,,231,,,231,231,231,231,231,231,231,231,231,231,231,231,,231,231',
',231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,231,,231',
',231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,,,,,,,231,,231',
'231,231,231,,231,231,,,231,231,236,236,236,,236,,,,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236',
',,,,236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,236',
'236,,,236,236,237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237',
'237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237',
'237,237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,',
',,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237',
'237,237,237,,,,237,237,,,,,,,237,,,237,237,237,,237,237,,,237,237,238',
'238,238,,238,,,,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238',
'238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238',
'238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238',
',,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238',
'238,238,,,,,,238,,,238,238,238,,238,238,,,238,238,249,249,249,,249,',
',,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,',
',,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249',
',,249,249,249,,249,249,,,249,249,254,254,254,,254,,,,254,254,,,,254',
',254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254',
',,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,,254',
'254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,',
',254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254',
',254,254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255',
'255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255',
'255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,',
',,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255',
'255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,255,255,,,255,255',
'256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,',
',256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256',
'256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,',
'256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256',
',,,256,256,,,,,,,256,,,256,256,256,,256,256,,,256,256,257,257,257,,257',
',,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257',
'257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257',
'257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257',
',,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257',
',,257,257,257,,257,257,,,257,257,258,258,258,,258,,,,258,258,,,,258',
',258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258',
',,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,,258',
'258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,',
',258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258',
',258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259,259,259',
'259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259',
'259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,,,,,',
',,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259',
'259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,259,259,,,259,259',
'260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260,,,,',
',260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260',
'260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,',
'260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260',
',,,260,260,,,,,,,260,,,260,260,260,,260,260,,,260,260,261,261,261,,261',
',,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261,261',
'261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261',
'261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261',
',,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261',
',,261,261,261,,261,261,,,261,261,262,262,262,,262,,,,262,262,,,,262',
',262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262',
',,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,,262',
'262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,',
',262,,,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262,262',
',262,262,,,262,262,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263',
'263,263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263',
'263,263,263,263,263,263,,263,263,263,,263,263,,263,263,263,,,,,,,,,',
',,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263',
'263,263,263,263,,,,263,263,,,,,,,263,,,263,263,263,,263,263,,,263,263',
'264,264,264,,264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,',
',264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264',
'264,264,,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,',
'264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264',
',,,264,264,,,,,,,264,,,264,264,264,,264,264,,,264,264,265,265,265,,265',
',,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265',
'265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265',
'265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265',
',,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,,,,,265',
',,265,265,265,,265,265,,,265,265,266,266,266,,266,,,,266,266,,,,266',
',266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266',
',,,,,,266,,,266,266,266,266,266,266,266,266,,266,266,266,,266,266,,266',
'266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,',
',266,,,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,,,266,266,266',
',266,266,,,266,266,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267',
'267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267',
'267,267,267,267,267,267,,267,267,267,,267,267,,267,267,267,,,,,,,,,',
',,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267,267',
'267,267,267,267,,,,267,267,,,,,,,267,,,267,267,267,,267,267,,,267,267',
'268,268,268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268,,,,',
',268,268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268',
'268,268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,',
'268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268',
',,,268,268,,,,,,,268,,,268,268,268,,268,268,,,268,268,269,269,269,,269',
',,,269,269,,,,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269',
'269,269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269,269',
'269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269',
',,,,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,,,,,269',
',,269,269,269,,269,269,,,269,269,270,270,270,,270,,,,270,270,,,,270',
',270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270,,,270',
',,,,,,270,,,270,270,270,270,270,270,270,270,,270,270,270,,270,270,,270',
'270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,,,,,,',
',270,,,,,270,270,270,270,270,270,,,,270,270,,,,,,,270,,,270,270,270',
',270,270,,,270,270,271,271,271,,271,,,,271,271,,,,271,,271,271,271,271',
'271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271,271',
'271,271,271,271,271,271,,271,271,271,,271,271,,271,271,271,,,,,,,,,',
',,,,,,,,,,271,,,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,,,271,271',
'271,271,271,271,,,,271,271,,,,,,,271,,,271,271,271,,271,271,,,271,271',
'272,272,272,,272,,,,272,272,,,,272,,272,272,272,272,272,272,272,,,,',
',272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272,272',
'272,272,,272,272,272,,272,272,,272,272,272,,,,,,,,,,,,,,,,,,,,272,,',
'272,,,272,272,,,272,,,,,,272,,,,,,,,272,,,,,272,272,272,272,272,272',
',,,272,272,,,,,,,272,,,272,272,272,,272,272,,,272,272,273,273,273,,273',
',,,273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273,273,273',
'273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273,,273,273',
'273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273',
',,,,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,,,,,273',
',,273,273,273,,273,273,,,273,273,274,274,274,,274,,,,274,274,,,,274',
',274,274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274',
',,,,,,274,,,274,274,274,274,274,274,274,274,,274,274,274,,274,274,,274',
'274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,,,,,274,,,,,,',
',274,,,,,274,274,274,274,274,274,,,,274,274,,,,,,,274,,,274,274,274',
',274,274,,,274,274,275,275,275,,275,,,,275,275,,,,275,,275,275,275,275',
'275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275,275',
'275,275,275,275,275,275,,275,275,275,,275,275,,275,275,275,,,,,,,,,',
',,,,,,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,,,275,,,,,275,275',
'275,275,275,275,,,,275,275,,,,,,,275,,,275,275,275,,275,275,,,275,275',
'280,280,280,,280,,,,280,280,,,,280,,280,280,280,280,280,280,280,,,,',
',280,280,280,280,280,280,280,,,280,,,,,,,280,,,280,280,280,280,280,280',
'280,280,,280,280,280,,280,280,,280,280,280,,,,,,,,,,,,,,,,,,,,280,,',
'280,,,280,280,,,280,,,,,,280,,,,,,,,280,,,,,280,280,280,280,280,280',
',,,280,280,,,,,,,280,,,280,280,280,,280,280,,,280,280,304,304,304,,304',
',,,304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304',
'304,304,304,,,304,,,,,,,304,,,304,304,304,304,304,304,304,304,304,304',
'304,304,,304,304,,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304',
',,304,,304,,304,,304,,,,,,,,304,,,,,304,304,304,304,304,304,,,,304,304',
',,,,,,304,,304,304,304,304,,304,304,,,304,304,305,305,305,,305,,,,305',
'305,,,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305',
'305,,,305,,,,,,,305,,,305,305,305,305,305,305,305,305,305,305,305,305',
',305,305,,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305,,,305,305,,,305,',
'305,,305,,305,,,,,,,,305,,,,,305,305,305,305,305,305,,,,305,305,,,,',
',,305,,305,305,305,305,,305,305,,,305,305,314,314,314,,314,,,,314,314',
',,,314,,314,314,314,314,314,314,314,,,,,,314,314,314,314,314,314,314',
',,314,,,,,,,314,,,314,314,314,314,314,314,314,314,314,314,314,314,,314',
'314,,314,314,314,,,,,,,,,,,,,,,,,,,,314,,,314,,,314,314,,,314,,314,',
'314,,314,,,,,,,,314,,,,,314,314,314,314,314,314,,,,314,314,314,,,,,',
'314,,314,314,314,314,,314,314,,,314,314,321,321,321,,321,,,,321,321',
',,,321,,321,321,321,321,321,321,321,,,,,,321,321,321,321,321,321,321',
',,321,,,,,,,321,,,321,321,321,321,321,321,321,321,,321,321,321,,321',
'321,,321,321,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,,,,,321',
',,,,,,,321,,,,,321,321,321,321,321,321,,,,321,321,,,,,,,321,,,321,321',
'321,,321,321,,,321,321,323,323,323,,323,,,,323,323,,,,323,,323,323,323',
'323,323,323,323,,,,,,323,323,323,323,323,323,323,,,323,,,,,,,323,,,323',
'323,323,323,323,323,323,323,,323,323,323,,323,323,,323,323,323,,,,,',
',,,,,,,,,,,,,,323,,,323,,,323,323,,,323,,,,,,323,,,,,,,,323,,,,,323',
'323,323,323,323,323,,,,323,323,,,,,,,323,,,323,323,323,,323,323,,,323',
'323,326,326,326,,326,,,,326,326,,,,326,,326,326,326,326,326,326,326',
',,,,,326,326,326,326,326,326,326,,,326,,,,,,,326,,,326,326,326,326,326',
'326,326,326,,326,326,326,,326,326,,326,326,326,,,,,,,,,,,,,,,,,,,,326',
',,326,,,326,326,,,326,,,,,,326,,,,,,,,326,,,,,326,326,326,326,326,326',
',,,326,326,,,,,,,326,,,326,326,326,,326,326,,,326,326,327,327,327,,327',
',,,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327,327,327,327',
'327,327,327,,,327,,,,,,,327,,,327,327,327,327,327,327,327,327,,327,327',
'327,,327,327,,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,,327',
',,,,,327,,,,,,,,327,,,,,327,327,327,327,327,327,,,,327,327,,,,,,,327',
',,327,327,327,,327,327,,,327,327,333,333,333,333,333,,,,333,333,,,,333',
',333,333,333,333,333,333,333,,,,,,333,333,333,333,333,333,333,,,333',
',,,,,333,333,,333,333,333,333,333,333,333,333,333,,333,333,333,,333',
'333,,333,333,333,,,,,,,,,,,,,,,,,,,,333,,,333,,,333,333,,,333,,333,',
',,333,,,,,,,,333,,,,,333,333,333,333,333,333,,,,333,333,,,,,,,333,,',
'333,333,333,,333,333,,,333,333,369,369,369,,369,,,,369,369,,,,369,,369',
'369,369,369,369,369,369,,,,,,369,369,369,369,369,369,369,,,369,,,,,',
',369,,,369,369,369,369,369,369,369,369,,369,369,369,,369,369,,369,369',
'369,,,,,,,,,,,,,,,,,,,,369,,,369,,,369,369,,,369,,,,,,369,,,,,,,,369',
',,,,369,369,369,369,369,369,,,,369,369,,,,,,,369,,,369,369,369,,369',
'369,,,369,369,371,371,371,,371,,,,371,371,,,,371,,371,371,371,371,371',
'371,371,,,,,,371,371,371,371,371,371,371,,,371,,,,,,,371,,,371,371,371',
'371,371,371,371,371,,371,371,371,,371,371,,371,371,371,,,,,,,,,,,,,',
',,,,,,371,,,371,371,,371,371,,,371,,,,,,371,,,,,,,,371,,,,,371,371,371',
'371,371,371,,,,371,371,,,,,,,371,,,371,371,371,,371,371,,,371,371,383',
'383,383,,383,,,,383,383,,,,383,,383,383,383,383,383,383,383,,,,,,383',
'383,383,383,383,383,383,,,383,,,,,,,383,,,383,383,383,383,383,383,383',
'383,383,383,383,383,,383,383,,383,383,383,,,,,,,,,,,,,,,,,,,,383,,,383',
',,383,383,,,383,,383,,,,383,,,,,,,,383,,,,,383,383,383,383,383,383,',
',,383,383,,,,,,,383,,383,383,383,383,,383,383,,,383,383,384,384,384',
',384,,,,384,384,,,,384,,384,384,384,384,384,384,384,,,,,,384,384,384',
'384,384,384,384,,,384,,,,,,,384,,,384,384,384,384,384,384,384,384,384',
'384,384,384,,384,384,,384,384,384,,,,,,,,,,,,,,,,,,,,384,,,384,,,384',
'384,,,384,,,,,,384,,,,,,,,384,,,,,384,384,384,384,384,384,,,,384,384',
',,,,,,384,,384,384,384,384,,384,384,,,384,384,389,389,389,,389,,,,389',
'389,,,,389,,389,389,389,389,389,389,389,,,,,,389,389,389,389,389,389',
'389,,,389,,,,,,,389,,,389,389,389,389,389,389,389,389,,389,389,389,',
'389,389,,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389,389,,,389,,',
',,,389,,,,,,,,389,,,,,389,389,389,389,389,389,,,,389,389,,,,,,,389,',
',389,389,389,,389,389,,,389,389,450,450,450,,450,,,,450,450,,,,450,',
'450,450,450,450,450,450,450,,,,,,450,450,450,450,450,450,450,,,450,',
',,,,,450,,,450,450,450,450,450,450,450,450,,450,450,450,,450,450,,450',
'450,450,,,,,,,,,,,,,,,,,,,,450,,,450,,,450,450,,,450,,,,,,450,,,,,,',
',450,,,,,450,450,450,450,450,450,,,,450,450,,,,,,,450,,,450,450,450',
'484,450,450,,,450,450,484,484,484,,,484,484,484,1085,484,1085,1085,1085',
'1085,1085,,,484,484,484,484,484,,,1085,,,,,484,484,,484,484,484,484',
'484,,,,,,,,,,1085,,,,,,,,,1085,1085,1085,1085,,484,484,484,484,484,484',
'484,484,484,484,484,484,484,484,,,484,484,484,,,484,,,484,,,484,484',
',484,1085,484,,484,,484,484,484,484,484,484,484,,484,484,484,1090,,1090',
'1090,1090,1090,1090,,,,,,484,484,484,484,1090,484,485,484,,,,,484,485',
'485,485,484,,485,485,485,,485,,,,1090,,,,485,485,485,485,485,,,1090',
'1090,,,,485,485,,485,485,485,485,485,,,,,,,,,,,,,,,,,,,,,,1090,,485',
'485,485,485,485,485,485,485,485,485,485,485,485,485,,,485,485,485,,',
'485,,,485,,,485,485,,485,,485,,485,,485,485,485,485,485,485,485,,485',
'485,485,,,,,,,,,,,,,485,485,485,485,,485,,485,,494,494,494,485,494,',
',485,494,494,,,,494,,494,494,494,494,494,494,494,,,,,,494,494,494,494',
'494,494,494,,,494,,,,,,,494,,,494,494,494,494,494,494,494,494,494,494',
'494,494,,494,494,,494,494,494,,,,,,,,,,,,,,,,,,,,494,,,494,,,494,494',
',,494,,494,,494,,494,,,,,,,,494,,,,,494,494,494,494,494,494,,,,494,494',
',,,,,,494,,494,494,494,494,,494,494,,,494,494,496,496,496,,496,,,,496',
'496,,,,496,,496,496,496,496,496,496,496,,,,,,496,496,496,496,496,496',
'496,,,496,,,,,,,496,,,496,496,496,496,496,496,496,496,,496,496,496,',
'496,496,,496,496,496,,,,,,,,,,,,,,,,,,,,496,,,496,,,496,496,,,496,,',
',,,496,,,,,,,,496,,,,,496,496,496,496,496,496,,,,496,496,,,,,,,496,',
',496,496,496,,496,496,,,496,496,497,497,497,,497,,,,497,497,,,,497,',
'497,497,497,497,497,497,497,,,,,,497,497,497,497,497,497,497,,,497,',
',,,,,497,,,497,497,497,497,497,497,497,497,,497,497,497,,497,497,,497',
'497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,,,,,497,,,,,,',
',497,,,,,497,497,497,497,497,497,,,,497,497,,,,,,,497,,,497,497,497',
',497,497,,,497,497,498,498,498,,498,,,,498,498,,,,498,,498,498,498,498',
'498,498,498,,,,,,498,498,498,498,498,498,498,,,498,,,,,,,498,,,498,498',
'498,498,498,498,498,498,,498,498,498,,498,498,,498,498,498,,,,,,,,,',
',,,,,,,,,,498,,,498,,,498,498,,,498,,,,,,498,,,,,,,,498,,,,,498,498',
'498,498,498,498,,,,498,498,,,,,,,498,,,498,498,498,,498,498,,,498,498',
'527,527,527,,527,,,,527,527,,,,527,,527,527,527,527,527,527,527,,,,',
',527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527,527,527,527',
'527,527,,527,527,527,,527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,',
'527,,,527,527,,,527,,,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527',
',,,527,527,,,,,,,527,,,527,527,527,530,527,527,,,527,527,530,530,530',
',,530,530,530,,530,924,924,924,924,,,,530,530,530,,,,,,,924,924,924',
'530,530,,530,530,530,530,530,,,924,924,,,,924,,,,,,1092,,1092,1092,1092',
'1092,1092,,,,,,,,,,1092,,,,,530,,,,,,,530,,,,,530,530,,,,1092,,,,,924',
'924,924,924,924,924,1092,1092,,924,924,,530,530,,,,924,,,924,924,924',
',924,924,530,,535,535,535,530,535,,,,535,535,530,,1092,535,530,535,535',
'535,535,535,535,535,,,,,,535,535,535,535,535,535,535,,,535,,,,,,,535',
',,535,535,535,535,535,535,535,535,,535,535,535,,535,535,,535,535,535',
',,,,,,,,,,,,,,,,,,,535,,,535,,,535,535,,,535,,,,,,535,,,,,,,,535,,,',
',535,535,535,535,535,535,,,,535,535,,,,,,,535,,,535,535,535,,535,535',
',,535,535,545,545,545,,545,,,,545,545,,,,545,,545,545,545,545,545,545',
'545,,,,,,545,545,545,545,545,545,545,,,545,,,,,,,545,,,545,545,545,545',
'545,545,545,545,545,545,545,545,,545,545,,545,545,545,,,,,,,,,,,,,,',
',,,,,545,,,545,,,545,545,,,545,,545,,545,,545,,,,,,,,545,,,,,545,545',
'545,545,545,545,,,,545,545,,,,,,,545,,545,545,545,545,,545,545,,,545',
'545,548,548,548,,548,,,,548,548,,,,548,,548,548,548,548,548,548,548',
',,,,,548,548,548,548,548,548,548,,,548,,,,,,,548,,,548,548,548,548,548',
'548,548,548,548,548,548,548,,548,548,,548,548,548,,,,,,,,,,,,,,,,,,',
',548,,,548,,,548,548,,,548,,,,548,,548,,,,,,,,548,,,,,548,548,548,548',
'548,548,,,,548,548,,,,,,,548,,548,548,548,548,,548,548,,,548,548,550',
'550,550,,550,,,,550,550,,,,550,,550,550,550,550,550,550,550,,,,,,550',
'550,550,550,550,550,550,,,550,,,,,,,550,,,550,550,550,550,550,550,550',
'550,,550,550,550,,550,550,,550,550,550,,,,,,,,,,,,,,,,,,,,550,,,550',
',,550,550,,,550,,,,,,550,,,,,,,,550,,,,,550,550,550,550,550,550,,,,550',
'550,,,,,,,550,,,550,550,550,,550,550,,,550,550,556,556,556,556,556,',
',,556,556,,,,556,,556,556,556,556,556,556,556,,,,,,556,556,556,556,556',
'556,556,,,556,,,,,,556,556,556,556,556,556,556,556,556,556,556,556,',
'556,556,556,,556,556,,556,556,556,,,,,,,,,,,,,,,,,,,,556,,,556,,,556',
'556,,,556,,556,,,,556,,,,,,,,556,,,,,556,556,556,556,556,556,,,,556',
'556,,,,,,556,556,,,556,556,556,,556,556,,,556,556,566,566,566,,566,',
',,566,566,,,,566,,566,566,566,566,566,566,566,,,,,,566,566,566,566,566',
'566,566,,,566,,,,,,,566,,,566,566,566,566,566,566,566,566,566,566,566',
'566,,566,566,,566,566,566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,,566',
',566,,566,,566,,,,,,,,566,,,,,566,566,566,566,566,566,,,,566,566,,,',
',,,566,,566,566,566,566,,566,566,,,566,566,576,576,576,,576,,,,576,576',
',,,576,,576,576,576,576,576,576,576,,,,,,576,576,576,576,576,576,576',
',,576,,,,,,,576,,,576,576,576,576,576,576,576,576,,576,576,576,,576',
'576,,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576,,,576,576,,,576,,,,,,576',
',,,,,,,576,,,,,576,576,576,576,576,576,,,,576,576,,,,,,,576,,,576,576',
'576,,576,576,,,576,576,579,579,579,,579,,,,579,579,,,,579,,579,579,579',
'579,579,579,579,,,,,,579,579,579,579,579,579,579,,,579,,,,,,,579,,,579',
'579,579,579,579,579,579,579,,579,579,579,,579,579,,579,579,579,,,,,',
',,,,,,,,,,,,,,579,,,579,,,579,579,,,579,,,,,,579,,,,,,,,579,,,,,579',
'579,579,579,579,579,,,,579,579,,,,,,,579,,,579,579,579,,579,579,,,579',
'579,582,582,582,,582,,,,582,582,,,,582,,582,582,582,582,582,582,582',
',,,,,582,582,582,582,582,582,582,,,582,,,,,,,582,,,582,582,582,582,582',
'582,582,582,,582,582,582,,582,582,,582,582,582,,,,,,,,,,,,,,,,,,,,582',
',,582,,,582,582,,,582,,,,,,582,,,,,,,,582,,,,,582,582,582,582,582,582',
',,,582,582,,,,,,,582,,,582,582,582,,582,582,,,582,582,583,583,583,,583',
',,,583,583,,,,583,,583,583,583,583,583,583,583,,,,,,583,583,583,583',
'583,583,583,,,583,,,,,,,583,,,583,583,583,583,583,583,583,583,,583,583',
'583,,583,583,,583,583,583,,,,,,,,,,,,,,,,,,,,583,,,583,,,583,583,,,583',
',,,,,583,,,,,,,,583,,,,,583,583,583,583,583,583,,,,583,583,,,,,,,583',
',,583,583,583,,583,583,,,583,583,609,609,609,,609,,,,609,609,,,,609',
',609,609,609,609,609,609,609,,,,,,609,609,609,609,609,609,609,,,609',
',,,,,,609,,,609,609,609,609,609,609,609,609,,609,609,609,,609,609,,609',
'609,609,,,,,,,,,,,,,,,,,,,,609,,,609,,,609,609,,,609,,,,,,609,,,,,,',
',609,,,,,609,609,609,609,609,609,,,,609,609,,,,,,,609,,,609,609,609',
',609,609,,,609,609,623,623,623,,623,,,,623,623,,,,623,,623,623,623,623',
'623,623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,,623,,,623,623',
'623,623,623,623,623,623,,623,623,623,,623,623,,623,623,623,,,,,,,,,',
',,,,,,,,,,623,,,623,,,623,623,,,623,,,,,,623,,,,,,,,623,,,,,623,623',
'623,623,623,623,,,,623,623,,,,,,,623,,,623,623,623,,623,623,,,623,623',
'647,647,647,,647,,,,647,647,,,,647,,647,647,647,647,647,647,647,,,,',
',647,647,647,647,647,647,647,,,647,,,,,,,647,,,647,647,647,647,647,647',
'647,647,647,647,647,647,,647,647,,647,647,647,,,,,,,,,,,,,,,,,,,,647',
',,647,,,647,647,,,647,,647,,647,,647,,,,,,,,647,,,,,647,647,647,647',
'647,647,,,,647,647,,,,,,,647,,647,647,647,647,,647,647,,,647,647,659',
'659,659,,659,,,,659,659,,,,659,,659,659,659,659,659,659,659,,,,,,659',
'659,659,659,659,659,659,,,659,,,,,,,659,,,659,659,659,659,659,659,659',
'659,,659,659,659,,659,659,,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659',
',,659,659,,,659,,,,,,659,,,,,,,,659,,,,,659,659,659,659,659,659,,,,659',
'659,,,,,,,659,,,659,659,659,,659,659,,,659,659,691,691,691,691,691,',
',,691,691,,,,691,,691,691,691,691,691,691,691,,,,,,691,691,691,691,691',
'691,691,,,691,,,,,,691,691,,691,691,691,691,691,691,691,691,691,,691',
'691,691,,691,691,,691,691,691,,,,,,,,,,,,,,,,,,,,691,,,691,,,691,691',
',,691,,691,,,,691,,,,,,,,691,,,,,691,691,691,691,691,691,,,,691,691',
',,,,,,691,,,691,691,691,,691,691,,,691,691,693,693,693,,693,,,,693,693',
',,,693,,693,693,693,693,693,693,693,,,,,,693,693,693,693,693,693,693',
',,693,,,,,,,693,,,693,693,693,693,693,693,693,693,,693,693,693,,693',
'693,,693,693,693,,,,,,,,,,,,,,,,,,,,693,,,693,,,693,693,,,693,,693,',
',,693,,,,,,,,693,,,,,693,693,693,693,693,693,,,,693,693,,,,,,,693,,',
'693,693,693,,693,693,,,693,693,694,694,694,,694,,,,694,694,,,,694,,694',
'694,694,694,694,694,694,,,,,,694,694,694,694,694,694,694,,,694,,,,,',
',694,,,694,694,694,694,694,694,694,694,,694,694,694,,694,694,,694,694',
'694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,,,,,694,,,,,,,,694',
',,,,694,694,694,694,694,694,,,,694,694,,,,,,,694,,,694,694,694,,694',
'694,,,694,694,695,695,695,,695,,,,695,695,,,,695,,695,695,695,695,695',
'695,695,,,,,,695,695,695,695,695,695,695,,,695,,,,,,,695,,,695,695,695',
'695,695,695,695,695,695,695,695,695,,695,695,,695,695,695,,,,,,,,,,',
',,,,,,,,,695,,,695,,,695,695,,,695,,695,,695,,695,,,,,,,,695,,,,,695',
'695,695,695,695,695,,,,695,695,,,,,,,695,,695,695,695,695,,695,695,',
',695,695,698,698,698,698,698,,,,698,698,,,,698,,698,698,698,698,698',
'698,698,,,,,,698,698,698,698,698,698,698,,,698,,,,,,698,698,,698,698',
'698,698,698,698,698,698,698,,698,698,698,,698,698,,698,698,698,,,,,',
',,,,,,,,,,,,,,698,,,698,,,698,698,,,698,,698,,,,698,,,,,,,,698,,,,,698',
'698,698,698,698,698,,,,698,698,,,,,,,698,,,698,698,698,,698,698,,,698',
'698,699,699,699,,699,,,,699,699,,,,699,,699,699,699,699,699,699,699',
',,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699,699,699,699,699',
'699,699,699,,699,699,699,,699,699,,699,699,699,,,,,,,,,,,,,,,,,,,,699',
',,699,,,699,699,,,699,,,,,,699,,,,,,,,699,,,,,699,699,699,699,699,699',
',,,699,699,,,,,,,699,,,699,699,699,,699,699,,,699,699,702,702,702,,702',
',,,702,702,,,,702,,702,702,702,702,702,702,702,,,,,,702,702,702,702',
'702,702,702,,,702,,,,,,,702,,,702,702,702,702,702,702,702,702,702,702',
'702,702,,702,702,,702,702,702,,,,,,,,,,,,,,,,,,,,702,,,702,,,702,702',
',,702,,702,,702,,702,,,,,,,,702,,,,,702,702,702,702,702,702,,,,702,702',
',,,,,,702,,702,702,702,702,,702,702,,,702,702,703,703,703,,703,,,,703',
'703,,,,703,,703,703,703,703,703,703,703,,,,,,703,703,703,703,703,703',
'703,,,703,,,,,,,703,,,703,703,703,703,703,703,703,703,703,703,703,703',
',703,703,,703,703,703,,,,,,,,,,,,,,,,,,,,703,,,703,,,703,703,,,703,',
',,703,,703,,,,,,,,703,,,,,703,703,703,703,703,703,,,,703,703,,,,,,,703',
',703,703,703,703,,703,703,,,703,703,704,704,704,,704,,,,704,704,,,,704',
',704,704,704,704,704,704,704,,,,,,704,704,704,704,704,704,704,,,704',
',,,,,,704,,,704,704,704,704,704,704,704,704,,704,704,704,,704,704,,704',
'704,704,,,,,,,,,,,,,,,,,,,,704,,,704,,,704,704,,,704,,,,,,704,,,,,,',
',704,,,,,704,704,704,704,704,704,,,,704,704,,,,,,,704,,,704,704,704',
',704,704,,,704,704,705,705,705,,705,,,,705,705,,,,705,,705,705,705,705',
'705,705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705,,,705,705',
'705,705,705,705,705,705,,705,705,705,,705,705,,705,705,705,,,,,,,,,',
',,,,,,,,,,705,,,705,,,705,705,,,705,,,,,,705,,,,,,,,705,,,,,705,705',
'705,705,705,705,,,,705,705,,,,,,,705,,,705,705,705,,705,705,,,705,705',
'710,710,710,,710,,,,710,710,,,,710,,710,710,710,710,710,710,710,,,,',
',710,710,710,710,710,710,710,,,710,,,,,,,710,,,710,710,710,710,710,710',
'710,710,,710,710,710,,710,710,,710,710,710,,,,,,,,,,,,,,,,,,,,710,,',
'710,,,710,710,,,710,,,,,,710,,,,,,,,710,,,,,710,710,710,710,710,710',
',,,710,710,,,,,,,710,,,710,710,710,,710,710,,,710,710,711,711,711,,711',
',,,711,711,,,,711,,711,711,711,711,711,711,711,,,,,,711,711,711,711',
'711,711,711,,,711,,,,,,,711,,,711,711,711,711,711,711,711,711,,711,711',
'711,,711,711,,711,711,711,,,,,,,,,,,,,,,,,,,,711,,,711,,,711,711,,,711',
',,,,,711,,,,,,,,711,,,,,711,711,711,711,711,711,,,,711,711,,,,,,,711',
',,711,711,711,,711,711,,,711,711,759,759,759,,759,,,,759,759,,,,759',
',759,759,759,759,759,759,759,,,,,,759,759,759,759,759,759,759,,,759',
',,,,,,759,,,759,759,759,759,759,759,759,759,759,759,759,759,,759,759',
',759,759,759,,,,,,,,,,,,,,,,,,,,759,,,759,,,759,759,,,759,,759,,759',
',759,,,,,,,,759,,,,,759,759,759,759,759,759,,,,759,759,,,,,,,759,,759',
'759,759,759,,759,759,,,759,759,768,768,768,,768,,,,768,768,,,,768,,768',
'768,768,768,768,768,768,,,,,,768,768,768,768,768,768,768,,,768,,,,,',
',768,,,768,768,768,768,768,768,768,768,,768,768,768,,768,768,,768,768',
'768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,,,,,768,,,,,,,,768',
',,,,768,768,768,768,768,768,,,,768,768,,,,,,,768,,,768,768,768,,768',
'768,,,768,768,771,771,771,,771,,,,771,771,,,,771,,771,771,771,771,771',
'771,771,,,,,,771,771,771,771,771,771,771,,,771,,,,,,,771,,,771,771,771',
'771,771,771,771,771,,771,771,771,,771,771,,771,771,771,,,,,,,,,,,,,',
',,,,,,771,,,771,,,771,771,,,771,,,,,,771,,,,,,,,771,,,,,771,771,771',
'771,771,771,,,,771,771,,,,,,,771,,,771,771,771,,771,771,,,771,771,793',
'793,793,,793,,,,793,793,,,,793,,793,793,793,793,793,793,793,,,,,,793',
'793,793,793,793,793,793,,,793,,,,,,,793,,,793,793,793,793,793,793,793',
'793,,793,793,793,,793,793,,793,793,793,,,,,,,,,,,,,,,,,,,,793,,,793',
',,793,793,,,793,,793,,,,793,,,,,,,,793,,,,,793,793,793,793,793,793,',
',,793,793,,,,,,,793,,,793,793,793,,793,793,,,793,793,808,808,808,,808',
',,,808,808,,,,808,,808,808,808,808,808,808,808,,,,,,808,808,808,808',
'808,808,808,,,808,,,,,,,808,,,808,808,808,808,808,808,808,808,,808,808',
'808,,808,808,,808,808,808,,,,,,,,,,,,,,,,,,,,808,,,808,,,808,808,,,808',
',,,,,808,,,,,,,,808,,,,,808,808,808,808,808,808,,,,808,808,,,,,,,808',
',,808,808,808,,808,808,,,808,808,828,828,828,,828,,,,828,828,,,,828',
',828,828,828,828,828,828,828,,,,,,828,828,828,828,828,828,828,,,828',
',,,,,,828,,,828,828,828,828,828,828,828,828,828,828,828,828,,828,828',
',828,828,828,,,,,,,,,,,,,,,,,,,,828,,,828,,,828,828,,,828,,828,,,,828',
',,,,,,,828,,,,,828,828,828,828,828,828,,,,828,828,,,,,,,828,,828,828',
'828,828,,828,828,,,828,828,831,831,831,,831,,,,831,831,,,,831,,831,831',
'831,831,831,831,831,,,,,,831,831,831,831,831,831,831,,,831,,,,,,,831',
',,831,831,831,831,831,831,831,831,831,831,831,831,,831,831,,831,831',
'831,,,,,,,,,,,,,,,,,,,,831,,,831,,,831,831,,,831,,,,,,831,,,,,,,,831',
',,,,831,831,831,831,831,831,,,,831,831,,,,,,,831,,831,831,831,831,,831',
'831,,,831,831,847,847,847,,847,,,,847,847,,,,847,,847,847,847,847,847',
'847,847,,,,,,847,847,847,847,847,847,847,,,847,,,,,,,847,,,847,847,847',
'847,847,847,847,847,,847,847,847,,847,847,,847,847,847,,,,,,,,,,,,,',
',,,,,,847,,,847,,,847,847,,,847,,847,,,,847,,,,,,,,847,,,,,847,847,847',
'847,847,847,,,,847,847,,,,,,,847,,,847,847,847,,847,847,,,847,847,859',
'859,859,,859,,,,859,859,,,,859,,859,859,859,859,859,859,859,,,,,,859',
'859,859,859,859,859,859,,,859,,,,,,,859,,,859,859,859,859,859,859,859',
'859,859,859,859,859,,859,859,,859,859,859,,,,,,,,,,,,,,,,,,,,859,,,859',
',,859,859,,,859,,859,,859,,859,,,,,,,,859,,,,,859,859,859,859,859,859',
',,,859,859,,,,,,,859,,859,859,859,859,,859,859,,,859,859,878,878,878',
',878,,,,878,878,,,,878,,878,878,878,878,878,878,878,,,,,,878,878,878',
'878,878,878,878,,,878,,,,,,,878,,,878,878,878,878,878,878,878,878,,878',
'878,878,,878,878,,878,878,878,,,,,,,,,,,,,,,,,,,,878,,,878,,,878,878',
',,878,,,,,,878,,,,,,,,878,,,,,878,878,878,878,878,878,,,,878,878,,,',
',,,878,,,878,878,878,,878,878,,,878,878,886,886,886,,886,,,,886,886',
',,,886,,886,886,886,886,886,886,886,,,,,,886,886,886,886,886,886,886',
',,886,,,,,,,886,,,886,886,886,886,886,886,886,886,,886,886,886,,886',
'886,,886,886,886,,,,,,,,,,,,,,,,,,,,886,,,886,,,886,886,,,886,,,,,,886',
',,,,,,,886,,,,,886,886,886,886,886,886,,,,886,886,,,,,,,886,,,886,886',
'886,,886,886,,,886,886,899,899,899,,899,,,,899,899,,,,899,,899,899,899',
'899,899,899,899,,,,,,899,899,899,899,899,899,899,,,899,,,,,,,899,,,899',
'899,899,899,899,899,899,899,,899,899,899,,899,899,,899,899,899,,,,,',
',,,,,,,,,,,,,,899,,,899,,,899,899,,,899,,,,,,899,,,,,,,,899,,,,,899',
'899,899,899,899,899,,,,899,899,,,,,,,899,,,899,899,899,,899,899,,,899',
'899,900,900,900,,900,,,,900,900,,,,900,,900,900,900,900,900,900,900',
',,,,,900,900,900,900,900,900,900,,,900,,,,,,,900,,,900,900,900,900,900',
'900,900,900,,900,900,900,,900,900,,900,900,900,,,,,,,,,,,,,,,,,,,,900',
',,900,,,900,900,,,900,,,,,,900,,,,,,,,900,,,,,900,900,900,900,900,900',
',,,900,900,,,,,,,900,,,900,900,900,,900,900,,,900,900,901,901,901,,901',
',,,901,901,,,,901,,901,901,901,901,901,901,901,,,,,,901,901,901,901',
'901,901,901,,,901,,,,,,,901,,,901,901,901,901,901,901,901,901,,901,901',
'901,,901,901,,901,901,901,,,,,,,,,,,,,,,,,,,,901,,,901,,,901,901,,,901',
',,,,,901,,,,,,,,901,,,,,901,901,901,901,901,901,,,,901,901,,,,,,,901',
',,901,901,901,,901,901,,,901,901,902,902,902,,902,,,,902,902,,,,902',
',902,902,902,902,902,902,902,,,,,,902,902,902,902,902,902,902,,,902',
',,,,,,902,,,902,902,902,902,902,902,902,902,,902,902,902,,902,902,,902',
'902,902,,,,,,,,,,,,,,,,,,,,902,,,902,,,902,902,,,902,,,,,,902,,,,,,',
',902,,,,,902,902,902,902,902,902,,,,902,902,,,,,,,902,,,902,902,902',
',902,902,,,902,902,931,931,931,,931,,,,931,931,,,,931,,931,931,931,931',
'931,931,931,,,,,,931,931,931,931,931,931,931,,,931,,,,,,,931,,,931,931',
'931,931,931,931,931,931,,931,931,931,,931,931,,931,931,931,,,,,,,,,',
',,,,,,,,,,931,,,931,,,931,931,,,931,,,,,,931,,,,,,,,931,,,,,931,931',
'931,931,931,931,,,,931,931,,,,,,,931,,,931,931,931,,931,931,,,931,931',
'953,953,953,,953,,,,953,953,,,,953,,953,953,953,953,953,953,953,,,,',
',953,953,953,953,953,953,953,,,953,,,,,,,953,,,953,953,953,953,953,953',
'953,953,,953,953,953,,953,953,,953,953,953,,,,,,,,,,,,,,,,,,,,953,,',
'953,,,953,953,,,953,,,,,,953,,,,,,,,953,,,,,953,953,953,953,953,953',
',,,953,953,,,,,,,953,,,953,953,953,,953,953,,,953,953,984,984,984,,984',
',,,984,984,,,,984,,984,984,984,984,984,984,984,,,,,,984,984,984,984',
'984,984,984,,,984,,,,,,,984,,,984,984,984,984,984,984,984,984,,984,984',
'984,,984,984,,984,984,984,,,,,,,,,,,,,,,,,,,,984,,,984,,,984,984,,,984',
',,,,,984,,,,,,,,984,,,,,984,984,984,984,984,984,,,,984,984,,,,,,,984',
',,984,984,984,,984,984,,,984,984,989,989,989,,989,,,,989,989,,,,989',
',989,989,989,989,989,989,989,,,,,,989,989,989,989,989,989,989,,,989',
',,,,,,989,,,989,989,989,989,989,989,989,989,,989,989,989,,989,989,,989',
'989,989,,,,,,,,,,,,,,,,,,,,989,,,989,,,989,989,,,989,,,,,,989,,,,,,',
',989,,,,,989,989,989,989,989,989,,,,989,989,,,,,,,989,,,989,989,989',
',989,989,,,989,989,998,998,998,,998,,,,998,998,,,,998,,998,998,998,998',
'998,998,998,,,,,,998,998,998,998,998,998,998,,,998,,,,,,,998,,,998,998',
'998,998,998,998,998,998,,998,998,998,,998,998,,998,998,998,,,,,,,,,',
',,,,,,,,,,998,,,998,,,998,998,,,998,,,,,,998,,,,,,,,998,,,,,998,998',
'998,998,998,998,,,,998,998,,,,,,,998,,,998,998,998,,998,998,,,998,998',
'1007,1007,1007,,1007,,,,1007,1007,,,,1007,,1007,1007,1007,1007,1007',
'1007,1007,,,,,,1007,1007,1007,1007,1007,1007,1007,,,1007,,,,,,,1007',
',,1007,1007,1007,1007,1007,1007,1007,1007,,1007,1007,1007,,1007,1007',
',1007,1007,1007,,,,,,,,,,,,,,,,,,,,1007,,,1007,,,1007,1007,,,1007,,',
',,,1007,,,,,,,,1007,,,,,1007,1007,1007,1007,1007,1007,,,,1007,1007,',
',,,,,1007,,,1007,1007,1007,,1007,1007,,,1007,1007,1026,1026,1026,,1026',
',,,1026,1026,,,,1026,,1026,1026,1026,1026,1026,1026,1026,,,,,,1026,1026',
'1026,1026,1026,1026,1026,,,1026,,,,,,,1026,,,1026,1026,1026,1026,1026',
'1026,1026,1026,1026,1026,1026,1026,,1026,1026,,1026,1026,1026,,,,,,',
',,,,,,,,,,,,,1026,,,1026,,,1026,1026,,,1026,,,,1026,,1026,,,,,,,,1026',
',,,,1026,1026,1026,1026,1026,1026,,,,1026,1026,,,,,,,1026,,1026,1026',
'1026,1026,,1026,1026,,,1026,1026,1027,1027,1027,,1027,,,,1027,1027,',
',,1027,,1027,1027,1027,1027,1027,1027,1027,,,,,,1027,1027,1027,1027',
'1027,1027,1027,,,1027,,,,,,,1027,,,1027,1027,1027,1027,1027,1027,1027',
'1027,,1027,1027,1027,,1027,1027,,1027,1027,1027,,,,,,,,,,,,,,,,,,,,1027',
',,1027,,,1027,1027,,,1027,,,,,,1027,,,,,,,,1027,,,,,1027,1027,1027,1027',
'1027,1027,,,,1027,1027,,,,,,,1027,,,1027,1027,1027,,1027,1027,,,1027',
'1027,1112,1112,1112,,1112,,,,1112,1112,,,,1112,,1112,1112,1112,1112',
'1112,1112,1112,,,,,,1112,1112,1112,1112,1112,1112,1112,,,1112,,,,,,',
'1112,,,1112,1112,1112,1112,1112,1112,1112,1112,,1112,1112,1112,,1112',
'1112,,1112,1112,1112,,,,,,,,,,,,,,,,,,,,1112,,,1112,,,1112,1112,,,1112',
',1112,,,,1112,,,,,,,,1112,,,,,1112,1112,1112,1112,1112,1112,,,,1112',
'1112,,,,,,,1112,,,1112,1112,1112,,1112,1112,,,1112,1112,1175,1175,1175',
',1175,,,,1175,1175,,,,1175,,1175,1175,1175,1175,1175,1175,1175,,,,,',
'1175,1175,1175,1175,1175,1175,1175,,,1175,,,,,,,1175,,,1175,1175,1175',
'1175,1175,1175,1175,1175,,1175,1175,1175,,1175,1175,,1175,1175,1175',
',,,,,,,,,,,,,,,,,,,1175,,,1175,,,1175,1175,,,1175,,,,,,1175,,,,,,,,1175',
',,,,1175,1175,1175,1175,1175,1175,,,,1175,1175,,,,,,,1175,,,1175,1175',
'1175,,1175,1175,,,1175,1175,1176,1176,1176,,1176,,,,1176,1176,,,,1176',
',1176,1176,1176,1176,1176,1176,1176,,,,,,1176,1176,1176,1176,1176,1176',
'1176,,,1176,,,,,,,1176,,,1176,1176,1176,1176,1176,1176,1176,1176,,1176',
'1176,1176,,1176,1176,,1176,1176,1176,,,,,,,,,,,,,,,,,,,,1176,,,1176',
',,1176,1176,,,1176,,,,,,1176,,,,,,,,1176,,,,,1176,1176,1176,1176,1176',
'1176,,,,1176,1176,,,,,,,1176,,,1176,1176,1176,,1176,1176,,,1176,1176',
'1179,1179,1179,,1179,,,,1179,1179,,,,1179,,1179,1179,1179,1179,1179',
'1179,1179,,,,,,1179,1179,1179,1179,1179,1179,1179,,,1179,,,,,,,1179',
',,1179,1179,1179,1179,1179,1179,1179,1179,,1179,1179,1179,,1179,1179',
',1179,1179,1179,,,,,,,,,,,,,,,,,,,,1179,,,1179,,,1179,1179,,,1179,,',
',,,1179,,,,,,,,1179,,,,,1179,1179,1179,1179,1179,1179,,,,1179,1179,',
',,,,,1179,,,1179,1179,1179,,1179,1179,,,1179,1179,1210,1210,1210,,1210',
',,,1210,1210,,,,1210,,1210,1210,1210,1210,1210,1210,1210,,,,,,1210,1210',
'1210,1210,1210,1210,1210,,,1210,,,,,,,1210,,,1210,1210,1210,1210,1210',
'1210,1210,1210,1210,1210,1210,1210,,1210,1210,,1210,1210,1210,,,,,,',
',,,,,,,,,,,,,1210,,,1210,,,1210,1210,,,1210,,1210,,1210,,1210,,,,,,',
',1210,,,,,1210,1210,1210,1210,1210,1210,,,,1210,1210,,,,,,,1210,,1210',
'1210,1210,1210,,1210,1210,,,1210,1210,38,38,38,,38,,,,38,38,,,,38,,38',
'38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38',
'38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,1151,,1151,1151,1151,1151',
'1151,,,,,,,,38,,1151,38,,,38,38,,,38,,38,,,,,,,,,,,,1151,,,,,38,38,38',
'38,38,38,1151,1151,,38,38,,,,,,,38,,,38,38,38,,38,38,39,39,39,,39,,',
',39,39,,,,39,1151,39,39,39,39,39,39,39,,,,,,39,39,39,39,39,39,39,,,39',
',,,,,,39,,,39,39,39,39,39,39,39,39,,39,39,39,,39,39,,,,39,,,,,,1214',
',1214,1214,1214,1214,1214,,,,,,,,39,,1214,39,,,39,39,,,39,,,,,,,,,,',
',,,1214,,,,,39,39,39,39,39,39,1214,1214,,39,39,,,,39,,,39,,,39,39,39',
',39,39,77,77,77,,77,,,,77,77,,,,77,1214,77,77,77,77,77,77,77,,,,,,77',
'77,77,77,77,77,77,,,77,,,,,,,77,,,77,77,77,77,77,77,77,77,,77,77,77',
',77,77,,,,77,,,,,,1240,,1240,1240,1240,1240,1240,,,,,,,,77,,1240,77',
',,77,77,,,77,,77,,,,,,,,,,,,1240,,,,,77,77,77,77,77,77,1240,1240,,77',
'77,,,,,,,77,,,77,77,77,,77,77,341,341,341,,341,,,,341,341,,,,341,1240',
'341,341,341,341,341,341,341,,,,,,341,341,341,341,341,341,341,,,341,',
',,,,,341,,,341,341,341,341,341,341,341,341,,341,341,341,,341,341,,,',
'341,,,,,,1242,,1242,1242,1242,1242,1242,,,,,,,,341,,1242,341,,,341,341',
',,341,,,,,,,,,,,,,,1242,,,,,341,341,341,341,341,341,1242,1242,,341,341',
',,,341,,,341,,,341,341,341,,341,341,360,360,360,,360,,,,360,360,,,,360',
'1242,360,360,360,360,360,360,360,,,,,,360,360,360,360,360,360,360,,',
'360,,,,,,,360,,,360,360,360,360,360,360,360,360,,360,360,360,,360,360',
',,,360,,,,,,1244,,1244,1244,1244,1244,1244,,,,,,,,360,,1244,360,,,360',
'360,,,360,,,,,,,,,,,,,,1244,,,,,360,360,360,360,360,360,1244,1244,,360',
'360,,,,,,,360,,,360,360,360,,360,360,403,403,403,,403,,,,403,403,,,',
'403,1244,403,403,403,403,403,403,403,,,,,,403,403,403,403,403,403,403',
',,403,,,,,,,403,,,403,403,403,403,403,403,403,403,,403,403,403,,403',
'403,,,,403,,,,,,1271,,1271,1271,1271,1271,1271,,,,,,,,403,,1271,403',
',,403,403,,,403,,,,,,,,,,,,,,1271,,,,,403,403,403,403,403,403,1271,1271',
',403,403,,,,,,,403,,,403,403,403,,403,403,405,405,405,,405,,,,405,405',
',,,405,1271,405,405,405,405,405,405,405,,,,,,405,405,405,405,405,405',
'405,,,405,,,,,,,405,,,405,405,405,405,405,405,405,405,,405,405,405,',
'405,405,,,,405,,,,,,,,,,,,,,,,,,,,405,,,405,,,405,405,,,405,,,,,,,,',
',,,,,,,,,,405,405,405,405,405,405,,,,405,405,,,,,,,405,,,405,405,405',
',405,405,564,564,564,,564,,,,564,564,,,,564,,564,564,564,564,564,564',
'564,,,,,,564,564,564,564,564,564,564,,,564,,,,,,,564,,,564,564,564,564',
'564,564,564,564,,564,564,564,,564,564,,,,564,,,,,,,,,,,,,,,,,,,,564',
',,564,,,564,564,,,564,,,,,,,,,,,,,,,,,,,564,564,564,564,564,564,,,,564',
'564,,,,,,,564,,,564,564,564,,564,564,573,573,573,,573,,,,573,573,,,',
'573,,573,573,573,573,573,573,573,,,,,,573,573,573,573,573,573,573,,',
'573,,,,,,,573,,,573,573,573,573,573,573,573,573,,573,573,573,,573,573',
',,,573,,,,,,,,,,,,,,,,,,,,573,,,573,,,573,573,,,573,,,,,,,,,,,,,,,,',
',,573,573,573,573,573,573,,,,573,573,,,,,,,573,,,573,573,573,,573,573',
'775,775,775,,775,,,,775,775,,,,775,,775,775,775,775,775,775,775,,,,',
',775,775,775,775,775,775,775,,,775,,,,,,,775,,,775,775,775,775,775,775',
'775,775,,775,775,775,,775,775,,,,775,,,,,,,,,,,,,,,,,,,,775,,,775,,',
'775,775,,,775,,,,,,,,,,,,,,,,,,,775,775,775,775,775,775,,,,775,775,',
',,,,,775,,,775,775,775,,775,775,786,786,786,,786,,,,786,786,,,,786,',
'786,786,786,786,786,786,786,,,,,,786,786,786,786,786,786,786,,,786,',
',,,,,786,,,786,786,786,786,786,786,786,786,,786,786,786,,786,786,,,',
'786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,,786,,,,,,,,,,,,,,,,,,,786',
'786,786,786,786,786,,,,786,786,,,,,,,786,,,786,786,786,,786,786,1071',
'1071,1071,,1071,,,,1071,1071,,,,1071,,1071,1071,1071,1071,1071,1071',
'1071,,,,,,1071,1071,1071,1071,1071,1071,1071,,,1071,,,,,,,1071,,,1071',
'1071,1071,1071,1071,1071,1071,1071,,1071,1071,1071,,1071,1071,,,,1071',
',,,,,,,,,,,,,,,,,,,1071,,,1071,,,1071,1071,,,1071,,,,,,,,,,,,,,,,,,',
'1071,1071,1071,1071,1071,1071,,,,1071,1071,,,,,,,1071,,,1071,1071,1071',
',1071,1071,1082,1082,1082,,1082,,,,1082,1082,,,,1082,,1082,1082,1082',
'1082,1082,1082,1082,,,,,,1082,1082,1082,1082,1082,1082,1082,,,1082,',
',,,,,1082,,,1082,1082,1082,1082,1082,1082,1082,1082,,1082,1082,1082',
',1082,1082,,,,1082,,,,,,,,,,,,,,,,,,,,1082,,,1082,,,1082,1082,,,1082',
',,,,,,,,,,,,,,,,,,1082,1082,1082,1082,1082,1082,,,,1082,1082,,,,,,,1082',
',,1082,1082,1082,,1082,1082,1155,1155,1155,,1155,,,,1155,1155,,,,1155',
',1155,1155,1155,1155,1155,1155,1155,,,,,,1155,1155,1155,1155,1155,1155',
'1155,,,1155,,,,,,,1155,,,1155,1155,1155,1155,1155,1155,1155,1155,,1155',
'1155,1155,,1155,1155,,,,1155,,,,,,,,,,,,,,,,,,,,1155,,,1155,,,1155,1155',
',,1155,,,,,,,,,,,,,,,,,,,1155,1155,1155,1155,1155,1155,,,,1155,1155',
',,,,,,1155,,,1155,1155,1155,,1155,1155,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11',
'11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11',
'11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11',
'11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12',
'12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12',
'12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12',
'12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,25,25,25,25,25',
'25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,,,,25,25,25',
'25,25,25,25,25,25,25,,,,,,25,25,25,25,25,25,25,25,25,25,25,25,,25,,',
',,,,25,25,,25,25,25,25,25,25,25,,,25,25,,,,25,25,25,25,,,,,,25,,,,,',
',,25,25,,25,25,25,25,25,25,25,25,25,25,25,,,25,,,,,,,,,,,,,,,,,,,,25',
'109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109',
'109,109,109,109,109,109,109,,,,109,109,109,109,109,109,109,109,109,109',
',,,,,109,109,109,109,109,109,109,109,109,109,109,109,,109,,,,,,,109',
'109,,109,109,109,109,109,109,109,,,109,109,,,,109,109,109,109,,,,,,',
',,,,,,,109,109,,109,109,109,109,109,109,109,109,109,109,109,,,109,,',
',,,,,,,,,,,,,,,,,109,441,441,441,441,441,441,441,441,441,441,441,441',
'441,441,441,441,441,441,441,441,441,441,441,441,,,,441,441,441,441,441',
'441,441,441,441,441,,,,,,441,441,441,441,441,441,441,441,441,,,441,',
',,,,,,,441,441,,441,441,441,441,441,441,441,,,441,441,,,,441,441,441',
'441,,,,,,,,,,,,,,441,441,,441,441,441,441,441,441,441,441,441,441,441',
',,441,441,,,,,,,,,,441,,,,,,,,,441,689,689,689,689,689,689,689,689,689',
'689,689,689,689,689,689,689,689,689,689,689,689,689,689,689,,,,689,689',
'689,689,689,689,689,689,689,689,,,,,,689,689,689,689,689,689,689,689',
'689,,,689,,,,,,,,,689,689,,689,689,689,689,689,689,689,,,689,689,,,',
'689,689,689,689,,,,,,,,,,,,,,689,689,,689,689,689,689,689,689,689,689',
'689,689,689,,,689,689,,,,,,,,,,689,,,,,,,,,689,751,751,751,751,751,751',
'751,751,751,751,751,751,751,751,751,751,751,751,751,751,751,751,751',
'751,,,,751,751,751,751,751,751,751,751,751,751,,,,,,751,751,751,751',
'751,751,751,751,751,,,751,,,,,,,,,751,751,,751,751,751,751,751,751,751',
',,751,751,,,,751,751,751,751,,,,,,,,,,,,,,751,751,,751,751,751,751,751',
'751,751,751,751,751,751,,,751,,,,,499,499,499,499,,,,,,,,,,,,751,499',
'499,499,499,,,,499,,,,,,499,499,,,,499,,,,,,,,,,,,,,,,,,,,499,,,499',
',,,499,,,499,,,,,,,,,,,,,,,499,,,,499,499,499,499,499,499,,,,499,499',
',,,,,,499,,,499,499,499,,499,499,,,499,499,500,500,500,500,,,,,,,,,',
',,,500,500,500,500,,,,500,,,,,,500,500,,,,500,,,,,,,,,,,,,,,,,,,,500',
',,500,,,,500,,,500,,,,,,,,,,,,,,,500,,,,500,500,500,500,500,500,,,,500',
'500,,,,,,,500,,,500,500,500,,500,500,,,500,500,727,727,727,727,,,,,',
',,,,,,,727,727,727,727,,,,727,,,,,,727,727,,,,727,,,,,,,,,,,,,,,,,,',
',727,,,727,,,,727,,,727,,727,,,,,,,,,,,,,727,,,,727,727,727,727,727',
'727,,,,727,727,727,,,,,,727,,,727,727,727,,727,727,,,727,727,905,905',
'905,905,,,,,,,,,,,,,905,905,905,905,,,,905,,,,,,905,905,,,,905,,,,,',
',,,,,,,,,,,,,,905,,,905,,,,905,,,905,,,,,,,,,,,,,,,905,,,,905,905,905',
'905,905,905,,,,905,905,,,,,,,905,,,905,905,905,,905,905,,,905,905,908',
'908,908,908,,,,,,,,,,,,,908,908,908,908,,,,908,908,,,,,908,908,,,,908',
'908,,,,,,,,,,,,,,,,,,,908,,,908,,,,908,,,908,,908,,,,,,,,,,,,,908,,',
',908,908,908,908,908,908,,,,908,908,,,,,,,908,,908,908,908,908,,908',
'908,,,908,908,909,909,909,909,,,,,,,,,,,,,909,909,909,909,,,,909,909',
',,,,909,909,,,,909,909,,,,,,,,,,,,,,,,,,,909,,,909,,,,909,,,909,,909',
',,,,,,,,,,,,909,,,,909,909,909,909,909,909,,,,909,909,,,,,,,909,,909',
'909,909,909,,909,909,,,909,909,915,915,915,915,,,,,,,,,,,,,915,915,915',
'915,,,,915,,,,,,915,915,,,,915,,,,,,,,,,,,,,,,,,,,915,,,915,,,,915,',
',915,,915,,,,,,,,,,,,,915,,,,915,915,915,915,915,915,,,,915,915,,,,',
',,915,,,915,915,915,,915,915,,,915,915,923,923,923,923,,,,,,,,,,,,,923',
'923,923,923,,,,923,,,,,,923,923,,,,923,,,,,,,,,,,,,,,,,,,,923,,,923',
',,,923,,,923,,,,,,,,,,,,,,,923,,,,923,923,923,923,923,923,,,,923,923',
',,,,,,923,,,923,923,923,,923,923,,,923,923,996,996,996,996,,,,,,,,,',
',,,996,996,996,996,,,,996,996,,,,,996,996,,,,996,996,,,,,,,,,,,,,,,',
',,,996,,,996,,,,996,,,996,,996,,,,,,,,,,,,,996,,,,996,996,996,996,996',
'996,,,,996,996,,,,,,,996,,996,996,996,996,,996,996,,,996,996,1038,1038',
'1038,1038,,,,,,,,,,,,,1038,1038,1038,1038,,,,1038,,,,,,1038,1038,,,',
'1038,,,,,,,,,,,,,,,,,,,,1038,,,1038,,,,1038,,,1038,,,,,,,,,,,,,,,1038',
',,,1038,1038,1038,1038,1038,1038,,,,1038,1038,,,,,,,1038,,,1038,1038',
'1038,,1038,1038,,,1038,1038,1053,1053,1053,1053,,,,,,,,,,,,,1053,1053',
'1053,1053,,,,1053,,,,,,1053,1053,,,,1053,,,,,,,,,,,,,,,,,,,,1053,,,1053',
',,,1053,,,1053,,,,,,,,,,,,,,,1053,,,,1053,1053,1053,1053,1053,1053,',
',,1053,1053,,,,,,,1053,,,1053,1053,1053,,1053,1053,,,1053,1053,1137',
'1137,1137,1137,,,,,,,,,,,,,1137,1137,1137,1137,,,,1137,,,,,,1137,1137',
',,,1137,,,,,,,,,,,,,,,,,,,,1137,,,1137,,,,1137,,,1137,,,,,,,,,,,,,,',
'1137,,,,1137,1137,1137,1137,1137,1137,,,,1137,1137,,,,,,,1137,,,1137',
'1137,1137,,1137,1137,,,1137,1137,1177,1177,1177,1177,,,,,,,,,,,,,1177',
'1177,1177,1177,,,,1177,,,,,,1177,1177,,,,1177,,,,,,,,,,,,,,,,,,,,1177',
',,1177,,,,1177,,,1177,,1177,,,,,,,,,,,,,1177,,,,1177,1177,1177,1177',
'1177,1177,,,,1177,1177,,,,,,,1177,,,1177,1177,1177,,1177,1177,,,1177',
'1177,1192,1192,1192,1192,,,,,,,,,,,,,1192,1192,1192,1192,,,,1192,,,',
',,1192,1192,,,,1192,,,,,,,,,,,,,,,,,,,,1192,,,1192,,,,1192,,,1192,,',
',,,,,,,,,,,,1192,,,,1192,1192,1192,1192,1192,1192,,,,1192,1192,,,,,',
',1192,,,1192,1192,1192,,1192,1192,,,1192,1192,1194,1194,1194,1194,,',
',,,,,,,,,,1194,1194,1194,1194,,,,1194,,,,,,1194,1194,,,,1194,,,,,,,',
',,,,,,,,,,,,1194,,,1194,,,,1194,,,1194,,1194,,,,,,,,,,,,,1194,,,,1194',
'1194,1194,1194,1194,1194,,,,1194,1194,,,,,,,1194,,,1194,1194,1194,,1194',
'1194,,,1194,1194,1234,1234,1234,1234,,,,,,,,,,,,,1234,1234,1234,1234',
',,,1234,,,,,,1234,1234,,,,1234,,,,,,,,,,,,,,,,,,,,1234,,,1234,,,,1234',
',,1234,,,,,,,,,,,,,,,1234,,,,1234,1234,1234,1234,1234,1234,,,,1234,1234',
',,,,,,1234,,,1234,1234,1234,,1234,1234,,,1234,1234,1258,1258,1258,1258',
',,,,,,,,,,,,1258,1258,1258,1258,,,,1258,,,,,,1258,1258,,,,1258,,,,,',
',,925,925,925,925,,,,,,,,,1258,,,1258,925,925,925,1258,,,1258,,,,,,',
'925,925,,,,925,,,1258,,,,1258,1258,1258,1258,1258,1258,,,,1258,1258',
',,,,,,1258,,,1258,1258,1258,,1258,1258,,,1258,1258,,,376,,376,376,376',
'376,376,,,,925,925,925,925,925,925,376,,,925,925,,,,,,,925,,,925,925',
'925,,925,925,,797,376,797,797,797,797,797,,,,376,376,376,376,,,797,1145',
',1145,1145,1145,1145,1145,,,,,,,,,,1145,,,,,797,,,,,,,,376,797,797,797',
'797,,,,,1145,376,,,232,232,,,232,1145,1145,1145,1145,,,,,232,232,,232',
'232,232,232,232,232,232,,797,232,232,,,,232,232,232,232,797,,,,,232',
',1145,,,,,,232,232,,232,232,232,232,232,232,232,232,232,232,232,,,232',
',,,,233,233,,,233,,,,,,,,,233,233,232,233,233,233,233,233,233,233,,',
'233,233,,,,233,233,233,233,,,,,,233,,,,,,,,233,233,,233,233,233,233',
'233,233,233,233,233,233,233,,,233,,,,,300,300,,,300,,,,,,,,,300,300',
'233,300,300,300,300,300,300,300,,,300,300,,,,300,300,300,300,,,,,,,',
',,,,,,300,300,,300,300,300,300,300,300,300,300,300,300,300,,,300,,,',
',492,492,,,492,,,,,,,,,492,492,300,492,492,492,492,492,492,492,,,492',
'492,,,,492,492,492,492,,,,,,492,,,,,,,,492,492,,492,492,492,492,492',
'492,492,492,492,492,492,,,492,,,,,493,493,,,493,,,,,,,,,493,493,492',
'493,493,493,493,493,493,493,,,493,493,,,,493,493,493,493,,,,,,493,,',
',,,,,493,493,,493,493,493,493,493,493,493,493,493,493,493,,,493,,,,',
'567,567,,,567,,,,,,,,,567,567,493,567,567,567,567,567,567,567,,,567',
'567,,,,567,567,567,567,,,,,,567,,,,,,,,567,567,,567,567,567,567,567',
'567,567,567,567,567,567,,,567,,,,,568,568,,,568,,,,,,,,,568,568,567',
'568,568,568,568,568,568,568,,,568,568,,,,568,568,568,568,,,,,,568,,',
',,,,,568,568,,568,568,568,568,568,568,568,568,568,568,568,,,568,,,,',
'577,577,,,577,,,,,,,,,577,577,568,577,577,577,577,577,577,577,,,577',
'577,,,,577,577,577,577,,,,,,577,,,,,,,,577,577,,577,577,577,577,577',
'577,577,577,577,577,577,,,577,,,,,578,578,,,578,,,,,,,,,578,578,577',
'578,578,578,578,578,578,578,,,578,578,,,,578,578,578,578,,,,,,578,,',
',,,,,578,578,,578,578,578,578,578,578,578,578,578,578,578,,,578,,,,',
'648,648,,,648,,,,,,,,,648,648,578,648,648,648,648,648,648,648,,,648',
'648,,,,648,648,648,648,,,,,,648,,,,,,,,648,648,,648,648,648,648,648',
'648,648,648,648,648,648,,,648,,,,,649,649,,,649,,,,,,,,,649,649,648',
'649,649,649,649,649,649,649,,,649,649,,,,649,649,649,649,,,,,,649,,',
',,,,,649,649,,649,649,649,649,649,649,649,649,649,649,649,,,649,,,,',
'696,696,,,696,,,,,,,,,696,696,649,696,696,696,696,696,696,696,,,696',
'696,,,,696,696,696,696,,,,,,696,,,,,,,,696,696,,696,696,696,696,696',
'696,696,696,696,696,696,,,696,,,,,697,697,,,697,,,,,,,,,697,697,696',
'697,697,697,697,697,697,697,,,697,697,,,,697,697,697,697,,,,,,697,,',
',,,,,697,697,,697,697,697,697,697,697,697,697,697,697,697,,,697,,,,',
'857,857,,,857,,,,,,,,,857,857,697,857,857,857,857,857,857,857,,,857',
'857,,,,857,857,857,857,,,,,,857,,,,,,,,857,857,,857,857,857,857,857',
'857,857,857,857,857,857,,,857,,,,,858,858,,,858,,,,,,,,,858,858,857',
'858,858,858,858,858,858,858,,,858,858,,,,858,858,858,858,,,,,,858,,',
',,,,,858,858,,858,858,858,858,858,858,858,858,858,858,858,,1149,858',
'1149,1149,1149,1149,1149,,,,,,,,,,1149,,,,,858,,,,,,,,,,,,,,,,,1149',
'1206,1206,,,1206,,,,1149,1149,1149,1149,,1206,1206,,1206,1206,1206,1206',
'1206,1206,1206,,,1206,1206,,,,1206,1206,1206,1206,,,,,,1206,,,,,1149',
',,1206,1206,,1206,1206,1206,1206,1206,1206,1206,1206,1206,1206,1206',
',,1206,,,,,1211,1211,,,1211,,,,,,,,,1211,1211,1206,1211,1211,1211,1211',
'1211,1211,1211,,,1211,1211,,,,1211,1211,1211,1211,,,,,,1211,,,,,,,,1211',
'1211,,1211,1211,1211,1211,1211,1211,1211,1211,1211,1211,1211,,,1211',
',,,,1212,1212,,,1212,,,,,,,,,1212,1212,1211,1212,1212,1212,1212,1212',
'1212,1212,,,1212,1212,,,,1212,1212,1212,1212,,,,,,1212,,,,,,,,1212,1212',
',1212,1212,1212,1212,1212,1212,1212,1212,1212,1212,1212,,1238,1212,1238',
'1238,1238,1238,1238,,,,,,,,,,1238,,,,,1212,,,,,,,,,,,,,,,,,1238,,,,',
',,,,1238,1238,1238,1238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1238' ]
        racc_action_check = arr = ::Array.new(30426, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    32,  1098,    58,   nil,   462,   nil,   nil,  5417,   808,
   nil, 26155, 26288,    72,   nil,    90,   187,   404,   266,   242,
   282,   nil,   112,  5560,  1386, 26421,   375,   nil,   -40,   nil,
   165,  5698,  5830,  5960,  6103,  6246,   nil,  1242, 24209, 24348,
   nil,   296,   283,   313,   408,  6389,  6532,   164,  6675,  6818,
   697,  6961,   384,   127,   164,   311,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  7099,   nil,  7240,   nil,   nil,
   -22,   nil,  7383,  7526,   nil,   nil,  7669, 24487,   444,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   336,   nil,   nil,   nil,
   nil,   nil,   nil,   413,   447,   449,   506,   nil,   nil, 26554,
   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,   nil,   136,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  7812,   nil,   nil,   nil,   nil,  7955,  8098,  8241,
  8384,  8527,   530,   nil,   644,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   515,   nil,  1386,  8670,  8813,  8956,  9099,
  9242,  9385, 29040, 29108,   nil,   nil,  9528,  9671,  9814,   nil,
   nil,   361,   104,   147,   604,   236,   537,   604,   nil,  9957,
  1530,   609,   nil,   nil, 10100, 10243, 10386, 10529, 10672, 10815,
 10958, 11101, 11244, 11387, 11530, 11673, 11816, 11959, 12102, 12245,
 12388, 12531, 12674, 12817, 12960, 13103,   nil,   nil,   nil,   nil,
 13246,   nil,   nil,   243,   349,   379,   416,   460,   514,   552,
   555,   576,   596,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 29176,   nil,   nil,   604, 13389, 13532,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 13675,   nil,  2106,   nil,   584,   586,
   nil, 13818,   638, 13961,   nil,   nil, 14104, 14247,   nil,   nil,
   553,   nil,   nil, 14390,   969,   nil,   626,  1674,   652,   689,
   661, 24626,  1818,   376,   380,   455,   740,   504,   nil,   707,
   689,   193,   737,   752,   nil,   nil,   nil,   770,   167,   734,
 24765,   nil,   343,   516,  3114,  3258,   798,   nil,   801, 14533,
   nil, 14676,   726,  1962,   731,   nil, 28944,   337,   735,  2106,
  2250,  1083,   776, 14819, 14962,   nil,   461,    -8,     8, 15105,
  2394,  2538,   598,   893,   780,   -19,    -7,   591,   859,    24,
   892,   nil,   nil, 24904,   nil, 25043,   475,   nil,   346,   nil,
   383,   nil,   136,   nil,   816,   402,   nil,   818,   440,   nil,
   821,   -59,   nil,   823,   -58,   nil,   481,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 26687,   nil,   nil,   nil,   nil,   837,   nil,   908,   824,
 15248,   826,   nil,   nil,   810,   nil,   620,   267,   914,   nil,
   nil,  1530,   nil,   nil,   nil,   nil,   nil,  1674,   837,   nil,
   nil,   835,   845,   344,   449,  7240,   nil,   nil,   nil,   272,
   408,   888,   nil,   nil, 15386, 15518,   nil,   nil,   nil,   -26,
   nil,   888, 29244, 29312, 15651,   274, 15794, 15937, 16080, 27040,
 27153,  3402,  3546,   628,   809,   913,   916,   923,   929,  5130,
  5274,  1121,  3690,  3834,  3978,  4122,  4266,  4410,   900,  1214,
  4554,  4698,  2250,  4842,   nil,   nil,   nil, 16223,   989,   nil,
 16361,   nil,   nil,   nil,   nil, 16487,   891,   904,   908,   nil,
   nil,   nil,   912,   nil,   nil, 16630,   nil,   nil, 16773,   nil,
 16916,   nil,   196,   nil,   nil,   nil, 17059,  1227,   929,   916,
   918,   nil,   nil,   923, 25182,   928, 17202, 29380, 29448,   640,
   972,   nil,   nil, 25321,   937,   nil, 17345, 29516, 29584, 17488,
  4986,  2394, 17631, 17774,  1066,  1065,   nil,   nil,   949,   951,
   956,   956,   957,   nil,   964,   966,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   950,   784,   nil,   nil, 17917,
   nil,   nil,   nil,     0,   nil,   nil,   nil,  1046,   nil,   nil,
  1054,   610,   977, 18060,  1098,  1101,   985,   nil,   nil,   479,
   534,  1039,  1027,   nil,   647,  1066,  2682,  1146,   nil,  2826,
    63,  1152,  1157,   610,  1159,   nil,   nil, 18203, 29652, 29720,
    26,   nil,  1087,  1089,   -20,   nil,   650,   nil,  1062, 18346,
   nil,   nil,   611,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   208,   nil,   nil,   265,   nil,
   nil,   nil,  1040,   nil,   nil,  1041,   nil,  2970,   nil, 26820,
   nil, 18489,  1046, 18632, 18775, 18918, 29788, 29856, 19061, 19204,
   461,  1081, 19347, 19490, 19633, 19776,  1081,   nil,   nil,   nil,
 19919, 20062,  1083,   nil,   nil,   nil,   277,   310,   544,   680,
  1059,  1098,   nil,  1080,   nil,   nil,   506, 27266,   -67,   nil,
   660,   nil,   nil,   952,  7099,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1141,     5,   nil,  1105,
  1067, 26953,   -14,   nil,   113,  1170,   -19,   nil,   nil, 20205,
   nil,  1085,   nil,  1193,   nil,  1074,   nil,  1118, 20348,   nil,
   nil, 20491,   nil,   nil,   -85, 25460,  1078,   nil,  1083,    -9,
    -5,  1120,    25,   652,  1121,  1083, 25599,   nil,  1152,    -7,
  1818,   308,   nil, 20634,   nil,   nil,   nil, 28981,   nil,   nil,
   231,   nil,   nil,   720,   745,   nil,   881,   nil, 20777,   nil,
   918,   nil,  1092,  1099,  1372,  1106,   nil,   nil,   nil,   nil,
   nil,   nil,  5662,  1962,   nil,   nil,   nil,   nil, 20920,   nil,
   nil, 21063,   nil,   nil,   nil,   861,   nil,  1222,   nil,   nil,
   nil,   nil,   nil,  1230,  1231,   nil,   nil, 21206,  1123,    29,
    30,   162,   163,  3114,   nil,   725,   nil, 29924, 29992, 21349,
   nil,   nil,   nil,   861,  3258,    34,  1124,   991,  3402,   nil,
   nil,   nil,   nil,   nil,  1138,   nil,   nil,  1125, 21492,  1129,
   320,   421,   816,   952,   nil,  2538, 21635,   nil,  1129,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 21778,
 21921, 22064, 22207,   460,  1227, 27379,  1188,   106, 27492, 27605,
   504,   -63,  1156,  1157,   nil, 27718,   nil,  1155,  1156,  1247,
    58,   nil,  1189, 27831, 16346, 28890,   nil,   nil,   nil,   nil,
   nil, 22350,   nil,   nil,   nil,   nil,  5761,   nil,  3546,   nil,
   nil,  1192,  1184,   nil,   249,   nil,   nil,   nil,   nil,  1182,
    39,   nil,   nil, 22493,   nil,   nil,   nil,   nil,  3690,   nil,
  1183,  1226,   nil,   nil,  1189,   nil,  1193,  1194,   nil,  1195,
   nil,  1275,   nil,  1198,  1200,   nil,  1201,   nil,   nil,  1206,
  1084,  1294,   nil,   nil, 22636,   688,  1324,   nil,   nil, 22779,
   nil,  3834,  1327,   nil,   nil,   nil, 27944,   nil, 22922,    69,
    68,  1328,  1231,   776,   nil,  1213,  3978, 23065,   612,  1332,
   nil,  4122,  4266,  1211,  1220,   nil,   nil,   nil,   nil,   nil,
  1212,   nil,  1224,   479,   nil,   nil, 23208, 23351,   nil,   nil,
   nil,   nil,  1263,  1264,  1265,  1234,   nil,   nil, 28057,   nil,
     1,   nil,   nil,  1238,  1239,  1242,   nil,   nil,   nil,  1281,
  1241,   -33,   nil, 28170,   nil,  1245,   nil,   740,   nil,   nil,
  2682,  1243,  1246,   nil,  1247,  1251,  1255,   nil,  1284,  1268,
  1249, 25738,   nil,   nil,   nil,   nil,   nil,  4410,  2826,  4554,
   nil,     9, 25877,   nil,   nil, 15350,   nil,  7063,   nil,   nil,
 15449,   nil, 16367,   nil,   nil,   nil,   nil,  1269,  1270,  2970,
   nil,   nil,    35,   nil,   nil,    43,   866,   -31,   nil,   nil,
   nil,   nil, 23494,  4698,   nil,   nil,  1391,   635,   nil,   nil,
  1289,  1402,  2092,   nil,   nil,   nil,   nil,   nil,   126,  1324,
   nil,   nil,   nil,   nil,   nil,   nil,  1284, 28283,  1285,   nil,
   nil,   nil,   234,   nil,   nil, 28998,   nil,   nil,   nil, 30054,
   nil, 24230,   nil,   nil,  1313, 26016,   784,  1373,   nil,  1434,
  4842,   120,   135,   786,  1391,   144,   nil,  1320,  1335,  1338,
  1339,  3676,  3820,  4986,   nil, 23637, 23780, 28396,   nil, 23923,
   358,   nil,   nil,  5130,   nil,   nil,   707,   nil,   nil,   nil,
   nil,   nil, 28509,  1342, 28622,  1344,   nil,   nil,  1347,  1348,
  1351,  1352,   nil,  1354,   nil,   855, 30093,   nil,   nil,  1479,
 24066, 30161, 30229,   145, 24369,   nil,   nil,   nil,   nil,  1369,
   917,  5274,   nil,   nil,   nil,  1370,   nil,   nil,   nil,   nil,
  1491,   nil,  2236,  1378, 28735,   nil,   nil,   nil, 30291,   nil,
 24508,   nil, 24647,   nil, 24786,   nil,   nil,  1418,  1419,   nil,
  1386,   158,   168,   169,   236,  1385,   nil,   395, 28848,   nil,
   nil,  1386,  1387,  1388,  1390,   171,   nil,   nil,   nil,   nil,
  1391, 24925,   nil,   nil,   nil,   nil,  1395,   nil ]

racc_action_default = [
    -1,  -772,  -771,  -772,    -2,  -757,    -4,    -5,  -772,    -8,
    -9,  -772,  -772,  -772,   -36,  -772,  -772,   -41,  -772,  -772,
  -311,   -53,  -759,  -772,   -62,  -772,   -71,   -72,   -73,   -77,
  -288,  -288,  -288,  -326,  -357,  -358,   -89,  -771,   -93,  -101,
  -103,  -772,  -651,  -652,  -772,  -772,  -772,  -772,  -772,  -772,
  -241,  -772,  -759,  -666,  -666,  -259,  -302,  -303,  -304,  -305,
  -306,  -307,  -308,  -309,  -310,  -743,  -313,  -315,  -322,  -324,
  -334,  -336,  -772,  -772,   -68,   -68,  -757,  -772,  -345,  -352,
  -359,  -360,  -362,  -363,  -364,  -365,  -366,  -367,  -368,  -369,
  -370,  -371,  -380,  -438,  -581,  -582,  -583,  -584,  -585,  -771,
  -588,  -771,  -771,  -771,  -771,  -771,  -771,  -624,  -625,  -771,
  -627,  -633,  -635,  -636,  -637,  -638,  -741,  -640,  -641,  -742,
  -643,  -644,  -645,  -646,  -647,  -648,  -649,  -650,  -655,  -656,
  1278,    -3,  -758,  -767,  -768,  -769,    -7,  -772,  -772,  -772,
  -772,  -772,  -772,   -24,  -772,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,  -199,
  -200,  -201,  -202,  -203,  -204,  -205,  -206,  -207,  -208,  -209,
  -210,  -211,  -212,   -29,  -139,  -771,  -772,  -772,  -772,  -772,
  -772,  -771,  -772,  -772,  -753,  -754,  -772,  -772,  -759,  -760,
   -57,  -772,  -651,  -652,  -772,  -311,  -772,  -772,  -247,  -772,
  -771,  -772,   -58,   -60,  -224,  -225,  -772,  -772,  -772,  -772,
  -772,  -772,  -772,  -772,  -772,  -772,  -772,  -772,  -772,  -772,
  -772,  -772,  -772,  -772,  -772,  -772,  -260,  -261,  -262,  -263,
  -772,   -63,   -64,  -772,  -132,  -133,  -172,  -173,  -174,  -190,
  -195,  -202,  -205,  -651,  -652,  -730,  -731,  -373,  -466,  -446,
  -772,  -755,  -756,   -78,  -771,  -772,  -333,  -372,  -450,  -459,
  -461,   -84,  -456,   -85,  -759,   -86,  -266,  -283,  -771,  -771,
  -287,  -772,  -293,  -772,  -771,  -735,  -772,  -772,   -87,   -88,
  -757,   -17,   -18,  -772,   -21,   -22,   -91,  -771,  -759,  -772,
   -94,   -97,  -771,  -109,  -110,  -772,  -772,  -117,  -326,  -329,
  -759,  -772,  -666,  -666,  -357,  -358,  -361,  -457,  -772,   -99,
  -772,  -105,  -321,  -772,  -226,  -227,  -634,  -235,  -236,  -772,
  -248,  -772,  -772,  -771,  -665,  -661,  -688,  -688,  -772,  -771,
  -771,  -317,  -759,  -771,  -771,  -335,   -67,  -772,  -772,  -772,
  -771,  -771,  -757,  -772,  -758,  -651,  -652,  -772,  -772,  -311,
  -772,  -390,  -391,  -772,  -348,  -772,  -688,  -586,  -772,  -609,
  -772,  -611,  -772,  -613,  -772,  -772,  -593,  -772,  -772,  -599,
  -772,  -772,  -605,  -772,  -772,  -607,  -772,  -626,  -628,  -629,
  -630,  -631,    -6,  -770,   -30,   -31,   -32,   -33,   -34,   -10,
   -11,  -772,   -26,   -27,   -28,  -140,  -772,   -37,   -40,  -298,
  -772,  -772,  -297,   -38,  -772,   -42,  -772,  -311,   -50,   -52,
  -213,  -271,  -293,   -54,   -55,   -43,  -214,  -271,  -759,  -278,
  -279,  -771,  -771,  -744,  -745,  -288,  -454,  -746,  -747,  -745,
  -744,  -288,  -453,  -455,  -746,  -747,   -49,  -221,   -56,  -759,
  -332,  -772,  -772,  -772,  -771,  -321,  -772,  -772,  -772,  -772,
  -772,  -222,  -223,  -228,  -229,  -230,  -231,  -232,  -233,  -237,
  -238,  -239,  -240,  -242,  -243,  -244,  -245,  -246,  -249,  -250,
  -251,  -252,  -759,  -264,   -65,  -751,  -752,  -772,  -772,  -467,
  -288,  -744,  -745,   -75,   -79,  -689,  -759,  -771,  -759,  -289,
  -463,  -466,  -759,  -328,  -284,  -772,  -292,  -285,  -772,  -290,
  -772,  -294,  -772,  -738,  -740,   -16,  -758,   -20,  -772,  -759,
   -90,  -319,  -106,   -95,  -772,  -759,  -771,  -772,  -772,  -116,
  -772,  -665,  -634,  -772,  -102,  -107,  -772,  -772,  -772,  -772,
  -265,  -253,  -772,  -772,  -573,  -772,  -403,  -404,  -759,  -673,
  -759,  -729,  -729,  -671,  -673,  -673,  -687,  -689,  -690,  -691,
  -692,  -693,  -694,  -695,  -696,  -697,  -772,  -699,  -701,  -703,
  -708,  -710,  -711,  -714,  -719,  -721,  -722,  -724,  -725,  -726,
  -772,  -772,  -673,  -772,  -772,  -772,  -759,  -316,  -267,  -764,
  -764,  -772,  -772,  -733,  -764,  -772,  -771,  -381,  -382,  -771,
  -772,  -772,  -772,  -772,  -772,  -376,  -473,  -771,  -772,  -772,
  -321,   -68,  -127,  -128,  -772,  -130,  -772,  -311,  -771,  -772,
  -353,  -439,  -688,  -442,  -587,  -610,  -615,  -616,  -618,  -589,
  -612,  -590,  -614,  -591,  -592,  -772,  -595,  -597,  -772,  -598,
  -601,  -602,  -772,  -603,  -604,  -772,  -632,  -771,   -25,  -772,
   -35,  -772,  -301,  -772,  -772,  -771,  -772,  -772,  -772,  -772,
  -458,  -772,  -280,  -282,  -772,  -772,   -80,  -276,  -277,  -451,
  -772,  -772,   -82,  -452,  -331,  -761,  -744,  -745,  -744,  -745,
  -759,   -59,  -491,  -493,  -495,  -498,  -554,  -759,  -510,  -513,
  -547,  -552,  -553,  -772,  -772,  -557,  -558,  -559,  -560,  -561,
  -562,  -563,  -564,  -565,  -566,  -567,  -772,  -772,  -571,   -61,
  -772,  -772,  -759,  -445,  -771,   -74,  -447,  -463,  -273,  -280,
  -275,  -772,  -464,  -772,  -327,  -771,  -291,  -295,  -772,  -736,
  -737,  -772,   -19,   -23,   -92,  -772,   -98,  -104,  -759,  -744,
  -745,  -771,  -748,  -115,  -772,  -100,  -772,  -220,  -234,  -759,
  -255,  -771,  -374,  -771,  -355,  -379,  -662,  -772,  -680,  -664,
  -772,  -669,  -670,  -772,  -772,  -683,  -772,  -685,  -772,  -392,
  -772,  -394,  -396,  -399,  -402,  -759,  -702,  -712,  -713,  -723,
  -727,  -667,  -772,  -257,  -356,  -314,  -318,  -268,  -766,  -765,
  -270,  -766,  -323,  -325,  -734,  -771,  -383,  -771,   -69,  -384,
  -385,  -339,  -340,  -772,  -772,  -477,  -342,  -772,  -759,  -744,
  -745,  -748,  -320,  -771,  -127,  -128,  -129,  -772,  -772,  -771,
  -346,  -657,  -659,  -349,  -771,  -772,  -759,  -772,  -771,  -594,
  -596,  -600,  -606,  -608,  -772,  -141,   -39,  -299,  -772,  -759,
  -744,  -745,  -745,  -744,   -51,  -272,  -772,  -762,  -771,   -45,
  -216,   -46,  -217,   -81,   -47,  -219,   -48,  -218,   -83,  -772,
  -772,  -772,  -772,  -458,  -772,  -772,  -496,  -497,  -772,  -772,
  -772,  -515,  -759,  -759,  -509,  -516,  -522,  -772,  -525,  -529,
  -772,  -512,  -772,  -772,  -550,  -551,  -555,  -556,  -568,  -128,
  -569,  -772,   -66,  -732,  -427,  -428,  -759,  -430,  -771,  -449,
  -448,  -772,  -759,  -460,  -771,  -462,  -286,  -296,  -739,   -96,
  -458,  -108,  -330,  -772,   -13,   -15,  -375,  -377,  -771,  -580,
  -574,  -771,  -575,  -576,  -759,  -672,  -673,  -673,  -700,  -729,
  -709,  -714,  -728,  -673,  -673,  -720,  -673,  -697,  -715,  -759,
  -772,  -772,  -401,  -698,  -772,  -764,  -772,  -378,  -386,  -772,
  -388,  -771,  -772,   -70,  -341,  -343,  -772,  -469,  -772,  -772,
  -458,  -772,  -127,  -128,  -131,  -759,  -771,  -772,  -772,  -772,
  -440,  -771,  -771,  -432,  -759,  -617,  -620,  -621,  -622,  -623,
  -772,   -12,  -300,  -458,   -44,  -215,  -281,  -772,  -492,  -494,
  -502,  -506,  -772,  -772,  -772,  -534,  -536,  -537,  -540,  -541,
  -543,  -545,  -546,  -759,  -759,  -759,  -570,  -507,  -508,  -532,
  -517,  -520,  -523,  -772,  -528,  -759,  -763,  -772,  -548,  -549,
  -254,  -729,  -729,  -408,  -771,  -771,  -771,  -426,  -772,  -759,
  -697,  -705,  -706,  -717,  -468,   -76,  -274,  -771,  -256,  -771,
  -579,  -772,  -772,  -578,  -663,  -772,  -676,  -772,  -678,  -668,
  -772,  -681,  -772,  -684,  -686,  -393,  -395,  -397,  -400,  -258,
  -269,  -337,  -772,  -389,  -338,  -772,  -482,  -485,  -488,  -489,
  -490,  -470,  -772,  -771,  -344,  -458,  -772,  -772,  -350,  -354,
  -772,  -772,  -772,  -441,  -619,  -499,  -500,  -501,  -535,  -539,
  -542,  -544,  -503,  -504,  -505,  -524,  -518,  -772,  -526,  -530,
  -511,  -514,  -772,  -406,  -407,  -411,  -410,  -417,  -419,  -772,
  -422,  -772,  -424,  -429,  -772,  -772,  -704,  -772,  -465,  -771,
  -771,  -651,  -652,  -772,  -772,  -311,  -577,  -673,  -673,  -673,
  -673,  -772,  -772,  -771,  -478,  -772,  -772,  -486,  -471,  -772,
  -771,  -347,  -658,  -771,  -443,  -444,  -759,  -434,  -436,  -437,
  -533,  -538,  -772,  -521,  -772,  -729,  -707,  -409,  -771,  -771,
  -771,  -771,  -718,  -771,  -431,  -716,  -772,  -321,   -14,  -573,
  -771,  -772,  -772,  -321,  -772,  -674,  -677,  -679,  -682,  -398,
  -771,  -771,  -483,  -484,  -487,  -525,  -472,  -474,  -475,  -476,
  -772,  -433,  -772,  -519,  -772,  -527,  -531,  -405,  -772,  -414,
  -772,  -416,  -772,  -420,  -772,  -423,  -425,  -320,  -748,  -572,
  -759,  -744,  -745,  -748,  -320,  -673,  -387,  -771,  -772,  -351,
  -435,  -771,  -771,  -771,  -771,  -458,  -675,  -479,  -480,  -481,
  -526,  -772,  -412,  -415,  -418,  -421,  -771,  -413 ]

clist = [
'6,43,237,644,468,299,385,43,844,636,639,282,135,317,317,317,585,791',
'992,4,390,391,624,625,294,232,574,769,439,986,340,240,371,589,301,281',
'43,344,344,366,547,131,143,224,339,151,151,534,452,453,955,375,375,969',
'538,827,830,148,148,921,834,359,132,379,912,975,43,967,856,465,528,148',
'352,352,973,486,396,536,1014,9,336,1096,761,135,913,9,1098,721,749,136',
'353,353,967,318,318,318,1065,409,1,411,413,416,419,422,425,801,802,409',
'338,387,388,352,393,392,815,926,927,408,1187,428,766,1138,2,766,938',
'966,590,426,1225,353,1189,43,675,1202,142,678,588,621,596,596,43,658',
'687,660,381,1235,475,481,1068,954,966,303,311,313,1079,148,459,372,378',
'459,772,930,571,571,558,459,663,223,596,402,1050,968,448,441,434,435',
'436,437,499,500,283,524,769,751,838,993,319,319,319,300,757,605,605',
'547,689,369,968,631,756,308,312,295,632,356,356,1193,1066,805,807,9',
'400,317,860,432,530,1034,1045,16,438,700,380,605,1202,16,43,382,626',
'1055,1260,469,776,383,446,384,447,458,403,1006,458,785,1189,659,356',
'1008,458,1032,1043,492,1183,43,405,864,16,843,1097,1067,1147,339,1069',
'1186,1233,661,1010,406,865,1033,1044,720,540,541,944,1004,794,1096,466',
'999,1219,766,766,485,487,1154,16,754,317,317,451,451,315,328,329,1227',
'401,670,317,672,809,847,676,941,1105,676,469,1110,1267,1198,1058,1059',
'1139,996,769,824,825,763,1077,911,546,546,979,1221,1106,1109,409,1028',
'1046,1029,1270,908,841,842,570,846,43,909,766,920,43,135,923,778,344',
'43,552,1190,339,1191,975,16,961,339,572,567,575,1108,1081,1167,16,407',
'410,344,412,1228,379,563,537,318,555,386,386,577,415,386,43,418,318',
'352,421,424,43,43,336,628,633,1015,867,336,1140,556,868,43,43,427,1139',
'353,352,1195,1007,641,642,135,970,476,294,648,294,1196,475,481,559,527',
'557,1100,353,565,1256,1199,,,1208,1200,848,,866,,596,,640,,643,,,,386',
'386,386,386,,352,1268,352,16,949,454,629,773,454,,1139,701,1236,893',
'454,,18,,353,898,353,319,18,,974,696,976,,16,968,319,879,546,546,903',
'688,707,317,151,,605,914,,,781,,1089,,,946,148,18,1236,,781,469,,,,911',
'911,743,743,809,,750,,982,769,356,1009,1261,942,,1057,,1139,1224,,,',
'18,968,308,,,463,464,356,312,,707,950,994,995,488,489,,546,630,634,',
'485,487,,466,889,891,,317,964,16,894,896,,16,,,43,575,16,870,,539,870',
'781,344,469,575,,,356,542,356,,344,,,1143,1144,,,1086,1088,1074,,18',
'1107,,1091,1093,16,1094,,,18,1064,16,16,706,853,352,1000,,766,712,,',
'16,16,352,,946,475,481,605,,485,962,353,,968,605,787,1113,1269,459,485',
'353,1129,317,821,,1023,,1005,459,459,43,,605,43,459,459,,1249,835,708',
'469,837,839,,1116,713,755,,,,1121,862,,1031,,,476,,1047,1048,1062,,',
',,809,809,,1101,,317,18,,18,1104,,18,,,386,6,43,18,1114,,43,,940,469',
',485,1119,43,765,708,701,18,458,1160,874,971,,701,922,1237,,,458,458',
',,,,458,458,875,,,151,1173,1024,743,1174,,356,,,743,743,939,148,476',
'932,356,,,,1168,485,1169,,476,1170,890,892,,1070,934,,895,897,1115,',
'701,,,281,,546,9,911,,575,876,,,16,781,,344,884,,,951,707,1215,1216',
'1217,1218,18,344,,,18,959,1229,963,,18,1132,1133,1134,148,,,,,,1181',
',,1201,,1203,352,,,,1040,1040,459,,476,,,352,,752,,18,1040,1230,353',
'701,,18,18,,990,,990,,,353,317,,18,18,,,,1013,,,,,16,43,451,16,888,',
'469,,701,1001,809,809,43,,476,,43,1266,,,1255,,,1062,1020,,789,1062',
'1071,1062,,,,,,546,701,,,,,701,701,458,1262,,1263,,1264,605,1040,16',
'485,743,,16,743,743,454,,,888,16,743,,1013,1259,,454,454,,743,743,743',
'454,454,,1276,,1025,,,,,,,43,,,356,,934,890,892,897,895,,,,708,356,',
'713,863,,,43,,1083,1070,,,,1070,1080,490,1062,,1062,,1062,,1062,,,,',
',,,985,,1250,,701,,,,,43,,,,,743,,,1103,,1062,1265,,,,43,,18,,,43,43',
',,972,1118,,972,1120,,,,,701,701,701,1102,476,,,,,,1040,,922,,743,,',
',,543,,1117,,,971,,1013,,,743,1070,,,,,,,,,1146,1146,1146,,560,,16,',
'294,1025,,,,,43,,43,16,,1162,,16,1158,1071,1159,18,1071,,18,,1071,,1071',
',,,,,,454,,,,352,,,,,627,,43,,,,352,,,,1180,,,353,1182,781,,,,,,,,,353',
',743,,18,,,,18,735,735,18,,,,18,1063,,,16,294,18,18,959,,43,,18,18,',
',,1231,1209,,1211,,,43,16,,,743,,990,,1220,1071,43,1071,,1071,,1071',
',352,317,743,,743,,,1146,1146,1146,1146,,1146,,,,,16,353,469,,,,1222',
'1223,1071,,,714,990,,43,16,,,,,16,16,1257,,701,,,743,,,356,,,,,,,,,',
',356,1148,1150,1152,,485,,,990,,743,485,1146,1146,1146,1146,,758,,760',
',,,764,,,,1146,19,,,,736,736,19,,,386,,,774,,,,,16,777,16,,241,1166',
',,,,386,,18,,241,241,241,,19,345,345,,,18,796,,799,18,356,,,,,,,,16',
',,,,,,,,18,,,19,,,,,241,241,,,241,397,,,,826,,972,,,1063,,,,1063,,1063',
',,,737,737,735,,,,16,,735,735,,476,,1239,1241,1243,1245,,1246,16,18',
',,,,,,,,16,,,,,,,19,,,,18,241,241,241,241,19,,,,,,,449,462,,,,,,,,,20',
',,,,16,20,,,,,18,,,1272,1273,1274,1275,,,,1063,,1063,,1063,18,1063,',
'1277,,18,18,,,20,347,347,,386,386,,,,,,,,,933,,,,,1063,,,,,,,,,,,20',
',19,241,456,241,241,456,241,,399,736,,456,241,241,,736,736,,549,952',
'551,,,553,554,19,,,,,18,,18,,,,,,,,,,,,,983,,,,,,735,,,735,735,,,,,',
'735,,20,,,18,,,735,735,735,20,,,,,,,241,241,635,,,,,,,,241,,,,,,,,,',
'737,,,,,,737,737,,19,,,,19,18,,,345,19,,,,,,,,,18,,,,,,,,,345,18,,,',
',,735,,,,,692,19,,,,,,19,19,20,,457,,,457,,,241,19,19,457,,,,,1076,',
'18,,,,656,,656,20,,,735,,,736,,,736,736,,,1084,,,736,,735,,,,,,736,736',
'736,,1095,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,767,,1123,635,,770,,,,,,,',
',,,,,,,,,20,,,,20,241,,,347,20,,,,737,736,,737,737,,735,,,,737,,,,347',
',,,737,737,737,,,,,241,,20,,816,,,,20,20,,,,,,,,,736,20,20,735,,,,,',
',,19,,,657,736,657,,735,345,735,241,,,,,,,345,,,,,,,,,241,,,,30,,,,',
',30,737,,,,,,,,,,,,735,,30,,,,,,,,877,,30,30,30,,30,,,767,635,,,,735',
',,,,,737,19,,,19,,,,,736,,,241,,,737,30,,,,,30,30,,241,30,,,,,,,,,,',
',,,,,,,,,,767,,,736,,,19,,,947,19,,948,456,241,42,,19,736,,736,42,,456',
'456,,,,,456,456,20,,,960,30,,,293,347,30,30,30,30,30,,,,347,978,42,343',
'343,737,,,,,,,736,,,,,,,,,767,,,635,,,,,,,,42,,,,736,,,,997,,395,,,737',
'345,,,,,738,738,,,,,345,,,737,,737,20,,,20,,,,,1022,,,,,,,,,30,30,30',
'30,30,30,30,,,,,30,30,30,,,,42,,,,,737,,,30,42,,,,,,,,20,,,,20,,,457',
',,19,20,737,,,,241,457,457,,,19,,457,457,19,,,,,,,,,,,,,,,,,,456,,30',
'30,,,,,,,,,30,,,,,,,,,,,,,,,,,,,30,,42,1111,30,,,,,30,,,,,347,,,,,,',
'19,,,,347,,42,,,,635,,,,,,,,,30,19,,,,,30,30,,,,,,,,,30,30,30,,,,,,',
',,739,739,,,,241,,19,,,,,,,,,,,,,,,19,241,738,20,,19,19,,738,738,,,',
',20,,,1019,20,,,42,,,,42,,,1178,343,42,,,,,,457,,,,,,,,,,,,343,,,,,',
',,,,,,,42,,,,1156,,42,42,,,19,30,19,,,1163,,42,42,,,,,,,,,20,,,293,',
'293,,1226,,,,,,,,,,30,,19,20,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,20,,',
'30,,,,,1205,,,,,19,,20,,,,30,20,20,,,,,19,,241,241,,740,740,,,,19,,',
'738,,,738,738,,,,,,738,,,,,741,741,,738,738,738,,,,241,,739,,,,,,739',
'739,30,19,,30,,,,657,,,,30,,20,,20,,,1165,,,,,30,,,,,,,42,,,,,,,,343',
',,,,,,,33,343,,20,,30,33,,,30,,738,30,30,,,30,,,,,33,30,30,,,,,30,30',
',33,33,33,,33,,,,,,,,,,657,,,,,20,,,738,,,,,,,,,,20,42,33,,42,738,,33',
'33,,20,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,42,,,,42,,,,,739',
',42,739,739,,33,,,,739,33,33,33,33,33,740,,739,739,739,,740,740,,,,',
'738,,,,,,,,,,,741,,,,,,741,741,30,,,,,,30,,,,,30,,,,30,,,,,,738,,,,',
',,,,,,343,30,,,738,,738,,,,,343,739,,,,,,,,33,33,33,33,33,33,33,,,,',
'33,33,33,,,,,,,,,,,,33,738,,,,,,,30,739,,,,,,,,,,,,,,,739,738,,,30,',
',,,42,,,,,,,,,,,42,,,,42,,,,,,33,33,,,,30,,30,,,33,,,,,,740,,,740,740',
',30,30,,,740,30,30,33,,,,33,740,740,740,,33,741,,,741,741,,,,,,741,',
',,,739,,,741,741,741,,,,,42,,,,,33,,,,,,33,33,,,,,,,,42,33,33,33,,742',
'742,,,30,739,30,,,,,,,744,744,,,,740,,739,,739,,,,,,42,,,,,,,,,,,,30',
'741,,42,,,,,42,42,,,,,,,,,,,740,,739,,,,,,,,,,,,,740,,,,,,,,741,,,739',
'30,,,,,,,,,,,741,,30,33,30,30,,,,,293,,30,,,,42,,42,248,,1161,,,,,,',
',316,316,316,,,,,33,,,30,,364,365,,367,368,,370,,,30,,42,,,,,,,,,740',
',,,33,,,,,,,,,,33,,,,,,,,,741,,,,,,,33,,,293,,,,,42,,740,,,,,,,,,,,42',
',,,740,,740,,,,42,,741,,,,,,742,,,,,,742,742,,741,,741,,744,,33,,,33',
'744,744,,,,,,33,,740,,42,,,,,,,,33,,,,,,,,,,,,,741,740,,,,,,,,,,,,,',
'33,,,,33,,,33,33,741,,33,,,,,,33,33,,,,,33,33,,316,461,,,467,316,,,',
',467,,,,,,,,,,,,,248,,,,,501,502,503,504,505,506,507,508,509,510,511',
'512,513,514,515,516,517,518,519,520,521,522,,,,,523,,,,,,,,,,,,,,,,',
',,,,,,,316,316,,,,,,,742,,316,742,742,,,,,316,742,316,,744,316,316,744',
'744,742,742,742,,,744,,,,,,,,744,744,744,,,,,,,,,,,,,,,,,,,,,33,,,580',
',581,33,,,,,33,,,,33,,316,316,,,,,,,,,,,,,,,33,,,,742,,,,,,,,,,,,,744',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,742,,,,,316,33,,,,,,,744,,742,,,,,,,,,,',
'33,,744,,,,,,,,,,,,,,,,,,,,,316,,467,467,467,,,,33,,33,,,,,,,,,,,,,',
',33,33,,,,33,33,,,,,,,,,,365,,,,,,,,,742,316,,,316,,316,,,,,,,744,,',
',,,,,,316,,,,,,,,,,467,,,788,,,,790,742,,,,,,33,,33,,,,,744,,742,,742',
',,,,,,,316,,,744,,744,,,,,,,,,823,,,33,,,,,,,,,,,,,,,742,,,,,,316,,',
',,,,744,,,,,,,,,,,742,,,,,,,,33,,,,,744,,,,,,,,33,,33,33,,,,316,467',
'316,33,,,885,,,316,316,467,467,,,,,467,467,,,,,,,,,,,,33,,,,,,,,,,,33',
',,,,,,,,,,,,,,,,,,,,,,,,316,,,,,,,,,316,,,316,,,,,,,,,,,,,,,,,,,,,,316',
',,,,,,,,,,,,,,316,,,,,,,,,,,,,,,,,,,,316,,,316,,,,,,,,,,,,,,,,316,,',
',,,,,,,,,316,,,,,,,,,,,,,,,,,,,316,,,,,,,,467,,,,,,,,,,,,,467,467,467',
'467,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1060,,,,,,,,,,,,,,,,,,,,,,1078,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,1099,,,,,,,,,,,,,,316,,,,,,,,,,,,,,,,,,,,,',
',,,,,,316,467,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,316,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,316,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,316' ]
        racc_goto_table = arr = ::Array.new(4235, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,78,40,125,36,181,114,78,126,118,118,43,131,57,57,57,12,15,121,2,53',
'53,12,12,78,38,76,263,10,119,74,27,40,167,38,46,78,78,78,86,99,5,22',
'22,14,83,83,63,29,29,17,6,6,158,97,94,94,81,81,210,94,75,8,133,198,258',
'78,169,79,33,182,81,47,47,169,33,78,36,172,9,70,152,64,131,199,9,155',
'42,42,7,49,49,169,93,93,93,168,6,1,6,6,6,6,6,6,162,162,6,71,24,24,47',
'5,24,154,224,224,231,174,46,100,215,3,100,170,252,97,231,216,49,175',
'78,235,259,11,235,180,180,248,248,78,80,13,80,9,216,61,61,172,16,252',
'62,62,62,18,81,25,88,88,25,20,79,247,247,21,25,180,23,248,26,214,254',
'30,32,24,24,24,24,44,45,50,51,263,52,54,56,95,95,95,60,66,253,253,99',
'84,90,254,92,98,96,96,110,113,89,89,215,169,251,251,9,128,57,130,7,61',
'201,201,28,9,37,134,253,259,28,78,135,136,201,174,6,76,137,14,138,27',
'27,139,140,27,76,175,141,89,142,27,198,198,38,143,78,144,145,28,125',
'156,160,165,14,166,173,215,176,177,178,179,199,199,36,184,185,187,79',
'112,152,85,188,155,100,100,81,85,172,28,190,57,57,93,93,69,69,69,191',
'28,236,57,236,153,192,236,64,193,236,6,201,194,168,224,224,214,195,263',
'112,112,182,170,42,6,6,154,196,197,200,6,203,79,205,215,206,112,112',
'40,112,78,207,100,211,78,131,212,36,78,78,231,218,14,219,258,28,226',
'14,86,38,74,199,227,169,28,230,232,78,233,121,133,75,93,93,5,31,31,38',
'234,31,78,237,93,47,238,239,78,78,70,6,6,240,241,70,210,8,242,78,78',
'245,214,49,47,158,246,14,14,131,256,96,78,38,78,257,61,61,71,262,9,94',
'49,71,119,169,,,17,169,36,,180,,248,,24,,5,,,,31,31,31,31,,47,121,47',
'28,76,28,93,10,28,,214,40,214,63,28,,34,,49,63,49,95,34,,167,38,167',
',28,254,95,36,6,6,37,22,6,57,83,,253,37,,,61,,162,,,99,81,34,214,,61',
'6,,,,42,42,78,78,153,,40,,153,263,89,12,169,97,,42,,214,198,,,,34,254',
'96,,,31,31,89,96,,6,37,112,112,31,31,,6,95,95,,81,85,,85,33,33,,57,97',
'28,33,33,,28,,,78,74,28,236,,69,236,61,78,6,74,,,89,69,89,,78,,,162',
'162,,,251,251,12,,34,42,,251,251,28,251,,,34,167,28,28,62,53,47,37,',
'100,62,,,28,28,47,,99,61,61,253,,81,29,49,,254,253,85,118,126,25,81',
'49,42,57,131,,37,,36,25,25,78,,253,78,25,25,,15,14,96,6,14,131,,12,96',
'62,,,,12,6,,37,,,96,,37,37,157,,,,,153,153,,112,,57,34,,34,112,,34,',
',31,6,78,34,112,,78,,114,6,,81,112,78,95,96,40,34,27,118,2,222,,40,40',
'162,,,27,27,,,,,27,27,22,,,83,118,33,78,118,,89,,,78,78,181,81,96,43',
'89,,,,167,81,167,,96,167,85,85,,253,6,,85,85,37,,40,,,46,,6,9,42,,74',
'9,,,28,61,,78,9,,,74,6,251,251,251,251,34,78,,,34,6,125,6,,34,37,37',
'37,81,,,,,,112,,,167,,167,47,,,,222,222,25,,96,,,47,,31,,34,222,12,49',
'40,,34,34,,6,,6,,,49,57,,34,34,,,,40,,,,,28,78,93,28,95,,6,,40,14,153',
'153,78,,96,,78,251,,,167,,,157,14,,31,157,255,157,,,,,,6,40,,,,,40,40',
'27,167,,167,,167,253,222,28,81,78,,28,78,78,28,,,95,28,78,,40,112,,28',
'28,,78,78,78,28,28,,167,,85,,,,,,,78,,,89,,6,85,85,85,85,,,,96,89,,96',
'31,,,78,,6,253,,,,253,14,72,157,,157,,157,,157,,,,,,,,95,,36,,40,,,',
',78,,,,,78,,,14,,157,37,,,,78,,34,,,78,78,,,163,131,,163,14,,,,,40,40',
'40,24,96,,,,,,222,,40,,78,,,,,72,,24,,,222,,40,,,78,253,,,,,,,,,6,6',
'6,,72,,28,,78,85,,,,,78,,78,28,,78,,28,14,255,14,34,255,,34,,255,,255',
',,,,,,28,,,,47,,,,,72,,78,,,,47,,,,14,,,49,131,61,,,,,,,,,49,,78,,34',
',,,34,102,102,34,,,,34,163,,,28,78,34,34,6,,78,,34,34,,,,40,14,,38,',
',78,28,,,78,,6,,14,255,78,255,,255,,255,,47,57,78,,78,,,6,6,6,6,,6,',
',,,28,49,6,,,,24,24,255,,,72,6,,78,28,,,,,28,28,14,,40,,,78,,,89,,,',
',,,,,,,89,164,164,164,,81,,,6,,78,81,6,6,6,6,,72,,72,,,,72,,,,6,35,',
',,103,103,35,,,31,,,72,,,,,28,72,28,,35,28,,,,,31,,34,,35,35,35,,35',
'35,35,,,34,72,,72,34,89,,,,,,,,28,,,,,,,,,34,,,35,,,,,35,35,,,35,35',
',,,72,,163,,,163,,,,163,,163,,,,104,104,102,,,,28,,102,102,,96,,164',
'164,164,164,,164,28,34,,,,,,,,,28,,,,,,,35,,,,34,35,35,35,35,35,,,,',
',,91,91,,,,,,,,,39,,,,,28,39,,,,,34,,,164,164,164,164,,,,163,,163,,163',
'34,163,,164,,34,34,,,39,39,39,,31,31,,,,,,,,,72,,,,,163,,,,,,,,,,,39',
',35,35,35,35,35,35,35,,39,103,,35,35,35,,103,103,,91,72,91,,,91,91,35',
',,,,34,,34,,,,,,,,,,,,,72,,,,,,102,,,102,102,,,,,,102,,39,,,34,,,102',
'102,102,39,,,,,,,35,35,91,,,,,,,,35,,,,,,,,,,104,,,,,,104,104,,35,,',
',35,34,,,35,35,,,,,,,,,34,,,,,,,,,35,34,,,,,,102,,,,,91,35,,,,,,35,35',
'39,,39,,,39,,,35,35,35,39,,,,,72,,34,,,,35,,35,39,,,102,,,103,,,103',
'103,,,72,,,103,,102,,,,,,103,103,103,,72,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,91,,72,91,,91,,,,,,,,,,,,,,,,,39,,,,39,35,,,39,39,,,,104,103,,104',
'104,,102,,,,104,,,,39,,,,104,104,104,,,,,35,,39,,91,,,,39,39,,,,,,,',
',103,39,39,102,,,,,,,,35,,,39,103,39,,102,35,102,35,,,,,,,35,,,,,,,',
',35,,,,65,,,,,,65,104,,,,,,,,,,,,102,,65,,,,,,,,91,,65,65,65,,65,,,91',
'91,,,,102,,,,,,104,35,,,35,,,,,103,,,35,,,104,65,,,,,65,65,,35,65,,',
',,,,,,,,,,,,,,,,,,91,,,103,,,35,,,91,35,,91,35,35,77,,35,103,,103,77',
',35,35,,,,,35,35,39,,,91,65,,,77,39,65,65,65,65,65,,,,39,91,77,77,77',
'104,,,,,,,103,,,,,,,,,91,,,91,,,,,,,,77,,,,103,,,,91,,77,,,104,35,,',
',,105,105,,,,,35,,,104,,104,39,,,39,,,,,91,,,,,,,,,65,65,65,65,65,65',
'65,,,,,65,65,65,,,,77,,,,,104,,,65,77,,,,,,,,39,,,,39,,,39,,,35,39,104',
',,,35,39,39,,,35,,39,39,35,,,,,,,,,,,,,,,,,,35,,65,65,,,,,,,,,65,,,',
',,,,,,,,,,,,,,,65,,77,91,65,,,,,65,,,,,39,,,,,,,35,,,,39,,77,,,,91,',
',,,,,,,65,35,,,,,65,65,,,,,,,,,65,65,65,,,,,,,,,106,106,,,,35,,35,,',
',,,,,,,,,,,,35,35,105,39,,35,35,,105,105,,,,,39,,,39,39,,,77,,,,77,',
',91,77,77,,,,,,39,,,,,,,,,,,,77,,,,,,,,,,,,,77,,,,35,,77,77,,,35,65',
'35,,,35,,77,77,,,,,,,,,39,,,77,,77,,91,,,,,,,,,,65,,35,39,,,,,,,,,,',
',,,,,,,,,,,,,,,65,,,,,,,39,,,65,,,,,35,,,,,35,,39,,,,65,39,39,,,,,35',
',35,35,,107,107,,,,35,,,105,,,105,105,,,,,,105,,,,,108,108,,105,105',
'105,,,,35,,106,,,,,,106,106,65,35,,65,,,,39,,,,65,,39,,39,,,39,,,,,65',
',,,,,,77,,,,,,,,77,,,,,,,,68,77,,39,,65,68,,,65,,105,65,65,,,65,,,,',
'68,65,65,,,,,65,65,,68,68,68,,68,,,,,,,,,,39,,,,,39,,,105,,,,,,,,,,39',
'77,68,,77,105,,68,68,,39,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,',
',,77,,,,77,,,,,106,,77,106,106,,68,,,,106,68,68,68,68,68,107,,106,106',
'106,,107,107,,,,,105,,,,,,,,,,,108,,,,,,108,108,65,,,,,,65,,,,,65,,',
',65,,,,,,105,,,,,,,,,,,77,65,,,105,,105,,,,,77,106,,,,,,,,68,68,68,68',
'68,68,68,,,,,68,68,68,,,,,,,,,,,,68,105,,,,,,,65,106,,,,,,,,,,,,,,,106',
'105,,,65,,,,,77,,,,,,,,,,,77,,,,77,,,,,,68,68,,,,65,,65,,,68,,,,,,107',
',,107,107,,65,65,,,107,65,65,68,,,,68,107,107,107,,68,108,,,108,108',
',,,,,108,,,,,106,,,108,108,108,,,,,77,,,,,68,,,,,,68,68,,,,,,,,77,68',
'68,68,,109,109,,,65,106,65,,,,,,,116,116,,,,107,,106,,106,,,,,,77,,',
',,,,,,,,,65,108,,77,,,,,77,77,,,,,,,,,,,107,,106,,,,,,,,,,,,,107,,,',
',,,,108,,,106,65,,,,,,,,,,,108,,65,68,65,65,,,,,77,,65,,,,77,,77,41',
',77,,,,,,,,41,41,41,,,,,68,,,65,,41,41,,41,41,,41,,,65,,77,,,,,,,,,107',
',,,68,,,,,,,,,,68,,,,,,,,,108,,,,,,,68,,,77,,,,,77,,107,,,,,,,,,,,77',
',,,107,,107,,,,77,,108,,,,,,109,,,,,,109,109,,108,,108,,116,,68,,,68',
'116,116,,,,,,68,,107,,77,,,,,,,,68,,,,,,,,,,,,,108,107,,,,,,,,,,,,,',
'68,,,,68,,,68,68,108,,68,,,,,,68,68,,,,,68,68,,41,41,,,41,41,,,,,41',
',,,,,,,,,,,,41,,,,,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41',
'41,41,41,41,41,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,41,41,,,,,,,109,,41,109',
'109,,,,,41,109,41,,116,41,41,116,116,109,109,109,,,116,,,,,,,,116,116',
'116,,,,,,,,,,,,,,,,,,,,,68,,,41,,41,68,,,,,68,,,,68,,41,41,,,,,,,,,',
',,,,,68,,,,109,,,,,,,,,,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,,,,,41',
'68,,,,,,,116,,109,,,,,,,,,,,68,,116,,,,,,,,,,,,,,,,,,,,,41,,41,41,41',
',,,68,,68,,,,,,,,,,,,,,,68,68,,,,68,68,,,,,,,,,,41,,,,,,,,,109,41,,',
'41,,41,,,,,,,116,,,,,,,,,41,,,,,,,,,,41,,,41,,,,41,109,,,,,,68,,68,',
',,,116,,109,,109,,,,,,,,41,,,116,,116,,,,,,,,,41,,,68,,,,,,,,,,,,,,',
'109,,,,,,41,,,,,,,116,,,,,,,,,,,109,,,,,,,,68,,,,,116,,,,,,,,68,,68',
'68,,,,41,41,41,68,,,41,,,41,41,41,41,,,,,41,41,,,,,,,,,,,,68,,,,,,,',
',,,68,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,41,,,41,,,,,,,,,,,,,,,,,,,',
',,41,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,,,,,,,,,,,,,,41,',
',,,,,,,,,,41,,,,,,,,,,,,,,,,,,,41,,,,,,,,41,,,,,,,,,,,,,41,41,41,41',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,41',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41' ]
        racc_goto_check = arr = ::Array.new(4235, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,    98,    17,   122,   nil,    36,    -2,    81,    57,    77,
  -114,   124,  -357,  -298,     7,  -567,  -642,  -741,  -800,   nil,
  -396,  -171,    31,   155,    37,   -71,    92,     8,   215,  -178,
   -54,   295,    30,  -161,   451,  1273,  -227,  -249,     6,  1429,
   -20,  3024,  -412,   -14,   -74,   -74,    10,    34,   nil,    52,
   155,  -102,  -341,   -54,  -456,   nil,  -653,   -20,   nil,   nil,
   161,   -86,   121,  -256,  -458,  1857,  -343,   nil,  2537,   255,
    43,    71,   728,   nil,    -8,    22,  -334,  1967,    -1,  -586,
  -262,    46,   nil,    34,  -251,    44,    -8,   nil,   104,   165,
   145,  1195,  -186,    60,  -574,   153,   169,  -250,  -332,  -279,
  -425,   nil,   644,   780,   870,  1554,  1758,  1952,  1975,  2431,
   176,   nil,  -313,  -182,   -64,   nil,  2444,   nil,  -378,  -806,
   nil,  -819,   nil,   nil,   nil,  -390,  -635,   nil,   133,   nil,
  -446,     7,   nil,     9,   154,   158,  -155,   163,   164,   158,
  -623,  -163,  -620,  -870,   171,  -409,   nil,   nil,   nil,   nil,
   nil,   nil,  -899,  -310,  -492,  -895,  -726,  -271,  -747,   nil,
  -681,   nil,  -486,   214,   184,  -808,  -678,  -343,  -840,  -730,
  -630,   nil,  -788,  -863, -1004,  -992,  -145,  -603,   170,  -397,
  -240,   -21,  -228,   nil,   -41,   -41,   nil,  -492,  -572,   nil,
  -246,  -889,  -349,  -696,  -953,  -536,  -855,  -676,  -663,  -643,
  -675,  -693,   nil,  -581,   nil,  -580,  -399,  -393,   nil,   nil,
  -669,  -393,  -391,   nil,  -745,  -932, -1049,   nil,  -785,  -783,
   nil,   nil,   -95,   nil,  -618,   nil,  -445,  -607,   nil,   nil,
   261,    18,   257,   258,   267,  -283,  -117,   269,   271,   271,
  -484,  -283,  -280,   nil,   nil,   282,  -465,  -190,  -238,   nil,
   nil,  -387,  -672,  -185,  -626,   -57,  -400,  -737,  -739, -1016,
   nil,   nil,   113,  -521 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   331,     7,   394,   334,
   nil,   nil,   nil,   nil,   584,   nil,   nil,   nil,   nil,   330,
   332,   nil,   nil,   nil,   nil,    14,    15,    21,   246,   nil,
   nil,    17,   nil,   455,   247,   363,   nil,   nil,   858,   245,
   491,    24,  1049,   nil,   nil,   nil,   150,    53,    25,    54,
   nil,   nil,   nil,   nil,   nil,   389,   nil,    26,    27,    28,
   nil,   784,   nil,   nil,   nil,   351,   nil,    29,   348,   470,
    36,   nil,   nil,    38,    41,    40,   nil,   242,   243,   655,
   nil,   478,   149,    95,   nil,   460,   111,    50,   nil,    55,
   280,   322,   nil,   471,   nil,   472,   483,   nil,   709,   544,
   320,   305,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    66,   nil,   nil,   306,    70,    71,    72,   nil,   nil,
    73,   988,    74,    75,    76,   nil,   nil,    77,   nil,    78,
   nil,   637,    79,   373,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   310,   298,   793,   958,
   646,   989,   811,   604,   nil,   812,   813,   592,   586,   587,
  1197,  1061,   nil,   593,   nil,   nil,   nil,   622,   nil,   595,
   nil,   935,   nil,   nil,   nil,   602,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   482,   nil,   nil,   762,   nil,   nil,   529,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   916,   nil,   722,   731,   723,   724,   nil,   nil,   725,   726,
   nil,   nil,   nil,   915,   917,   nil,   918,  1035,  1036,  1037,
  1038,  1041,   613,  1042,   730,   732,   nil,   nil,    94,    96,
    98,   nil,   nil,   nil,   nil,   nil,   665,   nil,   nil,   nil,
   nil,   nil,   nil,   107,   108,   nil,   nil,   374,   965,   377,
   591,   798,   594,   977,   607,   609,   610,  1072,   614,  1073,
   617,   620,   nil,   325 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  3, 151, :_reduce_6,
  2, 151, :_reduce_none,
  1, 154, :_reduce_none,
  0, 158, :_reduce_9,
  3, 154, :_reduce_10,
  0, 160, :_reduce_11,
  4, 157, :_reduce_12,
  0, 165, :_reduce_13,
  6, 159, :_reduce_14,
  3, 159, :_reduce_15,
  2, 161, :_reduce_16,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  3, 166, :_reduce_19,
  2, 166, :_reduce_20,
  1, 167, :_reduce_none,
  0, 168, :_reduce_22,
  3, 167, :_reduce_23,
  0, 179, :_reduce_24,
  4, 156, :_reduce_25,
  3, 156, :_reduce_26,
  3, 156, :_reduce_27,
  3, 156, :_reduce_28,
  2, 156, :_reduce_29,
  3, 156, :_reduce_30,
  3, 156, :_reduce_31,
  3, 156, :_reduce_32,
  3, 156, :_reduce_33,
  3, 156, :_reduce_34,
  4, 156, :_reduce_35,
  1, 156, :_reduce_none,
  3, 156, :_reduce_37,
  3, 156, :_reduce_38,
  5, 156, :_reduce_39,
  3, 156, :_reduce_40,
  1, 156, :_reduce_none,
  3, 172, :_reduce_42,
  3, 172, :_reduce_43,
  6, 172, :_reduce_44,
  5, 172, :_reduce_45,
  5, 172, :_reduce_46,
  5, 172, :_reduce_47,
  5, 172, :_reduce_48,
  3, 172, :_reduce_49,
  1, 180, :_reduce_50,
  3, 180, :_reduce_51,
  1, 180, :_reduce_none,
  1, 178, :_reduce_none,
  3, 178, :_reduce_54,
  3, 178, :_reduce_55,
  3, 178, :_reduce_56,
  2, 178, :_reduce_57,
  0, 191, :_reduce_58,
  4, 178, :_reduce_59,
  0, 192, :_reduce_60,
  4, 178, :_reduce_61,
  1, 178, :_reduce_none,
  1, 190, :_reduce_63,
  2, 194, :_reduce_64,
  0, 199, :_reduce_65,
  5, 196, :_reduce_66,
  1, 171, :_reduce_67,
  0, 202, :_reduce_68,
  0, 203, :_reduce_69,
  4, 200, :_reduce_70,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 205, :_reduce_none,
  4, 205, :_reduce_74,
  0, 213, :_reduce_75,
  4, 210, :_reduce_76,
  1, 212, :_reduce_77,
  2, 204, :_reduce_78,
  3, 204, :_reduce_79,
  4, 204, :_reduce_80,
  5, 204, :_reduce_81,
  4, 204, :_reduce_82,
  5, 204, :_reduce_83,
  2, 204, :_reduce_84,
  2, 204, :_reduce_85,
  2, 204, :_reduce_86,
  2, 204, :_reduce_87,
  2, 204, :_reduce_88,
  1, 173, :_reduce_none,
  3, 173, :_reduce_90,
  1, 218, :_reduce_none,
  3, 218, :_reduce_92,
  1, 217, :_reduce_93,
  2, 217, :_reduce_94,
  3, 217, :_reduce_95,
  5, 217, :_reduce_96,
  2, 217, :_reduce_97,
  4, 217, :_reduce_98,
  2, 217, :_reduce_99,
  4, 217, :_reduce_100,
  1, 217, :_reduce_101,
  3, 217, :_reduce_102,
  1, 221, :_reduce_none,
  3, 221, :_reduce_104,
  2, 220, :_reduce_105,
  3, 220, :_reduce_106,
  1, 223, :_reduce_107,
  3, 223, :_reduce_108,
  1, 222, :_reduce_109,
  1, 222, :_reduce_110,
  4, 222, :_reduce_111,
  3, 222, :_reduce_112,
  3, 222, :_reduce_113,
  3, 222, :_reduce_114,
  3, 222, :_reduce_115,
  2, 222, :_reduce_116,
  1, 222, :_reduce_117,
  1, 175, :_reduce_118,
  1, 175, :_reduce_119,
  4, 175, :_reduce_120,
  3, 175, :_reduce_121,
  3, 175, :_reduce_122,
  3, 175, :_reduce_123,
  3, 175, :_reduce_124,
  2, 175, :_reduce_125,
  1, 175, :_reduce_126,
  1, 226, :_reduce_127,
  1, 226, :_reduce_none,
  2, 227, :_reduce_129,
  1, 227, :_reduce_130,
  3, 227, :_reduce_131,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_135,
  1, 193, :_reduce_none,
  1, 169, :_reduce_137,
  1, 169, :_reduce_none,
  1, 170, :_reduce_139,
  0, 231, :_reduce_140,
  4, 170, :_reduce_141,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  3, 188, :_reduce_213,
  3, 188, :_reduce_214,
  6, 188, :_reduce_215,
  5, 188, :_reduce_216,
  5, 188, :_reduce_217,
  5, 188, :_reduce_218,
  5, 188, :_reduce_219,
  4, 188, :_reduce_220,
  3, 188, :_reduce_221,
  3, 188, :_reduce_222,
  3, 188, :_reduce_223,
  2, 188, :_reduce_224,
  2, 188, :_reduce_225,
  2, 188, :_reduce_226,
  2, 188, :_reduce_227,
  3, 188, :_reduce_228,
  3, 188, :_reduce_229,
  3, 188, :_reduce_230,
  3, 188, :_reduce_231,
  3, 188, :_reduce_232,
  3, 188, :_reduce_233,
  4, 188, :_reduce_234,
  2, 188, :_reduce_235,
  2, 188, :_reduce_236,
  3, 188, :_reduce_237,
  3, 188, :_reduce_238,
  3, 188, :_reduce_239,
  3, 188, :_reduce_240,
  1, 188, :_reduce_none,
  3, 188, :_reduce_242,
  3, 188, :_reduce_243,
  3, 188, :_reduce_244,
  3, 188, :_reduce_245,
  3, 188, :_reduce_246,
  2, 188, :_reduce_247,
  2, 188, :_reduce_248,
  3, 188, :_reduce_249,
  3, 188, :_reduce_250,
  3, 188, :_reduce_251,
  3, 188, :_reduce_252,
  3, 188, :_reduce_253,
  6, 188, :_reduce_254,
  4, 188, :_reduce_255,
  6, 188, :_reduce_256,
  4, 188, :_reduce_257,
  6, 188, :_reduce_258,
  1, 188, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  3, 234, :_reduce_264,
  3, 234, :_reduce_265,
  1, 238, :_reduce_266,
  1, 239, :_reduce_none,
  2, 239, :_reduce_268,
  4, 239, :_reduce_269,
  2, 239, :_reduce_270,
  1, 232, :_reduce_none,
  3, 232, :_reduce_272,
  3, 243, :_reduce_273,
  5, 243, :_reduce_274,
  3, 243, :_reduce_275,
  1, 245, :_reduce_none,
  1, 245, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_280,
  4, 183, :_reduce_281,
  2, 183, :_reduce_282,
  1, 216, :_reduce_283,
  2, 216, :_reduce_284,
  2, 216, :_reduce_285,
  4, 216, :_reduce_286,
  1, 216, :_reduce_287,
  0, 248, :_reduce_288,
  2, 209, :_reduce_289,
  2, 247, :_reduce_290,
  2, 246, :_reduce_291,
  1, 246, :_reduce_none,
  1, 240, :_reduce_293,
  2, 240, :_reduce_294,
  3, 240, :_reduce_295,
  4, 240, :_reduce_296,
  1, 177, :_reduce_297,
  1, 177, :_reduce_298,
  3, 176, :_reduce_299,
  4, 176, :_reduce_300,
  2, 176, :_reduce_301,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_312,
  0, 281, :_reduce_313,
  4, 236, :_reduce_314,
  0, 282, :_reduce_315,
  3, 236, :_reduce_316,
  0, 283, :_reduce_317,
  4, 236, :_reduce_318,
  3, 236, :_reduce_319,
  3, 236, :_reduce_320,
  2, 236, :_reduce_321,
  0, 284, :_reduce_322,
  4, 236, :_reduce_323,
  0, 285, :_reduce_324,
  4, 236, :_reduce_325,
  1, 236, :_reduce_326,
  4, 236, :_reduce_327,
  3, 236, :_reduce_328,
  1, 236, :_reduce_329,
  5, 236, :_reduce_330,
  4, 236, :_reduce_331,
  3, 236, :_reduce_332,
  2, 236, :_reduce_333,
  1, 236, :_reduce_none,
  2, 236, :_reduce_335,
  1, 236, :_reduce_336,
  6, 236, :_reduce_337,
  6, 236, :_reduce_338,
  4, 236, :_reduce_339,
  4, 236, :_reduce_340,
  5, 236, :_reduce_341,
  4, 236, :_reduce_342,
  5, 236, :_reduce_343,
  6, 236, :_reduce_344,
  0, 286, :_reduce_345,
  0, 287, :_reduce_346,
  7, 236, :_reduce_347,
  0, 288, :_reduce_348,
  0, 289, :_reduce_349,
  0, 290, :_reduce_350,
  9, 236, :_reduce_351,
  0, 291, :_reduce_352,
  0, 292, :_reduce_353,
  6, 236, :_reduce_354,
  4, 236, :_reduce_355,
  4, 236, :_reduce_356,
  1, 236, :_reduce_357,
  1, 236, :_reduce_358,
  1, 236, :_reduce_359,
  1, 236, :_reduce_360,
  1, 182, :_reduce_361,
  1, 258, :_reduce_none,
  1, 264, :_reduce_none,
  1, 267, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 274, :_reduce_none,
  1, 276, :_reduce_369,
  1, 279, :_reduce_370,
  1, 195, :_reduce_371,
  1, 293, :_reduce_none,
  1, 294, :_reduce_none,
  1, 295, :_reduce_none,
  1, 296, :_reduce_none,
  1, 297, :_reduce_none,
  1, 163, :_reduce_none,
  1, 298, :_reduce_none,
  1, 259, :_reduce_none,
  1, 215, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  2, 265, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 266, :_reduce_none,
  5, 266, :_reduce_387,
  1, 268, :_reduce_none,
  2, 268, :_reduce_389,
  1, 275, :_reduce_none,
  1, 275, :_reduce_391,
  1, 299, :_reduce_none,
  3, 299, :_reduce_393,
  1, 302, :_reduce_394,
  3, 302, :_reduce_395,
  1, 301, :_reduce_396,
  3, 301, :_reduce_397,
  5, 301, :_reduce_398,
  1, 301, :_reduce_399,
  3, 301, :_reduce_400,
  2, 303, :_reduce_401,
  1, 303, :_reduce_402,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  4, 307, :_reduce_405,
  2, 307, :_reduce_406,
  2, 307, :_reduce_407,
  1, 307, :_reduce_408,
  2, 311, :_reduce_409,
  1, 311, :_reduce_none,
  1, 312, :_reduce_411,
  6, 313, :_reduce_412,
  8, 313, :_reduce_413,
  4, 313, :_reduce_414,
  6, 313, :_reduce_415,
  4, 313, :_reduce_416,
  2, 313, :_reduce_417,
  6, 313, :_reduce_418,
  2, 313, :_reduce_419,
  4, 313, :_reduce_420,
  6, 313, :_reduce_421,
  2, 313, :_reduce_422,
  4, 313, :_reduce_423,
  2, 313, :_reduce_424,
  4, 313, :_reduce_425,
  1, 313, :_reduce_426,
  1, 317, :_reduce_427,
  1, 317, :_reduce_428,
  3, 318, :_reduce_429,
  1, 318, :_reduce_430,
  4, 318, :_reduce_431,
  1, 319, :_reduce_none,
  4, 319, :_reduce_433,
  1, 320, :_reduce_434,
  3, 320, :_reduce_435,
  1, 321, :_reduce_436,
  1, 321, :_reduce_none,
  0, 325, :_reduce_438,
  0, 326, :_reduce_439,
  5, 263, :_reduce_440,
  4, 323, :_reduce_441,
  1, 323, :_reduce_442,
  3, 324, :_reduce_443,
  3, 324, :_reduce_444,
  3, 328, :_reduce_445,
  2, 206, :_reduce_446,
  4, 206, :_reduce_447,
  5, 206, :_reduce_448,
  5, 206, :_reduce_449,
  2, 262, :_reduce_450,
  4, 262, :_reduce_451,
  4, 262, :_reduce_452,
  3, 262, :_reduce_453,
  3, 262, :_reduce_454,
  3, 262, :_reduce_455,
  2, 262, :_reduce_456,
  1, 262, :_reduce_457,
  4, 262, :_reduce_458,
  0, 331, :_reduce_459,
  4, 261, :_reduce_460,
  0, 332, :_reduce_461,
  4, 261, :_reduce_462,
  0, 333, :_reduce_463,
  0, 334, :_reduce_464,
  4, 211, :_reduce_465,
  0, 336, :_reduce_466,
  0, 337, :_reduce_467,
  4, 329, :_reduce_468,
  1, 335, :_reduce_469,
  2, 335, :_reduce_470,
  3, 335, :_reduce_471,
  4, 335, :_reduce_472,
  0, 339, :_reduce_473,
  6, 272, :_reduce_474,
  1, 338, :_reduce_none,
  1, 338, :_reduce_none,
  0, 342, :_reduce_477,
  0, 343, :_reduce_478,
  7, 273, :_reduce_479,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  1, 340, :_reduce_none,
  3, 340, :_reduce_483,
  3, 340, :_reduce_484,
  1, 344, :_reduce_none,
  2, 344, :_reduce_486,
  3, 344, :_reduce_487,
  1, 344, :_reduce_488,
  1, 344, :_reduce_489,
  1, 344, :_reduce_490,
  1, 189, :_reduce_none,
  3, 349, :_reduce_492,
  1, 349, :_reduce_none,
  3, 351, :_reduce_494,
  1, 351, :_reduce_none,
  1, 353, :_reduce_496,
  1, 354, :_reduce_497,
  1, 352, :_reduce_none,
  4, 352, :_reduce_499,
  4, 352, :_reduce_500,
  4, 352, :_reduce_501,
  3, 352, :_reduce_502,
  4, 352, :_reduce_503,
  4, 352, :_reduce_504,
  4, 352, :_reduce_505,
  3, 352, :_reduce_506,
  3, 352, :_reduce_507,
  3, 352, :_reduce_508,
  2, 352, :_reduce_509,
  0, 358, :_reduce_510,
  4, 352, :_reduce_511,
  2, 352, :_reduce_512,
  0, 359, :_reduce_513,
  4, 352, :_reduce_514,
  1, 345, :_reduce_515,
  1, 345, :_reduce_516,
  2, 345, :_reduce_517,
  3, 345, :_reduce_518,
  5, 345, :_reduce_519,
  2, 345, :_reduce_520,
  4, 345, :_reduce_521,
  1, 345, :_reduce_none,
  2, 360, :_reduce_523,
  3, 360, :_reduce_524,
  1, 347, :_reduce_525,
  3, 347, :_reduce_526,
  5, 346, :_reduce_527,
  2, 363, :_reduce_528,
  1, 363, :_reduce_529,
  1, 362, :_reduce_none,
  3, 362, :_reduce_531,
  1, 361, :_reduce_532,
  3, 348, :_reduce_533,
  1, 348, :_reduce_534,
  2, 348, :_reduce_535,
  1, 348, :_reduce_536,
  1, 364, :_reduce_none,
  3, 364, :_reduce_538,
  2, 366, :_reduce_539,
  1, 366, :_reduce_540,
  1, 367, :_reduce_541,
  2, 368, :_reduce_542,
  1, 368, :_reduce_543,
  2, 370, :_reduce_544,
  1, 365, :_reduce_none,
  1, 365, :_reduce_none,
  1, 355, :_reduce_none,
  3, 355, :_reduce_548,
  3, 355, :_reduce_549,
  2, 355, :_reduce_550,
  2, 355, :_reduce_551,
  1, 355, :_reduce_none,
  1, 355, :_reduce_none,
  1, 355, :_reduce_none,
  2, 355, :_reduce_555,
  2, 355, :_reduce_556,
  1, 371, :_reduce_none,
  1, 371, :_reduce_none,
  1, 371, :_reduce_none,
  1, 371, :_reduce_none,
  1, 371, :_reduce_none,
  1, 371, :_reduce_none,
  1, 371, :_reduce_none,
  1, 371, :_reduce_none,
  1, 371, :_reduce_565,
  1, 371, :_reduce_none,
  1, 350, :_reduce_567,
  2, 372, :_reduce_568,
  2, 356, :_reduce_569,
  3, 356, :_reduce_570,
  1, 356, :_reduce_571,
  6, 162, :_reduce_572,
  0, 162, :_reduce_573,
  1, 373, :_reduce_574,
  1, 373, :_reduce_none,
  1, 373, :_reduce_none,
  2, 374, :_reduce_577,
  1, 374, :_reduce_none,
  2, 164, :_reduce_579,
  1, 164, :_reduce_none,
  1, 249, :_reduce_581,
  1, 249, :_reduce_none,
  1, 250, :_reduce_583,
  1, 376, :_reduce_584,
  1, 376, :_reduce_none,
  2, 376, :_reduce_586,
  3, 377, :_reduce_587,
  1, 377, :_reduce_588,
  3, 251, :_reduce_589,
  3, 252, :_reduce_590,
  3, 253, :_reduce_591,
  3, 253, :_reduce_592,
  1, 381, :_reduce_593,
  3, 381, :_reduce_594,
  1, 382, :_reduce_none,
  2, 382, :_reduce_596,
  3, 255, :_reduce_597,
  3, 255, :_reduce_598,
  1, 384, :_reduce_599,
  3, 384, :_reduce_600,
  3, 254, :_reduce_601,
  3, 254, :_reduce_602,
  3, 256, :_reduce_603,
  3, 256, :_reduce_604,
  1, 385, :_reduce_605,
  3, 385, :_reduce_606,
  1, 386, :_reduce_607,
  3, 386, :_reduce_608,
  1, 378, :_reduce_609,
  2, 378, :_reduce_610,
  1, 379, :_reduce_611,
  2, 379, :_reduce_612,
  1, 380, :_reduce_613,
  2, 380, :_reduce_614,
  1, 383, :_reduce_615,
  0, 388, :_reduce_616,
  3, 383, :_reduce_617,
  0, 389, :_reduce_618,
  4, 383, :_reduce_619,
  1, 387, :_reduce_620,
  1, 387, :_reduce_621,
  1, 387, :_reduce_622,
  1, 387, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  2, 390, :_reduce_626,
  1, 390, :_reduce_627,
  1, 392, :_reduce_none,
  1, 392, :_reduce_none,
  1, 392, :_reduce_none,
  1, 392, :_reduce_none,
  3, 391, :_reduce_632,
  1, 375, :_reduce_none,
  2, 375, :_reduce_634,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 225, :_reduce_644,
  1, 225, :_reduce_645,
  1, 225, :_reduce_646,
  1, 225, :_reduce_647,
  1, 225, :_reduce_648,
  1, 225, :_reduce_649,
  1, 225, :_reduce_650,
  1, 257, :_reduce_651,
  1, 257, :_reduce_652,
  1, 181, :_reduce_653,
  1, 181, :_reduce_654,
  1, 186, :_reduce_655,
  1, 186, :_reduce_656,
  0, 393, :_reduce_657,
  4, 277, :_reduce_658,
  1, 277, :_reduce_659,
  1, 235, :_reduce_none,
  1, 235, :_reduce_661,
  3, 394, :_reduce_662,
  5, 394, :_reduce_663,
  3, 394, :_reduce_664,
  1, 280, :_reduce_none,
  0, 396, :_reduce_666,
  3, 280, :_reduce_667,
  4, 395, :_reduce_668,
  2, 395, :_reduce_669,
  2, 395, :_reduce_670,
  1, 395, :_reduce_none,
  2, 398, :_reduce_672,
  0, 398, :_reduce_673,
  6, 327, :_reduce_674,
  8, 327, :_reduce_675,
  4, 327, :_reduce_676,
  6, 327, :_reduce_677,
  4, 327, :_reduce_678,
  6, 327, :_reduce_679,
  2, 327, :_reduce_680,
  4, 327, :_reduce_681,
  6, 327, :_reduce_682,
  2, 327, :_reduce_683,
  4, 327, :_reduce_684,
  2, 327, :_reduce_685,
  4, 327, :_reduce_686,
  1, 327, :_reduce_687,
  0, 327, :_reduce_688,
  1, 244, :_reduce_689,
  1, 322, :_reduce_690,
  1, 322, :_reduce_691,
  1, 322, :_reduce_692,
  1, 322, :_reduce_693,
  1, 300, :_reduce_none,
  1, 300, :_reduce_695,
  1, 400, :_reduce_none,
  1, 401, :_reduce_none,
  3, 401, :_reduce_698,
  1, 314, :_reduce_699,
  3, 314, :_reduce_700,
  1, 402, :_reduce_none,
  2, 403, :_reduce_702,
  1, 403, :_reduce_703,
  2, 404, :_reduce_704,
  1, 404, :_reduce_705,
  1, 308, :_reduce_none,
  3, 308, :_reduce_707,
  1, 397, :_reduce_none,
  3, 397, :_reduce_709,
  1, 369, :_reduce_none,
  1, 369, :_reduce_none,
  2, 306, :_reduce_712,
  2, 305, :_reduce_713,
  1, 305, :_reduce_714,
  3, 405, :_reduce_715,
  3, 406, :_reduce_716,
  1, 315, :_reduce_717,
  3, 315, :_reduce_718,
  1, 399, :_reduce_719,
  3, 399, :_reduce_720,
  1, 407, :_reduce_none,
  1, 407, :_reduce_none,
  2, 316, :_reduce_723,
  1, 316, :_reduce_724,
  1, 408, :_reduce_none,
  1, 408, :_reduce_none,
  2, 310, :_reduce_727,
  2, 309, :_reduce_728,
  0, 309, :_reduce_729,
  1, 197, :_reduce_none,
  0, 409, :_reduce_731,
  4, 197, :_reduce_732,
  1, 260, :_reduce_733,
  2, 260, :_reduce_none,
  1, 242, :_reduce_none,
  3, 242, :_reduce_736,
  3, 410, :_reduce_737,
  2, 410, :_reduce_738,
  4, 410, :_reduce_739,
  2, 410, :_reduce_740,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 330, :_reduce_none,
  1, 330, :_reduce_none,
  1, 330, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 219, :_reduce_none,
  2, 184, :_reduce_762,
  2, 357, :_reduce_763,
  0, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 278, :_reduce_767,
  1, 278, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_770,
  0, 153, :_reduce_771 ]

racc_reduce_n = 772

racc_shift_n = 1278

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tLONELY => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tLOWEST => 145,
  :tEQL => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tBDOT2",
  "tBDOT3",
  "tLOWEST",
  "tEQL",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "@5",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@6",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "p_expr",
  "def_name",
  "@7",
  "@8",
  "fname",
  "defn_head",
  "k_def",
  "defs_head",
  "singleton",
  "dot_or_colon",
  "@9",
  "expr_value_do",
  "do",
  "@10",
  "@11",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@12",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "op",
  "reswords",
  "symbol",
  "@13",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "f_opt_paren_args",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@14",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "p_case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "f_any_kwrest",
  "f_kwrest",
  "f_no_kwarg",
  "block_args_tail",
  "f_block_kwarg",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "excessed_comma",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "@28",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "case_args",
  "@33",
  "@34",
  "cases",
  "@35",
  "p_top_expr",
  "p_cases",
  "@36",
  "@37",
  "p_top_expr_body",
  "p_args",
  "p_find",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@38",
  "@39",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_rest",
  "p_kwarg",
  "p_any_kwrest",
  "p_kw",
  "p_kw_label",
  "p_kwrest",
  "kwrest_mark",
  "p_kwnorest",
  "p_primitive",
  "p_var_ref",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@40",
  "@41",
  "ssym",
  "dsym",
  "sym",
  "@42",
  "f_paren_args",
  "args_tail",
  "@43",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@44",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 11
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug 12

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      result = val[2] # wtf?

    result
end

def _reduce_24(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_27(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_28(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_29(val, _values, result)
                      result = val[1]

    result
end

def _reduce_30(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_31(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_33(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_34(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_35(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug 13
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_38(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_39(val, _values, result)
                      # unwraps s(:to_ary, rhs)
                      lhs, _, (_, rhs), _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody

                      result = new_masgn lhs, new_rescue(rhs, resbody), :wrap

    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_43(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_44(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_45(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_46(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_47(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_48(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_49(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_50(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

def _reduce_51(val, _values, result)
                      expr, (_, line), resbody = val

                      expr = value_expr expr
                      ary  = s(:array).line line
                      result = new_rescue(expr, new_resbody(ary, resbody))

    result
end

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_55(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_56(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_57(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

def _reduce_58(val, _values, result)
                      # value_expr($1);
                      self.lexer.lex_state = EXPR_BEG|EXPR_LABEL
                      self.lexer.command_start = false
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.env.extend

    result
end

def _reduce_59(val, _values, result)
                      lhs, _, in_kwarg, rhs = val

                      self.env.unextend
                      self.in_kwarg = in_kwarg

                      rhs = new_in rhs, nil, nil, rhs.line
                      result = new_case lhs, rhs, rhs.line

    result
end

def _reduce_60(val, _values, result)
                      # TODO? value_expr($1);
                      self.lexer.lex_state = EXPR_BEG|EXPR_LABEL
                      self.lexer.command_start = false
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.env.extend

    result
end

def _reduce_61(val, _values, result)
                      self.env.unextend

                      expr, _, old_kwarg, pat = val

                      expr = value_expr expr

                      self.in_kwarg = old_kwarg
                      pat_in = new_in pat, nil, nil, expr.line
                      result = new_case expr, pat_in, expr.line

    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      # TODO: numparam_name(p, fname);

                      (id, line), = val
                      old_in_def = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      result = [id.to_sym, line, old_in_def]

    result
end

def _reduce_64(val, _values, result)
                      _, name = val
                      result = name

    result
end

def _reduce_65(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_66(val, _values, result)
                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.in_single += 1 # TODO: remove?

                      # self.in_def = true # local_push
                      # self.env.extend
                      # lexer.cmdarg.push false
                      # lexer.cond.push false

                      _, recv, _, _, name = val

                      result = [recv, name]

    result
end

def _reduce_67(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_68(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_69(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_70(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

def _reduce_74(val, _values, result)
                      blk, _, (msg, _line), args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_75(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_76(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      # self.env.unextend

    result
end

def _reduce_77(val, _values, result)
                      (msg, line), = val
                      result = new_call(nil, msg.to_sym).line line

    result
end

def _reduce_78(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_79(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_80(val, _values, result)
                      lhs, callop, (op, _), args = val

                      result = new_call lhs, op.to_sym, args, callop
                      result.line lhs.line

    result
end

def _reduce_81(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_82(val, _values, result)
                      lhs, _, (id, line), args = val

                      result = new_call lhs, id.to_sym, args
                      result.line line

    result
end

def _reduce_83(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_84(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_85(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_86(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_87(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_88(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 89 omitted

def _reduce_90(val, _values, result)
                      result = val[1]

    result
end

# reduce 91 omitted

def _reduce_92(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_93(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_94(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_95(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_96(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_97(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_98(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_99(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_100(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_101(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_102(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 103 omitted

def _reduce_104(val, _values, result)
                      result = val[1]

    result
end

def _reduce_105(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_106(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_107(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_108(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_109(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_110(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_111(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_112(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_113(val, _values, result)
                      recv, _, (id, _line) = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_114(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_115(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 14
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, (id, _line) = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_116(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 15
                        yyerror "dynamic constant assignment"
                      end

                      _, (id, l) = val

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_117(val, _values, result)
                      ref, = val

                      self.backref_assign_error ref

    result
end

def _reduce_118(val, _values, result)
                      var, = val

                      result = self.assignable var

    result
end

def _reduce_119(val, _values, result)
                      var, = val

                      result = self.assignable var

                      debug 16

    result
end

def _reduce_120(val, _values, result)
                      lhs, _, args, _ = val

                      result = self.aryset lhs, args

    result
end

def _reduce_121(val, _values, result)
                      lhs, op, (id, _line) = val

                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_122(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_attrasgn lhs, id

    result
end

def _reduce_123(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_124(val, _values, result)
                      expr, _, (id, _line) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 17
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_125(val, _values, result)
                      _, (id, l) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 18
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_126(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_127(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      _, (name, line) = val
                      result = s(:colon3, name.to_sym).line line

    result
end

def _reduce_130(val, _values, result)
                      (id, line), = val
                      result = [id.to_sym, line] # TODO: sexp?

    result
end

def _reduce_131(val, _values, result)
                      pval, _, (name, _line) = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

def _reduce_135(val, _values, result)
                      lexer.lex_state = EXPR_END

    result
end

# reduce 136 omitted

def _reduce_137(val, _values, result)
                      (id, line), = val

                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 138 omitted

def _reduce_139(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_140(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_141(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

def _reduce_213(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_214(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_215(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_216(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_217(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_218(val, _values, result)
                      lhs, _, (id, _line), (op, _), rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_219(val, _values, result)
                      lhs1, _, (lhs2, _line), op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_220(val, _values, result)
                      _, (lhs, line), op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_221(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_222(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_223(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_224(val, _values, result)
                      v1, _ = val
                      v2 = nil

                      result = s(:dot2, v1, v2).line v1.line

    result
end

def _reduce_225(val, _values, result)
                      v1, _ = val
                      v2 = nil

                      result = s(:dot3, v1, v2).line v1.line

    result
end

def _reduce_226(val, _values, result)
                      _, v2, = val
                      v1 = nil

                      result = s(:dot2, v1, v2).line v2.line

    result
end

def _reduce_227(val, _values, result)
                      _, v2 = val
                      v1 = nil

                      result = s(:dot3, v1, v2).line v2.line

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      _, (num, line), _, arg = val
                      lit = s(:lit, num).line line
                      result = new_call(new_call(lit, :"**", argl(arg)), :"-@")


    result
end

def _reduce_235(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_236(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_237(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_238(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_240(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_243(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_244(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_245(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_246(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_247(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_248(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_249(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_250(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_251(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_252(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_253(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_254(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

def _reduce_255(val, _values, result)
                      (name, line, in_def), args, _, body = val

                      result = s(:defn, name, args, body).line line

                      local_pop in_def
                      endless_method_name result

    result
end

def _reduce_256(val, _values, result)
                      (name, line, in_def), args, _, body, _, resbody = val

                      result = s(:defn, name, args,
                                 new_rescue(body,
                                            new_resbody(s(:array).line(line),
                                                        resbody))).line line

                      local_pop in_def
                      endless_method_name result

    result
end

def _reduce_257(val, _values, result)
                      (recv, (name, line, in_def)), args, _, body = val

                      result = s(:defs, recv, name, args, body).line(line)

                      self.in_single -= 1
                      local_pop in_def
                      endless_method_name result

    result
end

def _reduce_258(val, _values, result)
                      (recv, (name, line, in_def)), args, _, body, _, resbody = val

                      result = s(:defs, recv, name, args,
                                 new_rescue(body,
                                            new_resbody(s(:array).line(line),
                                                        resbody))).line line

                      local_pop in_def
                      endless_method_name result

    result
end

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

def _reduce_264(val, _values, result)
                      lhs, (op, _), rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_265(val, _values, result)
                      lhs, (op, _), rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_266(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 267 omitted

def _reduce_268(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_269(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_270(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 271 omitted

def _reduce_272(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_273(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

def _reduce_274(val, _values, result)
                      yyerror "Unexpected ..." unless
                        self.lexer.is_local_id(:"*")  &&
                        self.lexer.is_local_id(:"**") &&
                        self.lexer.is_local_id(:"&")

                      result = call_args val

    result
end

def _reduce_275(val, _values, result)
                      yyerror "Unexpected ..." unless
                        self.lexer.is_local_id(:"*")  &&
                        self.lexer.is_local_id(:"**") &&
                        self.lexer.is_local_id(:"&")

                      result = call_args val

    result
end

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = args val

    result
end

def _reduce_281(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_282(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_283(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_284(val, _values, result)
                      result = call_args val

    result
end

def _reduce_285(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_286(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_287(val, _values, result)
                      result = call_args val

    result
end

def _reduce_288(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_289(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_290(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_291(val, _values, result)
                      result = val[1]

    result
end

# reduce 292 omitted

def _reduce_293(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_294(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_295(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_296(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_297(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_298(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_299(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_300(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_301(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

def _reduce_312(val, _values, result)
                      (msg, line), = val
                      result = new_call nil, msg.to_sym
                      result.line line

    result
end

def _reduce_313(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_314(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_315(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_316(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_317(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_318(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_319(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_320(val, _values, result)
                      expr, _, (id, _line) = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_321(val, _values, result)
                      _, (id, line) = val

                      result = s(:colon3, id.to_sym).line line

    result
end

def _reduce_322(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_323(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_325(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_326(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_327(val, _values, result)
                      (_, line), _, args, _ = val

                      result = new_yield(args).line line

    result
end

def _reduce_328(val, _values, result)
                      (_, line), _, _ = val

                      result = new_yield.line line

    result
end

def _reduce_329(val, _values, result)
                      (_, line), = val

                      result = new_yield.line line

    result
end

def _reduce_330(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_331(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_332(val, _values, result)
                      debug 19

    result
end

def _reduce_333(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_336(val, _values, result)
                      expr, = val
                      result = expr

    result
end

def _reduce_337(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_338(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_339(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_340(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_341(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_342(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_343(val, _values, result)
                      (_, line), expr, _, body, _ = val

                      result = new_case expr, body, line

    result
end

def _reduce_344(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_345(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_346(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_347(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_348(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_349(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_350(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_351(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_352(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_353(val, _values, result)
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_354(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_355(val, _values, result)
                      # [               [:f, 1, false], s(:args)...]
                      # =>
                      # [[:k_def, 666], [:f, 1], false, s(:args)...]
                      val.insert 1, val.first.pop
                      val.insert 0, [:k_def, 666]

                      result, in_def = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.ignore_body_comments

    result
end

def _reduce_356(val, _values, result)
                      # [        [recv, [:name, 1, false]], s(:args...]
                      # =>
                      # [         recv, [:name, 1, false],  s(:args...]
                      # =>
                      # [         recv, [:name, 1], false,  s(:args...]
                      # =>
                      # [ :k_def, recv, [:name, 1], false,  s(:args...]

                      val.prepend(*val.shift)
                      val.insert 2, val[1].pop
                      val.insert 0, [:k_def, 666]

                      result, in_def = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.ignore_body_comments

    result
end

def _reduce_357(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_358(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_359(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_360(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_361(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_370(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_371(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

# reduce 372 omitted

# reduce 373 omitted

# reduce 374 omitted

# reduce 375 omitted

# reduce 376 omitted

# reduce 377 omitted

# reduce 378 omitted

# reduce 379 omitted

# reduce 380 omitted

# reduce 381 omitted

# reduce 382 omitted

# reduce 383 omitted

# reduce 384 omitted

# reduce 385 omitted

# reduce 386 omitted

def _reduce_387(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      result = val[1]

    result
end

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      result = val[1]

    result
end

def _reduce_394(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_395(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_396(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_397(val, _values, result)
                      args, _, rest = val

                      result = block_var args, rest

    result
end

def _reduce_398(val, _values, result)
                      lhs, _, splat, _, rhs = val

                      result = block_var lhs, splat, rhs

    result
end

def _reduce_399(val, _values, result)
                      rest, = val

                      result = block_var rest

    result
end

def _reduce_400(val, _values, result)
                      splat, _, rest = val

                      result = block_var splat, rest

    result
end

def _reduce_401(val, _values, result)
                      _, (id, line) = val

                      result = args ["*#{id}".to_sym]
                      result.line line

    result
end

def _reduce_402(val, _values, result)
                      result = args [:*]
                      result.line lexer.lineno # FIX: tSTAR -> line

    result
end

# reduce 403 omitted

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      result = call_args val

    result
end

def _reduce_406(val, _values, result)
                      result = call_args val

    result
end

def _reduce_407(val, _values, result)
                      result = call_args val

    result
end

def _reduce_408(val, _values, result)
                      (id, line), = val
                      result = call_args [id]
                      result.line line

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

# reduce 410 omitted

def _reduce_411(val, _values, result)
                      result = s(:WTF_COMMA!)

    result
end

def _reduce_412(val, _values, result)
                      result = args val

    result
end

def _reduce_413(val, _values, result)
                      result = args val

    result
end

def _reduce_414(val, _values, result)
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = args val

    result
end

def _reduce_416(val, _values, result)
                      result = args val

    result
end

def _reduce_417(val, _values, result)
                      arg, _ = val
                      result = arg << nil

    result
end

def _reduce_418(val, _values, result)
                      result = args val

    result
end

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      result = args val

    result
end

def _reduce_422(val, _values, result)
                      result = args val

    result
end

def _reduce_423(val, _values, result)
                      result = args val

    result
end

def _reduce_424(val, _values, result)
                      result = args val

    result
end

def _reduce_425(val, _values, result)
                      result = args val

    result
end

def _reduce_426(val, _values, result)
                      result = args val

    result
end

def _reduce_427(val, _values, result)
 result = 0
    result
end

def _reduce_428(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_429(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_430(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_431(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      result = args val

    result
end

def _reduce_434(val, _values, result)
                      result = args val

    result
end

def _reduce_435(val, _values, result)
                      result = args val

    result
end

def _reduce_436(val, _values, result)
                      (id, line), = val
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_439(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_440(val, _values, result)
                      _, (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_441(val, _values, result)
                      result = args val

    result
end

def _reduce_442(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_443(val, _values, result)
                      result = val[1]

    result
end

def _reduce_444(val, _values, result)
                      result = val[1]

    result
end

def _reduce_445(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_446(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      cmd, blk = val

                      syntax_error "Both block arg and actual block given." if
                        cmd.block_pass?

                      if inverted? val then
                        val = invert_block_call val
                        cmd, blk = val
                      end

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_447(val, _values, result)
                      lhs, _, (id, _line), args = val

                      result = new_call lhs, id.to_sym, args

    result
end

def _reduce_448(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_449(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_450(val, _values, result)
                      call, args = val

                      result = call.concat args.sexp_body if args

    result
end

def _reduce_451(val, _values, result)
                      recv, call_op, (op, _line), args = val

                      result = new_call recv, op.to_sym, args, call_op

    result
end

def _reduce_452(val, _values, result)
                      recv, _, (op, _line), args = val

                      result = new_call recv, op.to_sym, args

    result
end

def _reduce_453(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_call lhs, id.to_sym

    result
end

def _reduce_454(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_455(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_456(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_457(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_458(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_459(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_460(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_461(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_462(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_463(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_464(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_465(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_466(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_467(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_468(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_469(val, _values, result)
                      arg, = val

                      result = s(:array, arg).line arg.line

    result
end

def _reduce_470(val, _values, result)
                      _, arg = val

                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_471(val, _values, result)
                      args, _, id = val

                      result = self.list_append args, id

    result
end

def _reduce_472(val, _values, result)
                      args, _, _, id = val

                      result = self.list_append args, s(:splat, id).line(id.line)

    result
end

def _reduce_473(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_474(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line val[1]
                      result << val[5] if val[5]

    result
end

# reduce 475 omitted

# reduce 476 omitted

def _reduce_477(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG|EXPR_LABEL
                      self.lexer.command_start = false
                      result = self.in_kwarg
                      self.in_kwarg = true
                      push_pvtbl
                      push_pktbl

    result
end

def _reduce_478(val, _values, result)
                      pop_pktbl
                      pop_pvtbl
                      old_kwargs = _values[-3]
                      self.in_kwarg = old_kwargs

    result
end

def _reduce_479(val, _values, result)
                      (_, line), _, pat, _, _, body, cases = val

                      result = new_in pat, body, cases, line

    result
end

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

def _reduce_483(val, _values, result)
                      body, _, cond = val
                      body = remove_begin body

                      result = s(:if, cond, body, nil).line body.line

    result
end

def _reduce_484(val, _values, result)
                      body, _, cond = val
                      body = remove_begin body

                      result = s(:if, cond, nil, body).line body.line

    result
end

# reduce 485 omitted

def _reduce_486(val, _values, result)
                      expr, _ = val

                      tail = new_array_pattern_tail nil, true, nil, nil
                      result = new_array_pattern nil, expr, tail, expr.line

    result
end

def _reduce_487(val, _values, result)
                      expr, _, args = val

                      result = new_array_pattern nil, expr, args, expr.line

    result
end

def _reduce_488(val, _values, result)
                      find, = val

                      result = new_find_pattern nil, find

    result
end

def _reduce_489(val, _values, result)
                      args, = val
                      result = new_array_pattern nil, nil, args, args.line

    result
end

def _reduce_490(val, _values, result)
                      kwargs, = val
                      result = new_hash_pattern nil, kwargs, kwargs.line

    result
end

# reduce 491 omitted

def _reduce_492(val, _values, result)
                      # NODE *n = NEW_LIST($1, &@$);
                      # n = list_append(p, n, $3);
                      # $$ = new_hash(p, n, &@$);

                      expr, _, var = val

                      id = var.last

                      self.env[id] = :lvar # HACK: need to extend env
                      lhs = s(:lasgn, id).line var.line

                      result = new_assign lhs, expr

    result
end

# reduce 493 omitted

def _reduce_494(val, _values, result)
                      lhs, _, rhs = val

                      result = s(:or, lhs, rhs).line lhs.line

    result
end

# reduce 495 omitted

def _reduce_496(val, _values, result)
 push_pktbl
    result
end

def _reduce_497(val, _values, result)
 push_pktbl
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      lhs, _, args, _ = val

                      pop_pktbl
                      result = new_array_pattern(lhs, nil, args, lhs.line)

    result
end

def _reduce_500(val, _values, result)
                      const, _, find, _ = val

                      pop_pktbl
                      result = new_find_pattern(const, find).line const.line

    result
end

def _reduce_501(val, _values, result)
                      lhs, _, kwargs, _ = val

                      pop_pktbl
                      result = new_hash_pattern(lhs, kwargs, lhs.line)

    result
end

def _reduce_502(val, _values, result)
                      const, _, _ = val

                      tail = new_array_pattern_tail nil, nil, nil, nil
                      result = new_array_pattern const, nil, tail, const.line

    result
end

def _reduce_503(val, _values, result)
                      const, _, pre_arg, _ = val

                      pop_pktbl
                      result = new_array_pattern const, nil, pre_arg, const.line

    result
end

def _reduce_504(val, _values, result)
                      const, _, find, _ = val

                      pop_pktbl
                      result = new_find_pattern(const, find).line const.line

    result
end

def _reduce_505(val, _values, result)
                      const, _, kwargs, _ = val

                      result = new_hash_pattern const, kwargs, const.line

    result
end

def _reduce_506(val, _values, result)
                      const, _, _ = val

                      tail = new_array_pattern_tail nil, nil, nil, nil
                      result = new_array_pattern const, nil, tail, const.line

    result
end

def _reduce_507(val, _values, result)
                      _, pat, _ = val

                      result = new_array_pattern nil, nil, pat, pat.line

    result
end

def _reduce_508(val, _values, result)
                      _, find, _ = val

                      result = new_find_pattern nil, find

    result
end

def _reduce_509(val, _values, result)
                      (_, line), _ = val

                      result = s(:array_pat).line line

    result
end

def _reduce_510(val, _values, result)
                      push_pktbl
                      result = self.in_kwarg
                      self.in_kwarg = false

    result
end

def _reduce_511(val, _values, result)
                      _, in_kwarg, kwargs, _ = val

                      pop_pktbl
                      self.in_kwarg = in_kwarg

                      result = new_hash_pattern(nil, kwargs, kwargs.line)

    result
end

def _reduce_512(val, _values, result)
                      (_, line), _ = val

                      tail = new_hash_pattern_tail nil, nil, line
                      result = new_hash_pattern nil, tail, line

    result
end

def _reduce_513(val, _values, result)
 push_pktbl
    result
end

def _reduce_514(val, _values, result)
                      _, _, expr, _ = val

                      pop_pktbl
                      result = expr

    result
end

def _reduce_515(val, _values, result)
                      expr, = val

                      ary = s(:array_TAIL, expr).line expr.line
                      result = new_array_pattern_tail(ary, nil, nil, nil).line expr.line

    result
end

def _reduce_516(val, _values, result)
                      head, = val

                      result = new_array_pattern_tail head, true, nil, nil

    result
end

def _reduce_517(val, _values, result)
                      head, tail = val

                      both = array_pat_concat head, tail

                      result = new_array_pattern_tail both, nil, nil, nil
                      result.line head.line

    result
end

def _reduce_518(val, _values, result)
                      head, _, (id, _line) = val

                      result = new_array_pattern_tail head, true, id.to_sym, nil
                      result.line head.line

    result
end

def _reduce_519(val, _values, result)
                      head, _, (id, _line), _, post = val

                      result = new_array_pattern_tail head, true, id.to_sym, post
                      result.line head.line

    result
end

def _reduce_520(val, _values, result)
                      expr, _ = val

                      result = new_array_pattern_tail(expr, true, nil, nil).line expr.line

    result
end

def _reduce_521(val, _values, result)
                      head, _, _, post = val

                      result = new_array_pattern_tail(head, true, nil, post).line head.line

    result
end

# reduce 522 omitted

def _reduce_523(val, _values, result)
                      arg, _ = val
                      result = arg

    result
end

def _reduce_524(val, _values, result)
                      head, tail, _ = val

                      result = s(:PATTERN, *head.sexp_body, *tail.sexp_body)
                      result.line head.line

    result
end

def _reduce_525(val, _values, result)
                      (id, line), = val

                      result = new_array_pattern_tail nil, true, id, nil
                      result.line line

    result
end

def _reduce_526(val, _values, result)
                      (id, line), _, rhs = val

                      result = new_array_pattern_tail nil, true, id, rhs
                      result.line line

    result
end

def _reduce_527(val, _values, result)
                      lhs, _, mid, _, rhs = val

                      result = new_find_pattern_tail lhs, mid, rhs

    result
end

def _reduce_528(val, _values, result)
                      _, (id, line) = val

                      result = [id.to_sym, line]

    result
end

def _reduce_529(val, _values, result)
                      (_id, line), = val

                      result = [nil, line]

    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      lhs, _, rhs = val

                      result = array_pat_concat lhs, rhs

    result
end

def _reduce_532(val, _values, result)
                      expr, = val
                      expr = s(:array_TAIL, expr).line expr.line unless
                        expr.sexp_type == :array_TAIL
                      result = expr

    result
end

def _reduce_533(val, _values, result)
                      kw_arg, _, rest = val
                      # TODO? new_unique_key_hash(p, $1, &@$)
                      result = new_hash_pattern_tail kw_arg, rest, kw_arg.line

    result
end

def _reduce_534(val, _values, result)
                      kwarg, = val
                      # TODO? new_unique_key_hash(p, $1, &@$)
                      result = new_hash_pattern_tail kwarg, nil, kwarg.line

    result
end

def _reduce_535(val, _values, result)
                      kwarg, _ = val
                      # TODO? new_unique_key_hash(p, $1, &@$)
                      result = new_hash_pattern_tail kwarg, nil, kwarg.line

    result
end

def _reduce_536(val, _values, result)
                      rest, = val

                      result = new_hash_pattern_tail nil, rest, rest.line

    result
end

# reduce 537 omitted

def _reduce_538(val, _values, result)
                      kwarg, _, kw = val
                      kwarg.concat kw.sexp_body
                      result = kwarg

    result
end

def _reduce_539(val, _values, result)
                      # TODO: error_duplicate_pattern_key(p, get_id($1), &@1);
                      lhs, rhs = val

                      result = s(:PAIR, lhs, rhs).line lhs.line

    result
end

def _reduce_540(val, _values, result)
                      lhs, = val

                      # TODO: error_duplicate_pattern_variable(p, get_id($1), &@1);

                      # TODO: if ($1 && !is_local_id(get_id($1))) {
                      #     yyerror1(&@1, "key must be valid as local variables");
                      # }

                      # $$ = list_append(p, NEW_LIST(NEW_LIT(ID2SYM($1), &@$), &@$),
                      #                     assignable(p, $1, 0, &@$));

                      case lhs.sexp_type
                      when :lit then
                        assignable [lhs.value, lhs.line]
                      else
                        # TODO or done?
                        debug 666
                      end

                      # TODO PAIR -> LIST ?
                      result = s(:PAIR, lhs, nil).line lhs.line

    result
end

def _reduce_541(val, _values, result)
                      (id, line), = val

                      result = s(:lit, id.to_sym).line line

    result
end

def _reduce_542(val, _values, result)
                      _, (id, line) = val

                      name = id.to_sym
                      self.assignable [name, line]
                      result = s(:kwrest, :"**#{name}").line line

    result
end

def _reduce_543(val, _values, result)
                      (_, line), = val

                      result = s(:kwrest, :"**").line line

    result
end

def _reduce_544(val, _values, result)
                      (_, line), _ = val

                      # TODO: or s(:norest)? s(:**nil)?
                      result = s(:kwrest, :"**nil").line line

    result
end

# reduce 545 omitted

# reduce 546 omitted

# reduce 547 omitted

def _reduce_548(val, _values, result)
                      lhs, _, rhs = val

                      lhs = value_expr lhs
                      rhs = value_expr rhs

                      result = s(:dot2, lhs, rhs).line lhs.line

    result
end

def _reduce_549(val, _values, result)
                      lhs, _, rhs = val

                      lhs = value_expr lhs
                      rhs = value_expr rhs

                      result = s(:dot3, lhs, rhs).line lhs.line

    result
end

def _reduce_550(val, _values, result)
                      v1, _ = val

                      result = s(:dot2, v1, nil).line v1.line

    result
end

def _reduce_551(val, _values, result)
                      v1, _ = val

                      result = s(:dot3, v1, nil).line v1.line

    result
end

# reduce 552 omitted

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      _, v1 = val

                      result = s(:dot2, nil, v1).line v1.line

    result
end

def _reduce_556(val, _values, result)
                      _, v1 = val

                      result = s(:dot3, nil, v1).line v1.line

    result
end

# reduce 557 omitted

# reduce 558 omitted

# reduce 559 omitted

# reduce 560 omitted

# reduce 561 omitted

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      # TODO? if (!($$ = gettable(p, $1, &@$))) $$ = NEW_BEGIN(0, &@$);
                      var, = val

                      result = var

    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      (id, line), = val

                      # TODO: error_duplicate_pattern_variable(p, $1, &@1);
                      # TODO: assignable(p, $1, 0, &@$);
                      result = s(:lvar, id.to_sym).line line

    result
end

def _reduce_568(val, _values, result)
                      _, (id, line) = val

                      # TODO: check id against env for lvar or dvar

                      result = s(:lvar, id.to_sym).line line

    result
end

def _reduce_569(val, _values, result)
                      _, (id, line) = val
                      result = s(:colon3, id.to_sym).line line

    result
end

def _reduce_570(val, _values, result)
                      lhs, _, (id, _line) = val

                      l = lhs.line
                      result = s(:const, s(:colon2, lhs, id.to_sym).line(l)).line l

    result
end

def _reduce_571(val, _values, result)
                      # TODO $$ = gettable(p, $1, &@$);
                      (id, line), = val
                      result = s(:const, id.to_sym).line line

    result
end

def _reduce_572(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_573(val, _values, result)
                      result = nil

    result
end

def _reduce_574(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 575 omitted

# reduce 576 omitted

def _reduce_577(val, _values, result)
                      result = val[1]

    result
end

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      (lit, line), = val
                      result = s(:lit, lit).line line

    result
end

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_584(val, _values, result)
                      debug 36

    result
end

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_587(val, _values, result)
                      (_, line), str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_DEDENT

                      result = str.line line

    result
end

def _reduce_588(val, _values, result)
                      result = new_string val

    result
end

def _reduce_589(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_590(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_591(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_592(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_593(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_594(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 595 omitted

def _reduce_596(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_597(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_598(val, _values, result)
                      (_, line), list, _, = val
                      list.line line
                      result = list

    result
end

def _reduce_599(val, _values, result)
                      result = new_symbol_list

    result
end

def _reduce_600(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_601(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_602(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_603(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_604(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_605(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_606(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_607(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_608(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_609(val, _values, result)
                      line = prev_value_to_lineno _values.last
                      result = s(:str, +"").line line

    result
end

def _reduce_610(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_611(val, _values, result)
                      result = nil

    result
end

def _reduce_612(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_613(val, _values, result)
                      result = nil

    result
end

def _reduce_614(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_615(val, _values, result)
                      result = new_string val

    result
end

def _reduce_616(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_617(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_618(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_619(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.pop
                      lexer.cmdarg.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug 37
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_620(val, _values, result)
                      (id, line), = val
                      result = s(:gvar, id.to_sym).line line

    result
end

def _reduce_621(val, _values, result)
                      (id, line), = val
                      result = s(:ivar, id.to_sym).line line

    result
end

def _reduce_622(val, _values, result)
                      (id, line), = val
                      result = s(:cvar, id.to_sym).line line

    result
end

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

def _reduce_626(val, _values, result)
                      _, (id, line) = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

def _reduce_627(val, _values, result)
                      (id, line), = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

def _reduce_632(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug 38
                      end

    result
end

# reduce 633 omitted

def _reduce_634(val, _values, result)
                      _, (num, line) = val
                      result = [-num, line]

    result
end

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

def _reduce_644(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_645(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_646(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_647(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_648(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_649(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_650(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_651(val, _values, result)
                      raise "NO: #{val.inspect}" if Sexp === val.first
                      (var, line), = val
                      result = Sexp === var ? var : self.gettable(var)

                      result.line line

    result
end

def _reduce_652(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_653(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_654(val, _values, result)
                      result = self.assignable val[0]
                      debug 39

    result
end

def _reduce_655(val, _values, result)
                      (ref, line), = val
                      result = s(:nth_ref, ref).line line

    result
end

def _reduce_656(val, _values, result)
                      (ref, line), = val
                      result = s(:back_ref, ref).line line

    result
end

def _reduce_657(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_658(val, _values, result)
                      result = val[2]

    result
end

def _reduce_659(val, _values, result)
                      result = nil

    result
end

# reduce 660 omitted

def _reduce_661(val, _values, result)
                      result = end_args val

    result
end

def _reduce_662(val, _values, result)
                      result = end_args val

    result
end

def _reduce_663(val, _values, result)
                      result = end_args val

    result
end

def _reduce_664(val, _values, result)
                      result = end_args val

    result
end

# reduce 665 omitted

def _reduce_666(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_667(val, _values, result)
                      result = end_args val

    result
end

def _reduce_668(val, _values, result)
                      result = args val

    result
end

def _reduce_669(val, _values, result)
                      result = args val

    result
end

def _reduce_670(val, _values, result)
                      result = args val

    result
end

# reduce 671 omitted

def _reduce_672(val, _values, result)
                      result = val[1]

    result
end

def _reduce_673(val, _values, result)
                      result = nil

    result
end

def _reduce_674(val, _values, result)
                      result = args val

    result
end

def _reduce_675(val, _values, result)
                      result = args val

    result
end

def _reduce_676(val, _values, result)
                      result = args val

    result
end

def _reduce_677(val, _values, result)
                      result = args val

    result
end

def _reduce_678(val, _values, result)
                      result = args val

    result
end

def _reduce_679(val, _values, result)
                      result = args val

    result
end

def _reduce_680(val, _values, result)
                      result = args val

    result
end

def _reduce_681(val, _values, result)
                      result = args val

    result
end

def _reduce_682(val, _values, result)
                      result = args val

    result
end

def _reduce_683(val, _values, result)
                      result = args val

    result
end

def _reduce_684(val, _values, result)
                      result = args val

    result
end

def _reduce_685(val, _values, result)
                      result = args val

    result
end

def _reduce_686(val, _values, result)
                      result = args val

    result
end

def _reduce_687(val, _values, result)
                      result = args val

    result
end

def _reduce_688(val, _values, result)
                      result = args val
                      # result.line lexer.lineno

    result
end

def _reduce_689(val, _values, result)
                      result = s(:forward_args).line lexer.lineno

    result
end

def _reduce_690(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_691(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_692(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_693(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 694 omitted

def _reduce_695(val, _values, result)
                      (id, line), = val
                      identifier = id.to_sym
                      self.env[identifier] = :lvar

                      result = [identifier, line]

    result
end

# reduce 696 omitted

# reduce 697 omitted

def _reduce_698(val, _values, result)
                      _, margs, _ = val

                      result = margs

    result
end

def _reduce_699(val, _values, result)
                      result = new_arg val

    result
end

def _reduce_700(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << (Sexp === item ? item : item.first)

    result
end

# reduce 701 omitted

def _reduce_702(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_703(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_704(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_705(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 706 omitted

def _reduce_707(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 708 omitted

def _reduce_709(val, _values, result)
                      result = args val

    result
end

# reduce 710 omitted

# reduce 711 omitted

def _reduce_712(val, _values, result)
                      (_, line), _ = val
                      result = [:"**nil", line]

    result
end

def _reduce_713(val, _values, result)
                      _, (id, line) = val

                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"**#{name}", line]

    result
end

def _reduce_714(val, _values, result)
                      id = :"**"
                      self.env[id] = :lvar # TODO: needed?!?
                      result = [id, lexer.lineno] # TODO: tPOW/tDSTAR include lineno

    result
end

def _reduce_715(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs
                      # TODO: detect duplicate names

    result
end

def _reduce_716(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs

    result
end

def _reduce_717(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_718(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_719(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_720(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 721 omitted

# reduce 722 omitted

def _reduce_723(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      _, (id, line) = val
                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"*#{name}", line]

    result
end

def _reduce_724(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = [name, lexer.lineno] # FIX: tSTAR to include lineno

    result
end

# reduce 725 omitted

# reduce 726 omitted

def _reduce_727(val, _values, result)
                      _, (id, line) = val
                      identifier = id.to_sym

                      self.env[identifier] = :lvar
                      result = ["&#{identifier}".to_sym, line]

    result
end

def _reduce_728(val, _values, result)
                      _, arg = val
                      result = arg

    result
end

def _reduce_729(val, _values, result)
                      result = nil

    result
end

# reduce 730 omitted

def _reduce_731(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_732(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_733(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 734 omitted

# reduce 735 omitted

def _reduce_736(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_737(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_738(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_739(val, _values, result)
                      (_, line), sym, _, value = val

                      sym.sexp_type = :dsym

                      result = s(:array, sym, value).line line

    result
end

def _reduce_740(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 741 omitted

# reduce 742 omitted

# reduce 743 omitted

# reduce 744 omitted

# reduce 745 omitted

# reduce 746 omitted

# reduce 747 omitted

# reduce 748 omitted

# reduce 749 omitted

# reduce 750 omitted

# reduce 751 omitted

# reduce 752 omitted

# reduce 753 omitted

# reduce 754 omitted

# reduce 755 omitted

# reduce 756 omitted

# reduce 757 omitted

# reduce 758 omitted

# reduce 759 omitted

# reduce 760 omitted

# reduce 761 omitted

def _reduce_762(val, _values, result)
                      _, close = val
                      result = [close, lexer.lineno]

    result
end

def _reduce_763(val, _values, result)
                      _, close = val
                      result = [close, lexer.lineno]

    result
end

# reduce 764 omitted

# reduce 765 omitted

# reduce 766 omitted

def _reduce_767(val, _values, result)
 yyerrok
    result
end

# reduce 768 omitted

# reduce 769 omitted

def _reduce_770(val, _values, result)
 yyerrok
    result
end

def _reduce_771(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby30Parser
