#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby21Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-523,565,565,284,565,565,-537,-523,-523,-523,233,565,-523,-523,-523',
'3,-523,254,643,646,224,225,224,225,-523,-94,-523,-523,-523,-108,-109',
'-116,-115,-111,126,-113,-523,-523,-80,-523,-523,-523,-523,-523,230,221',
'234,-110,-111,251,734,279,-113,253,252,249,250,222,879,-110,608,-108',
'605,604,603,-112,606,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,642,645,-523,-523,-523,223,-523,-523,284,286,-523',
'224,225,-523,-523,226,-523,776,-523,284,-523,284,-523,-523,-523,-523',
'-523,-523,-523,234,-523,234,-523,274,130,130,-112,130,130,129,129,941',
'129,129,130,-523,-523,-523,-523,129,-523,-526,-523,-99,-100,-107,-106',
'-523,-526,-526,-526,-523,-619,-526,-526,-526,-111,-526,-113,130,-102',
'-111,-102,-113,129,-526,-104,-526,-526,-526,-110,-114,878,-101,281,-110',
'281,-526,-526,-538,-526,-526,-526,-526,-526,286,-104,230,-112,825,-523',
'234,-619,-112,229,841,286,-523,286,825,-526,842,627,227,335,632,-616',
'-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,95,824,-526,-526,-526,-102,-526,-526,96,-103,-526,824,-109,-526',
'-526,-620,-526,-437,-526,627,-526,231,-526,-526,-526,-526,-526,-526',
'-526,475,-526,-104,-526,108,109,108,109,-523,627,336,-102,629,628,-102',
'-523,-526,-526,-526,-526,-616,-526,-300,-526,-523,-105,-537,-102,-526',
'-300,-300,-300,-526,612,-107,-300,-300,-104,-300,-533,-104,-437,-616',
'855,615,572,-533,-116,-437,-532,-617,629,628,-104,234,-116,-532,-437',
'-300,-300,788,-300,-300,-300,-300,-300,-534,231,-99,-531,629,628,368',
'-534,393,-437,-531,623,622,790,627,-108,110,111,110,111,396,-623,399',
'-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300',
'-526,-538,-300,-300,-300,402,669,-526,616,-623,-300,544,-617,-300,419',
'816,-526,817,-300,-116,-300,627,-300,-300,-300,-300,-300,-300,-300,746',
'-300,544,-300,747,-617,-528,612,-623,629,628,625,627,-528,-100,-623',
'-300,-300,615,-105,-619,-300,-623,663,-623,627,663,-109,-300,-623,-623',
'-623,-114,-623,254,-623,-623,-115,-623,-529,-623,-111,-623,-113,-106',
'-619,-529,-623,424,-623,474,623,622,629,628,630,627,-115,-623,-623,664',
'-623,-623,-623,-623,-623,251,-623,-102,664,253,252,-530,629,628,635',
'590,912,-111,-530,476,-111,803,591,477,616,629,628,640,-623,-623,-623',
'-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,803,233,-623',
'-623,-623,506,670,515,-104,518,-623,520,-113,-623,629,628,647,-79,-623',
'234,-623,-113,-623,-623,-623,-623,-623,-623,-623,-110,-623,-623,-623',
'608,-110,605,604,603,612,606,-343,723,-101,530,722,-623,-623,-343,-103',
'615,-623,-623,224,225,531,-110,-343,-623,-623,-623,-623,-112,538,-623',
'-623,-623,723,-623,421,725,291,610,594,423,422,254,-623,-623,-623,-623',
'620,619,623,622,130,224,225,-623,-623,129,-623,-623,-623,-623,-623,608',
'234,605,604,603,723,606,608,725,605,604,603,251,606,281,130,253,252',
'249,250,129,616,541,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623',
'-623,-623,-623,-623,545,776,-623,-623,-623,230,818,-623,776,254,-623',
'234,472,-623,-623,572,-623,780,-623,412,-623,473,-623,-623,-623,-623',
'-623,-623,-623,130,-623,-623,-623,608,129,605,604,603,612,606,271,272',
'851,855,577,-623,-623,-623,-623,615,-623,-300,-623,723,224,225,725,-623',
'-300,-300,-300,-112,578,-300,-300,-300,608,-300,605,604,603,610,606',
'623,622,270,269,-300,-300,-300,620,619,623,622,851,855,634,-300,-300',
'-535,-300,-300,-300,-300,-300,608,-535,605,604,603,234,606,130,1043',
'776,-535,608,129,605,604,603,638,606,780,641,644,616,651,-300,-300,-300',
'-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,130,776,-300',
'-300,-300,129,819,-300,-273,653,-300,654,776,-300,-300,234,-300,661',
'-300,662,-300,780,-300,-300,-300,-300,-300,-300,-300,130,-300,281,-300',
'608,129,605,604,603,612,606,254,674,254,254,254,-300,-300,-300,-300',
'615,-300,-300,-300,254,681,234,234,-300,-300,-300,-300,-114,-536,230',
'-300,-300,419,-300,254,-536,537,610,251,234,-94,700,253,252,-536,535',
'620,619,623,622,264,265,234,-300,-300,550,-300,-300,-300,-300,-300,133',
'134,135,136,137,251,-291,257,711,253,252,249,250,-291,716,255,719,256',
'234,726,727,616,-291,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300',
'-300,-300,-300,-300,230,230,-300,-300,-300,230,669,547,576,520,-300',
'730,657,-300,719,719,473,574,-300,572,-300,655,-300,-300,-300,-300,-300',
'-300,-300,719,-300,608,-300,605,604,603,612,606,608,753,605,604,603',
'758,606,-300,-300,615,-300,764,-300,-623,767,768,770,-301,230,-300,-623',
'-623,-623,-114,-301,749,-623,-623,254,-623,-301,610,230,-301,751,772',
'774,-301,-623,1027,620,619,623,622,264,265,-301,783,751,-623,-623,784',
'-623,-623,-623,-623,-623,785,791,792,251,-300,257,-274,253,252,249,250',
'-300,804,255,506,256,-620,506,234,616,-300,821,274,-623,-623,-623,-623',
'-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-300,830,-623,-623',
'-623,832,670,-300,518,520,-623,711,-620,-623,234,281,-300,254,-623,281',
'-623,711,-623,-623,-623,-623,-623,-623,-623,254,-623,-623,-623,264,265',
'1008,-535,605,604,603,855,606,719,-535,234,-623,-623,234,-623,251,-623',
'257,-535,253,252,249,250,-623,896,897,234,-112,8,85,86,87,12,78,906',
'-275,-536,79,80,234,911,928,83,-536,81,82,84,33,34,76,77,711,-536,-273',
'933,719,88,31,30,118,117,119,120,901,902,22,719,903,124,125,658,11,49',
'10,13,122,121,123,112,60,114,113,115,719,116,124,125,234,108,109,719',
'45,46,44,254,258,259,260,261,271,272,266,267,262,263,230,247,248,-291',
'719,264,265,1033,43,234,-291,36,955,234,62,63,1031,767,64,-291,38,251',
'958,257,48,253,252,249,250,270,269,255,23,256,960,962,230,105,95,97',
'98,99,101,1027,964,964,96,106,234,268,971,-248,751,-301,89,-276,972',
'93,100,102,-301,110,111,309,85,86,87,12,78,-301,767,975,79,80,978,980',
'982,83,234,81,82,84,33,34,76,77,133,134,135,136,137,88,31,30,118,117',
'119,120,984,719,22,758,1004,1005,1014,658,11,49,311,13,122,121,123,112',
'60,114,113,115,1015,116,124,125,1025,108,109,1028,45,46,44,254,258,259',
'260,261,271,272,266,267,262,263,-300,247,248,841,1034,264,265,-300,43',
'1044,964,313,-620,964,62,63,-300,964,64,767,38,251,1051,257,48,253,252',
'249,250,270,269,255,23,256,1053,1055,1057,105,95,97,98,99,101,1057,716',
'719,96,106,719,268,1015,-620,-619,234,89,964,1079,93,100,102,1057,110',
'111,309,85,86,87,12,78,1057,1057,1057,79,80,,,,83,,81,82,84,33,34,76',
'77,133,134,135,136,137,88,31,30,118,117,119,120,,1008,22,605,604,603',
',606,11,49,311,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,254,258,259,260,261,271,272,266,267,262,263,,247,248,,,264',
'265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269,255',
'23,256,,,,105,95,97,98,99,101,,,,96,106,,268,,,,,89,,,93,100,102,,110',
'111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,133,134',
'135,136,137,88,31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260',
'261,271,272,266,267,262,263,,247,248,,,264,265,,43,,,36,,,62,63,,,64',
',38,251,,257,48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99',
'101,,,,96,106,,268,,,,,89,,,93,100,102,,110,111,309,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'22,,,,,,11,49,311,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,254,258,259,260,261,271,272,266,267,262,263,,247,248,',
',264,265,,43,,,313,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270',
'269,255,23,256,,,,105,95,97,98,99,101,,,,96,106,234,268,,,,,89,,,93',
'100,102,,110,111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260,261',
'271,272,266,267,262,263,,247,248,,,264,265,,43,,,313,,,62,63,,,64,,38',
'251,,257,48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101',
',,,96,106,,268,,,,,89,,,93,100,102,,110,111,309,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,,11,49,311,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,254,258,259,260,261,271,272,266,267,262,263,,247,248,,,264',
'265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269,255',
'23,256,,,,105,95,97,98,99,101,,,,96,106,,268,,,,,89,,,93,100,102,,110',
'111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260,261,271,272',
'266,267,262,263,,247,248,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257',
'48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,,,96,106',
',268,,,,,89,,,93,100,102,,110,111,309,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49',
'311,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
'254,258,259,260,261,271,272,266,267,262,263,,-645,-645,,,264,265,,43',
',,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269,255,23,256',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,309',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,22,,,,,,11,49,311,13,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,254,258,259,260,261,271,272,266,267,262,263',
',-645,-645,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249',
'250,270,269,255,23,256,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,254,-645,-645,-645',
'-645,271,272,,,-645,-645,,,,,,264,265,,43,,,36,,,62,63,,,64,,38,251',
',257,48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,,93,100,102,,110,111,8,85,86,87,12,78,,,,79,80,,,',
'83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,10,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,254,-645,-645,-645,-645,271,272,,,-645,-645,,,,,,264,265,,43,,,36',
',,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269,255,23,256,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,309,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,22,,,,,,11,49,311,13,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,254,-645,-645,-645,-645,271,272,,,-645,-645,,,,,',
'264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269',
'255,23,256,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,254,-645,-645,-645,-645,271',
'272,,,-645,-645,,,,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253',
'252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,,,96,106,,,,',
',,89,,,93,100,102,,110,111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,311,13',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,254,-645',
'-645,-645,-645,271,272,,,-645,-645,,,,,,264,265,,43,,,36,,,62,63,,,64',
',38,251,,257,48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,309,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,,11,49,311,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,254,-645,-645,-645,-645,271,272,,,-645,-645,,,,,,264,265,',
'43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269,255,23',
'256,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,254,258,259,260,261,271,272,,,262,263',
',,,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270',
'269,255,23,256,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260,261,271',
'272,266,,262,263,,,,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48',
'253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,309,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,311',
'13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,254',
',,,,,,,,,,,,,,,264,265,,43,,,36,,254,62,63,,,64,,38,251,,257,48,253',
'252,249,250,264,265,,23,,,,,105,95,97,98,99,101,,,251,96,106,,253,252',
'249,250,,89,,,93,100,102,,110,111,309,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49',
'311,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,309,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,22,,,,,,11,49,311,13,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,311,13',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,309,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,11,49,311,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,309,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
'11,49,311,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,309,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,311,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,309,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,10,13,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,',
',,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,608,64,605,604,603,612,606,48',
',,,,,,,244,615,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,610,-436,93',
'100,102,,110,111,-436,-436,-436,623,622,-436,-436,-436,608,-436,605',
'604,603,612,606,,,,-436,-436,-436,,,,615,,,,,-436,-436,,-436,-436,-436',
'-436,-436,616,,,,,,,,,610,,,,,,,,,620,619,623,622,,-436,-436,-436,-436',
'-436,-436,-436,-436,-436,-436,-436,-436,-436,-436,,,-436,-436,-436,',
',-436,,281,-436,,,-436,-436,,-436,616,-436,,-436,,-436,-436,-436,-436',
'-436,-436,-436,,-436,-436,-436,,,,,,,,,,,,,-436,-436,-309,-436,,-436',
',,,-309,-309,-309,-436,,-309,-309,-309,608,-309,605,604,603,612,606',
',,,,-309,-309,,,,615,,,,,-309,-309,,-309,-309,-309,-309,-309,,,,,,,',
',,610,,,,,,,,,620,619,623,622,,-309,-309,-309,-309,-309,-309,-309,-309',
'-309,-309,-309,-309,-309,-309,,,-309,-309,-309,,,-309,,291,-309,,,-309',
'-309,,-309,616,-309,,-309,,-309,-309,-309,-309,-309,-309,-309,,-309',
',-309,,,,,,,,,,,,,-309,-309,,-309,,-309,85,86,87,,78,,-309,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,302,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,302,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',300,,298,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',303,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,302,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,,,244,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,303,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246',
',,,,,,326,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,,',
'332,,,,,,608,,605,604,603,612,606,,,,,,,,322,,615,318,,,62,63,,,64,',
'317,,,,,,,,,,,,610,,,,,105,95,97,98,99,101,623,622,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,616,81,82,84,328,329',
'76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,326,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,,,332,,,,,,608,,605,604,603',
'612,606,,,,,,,,322,,615,245,,,62,63,,,64,,,,,,,,,,,,,,610,,,,,105,95',
'97,98,99,101,623,622,,96,106,,,,334,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,616,81,82,84,328,329,76,77,,,,,,88,325,331,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,608,64,605,604,603,612,606,48,,,,,,,,244,615,,',
',105,95,97,98,99,101,,,,96,106,,,,,,,89,610,-292,93,100,102,,110,111',
'-292,-292,-292,623,622,-292,-292,-292,608,-292,605,604,603,612,606,',
',,,-292,-292,-292,,,615,,,,,-292,-292,,-292,-292,-292,-292,-292,616',
',,,,,,,,610,,,,,,,,,620,619,623,622,,-292,-292,-292,-292,-292,-292,-292',
'-292,-292,-292,-292,-292,-292,-292,,,-292,-292,-292,,,-292,,234,-292',
',,-292,-292,,-292,616,-292,,-292,,-292,-292,-292,-292,-292,-292,-292',
',-292,,-292,,,,,,,,,,,,,-292,-292,-292,-292,,-292,,-292,,,,-644,-292',
'85,86,87,12,78,-644,-644,-644,79,80,-644,-644,-644,83,-644,81,82,84',
'33,34,76,77,,-644,-644,-644,,88,31,30,118,117,119,120,-644,-644,22,-644',
'-644,-644,-644,-644,11,49,,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,-644,-644,-644,-644,-644,-644,-644,-644,-644',
'-644,-644,-644,-644,-644,,,-644,-644,-644,43,,-644,36,281,-644,62,63',
'-644,-644,64,-644,38,-644,,-644,48,-644,-644,-644,-644,-644,-644,-644',
'23,-644,-644,-644,,105,95,97,98,99,101,,,,96,106,-644,-644,,-644,,-644',
'89,,,93,100,102,-644,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,',
',,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97',
'98,99,101,,,,96,106,130,,,,,129,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,326,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',,,332,,,,,,608,,605,604,603,612,606,,,,,,,,362,,615,36,,,62,63,,,64',
',38,,,,,,,,,,,,610,,,,,105,95,97,98,99,101,623,622,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83,616,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,10,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,412,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49',
',,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,',
',,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,429,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,',
',122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,',
',,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,429,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,302,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,300,,298,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,303,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
',49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,234,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331',
'118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',246,,,,,,,49,,,122,121,123,112,60,114,113,115,302,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48',
',,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,302',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63',
',,64,,300,,298,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,',
',,89,,303,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,302,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,,,244,,,,,105,95,97,98',
'99,101,,,,96,106,234,,,,,,89,,303,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,',
'83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,326,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',,,332,,,,,,608,,605,604,603,612,606,,,,,,,,322,,615,245,,,62,63,,,64',
',,,,,,,,,,,,,610,,,,,105,95,97,98,99,101,623,622,,96,106,,,,533,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,616,81,82,84,328,329',
'76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,326,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,,,332,,,,,,608,,605,604,603',
'612,606,,,,,,,,322,,615,318,,,62,63,,,64,,,,,,,,,,,,,,610,,,,,105,95',
'97,98,99,101,623,622,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,616,81,82,84,328,329,76,77,,,,,,88,325,331,118,117',
'119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48',
',,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88',
'325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,550',
',62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,',
',,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,302,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,239,,,245,,,62,63,,,64,,300,,,,48,,,,,,,,244,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,303,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246',
',,,,,,49,,,122,121,123,112,60,114,113,115,302,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88',
'325,331,118,117,119,120,,,246,,,,,,,326,,,122,121,123,579,60,114,113',
'580,,116,124,125,,108,109,,,,332,,,,,,608,,605,604,603,612,606,,,,,',
',,581,,615,245,,,62,63,,,64,,,,,,,,,,,,,,610,,,,,105,95,97,98,99,101',
'623,622,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,616,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246',
',,,,,,326,,,122,121,123,579,60,114,113,580,,116,124,125,,108,109,,,',
'332,,,,,,608,,605,604,603,612,606,,,,,,,,581,,615,245,,,62,63,,,64,',
',,,,,,,,,,,,610,,,,,105,95,97,98,99,101,623,622,,96,106,,,,,,,89,,,93',
'100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,616,81,82,84,328,329,76',
'77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,608,64,605,604,603,612,606,48,,,,,,,,244,615,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,610,-624,93,100,102,,110,111,-624,-624',
'-624,623,622,-624,-624,-624,608,-624,605,604,603,612,606,,,,-624,-624',
'-624,-624,,,615,,,,,-624,-624,,-624,-624,-624,-624,-624,616,,,,,,,,',
'610,,,,,,,,,620,619,623,622,,-624,-624,-624,-624,-624,-624,-624,-624',
'-624,-624,-624,-624,-624,-624,,,-624,-624,-624,,,-624,,,-624,,,-624',
'-624,,-624,616,-624,,-624,,-624,-624,-624,-624,-624,-624,-624,,-624',
'-624,-624,608,,605,604,603,612,606,,,,,,-624,-624,-624,-624,615,-624',
'-625,-624,,,,,-624,-625,-625,-625,,,-625,-625,-625,,-625,,,,610,,,,',
'-625,-625,-625,-625,620,619,623,622,,,,-625,-625,,-625,-625,-625,-625',
'-625,,,,,,,,,,,,,,,,,,,,,,616,,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-625,-625,,,-625,-625,-625,,,-625,,,-625,,,-625',
'-625,,-625,,-625,,-625,,-625,-625,-625,-625,-625,-625,-625,,-625,-625',
'-625,,,,,,,,,,,,,-625,-625,-625,-625,,-625,,-625,,85,86,87,-625,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'246,,,,,,,49,,,122,121,123,112,60,114,113,115,302,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,',
',,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88',
'325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329',
'76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,-644,93,100,102,,110,111,-644,-644,-644,',
',-644,-644,-644,,-644,,,,,,,,,-644,-644,,,,,,,,,,-644,-644,,-644,-644',
'-644,-644,-644,,,,,,,,504,456,,,505,,,,,,,,,173,174,,169,151,152,153',
'160,157,159,,,154,155,-644,,,175,176,161,162,-644,,,,,281,-644,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,-644,-644,177',
',,,,,,,,,,,-644,,85,86,87,-644,78,,170,,79,80,-644,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,302,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,239,,,245,,,62,63,,,64,,694,,298,,48,,,,,,,,244,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,303,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246',
',,,,,,49,,,122,121,123,112,60,114,113,115,302,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,298,,48,,,,,,',
',244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325',
'331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63',
',,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,311,13,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,412,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,',
'83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,',
',,,326,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,,,332',
',,,,,,,,,,,,,,,,,,,322,,,318,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,',
',,,,,49,,,122,121,123,112,60,114,113,115,302,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,',
',244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325',
'331,118,117,119,120,,,246,,,,,,,326,,,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,,,332,,,,,,,,,,,,,,,,,,,,322,,,318,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,',
',,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,',
',,,,,49,,,122,121,123,112,60,114,113,115,302,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,',
',244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329',
'76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,239,,,245,,,62,63,,,64,,796,,,,48,,,,,,,,244,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,',
',,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,',
'105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,302,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48',
',,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88',
'325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329',
'76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,302,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',239,,,245,,,62,63,,,64,,694,,298,,48,,,,,,,,244,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,303,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246',
',,,,,,49,,,122,121,123,112,60,114,113,115,302,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,298,,48,,,,,,',
',244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,',
',245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,326,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',,,332,,,,,,,,,,,,,,,,,,,,322,,,318,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,326,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',,,332,,,,,,,,,,,,,,,,,,,,322,,,318,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,429,,,,48,,,,,',
',,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331',
'118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,302',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63',
',,64,,694,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',303,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329',
'76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,302,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,,89,,303,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,',
'83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,',
',,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,860,,,,48,,,,,,,,244,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,302,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298',
',48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,303,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,',
',122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,',
',,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,',
',,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328',
'329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329',
'76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,302,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',239,,,245,,,62,63,,,64,,,,298,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,303,93,100,102,,110,111,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119,120,,,246,,',
',,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,',
'105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117,119',
'120,,,246,,,,,,,326,,,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,,,332,,,,,,,,,,,,,,,,,,,,986,,,245,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331,118,117',
'119,120,,,246,,,,,,,326,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,,,332,,,,,,,,,,,,,,,,,,,,993,,,245,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77,,,,,,88,325,331',
'118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',998,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329,76,77',
',,,,,88,325,331,118,117,119,120,,,246,,,,,,,326,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,,,332,,,,,,,,,,,,,,,,,,,,986,,,245',
',,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,328,329',
'76,77,,,,,,88,325,331,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121',
'123,112,60,114,113,115,302,116,124,125,,108,109,,45,46,44,,,,,,,,,,',
',,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,,,244,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,303,93,100,102,,110,111,188,199,189',
'212,185,205,195,194,215,216,210,193,192,187,213,217,218,197,186,200',
'204,206,198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,,183',
'190,181,182,178,179,180,141,143,140,,142,,,,,,,,,173,174,,169,151,152',
'153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,',
',,,170,188,199,189,212,185,205,195,194,215,216,210,193,192,187,213,217',
'218,197,186,200,204,206,198,191,,,,207,214,209,208,201,211,196,184,203',
'202,,,,,,183,190,181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,',
',,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,105,,,',
',,,,,,106,,,,,,,,,170,188,199,189,212,185,205,195,194,215,216,210,193',
'192,187,213,217,218,197,186,200,204,206,198,191,,,,207,214,209,377,376',
'378,375,184,203,202,,,,,,183,190,181,182,372,373,374,370,143,114,113',
'371,,116,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,384,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,188,199,189,212,185,205,195',
'194,215,216,210,193,192,187,213,217,218,197,186,200,204,206,198,191',
',,,207,214,209,208,201,211,196,184,203,202,,,,,,183,190,181,182,178',
'179,180,141,143,409,408,142,,410,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,188,199',
'189,212,185,205,195,194,215,216,210,193,192,187,213,217,218,197,186',
'200,204,206,198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,',
'183,190,181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169,151,152',
'153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,',
',,,170,188,199,189,212,185,205,195,194,215,216,210,193,192,187,213,217',
'218,197,186,200,204,206,198,191,,,,207,214,209,208,201,211,196,184,203',
'202,,,,,,183,190,181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,',
',,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,105,,,',
',,,,,,106,,,,,,,,,170,188,199,189,212,185,205,195,194,215,216,210,193',
'192,187,213,217,218,197,186,200,204,206,198,191,,,,207,214,209,208,201',
'211,196,184,203,202,,,,,,183,190,181,182,178,179,180,141,143,,,142,',
',,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,452,456,,,453,,,,,,,,,173,174,170,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,459,463,,,458,,,,,,,,,173',
'174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,',
',,281,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,,,,,675,456,,,676,,,,,,,,,173,174,170,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,677,463,,,678,,,,,,,,,173,174',
'170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,704,456,,,705,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,707,463,,,708,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'675,456,,,676,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,677,463,,,678,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'741,456,,,742,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,743,463,,,744,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'798,456,,,799,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,801,463,,,800,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'864,463,,,865,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,504,456,,,505,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,608,177,605',
'604,603,612,606,,,,,,,,,,615,,,,,170,,,,,,,,,,,,,,,,,610,1061,463,,',
'1060,,,,620,619,623,622,,173,174,,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,616,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,1064,456,,,1065,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'1066,463,,,1067,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,608,177,605,604,603,612,606,,,,,,,,,,615,,',
',,170,,,,,,,,,,,,,,,,,610,,,,,,,,,620,619,623,622,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,616' ]
        racc_action_table = arr = ::Array.new(25728, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'112,351,352,65,932,861,237,112,112,112,22,937,112,112,112,1,112,495',
'400,403,468,468,714,714,112,699,112,112,112,359,360,363,577,1064,3,1065',
'112,112,699,112,112,112,112,112,27,13,22,1077,741,495,567,27,742,495',
'495,495,495,15,762,862,897,237,897,897,897,1066,897,112,112,112,112',
'112,112,112,112,112,112,112,112,112,112,400,403,112,112,112,16,112,112',
'684,65,112,761,761,112,112,18,112,897,112,29,112,327,112,112,112,112',
'112,112,112,468,112,714,112,25,351,352,743,932,861,351,352,861,932,861',
'937,112,112,112,112,937,112,115,112,359,360,363,577,112,115,115,115',
'112,1066,115,115,115,1064,115,1065,567,704,1064,741,1065,567,115,742',
'115,115,115,1077,744,762,862,29,1077,327,115,115,238,115,115,115,115',
'115,684,705,19,1066,682,370,761,743,1066,19,715,29,370,327,831,371,715',
'391,19,40,391,579,371,115,115,115,115,115,115,115,115,115,115,115,115',
'115,115,92,682,115,115,115,704,115,115,92,743,115,831,238,115,115,744',
'115,836,115,636,115,20,115,115,115,115,115,115,115,240,115,705,115,44',
'44,332,332,579,639,43,704,391,391,704,579,115,115,115,115,579,115,458',
'115,579,744,41,704,115,458,458,458,115,764,20,458,458,705,458,372,705',
'836,579,999,764,999,372,20,836,373,580,636,636,705,49,240,373,836,458',
'458,636,458,458,458,458,458,374,436,41,375,639,639,73,374,99,836,375',
'764,764,639,387,41,44,44,332,332,100,707,101,458,458,458,458,458,458',
'458,458,458,458,458,458,458,458,580,42,458,458,458,102,458,580,764,864',
'458,474,580,458,138,675,580,676,458,436,458,389,458,458,458,458,458',
'458,458,581,458,336,458,581,580,376,972,707,387,387,387,394,376,42,707',
'458,458,972,458,707,458,459,798,707,397,452,42,458,459,459,459,458,864',
'480,459,459,474,459,377,864,675,707,676,336,864,377,459,219,864,239',
'972,972,389,389,389,405,336,459,459,799,459,459,459,459,459,480,864',
'452,453,480,480,378,394,394,394,380,820,798,378,241,452,908,380,242',
'972,397,397,397,459,459,459,459,459,459,459,459,459,459,459,459,459',
'459,659,246,459,459,459,280,459,295,453,296,459,299,799,459,405,405',
'405,312,459,314,459,453,459,459,459,459,459,459,459,820,459,459,459',
'385,908,385,385,385,385,385,50,556,659,315,556,459,459,50,459,385,459',
'677,17,17,316,659,50,459,677,677,677,459,322,677,677,677,557,677,140',
'557,325,385,385,140,140,496,677,677,677,677,385,385,385,385,5,350,350',
'677,677,5,677,677,677,677,677,1014,326,1014,1014,1014,561,1014,610,561',
'610,610,610,496,610,331,306,496,496,496,496,306,385,333,677,677,677',
'677,677,677,677,677,677,677,677,677,677,677,337,1014,677,677,677,236',
'677,677,610,340,677,346,236,677,677,357,677,610,677,358,677,236,677',
'677,677,677,677,677,677,356,677,677,677,594,356,594,594,594,594,594',
'47,47,729,729,362,677,677,677,677,594,677,678,677,849,755,755,849,677',
'678,678,678,677,364,678,678,678,776,678,776,776,776,594,776,767,767',
'47,47,678,678,678,594,594,594,594,1035,1035,393,678,678,319,678,678',
'678,678,678,1015,319,1015,1015,1015,1006,1015,870,1006,776,319,896,870',
'896,896,896,396,896,776,399,402,594,425,678,678,678,678,678,678,678',
'678,678,678,678,678,678,678,874,1015,678,678,678,874,678,678,428,430',
'678,433,896,678,678,447,678,450,678,451,678,896,678,678,678,678,678',
'678,678,946,678,460,678,758,946,758,758,758,758,758,481,470,482,483',
'484,678,678,678,678,758,678,800,678,485,501,508,512,678,800,800,800',
'678,320,321,800,800,527,800,500,320,321,758,481,528,529,532,481,481',
'320,321,758,758,758,758,500,500,534,800,800,539,800,800,800,800,800',
'9,9,9,9,9,500,323,500,542,500,500,500,500,323,551,500,552,500,553,558',
'559,758,323,800,800,800,800,800,800,800,800,800,800,800,800,800,800',
'338,361,800,800,800,435,800,338,361,562,800,564,435,800,568,569,338',
'361,800,570,800,435,800,800,800,800,800,800,800,571,800,759,800,759',
'759,759,759,759,780,585,780,780,780,588,780,800,800,759,800,596,800',
'801,597,599,600,538,583,800,801,801,801,800,538,583,801,801,548,801',
'747,759,985,538,583,601,609,747,801,985,759,759,759,759,548,548,747',
'617,985,801,801,621,801,801,801,801,801,624,643,646,548,708,548,652',
'548,548,548,548,708,660,548,665,548,708,671,679,759,708,680,683,801',
'801,801,801,801,801,801,801,801,801,801,801,801,801,865,687,801,801',
'801,689,801,865,691,693,801,701,865,801,703,706,865,486,801,709,801',
'710,801,801,801,801,801,801,801,713,801,801,801,486,486,955,990,955',
'955,955,731,955,737,990,740,801,801,763,801,486,801,486,990,486,486',
'486,486,801,778,779,781,801,2,2,2,2,2,2,793,795,991,2,2,797,805,829',
'2,991,2,2,2,2,2,2,2,835,991,845,846,850,2,2,2,2,2,2,2,786,786,2,856',
'786,786,786,440,2,2,2,2,2,2,2,2,2,2,2,2,863,2,2,2,867,2,2,871,2,2,2',
'440,440,440,440,440,440,440,440,440,440,440,992,440,440,994,872,440',
'440,992,2,873,994,2,880,881,2,2,992,882,2,994,2,440,886,440,2,440,440',
'440,440,440,440,440,2,440,887,889,1026,2,2,2,2,2,2,1026,890,892,2,2',
'895,440,905,440,1026,1034,2,907,914,2,2,2,1034,2,2,36,36,36,36,36,36',
'1034,915,917,36,36,918,919,921,36,922,36,36,36,36,36,36,36,310,310,310',
'310,310,36,36,36,36,36,36,36,923,945,36,952,953,954,969,446,36,36,36',
'36,36,36,36,36,36,36,36,36,970,36,36,36,983,36,36,986,36,36,36,446,446',
'446,446,446,446,446,446,446,446,446,1067,446,446,988,993,446,446,1067',
'36,1010,1011,36,1067,1012,36,36,1067,1013,36,1016,36,446,1019,446,36',
'446,446,446,446,446,446,446,36,446,1020,1021,1022,36,36,36,36,36,36',
'1024,1030,1040,36,36,1041,446,1049,1060,1061,1063,36,1072,1073,36,36',
'36,1074,36,36,221,221,221,221,221,221,1075,1076,1084,221,221,,,,221',
',221,221,221,221,221,221,221,345,345,345,345,345,221,221,221,221,221',
'221,221,,1043,221,1043,1043,1043,,1043,221,221,221,221,221,221,221,221',
'221,221,221,221,,221,221,221,,221,221,,221,221,221,24,24,24,24,24,24',
'24,24,24,24,24,,24,24,,,24,24,,221,,,221,,,221,221,,,221,,221,24,,24',
'221,24,24,24,24,24,24,24,221,24,,,,221,221,221,221,221,221,,,,221,221',
',24,,,,,221,,,221,221,221,,221,221,245,245,245,245,245,245,,,,245,245',
',,,245,,245,245,245,245,245,245,245,526,526,526,526,526,245,245,245',
'245,245,245,245,,,245,,,,,,245,245,245,245,245,245,245,245,245,245,245',
'245,,245,245,245,,245,245,,245,245,245,293,293,293,293,293,293,293,293',
'293,293,293,,293,293,,,293,293,,245,,,245,,,245,245,,,245,,245,293,',
'293,245,293,293,293,293,293,293,293,245,293,,,,245,245,245,245,245,245',
',,,245,245,,293,,,,,245,,,245,245,245,,245,245,313,313,313,313,313,313',
',,,313,313,,,,313,,313,313,313,313,313,313,313,,,,,,313,313,313,313',
'313,313,313,,,313,,,,,,313,313,313,313,313,313,313,313,313,313,313,313',
',313,313,313,,313,313,,313,313,313,499,499,499,499,499,499,499,499,499',
'499,499,,499,499,,,499,499,,313,,,313,,,313,313,,,313,,313,499,,499',
'313,499,499,499,499,499,499,499,313,499,,,,313,313,313,313,313,313,',
',,313,313,499,499,,,,,313,,,313,313,313,,313,313,318,318,318,318,318',
'318,,,,318,318,,,,318,,318,318,318,318,318,318,318,,,,,,318,318,318',
'318,318,318,318,,,318,,,,,,318,318,318,318,318,318,318,318,318,318,318',
'318,,318,318,318,,318,318,,318,318,318,549,549,549,549,549,549,549,549',
'549,549,549,,549,549,,,549,549,,318,,,318,,,318,318,,,318,,318,549,',
'549,318,549,549,549,549,549,549,549,318,549,,,,318,318,318,318,318,318',
',,,318,318,,549,,,,,318,,,318,318,318,,318,318,344,344,344,344,344,344',
',,,344,344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344',
'344,344,344,,,344,,,,,,344,344,344,344,344,344,344,344,344,344,344,344',
',344,344,344,,344,344,,344,344,344,802,802,802,802,802,802,802,802,802',
'802,802,,802,802,,,802,802,,344,,,344,,,344,344,,,344,,344,802,,802',
'344,802,802,802,802,802,802,802,344,802,,,,344,344,344,344,344,344,',
',,344,344,,802,,,,,344,,,344,344,344,,344,344,354,354,354,354,354,354',
',,,354,354,,,,354,,354,354,354,354,354,354,354,,,,,,354,354,354,354',
'354,354,354,,,354,,,,,,354,354,354,354,354,354,354,354,354,354,354,354',
',354,354,354,,354,354,,354,354,354,913,913,913,913,913,913,913,913,913',
'913,913,,913,913,,,913,913,,354,,,354,,,354,354,,,354,,354,913,,913',
'354,913,913,913,913,913,913,913,354,913,,,,354,354,354,354,354,354,',
',,354,354,,913,,,,,354,,,354,354,354,,354,354,355,355,355,355,355,355',
',,,355,355,,,,355,,355,355,355,355,355,355,355,,,,,,355,355,355,355',
'355,355,355,,,355,,,,,,355,355,355,355,355,355,355,355,355,355,355,355',
',355,355,355,,355,355,,355,355,355,478,478,478,478,478,478,478,478,478',
'478,478,,478,478,,,478,478,,355,,,355,,,355,355,,,355,,355,478,,478',
'355,478,478,478,478,478,478,478,355,478,,,,355,355,355,355,355,355,',
',,355,355,,,,,,,355,,,355,355,355,,355,355,563,563,563,563,563,563,',
',,563,563,,,,563,,563,563,563,563,563,563,563,,,,,,563,563,563,563,563',
'563,563,,,563,,,,,,563,563,563,563,563,563,563,563,563,563,563,563,',
'563,563,563,,563,563,,563,563,563,479,479,479,479,479,479,479,479,479',
'479,479,,479,479,,,479,479,,563,,,563,,,563,563,,,563,,563,479,,479',
'563,479,479,479,479,479,479,479,563,479,,,,563,563,563,563,563,563,',
',,563,563,,,,,,,563,,,563,563,563,,563,563,566,566,566,566,566,566,',
',,566,566,,,,566,,566,566,566,566,566,566,566,,,,,,566,566,566,566,566',
'566,566,,,566,,,,,,566,566,566,566,566,566,566,566,566,566,566,566,',
'566,566,566,,566,566,,566,566,566,489,489,489,489,489,489,489,,,489',
'489,,,,,,489,489,,566,,,566,,,566,566,,,566,,566,489,,489,566,489,489',
'489,489,489,489,489,566,489,,,,566,566,566,566,566,566,,,,566,566,,',
',,,,566,,,566,566,566,,566,566,648,648,648,648,648,648,,,,648,648,,',
',648,,648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648,648,',
',648,,,,,,648,648,648,648,648,648,648,648,648,648,648,648,,648,648,648',
',648,648,,648,648,648,490,490,490,490,490,490,490,,,490,490,,,,,,490',
'490,,648,,,648,,,648,648,,,648,,648,490,,490,648,490,490,490,490,490',
'490,490,648,490,,,,648,648,648,648,648,648,,,,648,648,,,,,,,648,,,648',
'648,648,,648,648,745,745,745,745,745,745,,,,745,745,,,,745,,745,745',
'745,745,745,745,745,,,,,,745,745,745,745,745,745,745,,,745,,,,,,745',
'745,745,745,745,745,745,745,745,745,745,745,,745,745,745,,745,745,,745',
'745,745,491,491,491,491,491,491,491,,,491,491,,,,,,491,491,,745,,,745',
',,745,745,,,745,,745,491,,491,745,491,491,491,491,491,491,491,745,491',
',,,745,745,745,745,745,745,,,,745,745,,,,,,,745,,,745,745,745,,745,745',
'756,756,756,756,756,756,,,,756,756,,,,756,,756,756,756,756,756,756,756',
',,,,,756,756,756,756,756,756,756,,,756,,,,,,756,756,756,756,756,756',
'756,756,756,756,756,756,,756,756,756,,756,756,,756,756,756,492,492,492',
'492,492,492,492,,,492,492,,,,,,492,492,,756,,,756,,,756,756,,,756,,756',
'492,,492,756,492,492,492,492,492,492,492,756,492,,,,756,756,756,756',
'756,756,,,,756,756,,,,,,,756,,,756,756,756,,756,756,757,757,757,757',
'757,757,,,,757,757,,,,757,,757,757,757,757,757,757,757,,,,,,757,757',
'757,757,757,757,757,,,757,,,,,,757,757,757,757,757,757,757,757,757,757',
'757,757,,757,757,757,,757,757,,757,757,757,493,493,493,493,493,493,493',
',,493,493,,,,,,493,493,,757,,,757,,,757,757,,,757,,757,493,,493,757',
'493,493,493,493,493,493,493,757,493,,,,757,757,757,757,757,757,,,,757',
'757,,,,,,,757,,,757,757,757,,757,757,787,787,787,787,787,787,,,,787',
'787,,,,787,,787,787,787,787,787,787,787,,,,,,787,787,787,787,787,787',
'787,,,787,,,,,,787,787,787,787,787,787,787,787,787,787,787,787,,787',
'787,787,,787,787,,787,787,787,494,494,494,494,494,494,494,,,494,494',
',,,,,494,494,,787,,,787,,,787,787,,,787,,787,494,,494,787,494,494,494',
'494,494,494,494,787,494,,,,787,787,787,787,787,787,,,,787,787,,,,,,',
'787,,,787,787,787,,787,787,826,826,826,826,826,826,,,,826,826,,,,826',
',826,826,826,826,826,826,826,,,,,,826,826,826,826,826,826,826,,,826',
',,,,,826,826,826,826,826,826,826,826,826,826,826,826,,826,826,826,,826',
'826,,826,826,826,497,497,497,497,497,497,497,,,497,497,,,,,,497,497',
',826,,,826,,,826,826,,,826,,826,497,,497,826,497,497,497,497,497,497',
'497,826,497,,,,826,826,826,826,826,826,,,,826,826,,,,,,,826,,,826,826',
'826,,826,826,843,843,843,843,843,843,,,,843,843,,,,843,,843,843,843',
'843,843,843,843,,,,,,843,843,843,843,843,843,843,,,843,,,,,,843,843',
'843,843,843,843,843,843,843,843,843,843,,843,843,843,,843,843,,843,843',
'843,498,498,498,498,498,498,498,498,,498,498,,,,,,498,498,,843,,,843',
',,843,843,,,843,,843,498,,498,843,498,498,498,498,498,498,498,843,498',
',,,843,843,843,843,843,843,,,,843,843,,,,,,,843,,,843,843,843,,843,843',
'855,855,855,855,855,855,,,,855,855,,,,855,,855,855,855,855,855,855,855',
',,,,,855,855,855,855,855,855,855,,,855,,,,,,855,855,855,855,855,855',
'855,855,855,855,855,855,,855,855,855,,855,855,,855,855,855,487,,,,,',
',,,,,,,,,,487,487,,855,,,855,,488,855,855,,,855,,855,487,,487,855,487',
'487,487,487,488,488,,855,,,,,855,855,855,855,855,855,,,488,855,855,',
'488,488,488,488,,855,,,855,855,855,,855,855,868,868,868,868,868,868',
',,,868,868,,,,868,,868,868,868,868,868,868,868,,,,,,868,868,868,868',
'868,868,868,,,868,,,,,,868,868,868,868,868,868,868,868,868,868,868,868',
',868,868,868,,868,868,,868,868,868,,,,,,,,,,,,,,,,,,,,868,,,868,,,868',
'868,,,868,,868,,,,868,,,,,,,,868,,,,,868,868,868,868,868,868,,,,868',
'868,,,,,,,868,,,868,868,868,,868,868,878,878,878,878,878,878,,,,878',
'878,,,,878,,878,878,878,878,878,878,878,,,,,,878,878,878,878,878,878',
'878,,,878,,,,,,878,878,878,878,878,878,878,878,878,878,878,878,,878',
'878,878,,878,878,,878,878,878,,,,,,,,,,,,,,,,,,,,878,,,878,,,878,878',
',,878,,878,,,,878,,,,,,,,878,,,,,878,878,878,878,878,878,,,,878,878',
',,,,,,878,,,878,878,878,,878,878,879,879,879,879,879,879,,,,879,879',
',,,879,,879,879,879,879,879,879,879,,,,,,879,879,879,879,879,879,879',
',,879,,,,,,879,879,879,879,879,879,879,879,879,879,879,879,,879,879',
'879,,879,879,,879,879,879,,,,,,,,,,,,,,,,,,,,879,,,879,,,879,879,,,879',
',879,,,,879,,,,,,,,879,,,,,879,879,879,879,879,879,,,,879,879,,,,,,',
'879,,,879,879,879,,879,879,929,929,929,929,929,929,,,,929,929,,,,929',
',929,929,929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929',
',,,,,929,929,929,929,929,929,929,929,929,929,929,929,,929,929,929,,929',
'929,,929,929,929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,929,',
',,929,,,,,,,,929,,,,,929,929,929,929,929,929,,,,929,929,,,,,,,929,,',
'929,929,929,,929,929,930,930,930,930,930,930,,,,930,930,,,,930,,930',
'930,930,930,930,930,930,,,,,,930,930,930,930,930,930,930,,,930,,,,,',
'930,930,930,930,930,930,930,930,930,930,930,930,,930,930,930,,930,930',
',930,930,930,,,,,,,,,,,,,,,,,,,,930,,,930,,,930,930,,,930,,930,,,,930',
',,,,,,,930,,,,,930,930,930,930,930,930,,,,930,930,,,,,,,930,,,930,930',
'930,,930,930,942,942,942,942,942,942,,,,942,942,,,,942,,942,942,942',
'942,942,942,942,,,,,,942,942,942,942,942,942,942,,,942,,,,,,942,942',
'942,942,942,942,942,942,942,942,942,942,,942,942,942,,942,942,,942,942',
'942,,,,,,,,,,,,,,,,,,,,942,,,942,,,942,942,,,942,,942,,,,942,,,,,,,',
'942,,,,,942,942,942,942,942,942,,,,942,942,,,,,,,942,,,942,942,942,',
'942,942,989,989,989,989,989,989,,,,989,989,,,,989,,989,989,989,989,989',
'989,989,,,,,,989,989,989,989,989,989,989,,,989,,,,,,989,989,989,989',
'989,989,989,989,989,989,989,989,,989,989,989,,989,989,,989,989,989,',
',,,,,,,,,,,,,,,,,,989,,,989,,,989,989,,,989,,989,,,,989,,,,,,,,989,',
',,,989,989,989,989,989,989,,,,989,989,,,,,,,989,,,989,989,989,,989,989',
'996,996,996,996,996,996,,,,996,996,,,,996,,996,996,996,996,996,996,996',
',,,,,996,996,996,996,996,996,996,,,996,,,,,,996,996,996,996,996,996',
'996,996,996,996,996,996,,996,996,996,,996,996,,996,996,996,,,,,,,,,',
',,,,,,,,,,996,,,996,,,996,996,,,996,,996,,,,996,,,,,,,,996,,,,,996,996',
'996,996,996,996,,,,996,996,,,,,,,996,,,996,996,996,,996,996,1002,1002',
'1002,1002,1002,1002,,,,1002,1002,,,,1002,,1002,1002,1002,1002,1002,1002',
'1002,,,,,,1002,1002,1002,1002,1002,1002,1002,,,1002,,,,,,1002,1002,1002',
'1002,1002,1002,1002,1002,1002,1002,1002,1002,,1002,1002,1002,,1002,1002',
',1002,1002,1002,,,,,,,,,,,,,,,,,,,,1002,,,1002,,,1002,1002,,,1002,,1002',
',,,1002,,,,,,,,1002,,,,,1002,1002,1002,1002,1002,1002,,,,1002,1002,',
',,,,,1002,,,1002,1002,1002,,1002,1002,1003,1003,1003,1003,1003,1003',
',,,1003,1003,,,,1003,,1003,1003,1003,1003,1003,1003,1003,,,,,,1003,1003',
'1003,1003,1003,1003,1003,,,1003,,,,,,1003,1003,1003,1003,1003,1003,1003',
'1003,1003,1003,1003,1003,,1003,1003,1003,,1003,1003,,1003,1003,1003',
',,,,,,,,,,,,,,,,,,,1003,,,1003,,,1003,1003,,,1003,,1003,,,,1003,,,,',
',,,1003,,,,,1003,1003,1003,1003,1003,1003,,,,1003,1003,,,,,,,1003,,',
'1003,1003,1003,,1003,1003,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,',
'8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,',
',,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,',
',8,8,,,,,,,8,,,8,8,8,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23',
'23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23',
'23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,772',
'23,772,772,772,772,772,23,,,,,,,,23,772,,,,23,23,23,23,23,23,,,,23,23',
',,,,,,23,772,30,23,23,23,,23,23,30,30,30,772,772,30,30,30,768,30,768',
'768,768,768,768,,,,30,30,30,,,,768,,,,,30,30,,30,30,30,30,30,772,,,',
',,,,,768,,,,,,,,,768,768,768,768,,30,30,30,30,30,30,30,30,30,30,30,30',
'30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,768,30,,30,,30,30,30,30,30',
'30,30,,30,30,30,,,,,,,,,,,,,30,30,31,30,,30,,,,31,31,31,30,,31,31,31',
'770,31,770,770,770,770,770,,,,,31,31,,,,770,,,,,31,31,,31,31,31,31,31',
',,,,,,,,,770,,,,,,,,,770,770,770,770,,31,31,31,31,31,31,31,31,31,31',
'31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,770,31,,31,,31,31,31',
'31,31,31,31,,31,,31,,,,,,,,,,,,,31,31,,31,,31,32,32,32,,32,,31,,32,32',
',,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32',
',,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,',
',,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32',
'32,,,,32,32,,,,,,,32,,32,32,32,32,,32,32,33,33,33,,33,,,,33,33,,,,33',
',33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33',
'33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33',
',,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33',
'33,,,,,,,33,,33,33,33,33,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34,34',
'34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34',
'34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34',
'34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34',
',34,34,34,34,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37',
',,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37',
'37,37,,37,37,,,,37,,,,,,960,,960,960,960,960,960,,,,,,,,37,,960,37,',
',37,37,,,37,,37,,,,,,,,,,,,960,,,,,37,37,37,37,37,37,960,960,,37,37',
',,,,,,37,,,37,37,37,,37,37,38,38,38,,38,,,,38,38,,,,38,960,38,38,38',
'38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38',
'38,38,38,,38,38,38,,38,38,,,,38,,,,,,962,,962,962,962,962,962,,,,,,',
',38,,962,38,,,38,38,,,38,,,,,,,,,,,,,,962,,,,,38,38,38,38,38,38,962',
'962,,38,38,,,,38,,,38,,,38,38,38,,38,38,45,45,45,,45,,,,45,45,,,,45',
'962,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45',
'45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45',
',,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,',
',,,,,45,,,45,45,45,,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46',
'46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46',
'46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46',
',,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46',
',46,46,48,48,48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48',
'48,48,48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48',
'48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,964,48,964,964,964',
'964,964,48,,,,,,,,48,964,,,,48,48,48,48,48,48,,,,48,48,,,,,,,48,964',
'60,48,48,48,,48,48,60,60,60,964,964,60,60,60,824,60,824,824,824,824',
'824,,,,,60,60,60,,,824,,,,,60,60,,60,60,60,60,60,964,,,,,,,,,824,,,',
',,,,,824,824,824,824,,60,60,60,60,60,60,60,60,60,60,60,60,60,60,,,60',
'60,60,,,60,,824,60,,,60,60,,60,824,60,,60,,60,60,60,60,60,60,60,,60',
',60,,,,,,,,,,,,,60,60,60,60,,60,,60,,,,454,60,62,62,62,62,62,454,454',
'454,62,62,454,454,454,62,454,62,62,62,62,62,62,62,,454,454,454,,62,62',
'62,62,62,62,62,454,454,62,454,454,454,454,454,62,62,,62,62,62,62,62',
'62,62,62,62,,62,62,62,,62,62,,62,62,62,454,454,454,454,454,454,454,454',
'454,454,454,454,454,454,,,454,454,454,62,,454,62,454,454,62,62,454,454',
'62,454,62,454,,454,62,454,454,454,454,454,454,454,62,454,454,454,,62',
'62,62,62,62,62,,,,62,62,454,454,,454,,454,62,,,62,62,62,454,62,62,67',
'67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67',
'67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67',
',,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67',
'67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,67,67,68,68,68,,68,,,,68,68',
',,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68',
',,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,',
',,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,',
'68,68,,,,,,,68,,,68,68,68,,68,68,71,71,71,,71,,,,71,71,,,,71,,71,71',
'71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71',
'71,71,71,71,,71,71,71,,71,71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,',
'71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71,71,71,71,,,,71,71,71,,,,,71',
'71,,,71,71,71,,71,71,72,72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72',
'72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72',
',72,72,72,,72,72,,,,72,,,,,,980,,980,980,980,980,980,,,,,,,,72,,980',
'72,,,72,72,,,72,,72,,,,,,,,,,,,980,,,,,72,72,72,72,72,72,980,980,,72',
'72,,,,,,,72,,,72,72,72,,72,72,128,128,128,128,128,,,,128,128,,,,128',
'980,128,128,128,128,128,128,128,,,,,,128,128,128,128,128,128,128,,,128',
',,,,,128,128,128,128,128,128,128,128,128,128,128,128,,128,128,128,,128',
'128,,128,128,128,,,,,,,,,,,,,,,,,,,,128,,,128,,,128,128,,,128,,128,',
',,128,,,,,,,,128,,,,,128,128,128,128,128,128,,,,128,128,,,,,,128,128',
',,128,128,128,,128,128,133,133,133,,133,,,,133,133,,,,133,,133,133,133',
'133,133,133,133,,,,,,133,133,133,133,133,133,133,,,133,,,,,,,133,,,133',
'133,133,133,133,133,133,133,,133,133,133,,133,133,,133,133,133,,,,,',
',,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,,,133',
'133,133,133,133,133,,,,133,133,,,,,,,133,,,133,133,133,,133,133,134',
'134,134,,134,,,,134,134,,,,134,,134,134,134,134,134,134,134,,,,,,134',
'134,134,134,134,134,134,,,134,,,,,,,134,,,134,134,134,134,134,134,134',
'134,,134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,,134',
',,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134,,,,134',
'134,,,,,,,134,,,134,134,134,,134,134,135,135,135,,135,,,,135,135,,,',
'135,,135,135,135,135,135,135,135,,,,,,135,135,135,135,135,135,135,,',
'135,,,,,,,135,,,135,135,135,135,135,135,135,135,,135,135,135,,135,135',
',135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135,,,135,,,,,,135,',
',,,,,,135,,,,,135,135,135,135,135,135,,,,135,135,,,,,,,135,,,135,135',
'135,,135,135,136,136,136,,136,,,,136,136,,,,136,,136,136,136,136,136',
'136,136,,,,,,136,136,136,136,136,136,136,,,136,,,,,,,136,,,136,136,136',
'136,136,136,136,136,,136,136,136,,136,136,,136,136,136,,,,,,,,,,,,,',
',,,,,,136,,,136,,,136,136,,,136,,,,,,136,,,,,,,,136,,,,,136,136,136',
'136,136,136,,,,136,136,,,,,,,136,,,136,136,136,,136,136,137,137,137',
'137,137,,,,137,137,,,,137,,137,137,137,137,137,137,137,,,,,,137,137',
'137,137,137,137,137,,,137,,,,,,137,137,,137,137,137,137,137,137,137',
'137,137,,137,137,137,,137,137,,137,137,137,,,,,,,,,,,,,,,,,,,,137,,',
'137,,,137,137,,,137,,137,,,,137,,,,,,,,137,,,,,137,137,137,137,137,137',
',,,137,137,,,,,,,137,,,137,137,137,,137,137,222,222,222,,222,,,,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,222',
',,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222,',
',222,222,222,,222,222,223,223,223,,223,,,,223,223,,,,223,,223,223,223',
'223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223',
'223,223,223,223,223,223,223,,223,223,223,,223,223,,223,223,223,,,,,',
',,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,223,,,,223,,,,,,,,223,,,,,223',
'223,223,223,223,223,,,,223,223,,,,,,,223,,,223,223,223,,223,223,224',
'224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224',
'224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224',
'224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224',
',,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224',
'224,,,,,,,224,,,224,224,224,,224,224,225,225,225,,225,,,,225,225,,,',
'225,,225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225,,',
'225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225,225,,225,225',
',225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,',
',,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225,,,225,225',
'225,,225,225,226,226,226,,226,,,,226,226,,,,226,,226,226,226,226,226',
'226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226',
'226,226,226,226,226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,',
',,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226',
'226,226,226,,,,226,226,,,,,,,226,,,226,226,226,,226,226,227,227,227',
',227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227',
'227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,227',
'227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227',
'227,,,227,,227,,227,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227',
'227,,,,,,,227,,227,227,227,227,,227,227,231,231,231,,231,,,,231,231',
',,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231',
',,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231,,231',
'231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231',
',,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,,,,,,,231,,,231,231',
'231,,231,231,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232',
'232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232',
'232,232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,',
',,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232',
'232,232,232,,,,232,232,,,,,,,232,,,232,232,232,,232,232,233,233,233',
',233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233',
'233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233',
'233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233',
',,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,233',
',,,,,233,,,233,233,233,,233,233,244,244,244,,244,,,,244,244,,,,244,',
'244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,',
',,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244',
'244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,',
',244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244',
',244,244,247,247,247,,247,,,,247,247,,,,247,,247,247,247,247,247,247',
'247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247',
'247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,',
',,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247',
'247,247,,,,247,247,,,,,,,247,,,247,247,247,,247,247,248,248,248,,248',
',,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248',
'248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248',
'248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248',
',,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248',
',,248,248,248,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,',
',,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249',
'249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,249,249,250',
'250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250',
'250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250',
'250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250',
',,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250',
'250,,,,,,,250,,,250,250,250,,250,250,251,251,251,,251,,,,251,251,,,',
'251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,',
'251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251',
',251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,',
',,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251',
'251,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,',
',,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252',
'252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,252,252,253,253,253',
',253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253',
'253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253',
'253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253',
',,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,',
',,,253,,,253,253,253,,253,253,254,254,254,,254,,,,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254',
'254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254',
',,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,254',
'254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255',
',,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255',
'255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255',
',,,255,255,,,,,,,255,,,255,255,255,,255,255,256,256,256,,256,,,,256',
'256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256',
'256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,',
'256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,',
',,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,',
',256,256,256,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257',
'257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257',
'257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,',
',,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257',
'257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,257,257,258',
'258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258',
'258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258',
'258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258',
',,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258',
'258,,,,,,,258,,,258,258,258,,258,258,259,259,259,,259,,,,259,259,,,',
'259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,',
'259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259',
',259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,',
',,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259',
'259,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260',
'260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260',
'260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,',
',,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260',
'260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,260,260,261,261,261',
',261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261',
'261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261',
'261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261',
',,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,',
',,,261,,,261,261,261,,261,261,262,262,262,,262,,,,262,262,,,,262,,262',
'262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,',
',262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,,262,262',
'262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262',
',,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,262',
'262,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263',
',,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263',
'263,263,263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263',
',,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263',
',,,263,263,,,,,,,263,,,263,263,263,,263,263,264,264,264,,264,,,,264',
'264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264,264,264,264',
'264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264,264,264,',
'264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,',
',,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,',
',264,264,264,,264,264,265,265,265,,265,,,,265,265,,,,265,,265,265,265',
'265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265',
'265,265,265,265,265,265,265,,265,265,265,,265,265,,265,265,265,,,,,',
',,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265',
'265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265,,265,265,266',
'266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266',
'266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266',
'266,,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266',
',,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266',
'266,,,,,,,266,,,266,266,266,,266,266,267,267,267,,267,,,,267,267,,,',
'267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267,,',
'267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,,267,267',
',267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,',
',,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267',
'267,,267,267,268,268,268,,268,,,,268,268,,,,268,,268,268,268,268,268',
'268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268',
'268,268,268,268,268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,',
',,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268',
'268,268,268,,,,268,268,,,,,,,268,,,268,268,268,,268,268,273,273,273',
',273,,,,273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273,273',
'273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273,,273',
'273,273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273',
',,273,,,,,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,',
',,,273,,,273,273,273,,273,273,281,281,281,,281,,,,281,281,,,,281,,281',
'281,281,281,281,281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,',
',281,,,281,281,281,281,281,281,281,281,281,281,281,281,,281,281,,281',
'281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,281,,281,,281',
',,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281,,,,,,,281,,281,281',
'281,281,,281,281,282,282,282,,282,,,,282,282,,,,282,,282,282,282,282',
'282,282,282,,,,,,282,282,282,282,282,282,282,,,282,,,,,,,282,,,282,282',
'282,282,282,282,282,282,282,282,282,282,,282,282,,282,282,282,,,,,,',
',,,,,,,,,,,,,282,,,282,,,282,282,,,282,,282,,282,,282,,,,,,,,282,,,',
',282,282,282,282,282,282,,,,282,282,,,,,,,282,,282,282,282,282,,282',
'282,291,291,291,,291,,,,291,291,,,,291,,291,291,291,291,291,291,291',
',,,,,291,291,291,291,291,291,291,,,291,,,,,,,291,,,291,291,291,291,291',
'291,291,291,291,291,291,291,,291,291,,291,291,291,,,,,,,,,,,,,,,,,,',
',291,,,291,,,291,291,,,291,,291,,291,,291,,,,,,,,291,,,,,291,291,291',
'291,291,291,,,,291,291,291,,,,,,291,,291,291,291,291,,291,291,298,298',
'298,,298,,,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298,298',
'298,298,298,298,298,,,298,,,,,,,298,,,298,298,298,298,298,298,298,298',
',298,298,298,,298,298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298',
'298,,,298,,,,,,298,,,,,,,,298,,,,,298,298,298,298,298,298,,,,298,298',
',,,,,,298,,,298,298,298,,298,298,300,300,300,,300,,,,300,300,,,,300',
',300,300,300,300,300,300,300,,,,,,300,300,300,300,300,300,300,,,300',
',,,,,,300,,,300,300,300,300,300,300,300,300,,300,300,300,,300,300,,300',
'300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,,,,300,,,,,,',
',300,,,,,300,300,300,300,300,300,,,,300,300,,,,,,,300,,,300,300,300',
',300,300,302,302,302,,302,,,,302,302,,,,302,,302,302,302,302,302,302',
'302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,,302,,,302,302,302,302',
'302,302,302,302,,302,302,302,,302,302,,302,302,302,,,,,,,,,,,,,,,,,',
',,302,,,302,,,302,302,,,302,,,,,,302,,,,,,,,302,,,,,302,302,302,302',
'302,302,,,,302,302,,,,,,,302,,,302,302,302,,302,302,303,303,303,,303',
',,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303',
'303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303,303,303,,303,303',
'303,,303,303,,303,303,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303',
',,,,,303,,,,,,,,303,,,,,303,303,303,303,303,303,,,,303,303,,,,,,,303',
',,303,303,303,,303,303,309,309,309,309,309,,,,309,309,,,,309,,309,309',
'309,309,309,309,309,,,,,,309,309,309,309,309,309,309,,,309,,,,,,309',
'309,,309,309,309,309,309,309,309,309,309,,309,309,309,,309,309,,309',
'309,309,,,,,,,,,,,,,,,,,,,,309,,,309,,,309,309,,,309,,309,,,,309,,,',
',,,,309,,,,,309,309,309,309,309,309,,,,309,309,,,,,,,309,,,309,309,309',
',309,309,317,317,317,,317,,,,317,317,,,,317,,317,317,317,317,317,317',
'317,,,,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317,317',
'317,317,317,317,,317,317,317,,317,317,,,,317,,,,,,1044,,1044,1044,1044',
'1044,1044,,,,,,,,317,,1044,317,,,317,317,,,317,,,,,,,,,,,,,,1044,,,',
',317,317,317,317,317,317,1044,1044,,317,317,,,,317,,,317,,,317,317,317',
',317,317,334,334,334,,334,,,,334,334,,,,334,1044,334,334,334,334,334',
'334,334,,,,,,334,334,334,334,334,334,334,,,334,,,,,,,334,,,334,334,334',
'334,334,334,334,334,,334,334,334,,334,334,,,,334,,,,,,1053,,1053,1053',
'1053,1053,1053,,,,,,,,334,,1053,334,,,334,334,,,334,,,,,,,,,,,,,,1053',
',,,,334,334,334,334,334,334,1053,1053,,334,334,,,,,,,334,,,334,334,334',
',334,334,341,341,341,,341,,,,341,341,,,,341,1053,341,341,341,341,341',
'341,341,,,,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341,341,341',
'341,341,341,341,341,,341,341,341,,341,341,,341,341,341,,,,,,,,,,,,,',
',,,,,,341,,,341,,,341,341,,,341,,,,,,341,,,,,,,,341,,,,,341,341,341',
'341,341,341,,,,341,341,,,,,,,341,,,341,341,341,,341,341,343,343,343',
',343,,,,343,343,,,,343,,343,343,343,343,343,343,343,,,,,,343,343,343',
'343,343,343,343,,,343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343',
'343,343,,343,343,,343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343,343,,343',
'343,,,343,,,,,,343,,,,,,,,343,,,,,343,343,343,343,343,343,,,,343,343',
',,,,,,343,,,343,343,343,,343,343,347,347,347,,347,,,,347,347,,,,347',
',347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347,,,347',
',,,,,,347,,,347,347,347,347,347,347,347,347,347,347,347,347,,347,347',
',347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,347,,,,347',
',,,,,,,347,,,,,347,347,347,347,347,347,,,,347,347,,,,,,,347,,347,347',
'347,347,,347,347,348,348,348,,348,,,,348,348,,,,348,,348,348,348,348',
'348,348,348,,,,,,348,348,348,348,348,348,348,,,348,,,,,,,348,,,348,348',
'348,348,348,348,348,348,348,348,348,348,,348,348,,348,348,348,,,,,,',
',,,,,,,,,,,,,348,,,348,,,348,348,,,348,,,,,,348,,,,,,,,348,,,,,348,348',
'348,348,348,348,,,,348,348,,,,,,,348,,348,348,348,348,,348,348,353,353',
'353,,353,,,,353,353,,,,353,,353,353,353,353,353,353,353,,,,,,353,353',
'353,353,353,353,353,,,353,,,,,,,353,,,353,353,353,353,353,353,353,353',
',353,353,353,,353,353,,353,353,353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353',
'353,,,353,,,,,,353,,,,,,,,353,,,,,353,353,353,353,353,353,,,,353,353',
',,,,,,353,,,353,353,353,,353,353,367,367,367,,367,,,,367,367,,,,367',
',367,367,367,367,367,367,367,,,,,,367,367,367,367,367,367,367,,,367',
',,,,,,367,,,367,367,367,367,367,367,367,367,,367,367,367,,367,367,,',
',367,,,,,,1055,,1055,1055,1055,1055,1055,,,,,,,,367,,1055,367,,,367',
'367,,,367,,,,,,,,,,,,,,1055,,,,,367,367,367,367,367,367,1055,1055,,367',
'367,,,,,,,367,,,367,367,367,,367,367,369,369,369,,369,,,,369,369,,,',
'369,1055,369,369,369,369,369,369,369,,,,,,369,369,369,369,369,369,369',
',,369,,,,,,,369,,,369,369,369,369,369,369,369,369,,369,369,369,,369',
'369,,,,369,,,,,,1057,,1057,1057,1057,1057,1057,,,,,,,,369,,1057,369',
',,369,369,,,369,,,,,,,,,,,,,,1057,,,,,369,369,369,369,369,369,1057,1057',
',369,369,,,,,,,369,,,369,369,369,,369,369,429,429,429,,429,,,,429,429',
',,,429,1057,429,429,429,429,429,429,429,,,,,,429,429,429,429,429,429',
'429,,,429,,,,,,,429,,,429,429,429,429,429,429,429,429,,429,429,429,',
'429,429,,429,429,429,,,,,,,,,,,,,,,,,,,,429,,,429,,,429,429,,1079,429',
'1079,1079,1079,1079,1079,429,,,,,,,,429,1079,,,,429,429,429,429,429',
'429,,,,429,429,,,,,,,429,1079,463,429,429,429,,429,429,463,463,463,1079',
'1079,463,463,463,958,463,958,958,958,958,958,,,,463,463,463,463,,,958',
',,,,463,463,,463,463,463,463,463,1079,,,,,,,,,958,,,,,,,,,958,958,958',
'958,,463,463,463,463,463,463,463,463,463,463,463,463,463,463,,,463,463',
'463,,,463,,,463,,,463,463,,463,958,463,,463,,463,463,463,463,463,463',
'463,,463,463,463,975,,975,975,975,975,975,,,,,,463,463,463,463,975,463',
'464,463,,,,,463,464,464,464,,,464,464,464,,464,,,,975,,,,,464,464,464',
'464,975,975,975,975,,,,464,464,,464,464,464,464,464,,,,,,,,,,,,,,,,',
',,,,,975,,464,464,464,464,464,464,464,464,464,464,464,464,464,464,,',
'464,464,464,,,464,,,464,,,464,464,,464,,464,,464,,464,464,464,464,464',
'464,464,,464,464,464,,,,,,,,,,,,,464,464,464,464,,464,,464,,473,473',
'473,464,473,,,,473,473,,,,473,,473,473,473,473,473,473,473,,,,,,473',
'473,473,473,473,473,473,,,473,,,,,,,473,,,473,473,473,473,473,473,473',
'473,473,473,473,473,,473,473,,473,473,473,,,,,,,,,,,,,,,,,,,,473,,,473',
',,473,473,,,473,,473,,473,,473,,,,,,,,473,,,,,473,473,473,473,473,473',
',,,473,473,,,,,,,473,,473,473,473,473,,473,473,475,475,475,,475,,,,475',
'475,,,,475,,475,475,475,475,475,475,475,,,,,,475,475,475,475,475,475',
'475,,,475,,,,,,,475,,,475,475,475,475,475,475,475,475,,475,475,475,',
'475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475,,,475,475,,,475,,',
',,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475,475,,,,,,,475,',
',475,475,475,,475,475,476,476,476,,476,,,,476,476,,,,476,,476,476,476',
'476,476,476,476,,,,,,476,476,476,476,476,476,476,,,476,,,,,,,476,,,476',
'476,476,476,476,476,476,476,,476,476,476,,476,476,,476,476,476,,,,,',
',,,,,,,,,,,,,,476,,,476,,,476,476,,,476,,,,,,476,,,,,,,,476,,,,,476',
'476,476,476,476,476,,,,476,476,,,,,,,476,,,476,476,476,,476,476,477',
'477,477,,477,,,,477,477,,,,477,,477,477,477,477,477,477,477,,,,,,477',
'477,477,477,477,477,477,,,477,,,,,,,477,,,477,477,477,477,477,477,477',
'477,,477,477,477,,477,477,,477,477,477,,,,,,,,,,,,,,,,,,,,477,,,477',
',,477,477,,,477,,,,,,477,,,,,,,,477,,,,,477,477,477,477,477,477,,,,477',
'477,,,,,,,477,,503,477,477,477,,477,477,503,503,503,,,503,503,503,,503',
',,,,,,,,503,503,,,,,,,,,,503,503,,503,503,503,503,503,,,,,,,,277,277',
',,277,,,,,,,,,277,277,,277,277,277,277,277,277,277,,,277,277,503,,,277',
'277,277,277,503,,,,,503,503,,,,,,,277,277,,277,277,277,277,277,277,277',
'277,277,277,277,503,503,277,,,,,,,,,,,,503,,515,515,515,503,515,,277',
',515,515,503,,,515,,515,515,515,515,515,515,515,,,,,,515,515,515,515',
'515,515,515,,,515,,,,,,,515,,,515,515,515,515,515,515,515,515,515,515',
'515,515,,515,515,,515,515,515,,,,,,,,,,,,,,,,,,,,515,,,515,,,515,515',
',,515,,515,,515,,515,,,,,,,,515,,,,,515,515,515,515,515,515,,,,515,515',
',,,,,,515,,515,515,515,515,,515,515,518,518,518,,518,,,,518,518,,,,518',
',518,518,518,518,518,518,518,,,,,,518,518,518,518,518,518,518,,,518',
',,,,,,518,,,518,518,518,518,518,518,518,518,518,518,518,518,,518,518',
',518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,,,,518,,518',
',,,,,,,518,,,,,518,518,518,518,518,518,,,,518,518,,,,,,,518,,518,518',
'518,518,,518,518,520,520,520,,520,,,,520,520,,,,520,,520,520,520,520',
'520,520,520,,,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520',
'520,520,520,520,520,520,,520,520,520,,520,520,,520,520,520,,,,,,,,,',
',,,,,,,,,,520,,,520,,,520,520,,,520,,,,,,520,,,,,,,,520,,,,,520,520',
'520,520,520,520,,,,520,520,,,,,,,520,,,520,520,520,,520,520,525,525',
'525,525,525,,,,525,525,,,,525,,525,525,525,525,525,525,525,,,,,,525',
'525,525,525,525,525,525,,,525,,,,,,525,525,525,525,525,525,525,525,525',
'525,525,525,,525,525,525,,525,525,,525,525,525,,,,,,,,,,,,,,,,,,,,525',
',,525,,,525,525,,,525,,525,,,,525,,,,,,,,525,,,,,525,525,525,525,525',
'525,,,,525,525,,,,,,525,525,,,525,525,525,,525,525,533,533,533,,533',
',,,533,533,,,,533,,533,533,533,533,533,533,533,,,,,,533,533,533,533',
'533,533,533,,,533,,,,,,,533,,,533,533,533,533,533,533,533,533,,533,533',
'533,,533,533,,,,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533,,,533,,,',
',,,,,,,,,,,,,,,533,533,533,533,533,533,,,,533,533,,,,,,,533,,,533,533',
'533,,533,533,535,535,535,,535,,,,535,535,,,,535,,535,535,535,535,535',
'535,535,,,,,,535,535,535,535,535,535,535,,,535,,,,,,,535,,,535,535,535',
'535,535,535,535,535,535,535,535,535,,535,535,,535,535,535,,,,,,,,,,',
',,,,,,,,,535,,,535,,,535,535,,,535,,535,,535,,535,,,,,,,,535,,,,,535',
'535,535,535,535,535,,,,535,535,,,,,,,535,,535,535,535,535,,535,535,541',
'541,541,,541,,,,541,541,,,,541,,541,541,541,541,541,541,541,,,,,,541',
'541,541,541,541,541,541,,,541,,,,,,,541,,,541,541,541,541,541,541,541',
'541,,541,541,541,,541,541,,,,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541',
'541,,,541,,,,,,,,,,,,,,,,,,,541,541,541,541,541,541,,,,541,541,,,,,',
',541,,,541,541,541,,541,541,544,544,544,,544,,,,544,544,,,,544,,544',
'544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,',
',544,,,544,544,544,544,544,544,544,544,,544,544,544,,544,544,,544,544',
'544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,,,,,544,,,,,,,,544',
',,,,544,544,544,544,544,544,,,,544,544,,,,,,,544,,,544,544,544,,544',
'544,545,545,545,,545,,,,545,545,,,,545,,545,545,545,545,545,545,545',
',,,,,545,545,545,545,545,545,545,,,545,,,,,,,545,,,545,545,545,545,545',
'545,545,545,,545,545,545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545',
',,545,,,545,545,,,545,,,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545',
',,,545,545,,,,,,,545,,,545,545,545,,545,545,550,550,550,,550,,,,550',
'550,,,,550,,550,550,550,550,550,550,550,,,,,,550,550,550,550,550,550',
'550,,,550,,,,,,,550,,,550,550,550,550,550,550,550,550,,550,550,550,',
'550,550,,550,550,550,,,,,,,,,,,,,,,,,,,,550,,,550,,,550,550,,,550,,',
',,,550,,,,,,,,550,,,,,550,550,550,550,550,550,,,,550,550,,,,,,,550,',
',550,550,550,,550,550,574,574,574,,574,,,,574,574,,,,574,,574,574,574',
'574,574,574,574,,,,,,574,574,574,574,574,574,574,,,574,,,,,,,574,,,574',
'574,574,574,574,574,574,574,574,574,574,574,,574,574,,574,574,574,,',
',,,,,,,,,,,,,,,,,574,,,574,,,574,574,,,574,,574,,574,,574,,,,,,,,574',
',,,,574,574,574,574,574,574,,,,574,574,,,,,,,574,,574,574,574,574,,574',
'574,586,586,586,,586,,,,586,586,,,,586,,586,586,586,586,586,586,586',
',,,,,586,586,586,586,586,586,586,,,586,,,,,,,586,,,586,586,586,586,586',
'586,586,586,,586,586,586,,586,586,,586,586,586,,,,,,,,,,,,,,,,,,,,586',
',,586,,,586,586,,,586,,,,,,586,,,,,,,,586,,,,,586,586,586,586,586,586',
',,,586,586,,,,,,,586,,,586,586,586,,586,586,592,592,592,,592,,,,592',
'592,,,,592,,592,592,592,592,592,592,592,,,,,,592,592,592,592,592,592',
'592,,,592,,,,,,,592,,,592,592,592,592,592,592,592,592,,592,592,592,',
'592,592,,592,592,592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,',
',,,592,,,,,,,,592,,,,,592,592,592,592,592,592,,,,592,592,,,,,,,592,',
',592,592,592,,592,592,613,613,613,,613,,,,613,613,,,,613,,613,613,613',
'613,613,613,613,,,,,,613,613,613,613,613,613,613,,,613,,,,,,,613,,,613',
'613,613,613,613,613,613,613,,613,613,613,,613,613,,613,613,613,,,,,',
',,,,,,,,,,,,,,613,,,613,,,613,613,,,613,,,,,,613,,,,,,,,613,,,,,613',
'613,613,613,613,613,,,,613,613,,,,,,,613,,,613,613,613,,613,613,653',
'653,653,,653,,,,653,653,,,,653,,653,653,653,653,653,653,653,,,,,,653',
'653,653,653,653,653,653,,,653,,,,,,,653,,,653,653,653,653,653,653,653',
'653,,653,653,653,,653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653,,,653',
',,653,653,,,653,,653,,,,653,,,,,,,,653,,,,,653,653,653,653,653,653,',
',,653,653,,,,,,,653,,,653,653,653,,653,653,654,654,654,,654,,,,654,654',
',,,654,,654,654,654,654,654,654,654,,,,,,654,654,654,654,654,654,654',
',,654,,,,,,,654,,,654,654,654,654,654,654,654,654,,654,654,654,,654',
'654,,654,654,654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,,,,,654',
',,,,,,,654,,,,,654,654,654,654,654,654,,,,654,654,,,,,,,654,,,654,654',
'654,,654,654,655,655,655,,655,,,,655,655,,,,655,,655,655,655,655,655',
'655,655,,,,,,655,655,655,655,655,655,655,,,655,,,,,,,655,,,655,655,655',
'655,655,655,655,655,655,655,655,655,,655,655,,655,655,655,,,,,,,,,,',
',,,,,,,,,655,,,655,,,655,655,,,655,,655,,655,,655,,,,,,,,655,,,,,655',
'655,655,655,655,655,,,,655,655,,,,,,,655,,655,655,655,655,,655,655,658',
'658,658,,658,,,,658,658,,,,658,,658,658,658,658,658,658,658,,,,,,658',
'658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658,658,658',
'658,,658,658,658,,658,658,,658,658,658,,,,,,,,,,,,,,,,,,,,658,,,658',
',,658,658,,,658,,,,,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658',
'658,,,,,,,658,,,658,658,658,,658,658,661,661,661,,661,,,,661,661,,,',
'661,,661,661,661,661,661,661,661,,,,,,661,661,661,661,661,661,661,,',
'661,,,,,,,661,,,661,661,661,661,661,661,661,661,661,661,661,661,,661',
'661,,661,661,661,,,,,,,,,,,,,,,,,,,,661,,,661,,,661,661,,,661,,661,',
'661,,661,,,,,,,,661,,,,,661,661,661,661,661,661,,,,661,661,,,,,,,661',
',661,661,661,661,,661,661,662,662,662,,662,,,,662,662,,,,662,,662,662',
'662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662',
',,662,662,662,662,662,662,662,662,662,662,662,662,,662,662,,662,662',
'662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,,,662,,662,,,,,,,',
'662,,,,,662,662,662,662,662,662,,,,662,662,,,,,,,662,,662,662,662,662',
',662,662,663,663,663,,663,,,,663,663,,,,663,,663,663,663,663,663,663',
'663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,,663,,,663,663,663,663',
'663,663,663,663,,663,663,663,,663,663,,663,663,663,,,,,,,,,,,,,,,,,',
',,663,,,663,,,663,663,,,663,,,,,,663,,,,,,,,663,,,,,663,663,663,663',
'663,663,,,,663,663,,,,,,,663,,,663,663,663,,663,663,664,664,664,,664',
',,,664,664,,,,664,,664,664,664,664,664,664,664,,,,,,664,664,664,664',
'664,664,664,,,664,,,,,,,664,,,664,664,664,664,664,664,664,664,,664,664',
'664,,664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,664,,,664',
',,,,,664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664,664,,,,,,,664',
',,664,664,664,,664,664,669,669,669,,669,,,,669,669,,,,669,,669,669,669',
'669,669,669,669,,,,,,669,669,669,669,669,669,669,,,669,,,,,,,669,,,669',
'669,669,669,669,669,669,669,,669,669,669,,669,669,,669,669,669,,,,,',
',,,,,,,,,,,,,,669,,,669,,,669,669,,,669,,,,,,669,,,,,,,,669,,,,,669',
'669,669,669,669,669,,,,669,669,,,,,,,669,,,669,669,669,,669,669,670',
'670,670,,670,,,,670,670,,,,670,,670,670,670,670,670,670,670,,,,,,670',
'670,670,670,670,670,670,,,670,,,,,,,670,,,670,670,670,670,670,670,670',
'670,,670,670,670,,670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670',
',,670,670,,,670,,,,,,670,,,,,,,,670,,,,,670,670,670,670,670,670,,,,670',
'670,,,,,,,670,,,670,670,670,,670,670,694,694,694,,694,,,,694,694,,,',
'694,,694,694,694,694,694,694,694,,,,,,694,694,694,694,694,694,694,,',
'694,,,,,,,694,,,694,694,694,694,694,694,694,694,,694,694,694,,694,694',
',694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,,,,,694,',
',,,,,,694,,,,,694,694,694,694,694,694,,,,694,694,,,,,,,694,,,694,694',
'694,,694,694,700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700',
'700,700,,,,,,700,700,700,700,700,700,700,,,700,,,,,,,700,,,700,700,700',
'700,700,700,700,700,,700,700,700,,700,700,,,,700,,,,,,,,,,,,,,,,,,,',
'700,,,700,,,700,700,,,700,,,,,,,,,,,,,,,,,,,700,700,700,700,700,700',
',,,700,700,,,,,,,700,,,700,700,700,,700,700,711,711,711,,711,,,,711',
'711,,,,711,,711,711,711,711,711,711,711,,,,,,711,711,711,711,711,711',
'711,,,711,,,,,,,711,,,711,711,711,711,711,711,711,711,,711,711,711,',
'711,711,,,,711,,,,,,,,,,,,,,,,,,,,711,,,711,,,711,711,,,711,,,,,,,,',
',,,,,,,,,,711,711,711,711,711,711,,,,711,711,,,,,,,711,,,711,711,711',
',711,711,717,717,717,,717,,,,717,717,,,,717,,717,717,717,717,717,717',
'717,,,,,,717,717,717,717,717,717,717,,,717,,,,,,,717,,,717,717,717,717',
'717,717,717,717,,717,717,717,,717,717,,717,717,717,,,,,,,,,,,,,,,,,',
',,717,,,717,,,717,717,,,717,,717,,,,717,,,,,,,,717,,,,,717,717,717,717',
'717,717,,,,717,717,,,,,,,717,,,717,717,717,,717,717,722,722,722,,722',
',,,722,722,,,,722,,722,722,722,722,722,722,722,,,,,,722,722,722,722',
'722,722,722,,,722,,,,,,,722,,,722,722,722,722,722,722,722,722,722,722',
'722,722,,722,722,,722,722,722,,,,,,,,,,,,,,,,,,,,722,,,722,,,722,722',
',,722,,722,,,,722,,,,,,,,722,,,,,722,722,722,722,722,722,,,,722,722',
',,,,,,722,,722,722,722,722,,722,722,725,725,725,,725,,,,725,725,,,,725',
',725,725,725,725,725,725,725,,,,,,725,725,725,725,725,725,725,,,725',
',,,,,,725,,,725,725,725,725,725,725,725,725,725,725,725,725,,725,725',
',725,725,725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725,,,725,,,,,,725,',
',,,,,,725,,,,,725,725,725,725,725,725,,,,725,725,,,,,,,725,,725,725',
'725,725,,725,725,739,739,739,,739,,,,739,739,,,,739,,739,739,739,739',
'739,739,739,,,,,,739,739,739,739,739,739,739,,,739,,,,,,,739,,,739,739',
'739,739,739,739,739,739,,739,739,739,,739,739,,739,739,739,,,,,,,,,',
',,,,,,,,,,739,,,739,,,739,739,,,739,,739,,,,739,,,,,,,,739,,,,,739,739',
'739,739,739,739,,,,739,739,,,,,,,739,,,739,739,739,,739,739,751,751',
'751,,751,,,,751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751',
'751,751,751,751,751,,,751,,,,,,,751,,,751,751,751,751,751,751,751,751',
'751,751,751,751,,751,751,,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751,',
',751,751,,,751,,751,,751,,751,,,,,,,,751,,,,,751,751,751,751,751,751',
',,,751,751,,,,,,,751,,751,751,751,751,,751,751,774,774,774,,774,,,,774',
'774,,,,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774,774',
'774,,,774,,,,,,,774,,,774,774,774,774,774,774,774,774,,774,774,774,',
'774,774,,774,774,774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,',
',,,774,,,,,,,,774,,,,,774,774,774,774,774,774,,,,774,774,,,,,,,774,',
',774,774,774,,774,774,796,796,796,,796,,,,796,796,,,,796,,796,796,796',
'796,796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796,,,796',
'796,796,796,796,796,796,796,,796,796,796,,796,796,,796,796,796,,,,,',
',,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796,,,,,796',
'796,796,796,796,796,,,,796,796,,,,,,,796,,,796,796,796,,796,796,803',
'803,803,,803,,,,803,803,,,,803,,803,803,803,803,803,803,803,,,,,,803',
'803,803,803,803,803,803,,,803,,,,,,,803,,,803,803,803,803,803,803,803',
'803,,803,803,803,,803,803,,803,803,803,,,,,,,,,,,,,,,,,,,,803,,,803',
',,803,803,,,803,,,,,,803,,,,,,,,803,,,,,803,803,803,803,803,803,,,,803',
'803,,,,,,,803,,,803,803,803,,803,803,816,816,816,,816,,,,816,816,,,',
'816,,816,816,816,816,816,816,816,,,,,,816,816,816,816,816,816,816,,',
'816,,,,,,,816,,,816,816,816,816,816,816,816,816,,816,816,816,,816,816',
',816,816,816,,,,,,,,,,,,,,,,,,,,816,,,816,,,816,816,,,816,,,,,,816,',
',,,,,,816,,,,,816,816,816,816,816,816,,,,816,816,,,,,,,816,,,816,816',
'816,,816,816,817,817,817,,817,,,,817,817,,,,817,,817,817,817,817,817',
'817,817,,,,,,817,817,817,817,817,817,817,,,817,,,,,,,817,,,817,817,817',
'817,817,817,817,817,,817,817,817,,817,817,,817,817,817,,,,,,,,,,,,,',
',,,,,,817,,,817,,,817,817,,,817,,,,,,817,,,,,,,,817,,,,,817,817,817',
'817,817,817,,,,817,817,,,,,,,817,,,817,817,817,,817,817,818,818,818',
',818,,,,818,818,,,,818,,818,818,818,818,818,818,818,,,,,,818,818,818',
'818,818,818,818,,,818,,,,,,,818,,,818,818,818,818,818,818,818,818,,818',
'818,818,,818,818,,818,818,818,,,,,,,,,,,,,,,,,,,,818,,,818,,,818,818',
',,818,,,,,,818,,,,,,,,818,,,,,818,818,818,818,818,818,,,,818,818,,,',
',,,818,,,818,818,818,,818,818,819,819,819,,819,,,,819,819,,,,819,,819',
'819,819,819,819,819,819,,,,,,819,819,819,819,819,819,819,,,819,,,,,',
',819,,,819,819,819,819,819,819,819,819,,819,819,819,,819,819,,819,819',
'819,,,,,,,,,,,,,,,,,,,,819,,,819,,,819,819,,,819,,,,,,819,,,,,,,,819',
',,,,819,819,819,819,819,819,,,,819,819,,,,,,,819,,,819,819,819,,819',
'819,821,821,821,,821,,,,821,821,,,,821,,821,821,821,821,821,821,821',
',,,,,821,821,821,821,821,821,821,,,821,,,,,,,821,,,821,821,821,821,821',
'821,821,821,,821,821,821,,821,821,,821,821,821,,,,,,,,,,,,,,,,,,,,821',
',,821,,,821,821,,,821,,,,,,821,,,,,,,,821,,,,,821,821,821,821,821,821',
',,,821,821,,,,,,,821,,,821,821,821,,821,821,853,853,853,,853,,,,853',
'853,,,,853,,853,853,853,853,853,853,853,,,,,,853,853,853,853,853,853',
'853,,,853,,,,,,,853,,,853,853,853,853,853,853,853,853,,853,853,853,',
'853,853,,853,853,853,,,,,,,,,,,,,,,,,,,,853,,,853,,,853,853,,,853,,',
',,,853,,,,,,,,853,,,,,853,853,853,853,853,853,,,,853,853,,,,,,,853,',
',853,853,853,,853,853,860,860,860,,860,,,,860,860,,,,860,,860,860,860',
'860,860,860,860,,,,,,860,860,860,860,860,860,860,,,860,,,,,,,860,,,860',
'860,860,860,860,860,860,860,,860,860,860,,860,860,,860,860,860,,,,,',
',,,,,,,,,,,,,,860,,,860,,,860,860,,,860,,,,,,860,,,,,,,,860,,,,,860',
'860,860,860,860,860,,,,860,860,,,,,,,860,,,860,860,860,,860,860,869',
'869,869,,869,,,,869,869,,,,869,,869,869,869,869,869,869,869,,,,,,869',
'869,869,869,869,869,869,,,869,,,,,,,869,,,869,869,869,869,869,869,869',
'869,,869,869,869,,869,869,,869,869,869,,,,,,,,,,,,,,,,,,,,869,,,869',
',,869,869,,,869,,,,,,869,,,,,,,,869,,,,,869,869,869,869,869,869,,,,869',
'869,,,,,,,869,,,869,869,869,,869,869,911,911,911,,911,,,,911,911,,,',
'911,,911,911,911,911,911,911,911,,,,,,911,911,911,911,911,911,911,,',
'911,,,,,,,911,,,911,911,911,911,911,911,911,911,911,911,911,911,,911',
'911,,911,911,911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911,,,,911',
',911,,,,,,,,911,,,,,911,911,911,911,911,911,,,,911,911,,,,,,,911,,911',
'911,911,911,,911,911,912,912,912,,912,,,,912,912,,,,912,,912,912,912',
'912,912,912,912,,,,,,912,912,912,912,912,912,912,,,912,,,,,,,912,,,912',
'912,912,912,912,912,912,912,,912,912,912,,912,912,,912,912,912,,,,,',
',,,,,,,,,,,,,,912,,,912,,,912,912,,,912,,,,,,912,,,,,,,,912,,,,,912',
'912,912,912,912,912,,,,912,912,,,,,,,912,,,912,912,912,,912,912,924',
'924,924,,924,,,,924,924,,,,924,,924,924,924,924,924,924,924,,,,,,924',
'924,924,924,924,924,924,,,924,,,,,,,924,,,924,924,924,924,924,924,924',
'924,,924,924,924,,924,924,,,,924,,,,,,,,,,,,,,,,,,,,924,,,924,,,924',
'924,,,924,,,,,,,,,,,,,,,,,,,924,924,924,924,924,924,,,,924,924,,,,,',
',924,,,924,924,924,,924,924,933,933,933,,933,,,,933,933,,,,933,,933',
'933,933,933,933,933,933,,,,,,933,933,933,933,933,933,933,,,933,,,,,',
',933,,,933,933,933,933,933,933,933,933,,933,933,933,,933,933,,,,933',
',,,,,,,,,,,,,,,,,,,933,,,933,,,933,933,,,933,,,,,,,,,,,,,,,,,,,933,933',
'933,933,933,933,,,,933,933,,,,,,,933,,,933,933,933,,933,933,941,941',
'941,,941,,,,941,941,,,,941,,941,941,941,941,941,941,941,,,,,,941,941',
'941,941,941,941,941,,,941,,,,,,,941,,,941,941,941,941,941,941,941,941',
',941,941,941,,941,941,,941,941,941,,,,,,,,,,,,,,,,,,,,941,,,941,,,941',
'941,,,941,,941,,,,941,,,,,,,,941,,,,,941,941,941,941,941,941,,,,941',
'941,,,,,,,941,,,941,941,941,,941,941,984,984,984,,984,,,,984,984,,,',
'984,,984,984,984,984,984,984,984,,,,,,984,984,984,984,984,984,984,,',
'984,,,,,,,984,,,984,984,984,984,984,984,984,984,,984,984,984,,984,984',
',,,984,,,,,,,,,,,,,,,,,,,,984,,,984,,,984,984,,,984,,,,,,,,,,,,,,,,',
',,984,984,984,984,984,984,,,,984,984,,,,,,,984,,,984,984,984,,984,984',
'998,998,998,,998,,,,998,998,,,,998,,998,998,998,998,998,998,998,,,,',
',998,998,998,998,998,998,998,,,998,,,,,,,998,,,998,998,998,998,998,998',
'998,998,,998,998,998,,998,998,,998,998,998,,,,,,,,,,,,,,,,,,,,998,,',
'998,,,998,998,,,998,,,,,,998,,,,,,,,998,,,,,998,998,998,998,998,998',
',,,998,998,,,,,,,998,,,998,998,998,,998,998,1031,1031,1031,,1031,,,',
'1031,1031,,,,1031,,1031,1031,1031,1031,1031,1031,1031,,,,,,1031,1031',
'1031,1031,1031,1031,1031,,,1031,,,,,,,1031,,,1031,1031,1031,1031,1031',
'1031,1031,1031,1031,1031,1031,1031,,1031,1031,,1031,1031,1031,,,,,,',
',,,,,,,,,,,,,1031,,,1031,,,1031,1031,,,1031,,1031,,1031,,1031,,,,,,',
',1031,,,,,1031,1031,1031,1031,1031,1031,,,,1031,1031,,,,,,,1031,,1031',
'1031,1031,1031,,1031,1031,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,',
'11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11',
',,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11',
'11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12',
'12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12',
'12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12',
'12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75',
'75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75',
'75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75',
'75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,,,,105,105,105,105,105,105,105,105,105,105,,,,,,105,105',
'105,105,105,105,105,105,105,105,105,105,,105,,,,,,,105,105,,105,105',
'105,105,105,105,105,,,105,105,,,,105,105,105,105,,,,,,,,,,,,,,105,105',
',105,105,105,105,105,105,105,105,105,105,105,,,105,,,,,,,,,,,,,,,,,',
',,105,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420',
'420,420,420,420,420,420,420,420,,,,420,420,420,420,420,420,420,420,420',
'420,,,,,,420,420,420,420,420,420,420,420,420,,,420,,,,,,,,,420,420,',
'420,420,420,420,420,420,420,,,420,420,,,,420,420,420,420,,,,,,,,,,,',
',,420,420,,420,420,420,420,420,420,420,420,420,420,420,,,420,420,,,',
',,,,,,420,,,,,,,,,420,650,650,650,650,650,650,650,650,650,650,650,650',
'650,650,650,650,650,650,650,650,650,650,650,650,,,,650,650,650,650,650',
'650,650,650,650,650,,,,,,650,650,650,650,650,650,650,650,650,,,650,',
',,,,,,,650,650,,650,650,650,650,650,650,650,,,650,650,,,,650,650,650',
'650,,,,,,,,,,,,,,650,650,,650,650,650,650,650,650,650,650,650,650,650',
',,650,650,,,,,,,,,,650,,,,,,,,,650,760,760,760,760,760,760,760,760,760',
'760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,,,,760,760',
'760,760,760,760,760,760,760,760,,,,,,760,760,760,760,760,760,760,760',
'760,,,760,,,,,,,,,760,760,,760,760,760,760,760,760,760,,,760,760,,,',
'760,760,760,760,,,,,,,,,,,,,,760,760,,760,760,760,760,760,760,760,760',
'760,760,760,,,760,,,,,228,228,,,228,,,,,,,,,228,228,760,228,228,228',
'228,228,228,228,,,228,228,,,,228,228,228,228,,,,,,228,,,,,,,,228,228',
',228,228,228,228,228,228,228,228,228,228,228,,,228,,,,,229,229,,,229',
',,,,,,,,229,229,228,229,229,229,229,229,229,229,,,229,229,,,,229,229',
'229,229,,,,,,229,,,,,,,,229,229,,229,229,229,229,229,229,229,229,229',
'229,229,,,229,,,,,471,471,,,471,,,,,,,,,471,471,229,471,471,471,471',
'471,471,471,,,471,471,,,,471,471,471,471,,,,,,471,,,,,,,,471,471,,471',
'471,471,471,471,471,471,471,471,471,471,,,471,,,,,472,472,,,472,,,,',
',,,,472,472,471,472,472,472,472,472,472,472,,,472,472,,,,472,472,472',
'472,,,,,,472,,,,,,,,472,472,,472,472,472,472,472,472,472,472,472,472',
'472,,,472,,,,,536,536,,,536,,,,,,,,,536,536,472,536,536,536,536,536',
'536,536,,,536,536,,,,536,536,536,536,,,,,,536,,,,,,,,536,536,,536,536',
'536,536,536,536,536,536,536,536,536,,,536,,,,,537,537,,,537,,,,,,,,',
'537,537,536,537,537,537,537,537,537,537,,,537,537,,,,537,537,537,537',
',,,,,537,,,,,,,,537,537,,537,537,537,537,537,537,537,537,537,537,537',
',,537,,,,,546,546,,,546,,,,,,,,,546,546,537,546,546,546,546,546,546',
'546,,,546,546,,,,546,546,546,546,,,,,,546,,,,,,,,546,546,,546,546,546',
'546,546,546,546,546,546,546,546,,,546,,,,,547,547,,,547,,,,,,,,,547',
'547,546,547,547,547,547,547,547,547,,,547,547,,,,547,547,547,547,,,',
',,547,,,,,,,,547,547,,547,547,547,547,547,547,547,547,547,547,547,,',
'547,,,,,575,575,,,575,,,,,,,,,575,575,547,575,575,575,575,575,575,575',
',,575,575,,,,575,575,575,575,,,,,,575,,,,,,,,575,575,,575,575,575,575',
'575,575,575,575,575,575,575,,,575,,,,,576,576,,,576,,,,,,,,,576,576',
'575,576,576,576,576,576,576,576,,,576,576,,,,576,576,576,576,,,,,,576',
',,,,,,,576,576,,576,576,576,576,576,576,576,576,576,576,576,,,576,,',
',,656,656,,,656,,,,,,,,,656,656,576,656,656,656,656,656,656,656,,,656',
'656,,,,656,656,656,656,,,,,,656,,,,,,,,656,656,,656,656,656,656,656',
'656,656,656,656,656,656,,,656,,,,,657,657,,,657,,,,,,,,,657,657,656',
'657,657,657,657,657,657,657,,,657,657,,,,657,657,657,657,,,,,,657,,',
',,,,,657,657,,657,657,657,657,657,657,657,657,657,657,657,,,657,,,,',
'749,749,,,749,,,,,,,,,749,749,657,749,749,749,749,749,749,749,,,749',
'749,,,,749,749,749,749,,,,,,749,,,,,,,,749,749,,749,749,749,749,749',
'749,749,749,749,749,749,,,749,,,,,750,750,,,750,,,,,,,,,750,750,749',
'750,750,750,750,750,750,750,,,750,750,,,,750,750,750,750,,,,,,750,,',
',,,,,750,750,,750,750,750,750,750,750,750,750,750,750,750,,978,750,978',
'978,978,978,978,,,,,,,,,,978,,,,,750,,,,,,,,,,,,,,,,,978,1027,1027,',
',1027,,,,978,978,978,978,,1027,1027,,1027,1027,1027,1027,1027,1027,1027',
',,1027,1027,,,,1027,1027,1027,1027,,,,,,1027,,,,,978,,,1027,1027,,1027',
'1027,1027,1027,1027,1027,1027,1027,1027,1027,1027,,,1027,,,,,1032,1032',
',,1032,,,,,,,,,1032,1032,1027,1032,1032,1032,1032,1032,1032,1032,,,1032',
'1032,,,,1032,1032,1032,1032,,,,,,1032,,,,,,,,1032,1032,,1032,1032,1032',
'1032,1032,1032,1032,1032,1032,1032,1032,,,1032,,,,,1033,1033,,,1033',
',,,,,,,,1033,1033,1032,1033,1033,1033,1033,1033,1033,1033,,,1033,1033',
',,,1033,1033,1033,1033,,,,,,1033,,,,,,,,1033,1033,,1033,1033,1033,1033',
'1033,1033,1033,1033,1033,1033,1033,,1051,1033,1051,1051,1051,1051,1051',
',,,,,,,,,1051,,,,,1033,,,,,,,,,,,,,,,,,1051,,,,,,,,,1051,1051,1051,1051',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1051' ]
        racc_action_check = arr = ::Array.new(25728, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    15,  1066,    34,   nil,   435,   nil,   nil,  5125,   797,
   nil, 23544, 23677,   -67,   nil,   -85,   -56,   493,     9,   100,
   147,   nil,   -80,  5264,  1346,    87,   nil,   -34,   nil,    75,
  5398,  5526,  5656,  5795,  5934,   nil,  1206,  6073,  6212,   nil,
    66,   181,   259,   197,   185,  6351,  6490,   577,  6629,   170,
   439,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  6763,   nil,  6900,   nil,   nil,   -22,   nil,  7039,  7178,   nil,
   nil,  7317,  7456,   231,   nil, 23810,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    97,   nil,   nil,   nil,   nil,   nil,   nil,   186,
   198,   200,   220,   nil,   nil, 23943,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   nil,   nil,   132,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  7595,   nil,
   nil,   nil,   nil,  7734,  7873,  8012,  8151,  8290,   247,   nil,
   492,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   293,
   nil,  1346,  8429,  8568,  8707,  8846,  8985,  9124, 24410, 24478,
   nil,  9263,  9402,  9541,   nil,   nil,   536,   -81,    83,   369,
   155,   312,   371,   nil,  9680,  1486,   388,  9819,  9958, 10097,
 10236, 10375, 10514, 10653, 10792, 10931, 11070, 11209, 11348, 11487,
 11626, 11765, 11904, 12043, 12182, 12321, 12460, 12599, 12738,   nil,
   nil,   nil,   nil, 12877,   nil,   nil,   nil, 16329,   nil,   nil,
   385, 13016, 13155,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 13294,   nil,  1486,   nil,   355,   357,   nil, 13433,   400,
 13572,   nil, 13711, 13850,   nil,   nil,   461,   nil,   nil, 13989,
  1191,   nil,   352,  1626,   370,   429,   402, 14128,  1766,   620,
   725,   726,   484,   764,   nil,   457,   447,    77,   nil,   nil,
   nil,   496,   187,   465, 14267,   nil,   289,   542,   795,   nil,
   551, 14406,   nil, 14545,  1906,  1331,   494, 14684, 14823,   nil,
   526,   -11,   -10, 14962,  2046,  2186,   512,   608,   497,     5,
     6,   796,   598,     7,   647,   nil,   nil, 15101,   nil, 15240,
   103,   113,   203,   213,   230,   233,   302,   335,   368,   nil,
   372,   nil,   nil,   nil,   nil,   459,   nil,   262,   nil,   306,
   nil,   133,   nil,   572,   326,   nil,   597,   339,   nil,   600,
   -42,   nil,   601,   -41,   nil,   370,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 24076,   nil,   nil,   nil,   nil,   613,   nil,   nil,   620, 15379,
   621,   nil,   nil,   610,   nil,   800,   222,   nil,   nil,   nil,
  1066,   nil,   nil,   nil,   nil,   nil,  1206,   630,   nil,   nil,
   629,   631,   313,   356,  6900,   nil,   nil,   nil,   264,   396,
   682,   nil,   nil, 15513, 15645,   nil,   nil,   nil,   -16,   nil,
   691, 24546, 24614, 15778,   269, 15917, 16056, 16195,  2186,  2326,
   341,   714,   716,   717,   718,   727,   955,  3586,  3610,  2466,
  2606,  2746,  2886,  3026,  3166,   -50,   485,  3306,  3446,  1626,
   742,   786,   nil, 16329,   nil,   nil,   nil,   nil,   670,   nil,
   nil,   nil,   671,   nil,   nil, 16455,   nil,   nil, 16594,   nil,
 16733,   nil,   nil,   nil,   nil, 16872,  1471,   695,   688,   686,
   nil,   nil,   687, 17011,   701, 17150, 24682, 24750,   850,   740,
   nil, 17289,   715,   nil, 17428, 17567, 24818, 24886,   872,  1766,
 17706,   843,   843,   728,   nil,   nil,   392,   417,   760,   743,
   nil,   451,   794,  2326,   872,   nil,  2466,    24,   878,   879,
   876,   893,   nil,   nil, 17845, 24954, 25022,     8,   nil,   172,
   267,   323,   nil,   851,   nil,   805, 17984,   nil,   826,   nil,
   nil,   nil, 18123,   nil,   591,   nil,   793,   796,   nil,   797,
   798,   817,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   805,
   528,   nil,   nil, 18262,   nil,   nil,   nil,   907,   nil,   nil,
   nil,   911,   nil,   nil,   917,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   172,   nil,   nil,   191,
   nil,   nil,   nil,   839,   nil,   nil,   840,   nil,  2606,   nil,
 24209,   nil,   845, 18401, 18540, 18679, 25090, 25158, 18818,   390,
   885, 18957, 19096, 19235, 19374,   885,   nil,   nil,   nil, 19513,
 19652,   888,   nil,   nil,   nil,   273,   275,   528,   660,   860,
   861,   nil,   105,   963,    64,   nil,   nil,   893,   nil,  1001,
   nil,   884,   nil,   926, 19791,   nil,   nil,   nil,   nil,  -104,
 19930,   887,   nil,   893,   127,   153,   930,   304,   894,   934,
   897, 20069,   nil,   967,   -14,   178,   nil, 20208,   nil,   nil,
   nil,   nil, 20347,   nil,   nil, 20486,   nil,   nil,   nil,   638,
   nil,  1031,   nil,   nil,   nil,   nil,   nil,  1038,   nil, 20625,
   923,    24,    28,    93,   138,  2746,   nil,   863,   nil, 25226,
 25294, 20764,   nil,   nil,   nil,   627,  2886,  3026,   723,   853,
 24342,    56,    30,   926,   219,   nil,   nil,   582,  5362,   nil,
  5490,   nil,  5308,   nil, 20903,   nil,   624,   nil,   934,   935,
   860,   939,   nil,   nil,   nil,   nil,  1049,  3166,   nil,   nil,
   nil,   nil,   nil,   960,   nil,   945, 21042,   952,   310,   347,
   792,   924,  1906, 21181,   nil,   950,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 21320, 21459, 21598, 21737,
   364, 21876,   nil,   nil,  6727,   nil,  3306,   nil,   nil,   967,
   nil,   115,   nil,   nil,   nil,   961,   205,   nil,   nil,   nil,
   nil,   nil,   nil,  3446,   nil,   963,  1005,   nil,   nil,   536,
  1085,   nil,   nil, 22015,   nil,  3586,  1096,   nil,   nil,   nil,
 22154,    -7,    35,  1113,   329,   927,   nil,  1000,  3726, 22293,
   585,  1120,  1139,  1027,   615,   nil,   nil,   nil,  3866,  4006,
  1025,  1031,  1032,   nil,   nil,   nil,  1037,  1049,   nil,  1050,
  1059,   nil,  1060,   nil,   nil,  1066,   664,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1056,   nil,  1070,   369,   nil,
   nil, 22432, 22571,  2046,  1071,  1085,   nil,  1086,  1089,  1090,
   nil,  1111,  1096,  1100, 22710,   nil,   nil,   nil,   nil,  4146,
  4286,   nil,    -8, 22849,   nil,   nil,   nil,    -1,   nil,   nil,
   nil, 22988,  4426,   nil,   nil,  1234,   644,   nil,   nil,   nil,
   nil,   nil,  1155,  1133,  1238,   989,   nil,   nil, 15477,   nil,
  6094,   nil,  6233,   nil,  6673,   nil,   nil,   nil,   nil,  1119,
  1133,   nil,   325,   nil,   nil, 15576,   nil,   nil, 25356,   nil,
  7477,   nil,   nil,  1157, 23127,   865,  1214,   nil,  1279,  4566,
   963,   997,  1066,  1233,  1069,   nil,  4706,   nil, 23266,   271,
   nil,   nil,  4846,  4986,   nil,   nil,   583,   nil,   nil,   nil,
  1164,  1165,  1168,  1172,   521,   653,  1174,   nil,   nil,  1177,
  1189,  1190,  1191,   nil,  1198,   nil,  1102, 25395,   nil,   nil,
  1321, 23405, 25463, 25531,  1119,   680,   nil,   nil,   nil,   nil,
  1320,  1323,   nil,  1332, 14149,   nil,   nil,   nil,   nil,  1205,
   nil, 25593,   nil, 14288,   nil, 15122,   nil, 15261,   nil,   nil,
  1245,  1246,   nil,  1211,    21,    23,    53,  1206,   nil,   nil,
   nil,   nil,  1210,  1211,  1215,  1224,  1225,    35,   nil, 15423,
   nil,   nil,   nil,   nil,  1226,   nil ]

racc_action_default = [
    -1,  -645,  -644,  -645,    -2,  -631,    -4,    -5,  -645,    -8,
    -9,  -645,  -645,  -645,   -36,  -645,  -645,   -40,  -645,  -645,
  -291,   -51,  -633,  -645,   -56,   -61,   -62,   -63,   -67,  -268,
  -268,  -268,  -306,  -339,  -340,   -79,  -644,   -83,   -91,   -93,
  -645,  -535,  -536,  -645,  -645,  -645,  -645,  -227,  -645,  -633,
  -241,  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -289,  -290,
  -618,  -293,  -295,  -302,  -304,  -314,  -316,  -645,  -645,   -58,
   -58,  -631,  -645,  -324,  -331,  -645,  -341,  -342,  -344,  -345,
  -346,  -347,  -348,  -349,  -350,  -351,  -352,  -353,  -362,  -417,
  -465,  -466,  -467,  -468,  -469,  -644,  -472,  -644,  -644,  -644,
  -644,  -644,  -644,  -508,  -509,  -644,  -511,  -517,  -519,  -520,
  -521,  -522,  -616,  -524,  -525,  -617,  -527,  -528,  -529,  -530,
  -531,  -532,  -533,  -534,  -539,  -540,  1086,    -3,  -632,  -640,
  -641,  -642,    -7,  -645,  -645,  -645,  -645,  -645,  -645,   -24,
  -645,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -132,  -133,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,
  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,   -29,
  -129,  -644,  -645,  -645,  -645,  -645,  -645,  -644,  -645,  -645,
  -628,  -645,  -645,  -633,  -634,   -55,  -645,  -535,  -536,  -645,
  -291,  -645,  -645,  -233,  -645,  -644,  -645,  -645,  -645,  -645,
  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,
  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -242,
  -243,  -244,  -245,  -645,  -355,  -445,  -425,  -645,  -629,  -630,
   -68,  -644,  -645,  -313,  -354,  -429,  -438,  -440,   -74,  -435,
   -75,  -633,   -76,  -248,  -263,  -644,  -644,  -267,  -645,  -273,
  -645,  -611,  -645,  -645,   -77,   -78,  -631,   -17,   -18,  -645,
   -21,   -22,   -81,  -644,  -633,  -645,   -84,   -87,  -644,   -99,
  -100,  -645,  -645,  -107,  -306,  -309,  -633,  -645,  -339,  -340,
  -343,  -436,  -645,   -89,  -645,   -95,  -301,  -518,  -645,  -221,
  -222,  -645,  -234,  -645,  -644,  -297,  -633,  -644,  -644,  -315,
   -57,  -645,  -645,  -645,  -644,  -644,  -631,  -645,  -632,  -535,
  -536,  -645,  -645,  -291,  -645,  -372,  -373,  -645,  -327,  -645,
  -122,  -123,  -162,  -163,  -164,  -180,  -185,  -192,  -195,  -334,
  -645,  -535,  -536,  -606,  -607,  -567,  -470,  -645,  -493,  -645,
  -495,  -645,  -497,  -645,  -645,  -477,  -645,  -645,  -483,  -645,
  -645,  -489,  -645,  -645,  -491,  -645,  -510,  -512,  -513,  -514,
  -515,    -6,  -643,   -30,   -31,   -32,   -33,   -34,   -10,   -11,
  -645,   -26,   -27,   -28,  -130,  -645,   -37,   -39,  -278,  -645,
  -645,  -277,   -38,  -645,   -41,  -645,  -291,   -49,   -50,  -203,
  -253,  -273,   -52,   -53,   -42,  -204,  -253,  -633,  -258,  -259,
  -644,  -644,  -619,  -620,  -268,  -433,  -621,  -622,  -620,  -619,
  -268,  -432,  -434,  -621,  -622,   -48,  -211,   -54,  -633,  -312,
  -645,  -645,  -645,  -644,  -301,  -645,  -645,  -645,  -212,  -213,
  -214,  -215,  -216,  -217,  -218,  -219,  -223,  -224,  -225,  -226,
  -228,  -229,  -230,  -231,  -232,  -235,  -236,  -237,  -238,  -633,
  -246,  -645,  -446,  -268,  -619,  -620,   -65,   -69,  -633,  -269,
  -442,  -445,  -633,  -308,  -264,  -645,  -272,  -265,  -645,  -270,
  -645,  -274,  -614,  -615,   -16,  -632,   -20,  -645,  -633,   -80,
  -299,   -96,   -85,  -645,  -633,  -644,  -645,  -645,  -106,  -645,
  -518,  -645,   -92,   -97,  -645,  -645,  -645,  -645,  -247,  -239,
  -645,  -457,  -645,  -633,  -296,  -249,  -637,  -637,  -645,  -645,
  -609,  -637,  -645,  -644,  -363,  -364,  -644,  -645,  -645,  -645,
  -645,  -645,  -358,  -452,  -644,  -645,  -645,  -301,   -58,  -117,
  -118,  -645,  -120,  -645,  -291,  -644,  -645,  -332,  -545,  -336,
  -626,  -627,  -645,  -418,  -567,  -421,  -605,  -605,  -550,  -552,
  -552,  -552,  -566,  -568,  -569,  -570,  -571,  -572,  -573,  -574,
  -645,  -576,  -578,  -580,  -585,  -587,  -588,  -590,  -595,  -597,
  -598,  -600,  -601,  -602,  -645,  -471,  -494,  -499,  -500,  -502,
  -473,  -496,  -474,  -498,  -475,  -476,  -645,  -479,  -481,  -645,
  -482,  -485,  -486,  -645,  -487,  -488,  -645,  -516,  -644,   -25,
  -645,   -35,  -281,  -645,  -645,  -644,  -645,  -645,  -645,  -437,
  -645,  -260,  -262,  -645,  -645,   -70,  -256,  -257,  -430,  -645,
  -645,   -72,  -431,  -311,  -635,  -619,  -620,  -619,  -620,  -633,
  -645,  -424,  -644,   -64,  -426,  -442,  -255,  -645,  -443,  -645,
  -307,  -644,  -271,  -275,  -645,  -612,  -613,   -19,   -23,   -82,
  -645,   -88,   -94,  -633,  -619,  -620,  -644,  -103,  -105,  -645,
   -90,  -645,  -210,  -220,  -633,  -644,  -356,  -644,  -294,  -361,
  -298,  -250,  -639,  -638,  -252,  -639,  -303,  -305,  -610,  -644,
  -365,  -644,   -59,  -366,  -367,  -319,  -320,  -645,  -322,  -645,
  -633,  -619,  -620,  -623,  -300,  -644,  -117,  -118,  -119,  -645,
  -645,  -644,  -325,  -541,  -543,  -328,  -644,  -644,  -567,  -567,
  -645,  -633,  -645,  -633,  -645,  -548,  -549,  -645,  -645,  -559,
  -645,  -562,  -645,  -564,  -645,  -374,  -645,  -376,  -378,  -381,
  -384,  -633,  -579,  -589,  -599,  -603,  -645,  -644,  -478,  -480,
  -484,  -490,  -492,  -645,  -131,  -279,  -645,  -633,  -619,  -620,
  -620,  -619,  -254,  -645,  -636,  -644,   -44,  -206,   -45,  -207,
   -71,   -46,  -209,   -47,  -208,   -73,  -645,  -645,  -645,  -645,
  -437,  -645,  -406,  -407,  -633,  -409,  -644,  -428,  -427,  -645,
  -439,  -644,  -441,  -266,  -276,   -86,  -101,   -98,  -310,   -13,
   -15,  -357,  -359,  -644,  -464,  -458,  -644,  -459,  -460,  -637,
  -645,  -360,  -368,  -645,  -370,  -644,  -645,   -60,  -321,  -448,
  -645,  -645,  -437,  -645,  -117,  -118,  -121,  -633,  -644,  -645,
  -645,  -645,  -645,  -633,  -645,  -337,  -608,  -419,  -644,  -644,
  -411,  -633,  -605,  -586,  -604,  -551,  -552,  -552,  -577,  -552,
  -552,  -596,  -552,  -574,  -591,  -633,  -645,  -645,  -383,  -575,
  -501,  -504,  -505,  -506,  -507,  -645,   -12,  -280,  -437,   -43,
  -205,  -261,  -645,  -240,  -605,  -605,  -388,  -644,  -644,  -644,
  -405,  -645,  -633,  -574,  -582,  -583,  -593,  -447,   -66,  -644,
  -644,  -463,  -645,  -645,  -462,  -251,  -317,  -645,  -371,  -318,
  -449,  -645,  -644,  -323,  -437,  -645,  -645,  -329,  -333,  -335,
  -544,  -546,  -545,  -645,  -645,  -645,  -420,  -547,  -645,  -555,
  -645,  -557,  -645,  -560,  -645,  -563,  -565,  -375,  -377,  -379,
  -382,  -503,  -645,  -386,  -387,  -396,  -390,  -398,  -645,  -401,
  -645,  -403,  -408,  -645,  -645,  -581,  -645,  -444,  -644,  -644,
  -108,  -109,  -645,  -645,  -116,  -461,  -644,  -450,  -645,  -644,
  -326,  -542,  -644,  -644,  -422,  -423,  -633,  -413,  -415,  -416,
  -552,  -552,  -552,  -552,  -645,  -645,  -605,  -584,  -389,  -644,
  -644,  -644,  -644,  -594,  -644,  -410,  -592,  -645,  -301,   -14,
  -457,  -644,  -645,  -645,  -115,  -644,  -451,  -453,  -454,  -455,
  -645,  -645,  -412,  -645,  -645,  -553,  -556,  -558,  -561,  -380,
  -385,  -645,  -393,  -645,  -395,  -645,  -399,  -645,  -402,  -404,
  -300,  -623,  -456,  -633,  -619,  -620,  -623,  -114,  -369,  -330,
  -338,  -414,  -552,  -644,  -644,  -644,  -644,  -437,  -554,  -645,
  -391,  -394,  -397,  -400,  -644,  -392 ]

clist = [
'6,131,4,232,330,330,294,294,294,349,276,285,289,379,295,295,295,517',
'552,571,139,220,296,296,296,144,144,715,228,507,343,659,447,312,147',
'147,278,431,432,330,695,9,316,407,850,351,352,9,418,356,563,566,542',
'444,235,757,18,781,465,840,454,460,18,748,128,595,337,131,354,355,127',
'692,350,350,692,856,350,687,765,766,721,724,501,602,918,728,508,333',
'891,144,18,826,314,388,132,390,392,395,398,401,404,345,881,388,280,288',
'290,968,1007,503,888,413,414,415,416,1009,18,970,387,144,1023,636,1',
'585,639,587,2,438,405,138,438,648,292,304,305,438,357,839,350,350,350',
'350,631,930,633,697,527,637,219,366,637,427,887,420,889,732,857,277',
'685,650,341,558,684,921,383,559,364,9,752,380,589,344,517,346,553,347',
'417,348,367,882,868,586,18,870,695,1002,369,756,588,760,952,18,969,1023',
'920,922,1071,1006,593,877,385,294,762,1009,430,430,510,511,919,831,455',
'861,682,1037,411,739,846,692,692,932,386,389,391,895,394,448,968,397',
'400,442,443,866,737,403,1049,1019,900,467,468,915,929,786,787,464,406',
'471,869,695,886,883,1017,701,829,426,437,294,294,437,592,710,,983,437',
'820,295,294,,,,,315,,296,295,763,18,891,18,679,448,18,296,,,330,18,',
'836,,,,19,602,516,516,,,19,,18,,330,131,454,460,,888,539,,285,312,,236',
'289,,312,,888,689,,,236,236,236,862,19,321,321,,556,536,567,1029,,330',
',330,557,561,543,703,,1010,1038,,555,560,546,526,,1068,19,131,,540,',
'236,236,350,1020,236,361,1021,18,957,525,532,18,706,528,575,524,18,935',
'534,,,,706,740,,908,509,,,,,1016,,789,915,512,789,915,,915,973,974,18',
'888,,,,,,,,706,18,18,,,833,,810,,,19,835,1003,815,570,236,236,236,236',
'19,,660,649,871,872,,695,144,1073,667,698,873,874,,,672,147,656,,,294',
'516,516,,944,666,455,,425,602,602,,,797,,,,,,915,692,915,,915,448,915',
',,,,,,315,680,,769,771,773,667,464,,454,460,806,808,,,915,,811,813,1050',
',330,666,,,,691,1062,,330,294,19,236,435,236,236,435,236,,455,,435,236',
'236,,,,833,,455,665,,,847,448,19,671,,,543,,,,945,,,,543,315,294,,,464',
'315,954,,714,867,455,438,,942,464,,733,,,,438,438,,236,236,448,438,438',
',,745,683,18,236,,706,754,,,,,568,569,464,755,,,924,,,761,19,,,,19,',
',,321,19,,,,,,,,,,18,,,18,,,321,,,,,828,294,909,989,,19,,,996,,455,',
',,236,19,19,,6,1077,793,,,805,,448,,,583,,583,794,660,1039,,,144,,,330',
'827,,445,464,,147,,466,1040,1041,330,,822,,,,660,437,,9,667,516,,672',
',,437,437,,,875,430,437,437,18,,666,543,,438,18,,,,849,844,,848,837',
'18,18,,,660,,18,18,294,,854,,854,,,455,,,,,,,,,,924,,880,924,,,924,448',
'924,,,,,,,,,,,,236,464,,,,,,959,961,,963,965,144,966,,718,660,,,,,,890',
',892,,,,,,,735,736,,738,729,,18,731,,,516,,880,,,,,18,18,,,19,,,,,,',
'924,321,924,236,924,,924,,822,321,937,,,437,,1063,,917,236,,18,,,934',
',,946,660,924,,,19,,,19,,18,350,,,,,236,706,,947,,,,951,,,,350,236,',
',,,18,236,,,,,,,,,,330,,1045,1046,1047,1048,18,,,330,,,880,29,,,,,18',
'29,,,,,976,976,976,,466,,445,18,,,29,,,,,,,18,18,29,29,29,19,29,,,,1001',
'435,236,,,,,,,330,435,435,,1078,,,435,435,,,858,,29,,,,,29,29,,1011',
'29,1012,,1013,,,863,,,,18,18,,844,1042,712,321,,,1022,,1024,,18,854',
',,321,1032,,,,294,,,,,,,,,455,,,976,976,976,976,905,976,,,,,,,448,29',
',,854,19,29,29,29,29,29,236,464,,18,660,19,19,464,,,18,,,,,,18,18,1072',
',927,884,,,884,1074,,1075,,1076,,976,976,976,976,936,19,931,,,,939,976',
',,,,,943,938,,,435,1084,,,948,949,,,,,,,,,,807,809,,,,953,812,814,19',
',,,,,916,,29,29,29,29,29,29,29,,,19,29,29,29,,,,,,,236,,19,,,29,,,,',
',,,,,19,236,,,,,987,988,,,19,19,,1000,,,,32,,999,977,979,981,32,,,29',
'29,,,,,,,,,29,,32,,,,,,,,,32,32,32,,32,,,29,,985,,29,,,19,19,29,,992',
'1030,,,,,,,1035,19,,,32,,,,,32,32,,,32,,,29,910,,,,,,,,29,29,29,,,807',
'809,814,812,,1069,1070,,,884,,,916,1026,,916,,916,19,1052,1054,1056',
'1058,,1059,19,,,,,,19,19,,,,,,,,32,,,,,32,32,32,32,32,,,,,,,,,,,236',
',,,,,609,,,,,,,1080,1081,1082,1083,,,,,,,,1085,,,,916,,916,,916,,916',
'243,910,,,,,,,,293,293,293,,,,,,,,,29,916,339,340,,342,,,,,,,,,,469',
',,32,32,32,32,32,32,32,,,,32,32,32,,,,,,,,,,,,32,,,,,,,,,,29,,,,,,,',
',,29,,,,,,,,,,,513,,,,29,32,32,,,,,,,,,32,,29,,,29,,,529,,,,,29,,,,',
'32,,,,32,,,29,,32,,,,29,,,,,,,,,554,,,,,,,,,,,,,32,,,,,,,,,32,32,32',
',,,,,,,609,,,,,,,,,,,,,,,29,775,,,293,440,29,29,446,293,,,,446,,29,29',
',16,,,29,29,,16,,243,,,478,479,480,481,482,483,484,485,486,487,488,489',
'490,491,492,493,494,495,496,497,498,499,,16,,,500,,,,,,,,293,293,,,',
',,,,,293,,673,,,16,,293,,293,,293,293,,,365,,,,,,,32,,29,,,,,,29,,,',
',29,29,,,,,,686,,,,690,,,,548,,549,,,,293,293,,,,,699,,,,29,,702,,,16',
',,32,,609,609,,,16,,29,,32,,609,720,609,,,,,,775,,,,898,32,,,,,,29,',
',,,,,32,,,32,,,,,,,29,32,,,,,,,,,29,,29,32,,,293,,,32,923,,,,,29,29',
',,,,,,,,29,29,,,,,,16,,433,,,433,,,,,433,,,,,,,,293,,446,446,446,,16',
',,,,,,,,32,,,,,,32,32,,,,29,29,,,32,32,775,775,,,32,32,,29,,,293,,,293',
',293,,,,,,,,,,,,,,,293,,,,838,,,,16,446,713,,16,,,,,16,,,,,,,29,,,,',
',,29,609,,,,,29,29,293,,,,16,,,,,,923,32,876,923,16,16,,32,,,,,32,32',
',,,29,,,,,899,,,,,20,,293,,,,20,,,,,,775,775,,,32,,,,,,,,,,,,,,,,32',
',20,323,323,,,,41,,293,446,293,,41,802,,923,293,293,446,446,,32,,,446',
'446,20,,,,,,,,,,363,,32,,41,319,319,,,,,,32,293,32,,,950,,,,,,,,956',
',32,32,,41,,,,,,293,32,32,967,359,293,,381,293,,,,428,441,,,,,,,20,',
'293,,,,,,,20,,,,,293,,,,,,,,16,,,,,,,,,,32,32,,,,293,,,41,,,,,32,,,',
'41,,,,,,,,,,293,16,,,16,,,446,,519,,521,,522,523,,,,,,446,446,446,446',
',913,,,,,,,,32,20,,436,,,436,32,,,,436,,32,32,,,,,,,,,,,20,562,,,,,293',
',,,,,,,,,41,32,,,,,,,,,,,16,,,,,,433,,,,,,41,,,433,433,,,,,433,433,',
',,,,,293,446,,,,,,20,,,,20,,,,323,20,,,,,,,,,652,,,,,293,,323,,,,,,',
',,,20,,,,,41,,,,41,20,20,,319,41,,,,,,,,,584,,584,16,,,,319,,,,,,,16',
'16,,41,,,,,293,,,,,41,41,,,,,,,,,,,,381,,381,,,16,693,,,562,,696,,,',
'293,,,,,,433,,,,,,,,,,,,,,,,,,,,42,,,16,,,42,,,,,,,,,,,,,,16,,,,,,,',
',,,,16,,42,320,320,,,,,,,,,16,,,,,,,,,,16,16,,,,42,,,782,,,,,,,360,',
',382,,,,20,,,,,,,,323,,,,,,,,323,,,,,,,,,,795,,,16,16,,,995,693,562',
',,20,,41,20,16,,,,,,319,42,,,,,,,319,,42,,,,,,,,,834,,,,,,,,,,,41,,',
'41,,,,,,,,16,845,,,,,693,16,,562,,,,16,16,,,,,,,,,859,,,,,,,,,,,20,',
',,,,436,,,,,,,,,436,436,,,42,,436,436,,894,,,,,,,,,,,,,,,,41,,,42,,',
'907,,,,,,323,,,,,,,,,,,323,,,,,,,,,,,,,,,,,,,,,,,,,,,,,319,,,,,20,,',
',,,319,,,,42,20,20,940,42,,,,320,42,,,,,,,,,,,,,,,,320,,,,,41,904,20',
',,42,,,,,,41,41,,,42,42,,436,,,,,,562,,,,382,,382,,,,,,,,,,,20,41,,',
',,,,,,,,,997,,,,20,,,,,,,,,,,,20,,,,,,,,,,,41,,20,,,,,,,,,,20,20,,,',
'41,,,,,,,,,,,,41,1036,,,,,,,,,,,,41,,,,,,,,,,41,41,,,,,584,,,,,20,20',
',,994,,,,,,,,,20,,,,,,,,,,,,,,,,,,,,,,381,,,,,41,41,42,,990,,,,,,320',
',,41,,584,,,320,,20,,,,,,,20,,,,,,20,20,,,,,,42,,,42,,,,,,,,,,,,381',
',,,,41,,,,,,,41,,,,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,320,',
',,,,,,,,,320,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,42,42,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42',
',,,,,,,,,,,,,,,,42,,,,,,,,,,,,42,,,,,,,,,,,,,42,,,,,,,,,,42,42,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,382,,,,,42,42,,,991,,,,,,,,,42',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,382,,,,,42,,,,,,,42,,,,,,42',
'42' ]
        racc_goto_table = arr = ::Array.new(3391, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,118,2,40,78,78,46,46,46,102,171,85,85,70,82,82,82,87,12,113,22,22',
'84,84,84,71,71,15,38,52,40,37,36,59,73,73,38,29,29,78,219,9,63,70,107',
'24,24,9,10,24,106,106,65,33,27,121,34,147,33,17,50,50,34,68,8,170,76',
'118,42,42,5,88,31,31,88,109,31,53,153,153,83,83,172,204,158,83,36,64',
'214,71,34,160,60,6,7,6,6,6,6,6,6,9,162,6,51,51,51,145,164,50,209,24',
'24,24,24,165,34,148,188,71,215,192,1,69,192,69,3,25,188,11,25,13,58',
'58,58,25,5,16,31,31,31,31,193,18,193,20,21,193,23,26,193,30,159,32,159',
'43,45,49,55,74,79,81,86,162,98,101,115,9,117,122,123,124,87,125,126',
'127,9,128,129,152,130,131,34,132,219,133,134,135,136,137,138,34,149',
'215,150,156,164,163,166,167,168,46,169,165,82,82,174,175,159,177,85',
'178,180,181,7,182,183,88,88,184,187,189,190,147,191,6,145,194,195,31',
'31,68,113,196,148,158,197,31,31,152,160,198,199,71,202,38,203,219,208',
'211,212,65,53,27,27,46,46,27,218,65,,162,27,37,82,46,,,,,14,,84,82,170',
'34,214,34,36,6,34,84,,,78,34,,37,,,,35,204,6,6,,,35,,34,,78,118,50,50',
',209,40,,85,59,,35,85,,59,,209,172,,,35,35,35,37,35,35,35,,82,38,24',
'17,,78,,78,84,84,63,36,,159,109,,6,6,38,9,,107,35,118,,76,,35,35,31',
'159,35,35,159,34,153,8,64,34,50,60,38,5,34,83,60,,,,50,36,,37,58,,,',
',152,,193,152,58,193,152,,152,153,153,34,209,,,,,,,,50,34,34,,,87,,52',
',,35,65,121,52,5,35,35,35,35,35,,40,22,12,12,,219,71,159,85,10,170,170',
',,85,73,38,,,46,6,6,,37,6,85,,14,204,204,,,36,,,,,,152,88,152,,152,6',
'152,,,,,,,14,40,,207,207,207,85,71,,50,50,33,33,,,152,,33,33,153,,78',
'6,,,,84,15,,78,46,35,35,35,35,35,35,35,,85,,35,35,35,,,,87,,85,51,,',
'29,6,35,51,,,63,,,,12,,,,63,14,46,,,71,14,12,,31,36,85,25,,106,71,,118',
',,,25,25,,35,35,6,25,25,,,42,51,34,35,,50,6,,,,,14,14,71,31,,,210,,',
'31,35,,,,35,,,,35,35,,,,,,,,,,34,,,34,,,35,,,,,102,46,33,106,,35,,,106',
',85,,,,35,35,35,,6,37,2,,,84,,6,,,35,,35,22,40,113,,,71,,,78,171,,75',
'71,,73,,75,12,12,78,,6,,,,40,27,,9,85,6,,85,,,27,27,,,70,82,27,27,34',
',6,63,,25,34,,,,84,6,,6,63,34,34,,,40,,34,34,46,,6,,6,,,85,,,,,,,,,',
'210,,40,210,,,210,6,210,,,,,,,,,,,,35,71,,,,,,207,207,,207,207,71,207',
',100,40,,,,,,157,,157,,,,,,,100,100,,100,14,,34,14,,,6,,40,,,,,34,34',
',,35,,,,,,,210,35,210,35,210,,210,,6,35,24,,,27,,36,,157,35,,34,,,6',
',,24,40,210,,,35,,,35,,34,31,,,,,35,50,,118,,,,118,,,,31,35,,,,,34,35',
',,,,,,,,,78,,207,207,207,207,34,,,78,,,40,54,,,,,34,54,,,,,6,6,6,,75',
',75,34,,,54,,,,,,,34,34,54,54,54,35,54,,,,118,35,35,,,,,,,78,35,35,',
'207,,,35,35,,,100,,54,,,,,54,54,,157,54,157,,157,,,14,,,,34,34,,6,40',
'75,35,,,157,,157,,34,6,,,35,38,,,,46,,,,,,,,,85,,,6,6,6,6,14,6,,,,,',
',6,54,,,6,35,54,54,54,54,54,35,71,,34,40,35,35,71,,,34,,,,,,34,34,157',
',14,154,,,154,157,,157,,157,,6,6,6,6,100,35,14,,,,100,6,,,,,,100,14',
',,35,157,,,100,100,,,,,,,,,,75,75,,,,14,75,75,35,,,,,,154,,54,54,54',
'54,54,54,54,,,35,54,54,54,,,,,,,35,,35,,,54,,,,,,,,,,35,35,,,,,14,14',
',,35,35,,100,,,,57,,14,155,155,155,57,,,54,54,,,,,,,,,54,,57,,,,,,,',
',57,57,57,,57,,,54,,35,,54,,,35,35,54,,35,14,,,,,,,14,35,,,57,,,,,57',
'57,,,57,,,54,75,,,,,,,,54,54,54,,,75,75,75,75,,100,100,,,154,,,154,35',
',154,,154,35,155,155,155,155,,155,35,,,,,,35,35,,,,,,,,57,,,,,57,57',
'57,57,57,,,,,,,,,,,35,,,,,,146,,,,,,,155,155,155,155,,,,,,,,155,,,,154',
',154,,154,,154,41,75,,,,,,,,41,41,41,,,,,,,,,54,154,41,41,,41,,,,,,',
',,,61,,,57,57,57,57,57,57,57,,,,57,57,57,,,,,,,,,,,,57,,,,,,,,,,54,',
',,,,,,,,54,,,,,,,,,,,61,,,,54,57,57,,,,,,,,,57,,54,,,54,,,61,,,,,54',
',,,,57,,,,57,,,54,,57,,,,54,,,,,,,,,61,,,,,,,,,,,,,57,,,,,,,,,57,57',
'57,,,,,,,,146,,,,,,,,,,,,,,,54,146,,,41,41,54,54,41,41,,,,41,,54,54',
',28,,,54,54,,28,,41,,,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41',
'41,41,41,41,41,41,,28,,,41,,,,,,,,41,41,,,,,,,,,41,,61,,,28,,41,,41',
',41,41,,,28,,,,,,,57,,54,,,,,,54,,,,,54,54,,,,,,61,,,,61,,,,41,,41,',
',,41,41,,,,,61,,,,54,,61,,,28,,,57,,146,146,,,28,,54,,57,,146,61,146',
',,,,,146,,,,146,57,,,,,,54,,,,,,,57,,,57,,,,,,,54,57,,,,,,,,,54,,54',
'57,,,41,,,57,146,,,,,54,54,,,,,,,,,54,54,,,,,,28,,28,,,28,,,,,28,,,',
',,,,41,,41,41,41,,28,,,,,,,,,57,,,,,,57,57,,,,54,54,,,57,57,146,146',
',,57,57,,54,,,41,,,41,,41,,,,,,,,,,,,,,,41,,,,61,,,,28,41,41,,28,,,',
',28,,,,,,,54,,,,,,,54,146,,,,,54,54,41,,,,28,,,,,,146,57,61,146,28,28',
',57,,,,,57,57,,,,54,,,,,61,,,,,39,,41,,,,39,,,,,,146,146,,,57,,,,,,',
',,,,,,,,,57,,39,39,39,,,,66,,41,41,41,,66,41,,146,41,41,41,41,,57,,',
'41,41,39,,,,,,,,,,39,,57,,66,66,66,,,,,,57,41,57,,,61,,,,,,,,61,,57',
'57,,66,,,,,,41,57,57,61,66,41,,66,41,,,,80,80,,,,,,,39,,41,,,,,,,39',
',,,,41,,,,,,,,28,,,,,,,,,,57,57,,,,41,,,66,,,,,57,,,,66,,,,,,,,,,41',
'28,,,28,,,41,,80,,80,,80,80,,,,,,41,41,41,41,,41,,,,,,,,57,39,,39,,',
'39,57,,,,39,,57,57,,,,,,,,,,,39,80,,,,,41,,,,,,,,,,66,57,,,,,,,,,,,28',
',,,,,28,,,,,,66,,,28,28,,,,,28,28,,,,,,,41,41,,,,,,39,,,,39,,,,39,39',
',,,,,,,,80,,,,,41,,39,,,,,,,,,,39,,,,,66,,,,66,39,39,,66,66,,,,,,,,',
'39,,39,28,,,,66,,,,,,,28,28,,66,,,,,41,,,,,66,66,,,,,,,,,,,,66,,66,',
',28,80,,,80,,80,,,,41,,,,,,28,,,,,,,,,,,,,,,,,,,,67,,,28,,,67,,,,,,',
',,,,,,,28,,,,,,,,,,,,28,,67,67,67,,,,,,,,,28,,,,,,,,,,28,28,,,,67,,',
'80,,,,,,,67,,,67,,,,39,,,,,,,,39,,,,,,,,39,,,,,,,,,,80,,,28,28,,,28',
'80,80,,,39,,66,39,28,,,,,,66,67,,,,,,,66,,67,,,,,,,,,80,,,,,,,,,,,66',
',,66,,,,,,,,28,80,,,,,80,28,,80,,,,28,28,,,,,,,,,80,,,,,,,,,,,39,,,',
',,39,,,,,,,,,39,39,,,67,,39,39,,80,,,,,,,,,,,,,,,,66,,,67,,,80,,,,,',
'39,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,39,,,,,,66,,,,67',
'39,39,80,67,,,,67,67,,,,,,,,,,,,,,,,67,,,,,66,39,39,,,67,,,,,,66,66',
',,67,67,,39,,,,,,80,,,,67,,67,,,,,,,,,,,39,66,,,,,,,,,,,,80,,,,39,,',
',,,,,,,,,39,,,,,,,,,,,66,,39,,,,,,,,,,39,39,,,,66,,,,,,,,,,,,66,80,',
',,,,,,,,,,66,,,,,,,,,,66,66,,,,,39,,,,,39,39,,,39,,,,,,,,,39,,,,,,,',
',,,,,,,,,,,,,,66,,,,,66,66,67,,66,,,,,,67,,,66,,39,,,67,,39,,,,,,,39',
',,,,,39,39,,,,,,67,,,67,,,,,,,,,,,,66,,,,,66,,,,,,,66,,,,,,66,66,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,67,,,,,,,,,,,67,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,67,,,,,,,,,,,',
'67,,,,,,,,,,,,,67,,,,,,,,,,67,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,67,,,,,67,67,,,67,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,67,,,,,67,,,,,,,67,,,,,,67,67' ]
        racc_goto_check = arr = ::Array.new(3391, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   122,     0,   126,   nil,    65,    -2,    86,    59,    39,
   -90,   119,  -326,  -288,   234,  -524,  -578,  -656,  -696,   nil,
  -380,  -165,     9,   136,   -22,   -96,    77,    31,  1566,  -185,
   -71,     5,    14,  -173,    54,   289,  -195,  -416,     9,  1941,
   -19,  1332,    -1,  -412,   nil,  -576,   -26,   nil,   nil,   130,
  -168,    75,  -251,  -433,   902,  -348,   nil,  1172,   100,    -3,
    56,  1157,   nil,     5,    49,  -282,  1981,  2387,  -518,  -244,
   -62,    14,   nil,    23,  -265,   444,    22,   nil,   -33,   113,
  1839,  -186,   -18,  -476,   -10,   -18,  -341,  -279,  -444,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    89,   nil,
   225,  -183,   -56,   nil,   nil,   nil,  -301,  -685,   nil,  -656,
   nil,   nil,   nil,  -338,   nil,    94,   nil,  -417,    -4,   nil,
   nil,  -533,    94,  -210,   110,   111,  -171,   112,   113,   105,
  -572,  -187,  -572,  -762,   112,  -400,  -191,  -400,  -685,   nil,
   nil,   nil,   nil,   nil,   nil,  -789,   941,  -553,  -780,  -704,
  -630,   nil,  -585,  -518,   297,   260,  -629,    14,  -740,  -616,
  -591,   nil,  -661,  -758,  -847,  -840,  -187,  -563,   111,  -391,
  -320,   -15,  -193,   nil,   -80,   -80,   nil,  -479,  -528,   nil,
  -290,  -786,  -358,  -501,  -627,   nil,   nil,   128,    23,   124,
   124,   125,  -273,  -247,   127,   127,   131,  -550,  -387,  -387,
   nil,   nil,   139,  -507,  -302,   nil,   nil,  -117,  -520,  -658,
  -230,  -515,  -722,   nil,  -682,  -858,   nil,   nil,  -126,  -478 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   307,     7,   358,   310,
   nil,   nil,   nil,   nil,   551,   nil,   nil,   nil,   nil,   306,
   308,   nil,   nil,   nil,   nil,    14,    15,    21,   241,   nil,
   nil,    17,   nil,   434,   242,   338,   nil,   nil,   750,   240,
   470,    24,   nil,   nil,   353,   nil,    25,    26,    27,   nil,
   709,   nil,   nil,   nil,   327,   nil,    28,   324,   449,    35,
   nil,   nil,    37,    40,    39,   nil,   237,   238,   582,   nil,
   146,   457,   145,    91,   nil,   439,   107,    47,    50,   273,
   299,   nil,   450,   nil,   451,   462,   668,   514,   297,   282,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
   nil,   nil,   283,    65,    66,    67,   nil,   nil,    68,   852,
    69,    70,    71,   nil,    72,   nil,    73,   nil,   564,    74,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,
   275,   717,   843,   573,   853,   777,   893,   nil,   778,   779,
  1018,   914,   597,   nil,   598,   nil,   nil,   599,   nil,   601,
   nil,   823,   nil,   nil,   nil,   607,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   461,   nil,   nil,   688,   nil,   nil,   502,
   nil,   nil,   nil,   nil,   nil,    90,    92,    94,   nil,   nil,
   nil,   nil,   nil,   626,   nil,   nil,   nil,   nil,   nil,   nil,
   103,   104,   nil,   nil,   885,   759,   596,   nil,   600,   611,
   613,   614,   925,   617,   618,   926,   621,   624,   nil,   301 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_none,
  0, 156, :_reduce_9,
  3, 152, :_reduce_10,
  0, 158, :_reduce_11,
  4, 155, :_reduce_12,
  0, 163, :_reduce_13,
  6, 157, :_reduce_14,
  3, 157, :_reduce_15,
  2, 159, :_reduce_16,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_19,
  2, 164, :_reduce_20,
  1, 165, :_reduce_none,
  0, 166, :_reduce_22,
  3, 165, :_reduce_23,
  0, 177, :_reduce_24,
  4, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  3, 154, :_reduce_28,
  2, 154, :_reduce_29,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  3, 154, :_reduce_32,
  3, 154, :_reduce_33,
  3, 154, :_reduce_34,
  4, 154, :_reduce_35,
  1, 154, :_reduce_none,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 170, :_reduce_41,
  3, 170, :_reduce_42,
  6, 170, :_reduce_43,
  5, 170, :_reduce_44,
  5, 170, :_reduce_45,
  5, 170, :_reduce_46,
  5, 170, :_reduce_47,
  3, 170, :_reduce_48,
  1, 178, :_reduce_49,
  1, 178, :_reduce_none,
  1, 176, :_reduce_none,
  3, 176, :_reduce_52,
  3, 176, :_reduce_53,
  3, 176, :_reduce_54,
  2, 176, :_reduce_55,
  1, 176, :_reduce_none,
  1, 169, :_reduce_57,
  0, 189, :_reduce_58,
  0, 190, :_reduce_59,
  4, 187, :_reduce_60,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 192, :_reduce_none,
  4, 192, :_reduce_64,
  0, 200, :_reduce_65,
  4, 197, :_reduce_66,
  1, 199, :_reduce_67,
  2, 191, :_reduce_68,
  3, 191, :_reduce_69,
  4, 191, :_reduce_70,
  5, 191, :_reduce_71,
  4, 191, :_reduce_72,
  5, 191, :_reduce_73,
  2, 191, :_reduce_74,
  2, 191, :_reduce_75,
  2, 191, :_reduce_76,
  2, 191, :_reduce_77,
  2, 191, :_reduce_78,
  1, 171, :_reduce_none,
  3, 171, :_reduce_80,
  1, 205, :_reduce_none,
  3, 205, :_reduce_82,
  1, 204, :_reduce_83,
  2, 204, :_reduce_84,
  3, 204, :_reduce_85,
  5, 204, :_reduce_86,
  2, 204, :_reduce_87,
  4, 204, :_reduce_88,
  2, 204, :_reduce_89,
  4, 204, :_reduce_90,
  1, 204, :_reduce_91,
  3, 204, :_reduce_92,
  1, 208, :_reduce_none,
  3, 208, :_reduce_94,
  2, 207, :_reduce_95,
  3, 207, :_reduce_96,
  1, 210, :_reduce_97,
  3, 210, :_reduce_98,
  1, 209, :_reduce_99,
  1, 209, :_reduce_100,
  4, 209, :_reduce_101,
  3, 209, :_reduce_102,
  3, 209, :_reduce_103,
  3, 209, :_reduce_104,
  3, 209, :_reduce_105,
  2, 209, :_reduce_106,
  1, 209, :_reduce_107,
  1, 173, :_reduce_108,
  1, 173, :_reduce_109,
  4, 173, :_reduce_110,
  3, 173, :_reduce_111,
  3, 173, :_reduce_112,
  3, 173, :_reduce_113,
  3, 173, :_reduce_114,
  2, 173, :_reduce_115,
  1, 173, :_reduce_116,
  1, 213, :_reduce_117,
  1, 213, :_reduce_none,
  2, 214, :_reduce_119,
  1, 214, :_reduce_120,
  3, 214, :_reduce_121,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_125,
  1, 215, :_reduce_none,
  1, 167, :_reduce_127,
  1, 167, :_reduce_none,
  1, 168, :_reduce_129,
  0, 219, :_reduce_130,
  4, 168, :_reduce_131,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  3, 186, :_reduce_203,
  3, 186, :_reduce_204,
  6, 186, :_reduce_205,
  5, 186, :_reduce_206,
  5, 186, :_reduce_207,
  5, 186, :_reduce_208,
  5, 186, :_reduce_209,
  4, 186, :_reduce_210,
  3, 186, :_reduce_211,
  3, 186, :_reduce_212,
  3, 186, :_reduce_213,
  3, 186, :_reduce_214,
  3, 186, :_reduce_215,
  3, 186, :_reduce_216,
  3, 186, :_reduce_217,
  3, 186, :_reduce_218,
  3, 186, :_reduce_219,
  4, 186, :_reduce_220,
  2, 186, :_reduce_221,
  2, 186, :_reduce_222,
  3, 186, :_reduce_223,
  3, 186, :_reduce_224,
  3, 186, :_reduce_225,
  3, 186, :_reduce_226,
  1, 186, :_reduce_none,
  3, 186, :_reduce_228,
  3, 186, :_reduce_229,
  3, 186, :_reduce_230,
  3, 186, :_reduce_231,
  3, 186, :_reduce_232,
  2, 186, :_reduce_233,
  2, 186, :_reduce_234,
  3, 186, :_reduce_235,
  3, 186, :_reduce_236,
  3, 186, :_reduce_237,
  3, 186, :_reduce_238,
  3, 186, :_reduce_239,
  6, 186, :_reduce_240,
  1, 186, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  3, 222, :_reduce_246,
  3, 222, :_reduce_247,
  1, 225, :_reduce_248,
  1, 226, :_reduce_none,
  2, 226, :_reduce_250,
  4, 226, :_reduce_251,
  2, 226, :_reduce_252,
  1, 220, :_reduce_none,
  3, 220, :_reduce_254,
  3, 230, :_reduce_255,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 181, :_reduce_260,
  4, 181, :_reduce_261,
  2, 181, :_reduce_262,
  1, 203, :_reduce_263,
  2, 203, :_reduce_264,
  2, 203, :_reduce_265,
  4, 203, :_reduce_266,
  1, 203, :_reduce_267,
  0, 234, :_reduce_268,
  2, 196, :_reduce_269,
  2, 233, :_reduce_270,
  2, 232, :_reduce_271,
  1, 232, :_reduce_none,
  1, 227, :_reduce_273,
  2, 227, :_reduce_274,
  3, 227, :_reduce_275,
  4, 227, :_reduce_276,
  1, 175, :_reduce_277,
  1, 175, :_reduce_278,
  3, 174, :_reduce_279,
  4, 174, :_reduce_280,
  2, 174, :_reduce_281,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_292,
  0, 269, :_reduce_293,
  4, 223, :_reduce_294,
  0, 270, :_reduce_295,
  3, 223, :_reduce_296,
  0, 271, :_reduce_297,
  4, 223, :_reduce_298,
  3, 223, :_reduce_299,
  3, 223, :_reduce_300,
  2, 223, :_reduce_301,
  0, 272, :_reduce_302,
  4, 223, :_reduce_303,
  0, 273, :_reduce_304,
  4, 223, :_reduce_305,
  1, 223, :_reduce_306,
  4, 223, :_reduce_307,
  3, 223, :_reduce_308,
  1, 223, :_reduce_309,
  5, 223, :_reduce_310,
  4, 223, :_reduce_311,
  3, 223, :_reduce_312,
  2, 223, :_reduce_313,
  1, 223, :_reduce_none,
  2, 223, :_reduce_315,
  1, 223, :_reduce_316,
  6, 223, :_reduce_317,
  6, 223, :_reduce_318,
  4, 223, :_reduce_319,
  4, 223, :_reduce_320,
  5, 223, :_reduce_321,
  4, 223, :_reduce_322,
  6, 223, :_reduce_323,
  0, 274, :_reduce_324,
  0, 275, :_reduce_325,
  7, 223, :_reduce_326,
  0, 276, :_reduce_327,
  0, 277, :_reduce_328,
  0, 278, :_reduce_329,
  9, 223, :_reduce_330,
  0, 279, :_reduce_331,
  0, 280, :_reduce_332,
  6, 223, :_reduce_333,
  0, 281, :_reduce_334,
  6, 223, :_reduce_335,
  0, 282, :_reduce_336,
  0, 283, :_reduce_337,
  9, 223, :_reduce_338,
  1, 223, :_reduce_339,
  1, 223, :_reduce_340,
  1, 223, :_reduce_341,
  1, 223, :_reduce_342,
  1, 180, :_reduce_343,
  1, 244, :_reduce_none,
  1, 250, :_reduce_none,
  1, 253, :_reduce_none,
  1, 255, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 259, :_reduce_none,
  1, 261, :_reduce_351,
  1, 264, :_reduce_352,
  1, 265, :_reduce_353,
  1, 284, :_reduce_none,
  1, 285, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 161, :_reduce_none,
  1, 289, :_reduce_none,
  1, 245, :_reduce_none,
  1, 202, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  2, 251, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 252, :_reduce_none,
  5, 252, :_reduce_369,
  1, 254, :_reduce_none,
  2, 254, :_reduce_371,
  1, 260, :_reduce_none,
  1, 260, :_reduce_373,
  1, 290, :_reduce_none,
  3, 290, :_reduce_375,
  1, 293, :_reduce_376,
  3, 293, :_reduce_377,
  1, 292, :_reduce_378,
  3, 292, :_reduce_379,
  5, 292, :_reduce_380,
  1, 292, :_reduce_381,
  3, 292, :_reduce_382,
  2, 294, :_reduce_383,
  1, 294, :_reduce_384,
  4, 295, :_reduce_385,
  2, 295, :_reduce_386,
  2, 295, :_reduce_387,
  1, 295, :_reduce_388,
  2, 300, :_reduce_389,
  1, 300, :_reduce_none,
  6, 301, :_reduce_391,
  8, 301, :_reduce_392,
  4, 301, :_reduce_393,
  6, 301, :_reduce_394,
  4, 301, :_reduce_395,
  2, 301, :_reduce_396,
  6, 301, :_reduce_397,
  2, 301, :_reduce_398,
  4, 301, :_reduce_399,
  6, 301, :_reduce_400,
  2, 301, :_reduce_401,
  4, 301, :_reduce_402,
  2, 301, :_reduce_403,
  4, 301, :_reduce_404,
  1, 301, :_reduce_405,
  1, 305, :_reduce_406,
  1, 305, :_reduce_407,
  3, 306, :_reduce_408,
  1, 306, :_reduce_409,
  4, 306, :_reduce_410,
  1, 307, :_reduce_none,
  4, 307, :_reduce_412,
  1, 308, :_reduce_413,
  3, 308, :_reduce_414,
  1, 309, :_reduce_415,
  1, 309, :_reduce_none,
  0, 313, :_reduce_417,
  0, 314, :_reduce_418,
  5, 249, :_reduce_419,
  4, 311, :_reduce_420,
  1, 311, :_reduce_421,
  3, 312, :_reduce_422,
  3, 312, :_reduce_423,
  3, 316, :_reduce_424,
  2, 193, :_reduce_425,
  4, 193, :_reduce_426,
  5, 193, :_reduce_427,
  5, 193, :_reduce_428,
  2, 248, :_reduce_429,
  4, 248, :_reduce_430,
  4, 248, :_reduce_431,
  3, 248, :_reduce_432,
  3, 248, :_reduce_433,
  3, 248, :_reduce_434,
  2, 248, :_reduce_435,
  1, 248, :_reduce_436,
  4, 248, :_reduce_437,
  0, 319, :_reduce_438,
  4, 247, :_reduce_439,
  0, 320, :_reduce_440,
  4, 247, :_reduce_441,
  0, 321, :_reduce_442,
  0, 322, :_reduce_443,
  4, 198, :_reduce_444,
  0, 324, :_reduce_445,
  0, 325, :_reduce_446,
  4, 317, :_reduce_447,
  1, 323, :_reduce_448,
  2, 323, :_reduce_449,
  3, 323, :_reduce_450,
  4, 323, :_reduce_451,
  0, 327, :_reduce_452,
  6, 258, :_reduce_453,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  6, 160, :_reduce_456,
  0, 160, :_reduce_457,
  1, 328, :_reduce_458,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  2, 329, :_reduce_461,
  1, 329, :_reduce_none,
  2, 162, :_reduce_463,
  1, 162, :_reduce_none,
  1, 235, :_reduce_465,
  1, 235, :_reduce_none,
  1, 236, :_reduce_467,
  1, 331, :_reduce_468,
  1, 331, :_reduce_none,
  2, 331, :_reduce_470,
  3, 332, :_reduce_471,
  1, 332, :_reduce_472,
  3, 237, :_reduce_473,
  3, 238, :_reduce_474,
  3, 239, :_reduce_475,
  3, 239, :_reduce_476,
  1, 336, :_reduce_477,
  3, 336, :_reduce_478,
  1, 337, :_reduce_none,
  2, 337, :_reduce_480,
  3, 241, :_reduce_481,
  3, 241, :_reduce_482,
  1, 339, :_reduce_483,
  3, 339, :_reduce_484,
  3, 240, :_reduce_485,
  3, 240, :_reduce_486,
  3, 242, :_reduce_487,
  3, 242, :_reduce_488,
  1, 340, :_reduce_489,
  3, 340, :_reduce_490,
  1, 341, :_reduce_491,
  3, 341, :_reduce_492,
  1, 333, :_reduce_493,
  2, 333, :_reduce_494,
  1, 334, :_reduce_495,
  2, 334, :_reduce_496,
  1, 335, :_reduce_497,
  2, 335, :_reduce_498,
  1, 338, :_reduce_499,
  0, 343, :_reduce_500,
  3, 338, :_reduce_501,
  0, 344, :_reduce_502,
  4, 338, :_reduce_503,
  1, 342, :_reduce_504,
  1, 342, :_reduce_505,
  1, 342, :_reduce_506,
  1, 342, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  2, 345, :_reduce_510,
  1, 345, :_reduce_511,
  1, 347, :_reduce_none,
  1, 347, :_reduce_none,
  1, 347, :_reduce_none,
  1, 347, :_reduce_none,
  3, 346, :_reduce_516,
  1, 330, :_reduce_none,
  2, 330, :_reduce_518,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_528,
  1, 212, :_reduce_529,
  1, 212, :_reduce_530,
  1, 212, :_reduce_531,
  1, 212, :_reduce_532,
  1, 212, :_reduce_533,
  1, 212, :_reduce_534,
  1, 243, :_reduce_535,
  1, 243, :_reduce_536,
  1, 179, :_reduce_537,
  1, 179, :_reduce_538,
  1, 184, :_reduce_539,
  1, 184, :_reduce_540,
  0, 348, :_reduce_541,
  4, 262, :_reduce_542,
  1, 262, :_reduce_543,
  3, 266, :_reduce_544,
  0, 350, :_reduce_545,
  3, 266, :_reduce_546,
  4, 349, :_reduce_547,
  2, 349, :_reduce_548,
  2, 349, :_reduce_549,
  1, 349, :_reduce_none,
  2, 352, :_reduce_551,
  0, 352, :_reduce_552,
  6, 315, :_reduce_553,
  8, 315, :_reduce_554,
  4, 315, :_reduce_555,
  6, 315, :_reduce_556,
  4, 315, :_reduce_557,
  6, 315, :_reduce_558,
  2, 315, :_reduce_559,
  4, 315, :_reduce_560,
  6, 315, :_reduce_561,
  2, 315, :_reduce_562,
  4, 315, :_reduce_563,
  2, 315, :_reduce_564,
  4, 315, :_reduce_565,
  1, 315, :_reduce_566,
  0, 315, :_reduce_567,
  1, 310, :_reduce_568,
  1, 310, :_reduce_569,
  1, 310, :_reduce_570,
  1, 310, :_reduce_571,
  1, 291, :_reduce_none,
  1, 291, :_reduce_573,
  1, 354, :_reduce_none,
  3, 354, :_reduce_575,
  1, 302, :_reduce_576,
  3, 302, :_reduce_577,
  1, 355, :_reduce_none,
  2, 356, :_reduce_579,
  1, 356, :_reduce_580,
  2, 357, :_reduce_581,
  1, 357, :_reduce_582,
  1, 296, :_reduce_none,
  3, 296, :_reduce_584,
  1, 351, :_reduce_none,
  3, 351, :_reduce_586,
  1, 358, :_reduce_none,
  1, 358, :_reduce_none,
  2, 297, :_reduce_589,
  1, 297, :_reduce_590,
  3, 359, :_reduce_591,
  3, 360, :_reduce_592,
  1, 303, :_reduce_593,
  3, 303, :_reduce_594,
  1, 353, :_reduce_595,
  3, 353, :_reduce_596,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 304, :_reduce_599,
  1, 304, :_reduce_600,
  1, 362, :_reduce_none,
  1, 362, :_reduce_none,
  2, 299, :_reduce_603,
  2, 298, :_reduce_604,
  0, 298, :_reduce_605,
  1, 267, :_reduce_none,
  0, 363, :_reduce_607,
  4, 267, :_reduce_608,
  1, 246, :_reduce_609,
  2, 246, :_reduce_none,
  1, 229, :_reduce_none,
  3, 229, :_reduce_612,
  3, 364, :_reduce_613,
  2, 364, :_reduce_614,
  2, 364, :_reduce_615,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 183, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  2, 206, :_reduce_none,
  2, 182, :_reduce_none,
  0, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 263, :_reduce_640,
  1, 263, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_643,
  0, 151, :_reduce_644 ]

racc_reduce_n = 645

racc_shift_n = 1086

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLOWEST => 141,
  :tEQL => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tRATIONAL",
  "tIMAGINARY",
  "tLOWEST",
  "tEQL",
  "tBDOT2",
  "tBDOT3",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "@5",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@6",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@7",
  "@8",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@9",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@10",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "@28",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "case_args",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "ssym",
  "dsym",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 11
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      # TODO: move down to main match so I can just use val

                      warn "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug 12

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      result = val[2] # wtf?

    result
end

def _reduce_24(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_27(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_28(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_29(val, _values, result)
                      result = val[1]

    result
end

def _reduce_30(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_31(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_33(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_34(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_35(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug 13
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_38(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_43(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_44(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_45(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_47(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_48(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_49(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_55(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      blk, _, (msg, _line), args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      # self.env.unextend

    result
end

def _reduce_67(val, _values, result)
                      (msg, line), = val
                      result = new_call(nil, msg.to_sym).line line

    result
end

def _reduce_68(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_69(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_70(val, _values, result)
                      lhs, callop, (op, _), args = val

                      result = new_call lhs, op.to_sym, args, callop
                      result.line lhs.line

    result
end

def _reduce_71(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_72(val, _values, result)
                      lhs, _, (id, line), args = val

                      result = new_call lhs, id.to_sym, args
                      result.line line

    result
end

def _reduce_73(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_75(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_77(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]

    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_83(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_84(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_85(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_87(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_88(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_89(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_90(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_91(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_92(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]

    result
end

def _reduce_95(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_97(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_102(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_103(val, _values, result)
                      recv, _, (id, _line) = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_104(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 14
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, (id, _line) = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 15
                        yyerror "dynamic constant assignment"
                      end

                      _, (id, l) = val

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_107(val, _values, result)
                      ref, = val

                      self.backref_assign_error ref

    result
end

def _reduce_108(val, _values, result)
                      var, = val

                      result = self.assignable var

    result
end

def _reduce_109(val, _values, result)
                      var, = val

                      result = self.assignable var

                      debug 16

    result
end

def _reduce_110(val, _values, result)
                      lhs, _, args, _ = val

                      result = self.aryset lhs, args

    result
end

def _reduce_111(val, _values, result)
                      lhs, op, (id, _line) = val

                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_112(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_attrasgn lhs, id

    result
end

def _reduce_113(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_114(val, _values, result)
                      expr, _, (id, _line) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 17
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      _, (id, l) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 18
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      _, (name, line) = val
                      result = s(:colon3, name.to_sym).line line

    result
end

def _reduce_120(val, _values, result)
                      (id, line), = val
                      result = [id.to_sym, line] # TODO: sexp?

    result
end

def _reduce_121(val, _values, result)
                      pval, _, (name, _line) = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END

    result
end

# reduce 126 omitted

def _reduce_127(val, _values, result)
                      (id, line), = val

                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_130(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_131(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

def _reduce_203(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_204(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_205(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_208(val, _values, result)
                      lhs, _, (id, _line), (op, _), rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_209(val, _values, result)
                      lhs1, _, (lhs2, _line), op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_210(val, _values, result)
                      _, (lhs, line), op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_211(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_212(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_213(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      _, (num, line), _, arg = val
                      lit = s(:lit, num).line line
                      result = new_call(new_call(lit, :"**", argl(arg)), :"-@")


    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 227 omitted

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_231(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_232(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_233(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_234(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_235(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_237(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_238(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_239(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_240(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      lhs, (op, _), rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_247(val, _values, result)
                      lhs, (op, _), rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_248(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_251(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_252(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_255(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      result = args val

    result
end

def _reduce_261(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_262(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_263(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_264(val, _values, result)
                      result = call_args val

    result
end

def _reduce_265(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_266(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_267(val, _values, result)
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_269(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_270(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_271(val, _values, result)
                      result = val[1]

    result
end

# reduce 272 omitted

def _reduce_273(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_274(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_275(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_276(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_277(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_278(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_279(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_280(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_281(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      (msg, line), = val
                      result = new_call nil, msg.to_sym
                      result.line line

    result
end

def _reduce_293(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_294(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_295(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_296(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_297(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_298(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_299(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_300(val, _values, result)
                      expr, _, (id, _line) = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_301(val, _values, result)
                      _, (id, line) = val

                      result = s(:colon3, id.to_sym).line line

    result
end

def _reduce_302(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_303(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_304(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_305(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_306(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_307(val, _values, result)
                      (_, line), _, args, _ = val

                      result = new_yield(args).line line

    result
end

def _reduce_308(val, _values, result)
                      (_, line), _, _ = val

                      result = new_yield.line line

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val

                      result = new_yield.line line

    result
end

def _reduce_310(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_311(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_312(val, _values, result)
                      debug 20

    result
end

def _reduce_313(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 314 omitted

def _reduce_315(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_316(val, _values, result)
                      expr, = val
                      result = expr

    result
end

def _reduce_317(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_318(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_319(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_320(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_321(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_322(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_323(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_325(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_326(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_329(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_330(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_331(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_332(val, _values, result)
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_334(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

    result
end

def _reduce_335(val, _values, result)
                      result, in_def = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.ignore_body_comments

    result
end

def _reduce_336(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL

    result
end

def _reduce_338(val, _values, result)
                      # [kdef, recv, _, _, (name, line), in_def, args, body, kend]
                      # =>
                      # [kdef, recv, (name, line), in_def, args, body, kend]

                      val.delete_at 3
                      val.delete_at 2

                      result, in_def = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.ignore_body_comments

    result
end

def _reduce_339(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_340(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_341(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_342(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_343(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_352(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_353(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = val[1]

    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

def _reduce_376(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_377(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_378(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_379(val, _values, result)
                      args, _, rest = val

                      result = block_var args, rest

    result
end

def _reduce_380(val, _values, result)
                      lhs, _, splat, _, rhs = val

                      result = block_var lhs, splat, rhs

    result
end

def _reduce_381(val, _values, result)
                      rest, = val

                      result = block_var rest

    result
end

def _reduce_382(val, _values, result)
                      splat, _, rest = val

                      result = block_var splat, rest

    result
end

def _reduce_383(val, _values, result)
                      _, (id, line) = val

                      result = args ["*#{id}".to_sym]
                      result.line line

    result
end

def _reduce_384(val, _values, result)
                      result = args [:*]
                      result.line lexer.lineno # FIX: tSTAR -> line

    result
end

def _reduce_385(val, _values, result)
                      result = call_args val

    result
end

def _reduce_386(val, _values, result)
                      result = call_args val

    result
end

def _reduce_387(val, _values, result)
                      result = call_args val

    result
end

def _reduce_388(val, _values, result)
                      (id, line), = val
                      result = call_args [id]
                      result.line line

    result
end

def _reduce_389(val, _values, result)
                      result = args val

    result
end

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      result = args val

    result
end

def _reduce_392(val, _values, result)
                      result = args val

    result
end

def _reduce_393(val, _values, result)
                      result = args val

    result
end

def _reduce_394(val, _values, result)
                      result = args val

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

def _reduce_396(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args val

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
 result = 0
    result
end

def _reduce_407(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_408(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_410(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      result = args val

    result
end

def _reduce_413(val, _values, result)
                      result = args val

    result
end

def _reduce_414(val, _values, result)
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      (id, line), = val
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 416 omitted

def _reduce_417(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_418(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_419(val, _values, result)
                      _, (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_422(val, _values, result)
                      result = val[1]

    result
end

def _reduce_423(val, _values, result)
                      result = val[1]

    result
end

def _reduce_424(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_425(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      cmd, blk = val

                      syntax_error "Both block arg and actual block given." if
                        cmd.block_pass?

                      if inverted? val then
                        val = invert_block_call val
                        cmd, blk = val
                      end

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_426(val, _values, result)
                      lhs, _, (id, _line), args = val

                      result = new_call lhs, id.to_sym, args

    result
end

def _reduce_427(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_428(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_429(val, _values, result)
                      call, args = val

                      result = call.concat args.sexp_body if args

    result
end

def _reduce_430(val, _values, result)
                      recv, call_op, (op, _line), args = val

                      result = new_call recv, op.to_sym, args, call_op

    result
end

def _reduce_431(val, _values, result)
                      recv, _, (op, _line), args = val

                      result = new_call recv, op.to_sym, args

    result
end

def _reduce_432(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_call lhs, id.to_sym

    result
end

def _reduce_433(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_434(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_435(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_436(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_438(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_439(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_440(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_441(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_442(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_443(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_444(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_445(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_446(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_447(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_448(val, _values, result)
                      arg, = val

                      result = s(:array, arg).line arg.line

    result
end

def _reduce_449(val, _values, result)
                      _, arg = val

                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_450(val, _values, result)
                      args, _, id = val

                      result = self.list_append args, id

    result
end

def _reduce_451(val, _values, result)
                      args, _, _, id = val

                      result = self.list_append args, s(:splat, id).line(id.line)

    result
end

def _reduce_452(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_453(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line val[1]
                      result << val[5] if val[5]

    result
end

# reduce 454 omitted

# reduce 455 omitted

def _reduce_456(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_457(val, _values, result)
                      result = nil

    result
end

def _reduce_458(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 459 omitted

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = val[1]

    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 464 omitted

def _reduce_465(val, _values, result)
                      (lit, line), = val
                      result = s(:lit, lit).line line

    result
end

# reduce 466 omitted

def _reduce_467(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_468(val, _values, result)
                      debug 37

    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_471(val, _values, result)
                      (_, line), str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_DEDENT

                      result = str.line line

    result
end

def _reduce_472(val, _values, result)
                      result = new_string val

    result
end

def _reduce_473(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_474(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_475(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_476(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_477(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_478(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_481(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_482(val, _values, result)
                      (_, line), list, _, = val
                      list.line line
                      result = list

    result
end

def _reduce_483(val, _values, result)
                      result = new_symbol_list

    result
end

def _reduce_484(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_485(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_486(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_487(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_488(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_489(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_490(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_491(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_493(val, _values, result)
                      line = prev_value_to_lineno _values.last
                      result = s(:str, +"").line line

    result
end

def _reduce_494(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_495(val, _values, result)
                      result = nil

    result
end

def _reduce_496(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_497(val, _values, result)
                      result = nil

    result
end

def _reduce_498(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_499(val, _values, result)
                      result = new_string val

    result
end

def _reduce_500(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_501(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_502(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_503(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.pop
                      lexer.cmdarg.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug 38
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_504(val, _values, result)
                      (id, line), = val
                      result = s(:gvar, id.to_sym).line line

    result
end

def _reduce_505(val, _values, result)
                      (id, line), = val
                      result = s(:ivar, id.to_sym).line line

    result
end

def _reduce_506(val, _values, result)
                      (id, line), = val
                      result = s(:cvar, id.to_sym).line line

    result
end

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      _, (id, line) = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

def _reduce_511(val, _values, result)
                      (id, line), = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug 39
                      end

    result
end

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      _, (num, line) = val
                      result = [-num, line]

    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_529(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_530(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_531(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_535(val, _values, result)
                      raise "NO: #{val.inspect}" if Sexp === val.first
                      (var, line), = val
                      result = Sexp === var ? var : self.gettable(var)
                      result.line line

    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_537(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]
                      debug 40

    result
end

def _reduce_539(val, _values, result)
                      (ref, line), = val
                      result = s(:nth_ref, ref).line line

    result
end

def _reduce_540(val, _values, result)
                      (ref, line), = val
                      result = s(:back_ref, ref).line line

    result
end

def _reduce_541(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_542(val, _values, result)
                      result = val[2]

    result
end

def _reduce_543(val, _values, result)
                      result = nil

    result
end

def _reduce_544(val, _values, result)
                      result = end_args val

    result
end

def _reduce_545(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_546(val, _values, result)
                      result = end_args val

    result
end

def _reduce_547(val, _values, result)
                      result = args val

    result
end

def _reduce_548(val, _values, result)
                      result = args val

    result
end

def _reduce_549(val, _values, result)
                      result = args val

    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = val[1]

    result
end

def _reduce_552(val, _values, result)
                      result = nil

    result
end

def _reduce_553(val, _values, result)
                      result = args val

    result
end

def _reduce_554(val, _values, result)
                      result = args val

    result
end

def _reduce_555(val, _values, result)
                      result = args val

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val
                      # result.line lexer.lineno

    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      (id, line), = val
                      identifier = id.to_sym
                      self.env[identifier] = :lvar

                      result = [identifier, line]

    result
end

# reduce 574 omitted

def _reduce_575(val, _values, result)
                      _, margs, _ = val

                      result = margs

    result
end

def _reduce_576(val, _values, result)
                      result = new_arg val

    result
end

def _reduce_577(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << (Sexp === item ? item : item.first)

    result
end

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_580(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_581(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_582(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      result = args val

    result
end

# reduce 587 omitted

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      _, (id, line) = val

                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"**#{name}", line]

    result
end

def _reduce_590(val, _values, result)
                      id = :"**"
                      self.env[id] = :lvar # TODO: needed?!?
                      result = [id, lexer.lineno] # TODO: tPOW/tDSTAR include lineno

    result
end

def _reduce_591(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs
                      # TODO: detect duplicate names

    result
end

def _reduce_592(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs

    result
end

def _reduce_593(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_594(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_595(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_596(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 597 omitted

# reduce 598 omitted

def _reduce_599(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      _, (id, line) = val
                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"*#{name}", line]

    result
end

def _reduce_600(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = [name, lexer.lineno] # FIX: tSTAR to include lineno

    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      _, (id, line) = val
                      identifier = id.to_sym

                      self.env[identifier] = :lvar
                      result = ["&#{identifier}".to_sym, line]

    result
end

def _reduce_604(val, _values, result)
                      _, arg = val
                      result = arg

    result
end

def _reduce_605(val, _values, result)
                      result = nil

    result
end

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_608(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_609(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 610 omitted

# reduce 611 omitted

def _reduce_612(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_613(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_614(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_615(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

def _reduce_640(val, _values, result)
 yyerrok
    result
end

# reduce 641 omitted

# reduce 642 omitted

def _reduce_643(val, _values, result)
 yyerrok
    result
end

def _reduce_644(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
