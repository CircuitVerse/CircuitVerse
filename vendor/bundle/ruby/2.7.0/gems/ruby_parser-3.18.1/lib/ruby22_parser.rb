#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby22Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-523,567,567,646,567,567,284,-523,-523,-523,3,567,-523,-523,-523,284',
'-523,233,-94,649,224,225,95,-111,-523,254,-523,-523,-523,-108,96,-109',
'-80,130,224,225,-523,-523,129,-523,-523,-523,-523,-523,231,-102,-116',
'-104,-113,-115,-111,-110,-113,234,422,126,884,251,-110,424,423,253,252',
'224,225,221,645,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,738,648,-523,-523,-523,-107,-523,-523,224,225,-523,846',
'286,-523,-523,222,-523,847,-523,-116,-523,286,-523,-523,-523,-523,-523',
'-523,-523,234,-523,-102,-523,-104,130,130,-112,130,130,129,129,946,129',
'129,130,-523,-523,-523,-523,129,-523,-526,-523,-99,-112,-100,-111,-523',
'-526,-526,-526,-111,-523,-526,-526,-526,-102,-526,-104,-102,-107,-104',
'234,-106,-102,-526,-104,-526,-526,-526,883,-113,-101,-102,-110,-104',
'-113,-526,-526,-110,-526,-526,-526,-526,-526,-114,108,109,234,829,130',
'284,-621,829,230,129,284,-537,108,109,-523,279,727,224,225,726,-618',
'-523,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,-621,828,-526,-526,-526,828,-526,-526,-526,-103,-526,630,-533,-526',
'-526,-526,-526,-619,-526,-533,-526,223,-526,-526,-526,-526,-526,-526',
'-526,-622,-526,-108,-526,-537,281,630,-112,-523,630,281,226,-112,110',
'111,-523,-526,-526,-526,-526,-618,-526,-300,-526,-523,110,111,286,-526',
'-300,-300,-300,286,-526,615,-300,-300,254,-300,-105,230,-526,-618,632',
'631,618,-99,229,-526,130,-625,-437,792,-619,129,274,227,-526,-300,-300',
'-108,-300,-300,-300,-300,-300,336,632,631,251,632,631,628,253,252,-619',
'794,-532,626,625,630,130,727,337,-532,729,129,-625,-538,-300,-300,-300',
'-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-625,-437,-300',
'-300,-300,630,672,-625,-437,619,-300,750,-621,-300,476,751,-625,-437',
'-300,630,-300,234,-300,-300,-300,-300,-300,-300,-300,231,-300,615,-300',
'630,-625,-437,630,-625,632,631,628,-109,618,369,-625,-300,-300,-625',
'-105,-621,-300,-538,546,-625,-625,-625,-625,-300,700,130,-625,-625,-114',
'-625,129,394,632,631,633,397,-116,-625,-625,820,630,626,625,635,856',
'860,632,631,638,-625,-625,-116,-625,-625,-625,-625,-625,546,400,-100',
'632,631,643,632,631,650,727,666,860,729,574,821,666,-109,-115,619,667',
'917,807,403,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,420,-111,-625,-625,-625,-106,673,632,631,667,-625,807,130',
'-625,-534,-102,425,129,-625,-115,-625,-534,-625,-625,-625,-625,-625',
'-625,-625,-111,-625,-625,-625,-113,-111,475,-343,-531,-113,-110,-110',
'271,272,-343,-531,-625,-625,-625,-103,477,-625,-104,-343,-101,-625,-625',
'-625,-625,478,-625,-625,-625,-112,-625,130,-113,233,-110,507,129,516',
'254,-625,-625,-625,-625,270,269,-528,727,224,225,729,-625,-625,-528',
'-625,-625,-625,-625,-625,610,-529,607,606,605,519,608,610,-529,607,606',
'605,251,608,-530,592,253,252,249,250,521,-530,593,-625,-625,-625,-625',
'-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-79,780,-625,-625',
'-625,230,822,-625,780,234,-625,532,473,-625,-625,533,-625,784,-625,540',
'-625,474,-625,-625,-625,-625,-625,-625,-625,291,-625,-625,-625,610,234',
'607,606,605,615,608,133,134,135,136,137,-625,-625,-625,-625,618,-625',
'-300,-625,234,-535,281,1048,-625,-300,-300,-300,-535,-112,-300,-300',
'-300,543,-300,547,-536,-535,613,596,626,625,254,-536,-300,-300,-300',
'623,622,626,625,254,-536,234,-300,-300,574,-300,-300,-300,-300,-300',
'610,413,607,606,605,579,608,610,580,607,606,605,251,608,856,860,253',
'252,249,250,637,619,641,-300,-300,-300,-300,-300,-300,-300,-300,-300',
'-300,-300,-300,-300,-300,644,780,-300,-300,-300,230,823,-300,780,647',
'-300,654,539,-300,-300,-273,-300,784,-300,656,-300,537,-300,-300,-300',
'-300,-300,-300,-300,657,-300,234,-300,610,664,607,606,605,615,608,133',
'134,135,136,137,-300,-300,-300,-300,618,-300,-300,-300,665,281,677,254',
'-300,-300,-300,-300,254,-114,254,-300,-300,610,-300,607,606,605,613',
'608,610,254,607,606,605,684,608,623,622,626,625,234,234,420,-300,-300',
'-291,-300,-300,-300,-300,-300,234,-291,-94,704,230,234,230,552,715,780',
'-291,549,720,578,723,234,780,730,784,731,474,619,576,-300,-300,-300',
'-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,230,-301,-300',
'-300,-300,230,672,660,-301,521,-300,734,753,-300,723,723,658,-301,-300',
'574,-300,755,-300,-300,-300,-300,-300,-300,-300,723,-300,757,-300,762',
'768,-301,230,-300,771,772,774,776,-301,1032,-300,-300,-300,-625,-300',
'-622,-300,-301,755,-300,-625,-625,-625,-300,778,787,-625,-625,-114,-625',
'254,-647,-647,-647,-647,271,272,788,-625,-647,-647,-535,789,795,-536',
'796,264,265,-535,-625,-625,-536,-625,-625,-625,-625,-625,-535,-274,808',
'-536,507,251,507,257,234,253,252,249,250,270,269,255,610,256,607,606',
'605,825,608,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-300,230,-625,-625,-625,274,673,-300,1038,834,-625,836,-622',
'-625,519,521,-300,1036,-625,715,-625,234,-625,-625,-625,-625,-625,-625',
'-625,281,-625,-625,-625,-291,281,715,254,906,907,860,-291,908,124,125',
'723,-625,-625,234,-625,-291,-625,8,85,86,87,12,78,-625,234,230,79,80',
'-112,901,902,83,1032,81,82,84,33,34,76,77,234,755,911,-275,234,88,31',
'30,118,117,119,120,916,933,22,715,-273,938,723,661,11,49,10,13,122,121',
'123,112,60,114,113,115,723,116,124,125,723,108,109,234,45,46,44,254',
'258,259,260,261,271,272,266,267,262,263,-301,247,248,723,723,264,265',
'-301,43,234,960,36,234,771,62,63,-301,963,64,965,38,251,967,257,48,253',
'252,249,250,270,269,255,23,256,969,969,-300,105,95,97,98,99,101,-300',
'234,976,96,106,-622,268,-276,-248,-300,977,89,771,980,93,100,102,983',
'110,111,310,85,86,87,12,78,985,987,234,79,80,989,723,762,83,1009,81',
'82,84,33,34,76,77,133,134,135,136,137,88,31,30,118,117,119,120,1010',
'1019,22,1020,1030,1033,846,661,11,49,312,13,122,121,123,112,60,114,113',
'115,1039,116,124,125,1049,108,109,969,45,46,44,254,258,259,260,261,271',
'272,266,267,262,263,969,247,248,969,771,264,265,1056,43,1058,1060,314',
'1062,1062,62,63,720,723,64,723,38,251,1020,257,48,253,252,249,250,270',
'269,255,23,256,-622,-621,234,105,95,97,98,99,101,969,1084,1062,96,106',
'1062,268,1062,1062,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,133,134,135,136,137,88,31,30,118,117',
'119,120,,1013,22,607,606,605,,608,11,49,312,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260,261,271,272',
'266,267,262,263,,247,248,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257',
'48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,,,96,106',
',268,,,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,1013,22,607,606',
'605,,608,11,49,312,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,254,258,259,260,261,271,272,266,267,262,263,,247,248,',
',264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269',
'255,23,256,,,,105,95,97,98,99,101,,,,96,106,,268,,,,,89,,,93,100,102',
',110,111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,312,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260,261,271',
'272,266,267,262,263,,247,248,,,264,265,,43,,,314,,,62,63,,,64,,38,251',
',257,48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,',
',96,106,234,268,,,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,,11,49,312,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,254,258,259,260,261,271,272,266,267,262,263,,247,248,,,264',
'265,,43,,,314,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269,255',
'23,256,,,,105,95,97,98,99,101,,,,96,106,,268,,,,,89,,,93,100,102,,110',
'111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,312,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260,261,271,272',
'266,267,262,263,,247,248,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257',
'48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,,,96,106',
',268,,,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49',
'312,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
'254,258,259,260,261,271,272,266,267,262,263,,247,248,,,264,265,,43,',
',36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269,255,23,256',
',,,105,95,97,98,99,101,,,,96,106,,268,,,,,89,,,93,100,102,,110,111,310',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,22,,,,,,11,49,312,13,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,254,258,259,260,261,271,272,266,267,262,263',
',-647,-647,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249',
'250,270,269,255,23,256,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,312,13,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260,261',
'271,272,266,267,262,263,,-647,-647,,,264,265,,43,,,36,,,62,63,,,64,',
'38,251,,257,48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,,11,49,312,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,254,-647,-647,-647,-647,271,272,,,-647,-647,,,,,,264,265,',
'43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269,255,23',
'256,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,10,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,254,-647,-647,-647,-647,271,272,,,-647',
'-647,,,,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249',
'250,270,269,255,23,256,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,312,13,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,254,-647,-647,-647',
'-647,271,272,,,-647,-647,,,,,,264,265,,43,,,36,,,62,63,,,64,,38,251',
',257,48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,312,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,254,-647,-647,-647,-647,271,272,,,-647,-647,,,,,,264,265,,43,,,36',
',,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269,255,23,256,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,310,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,22,,,,,,11,49,312,13,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,254,-647,-647,-647,-647,271,272,,,-647,-647,,,,,',
'264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,270,269',
'255,23,256,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,312,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260,261,271,272',
',,262,263,,,,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252',
'249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,312,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,254,258,259,260',
'261,271,272,266,,262,263,,,,,,264,265,,43,,,36,,,62,63,,,64,,38,251',
',257,48,253,252,249,250,270,269,255,23,256,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,312,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,254,,,,,,,,,,,,,,,,264,265,,43,,,36,,254,62,63,,,64,,38,251,,257',
'48,253,252,249,250,264,265,255,23,256,,,,105,95,97,98,99,101,,,251,96',
'106,,253,252,249,250,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,',
',79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22',
',,,,,11,49,312,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,254,,,,,,,,,,,,,,,,264,265,,43,,,36,,,62,63,,,64,,38,251,',
'257,48,253,252,249,250,,,255,23,256,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,312',
'13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,254',
',,,,,,,,,,,,,,,264,265,,43,,,36,,,62,63,,,64,,38,251,,257,48,253,252',
'249,250,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,312,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,254,,,,,,,,,,,,,,,,264,265',
',43,,,36,,,62,63,,,64,,38,251,,257,48,253,252,249,250,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,310,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,22,,,,,,11,49,312,13,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,312,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,312,13',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,310,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,11,49,312,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,312,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,312,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,310,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
'11,49,312,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,310,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,312,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,10,13,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62',
'63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,',
'89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,610,64,607,606,605,615,608,48,,,,,,,,244,618,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,613,-436,93,100,102,,110,111,-436,-436',
'-436,626,625,-436,-436,-436,610,-436,607,606,605,615,608,,,,-436,-436',
'-436,,,,618,,,,,-436,-436,,-436,-436,-436,-436,-436,619,,,,,,,,,613',
',,,,,,,,623,622,626,625,,-436,-436,-436,-436,-436,-436,-436,-436,-436',
'-436,-436,-436,-436,-436,,,-436,-436,-436,,,-436,,281,-436,,,-436,-436',
',-436,619,-436,,-436,,-436,-436,-436,-436,-436,-436,-436,,-436,-436',
'-436,,,,,,,,,,,,,-436,-436,-309,-436,,-436,,,,-309,-309,-309,-436,,-309',
'-309,-309,610,-309,607,606,605,615,608,,,,,-309,-309,,,,618,,,,,-309',
'-309,,-309,-309,-309,-309,-309,,,,,,,,,,613,,,,,,,,,623,622,626,625',
',-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309',
',,-309,-309,-309,,,-309,,291,-309,,,-309,-309,,-309,619,-309,,-309,',
'-309,-309,-309,-309,-309,-309,-309,,-309,,-309,,,,,,,,,,,,,-309,-309',
',-309,,-309,85,86,87,,78,,-309,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,303,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,',
'245,,,62,63,,,64,,300,,298,,48,,,,,,,,244,,,,,105,301,97,98,99,101,',
',,96,106,,,,,,,89,,304,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,',
'83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49',
',,122,121,123,112,60,114,113,115,303,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,,,244,',
',,,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,303,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',300,,298,,48,,,,,,,,244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,,89',
',304,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,327,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,,,333,,,,,,610,,607,606,605',
'615,608,,,,,,,,323,,618,319,,,62,63,,,64,,318,,,,,,,,,,,,613,,,,,105',
'95,97,98,99,101,626,625,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,619,81,82,84,329,330,76,77,,,,,,88,326,332,118',
'117,119,120,,,246,,,,,,,327,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,,,333,,,,,,610,,607,606,605,615,608,,,,,,,,323,,618,245',
',,62,63,,,64,,,,,,,,,,,,,,613,,,,,105,95,97,98,99,101,626,625,,96,106',
',,,335,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,619,81',
'82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,',
',122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,',
',,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,610,64',
'607,606,605,615,608,48,,,,,,,,244,618,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,613,-292,93,100,102,,110,111,-292,-292,-292,626,625,-292,-292',
'-292,610,-292,607,606,605,615,608,,,,,-292,-292,-292,,,618,,,,,-292',
'-292,,-292,-292,-292,-292,-292,619,,,,,,,,,613,,,,,,,,,623,622,626,625',
',-292,-292,-292,-292,-292,-292,-292,-292,-292,-292,-292,-292,-292,-292',
',,-292,-292,-292,,,-292,,,-292,,,-292,-292,,-292,619,-292,,-292,,-292',
'-292,-292,-292,-292,-292,-292,,-292,,-292,,,,,,,,,,,,,-292,-292,-292',
'-292,,-292,,-292,,,,-646,-292,85,86,87,12,78,-646,-646,-646,79,80,-646',
'-646,-646,83,-646,81,82,84,33,34,76,77,,-646,-646,-646,,88,31,30,118',
'117,119,120,-646,-646,22,-646,-646,-646,-646,-646,11,49,,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,-646,-646,-646',
'-646,-646,-646,-646,-646,-646,-646,-646,-646,-646,-646,,,-646,-646,-646',
'43,,-646,36,281,-646,62,63,-646,-646,64,-646,38,-646,,-646,48,-646,-646',
'-646,-646,-646,-646,-646,23,-646,-646,-646,,105,95,97,98,99,101,,,,96',
'106,-646,-646,,-646,,-646,89,,,93,100,102,-646,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,130,,,,,129,89,',
',93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76',
'77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,327,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,,,333,,,,,,610,,607,606,605,615',
'608,,,,,,,,363,,618,36,,,62,63,,,64,,38,,,,,,,,,,,,613,,,,,105,95,97',
'98,99,101,626,625,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12',
'78,,,,79,80,,,,83,619,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,22,,,,,,11,49,10,13,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,413,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,',
',245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49',
',13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,430,,,,48,,,,,',
',,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,430',
',,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,',
',245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,',
',122,121,123,112,60,114,113,115,303,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,,,244,,',
',,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48',
',,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,234,,,,',
',89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329',
'330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,',
',,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329',
'330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,',
',,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329',
'330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,',
',,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329',
'330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,',
',,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329',
'330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,303,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,300,,298,,48,,,,,,,,244,,,,,105,301,97,98,99,101,,,,96',
'106,,,,,,,89,,304,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122',
'121,123,112,60,114,113,115,303,116,124,125,,108,109,,45,46,44,,,,,,',
',,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,,,244,,,,,105',
'301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,303,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48',
',,,,,,,244,,,,,105,301,97,98,99,101,,,,96,106,234,,,,,,89,,304,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,',
',,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329',
'330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,118,117,119,120,,,246,,,,,,,327,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,,,333,,,,,,610,,607,606,605,615,608,,,,,',
',,323,,618,245,,,62,63,,,64,,,,,,,,,,,,,,613,,,,,105,95,97,98,99,101',
'626,625,,96,106,,,,535,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,619,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,327,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',,,333,,,,,,610,,607,606,605,615,608,,,,,,,,323,,618,319,,,62,63,,,64',
',,,,,,,,,,,,,613,,,,,105,95,97,98,99,101,626,625,,96,106,,,,,,,89,,',
'93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,619,81,82,84,329,330',
'76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,239,,,245,552,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246',
',,,,,,49,,,122,121,123,112,60,114,113,115,303,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,,,48,,,,,,',
',244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326',
'332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115',
'303,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,',
'89,,304,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,327,,,122',
'121,123,581,60,114,113,582,,116,124,125,,108,109,,,,333,,,,,,610,,607',
'606,605,615,608,,,,,,,,583,,618,245,,,62,63,,,64,,,,,,,,,,,,,,613,,',
',,105,95,97,98,99,101,626,625,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,619,81,82,84,329,330,76,77,,,,,,88,326,332',
'118,117,119,120,,,246,,,,,,,327,,,122,121,123,581,60,114,113,582,,116',
'124,125,,108,109,,,,333,,,,,,610,,607,606,605,615,608,,,,,,,,583,,618',
'245,,,62,63,,,64,,,,,,,,,,,,,,613,,,,,105,95,97,98,99,101,626,625,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,619,81',
'82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,',
',122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,',
',,,,,,,,,,,,,,,239,,,245,,,62,63,,610,64,607,606,605,615,608,48,,,,',
',,,244,618,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,613,-626,93,100',
'102,,110,111,-626,-626,-626,626,625,-626,-626,-626,610,-626,607,606',
'605,615,608,,,,-626,-626,-626,-626,,,618,,,,,-626,-626,,-626,-626,-626',
'-626,-626,619,,,,,,,,,613,,,,,,,,,623,622,626,625,,-626,-626,-626,-626',
'-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,,,-626,-626,-626,',
',-626,,,-626,,,-626,-626,,-626,619,-626,,-626,,-626,-626,-626,-626,-626',
'-626,-626,,-626,-626,-626,610,,607,606,605,615,608,,,,,,-626,-626,-626',
'-626,618,-626,-627,-626,,,,,-626,-627,-627,-627,,,-627,-627,-627,,-627',
',,,613,,,,,-627,-627,-627,-627,623,622,626,625,,,,-627,-627,,-627,-627',
'-627,-627,-627,,,,,,,,,,,,,,234,,,,,,,,619,,-627,-627,-627,-627,-627',
'-627,-627,-627,-627,-627,-627,-627,-627,-627,,,-627,-627,-627,,,-627',
',,-627,,,-627,-627,,-627,,-627,,-627,,-627,-627,-627,-627,-627,-627',
'-627,,-627,-627,-627,,,,,,,,,,,,,-627,-627,-627,-627,,-627,,-627,,85',
'86,87,-627,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,303,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',300,,298,,48,,,,,,,,244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,,89',
',304,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246',
',,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,-646,93,100,102,,110,111',
'-646,-646,-646,,,-646,-646,-646,,-646,,,,,,,,,-646,-646,,,,,,,,,,-646',
'-646,,-646,-646,-646,-646,-646,,,,,,,,505,457,,,506,,,,,,,,,173,174',
',169,151,152,153,160,157,159,,,154,155,-646,,,175,176,161,162,-646,',
',,,281,-646,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
'-646,-646,177,,,,,,,,,,,,-646,,85,86,87,-646,78,,170,,79,80,-646,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,303,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,697,,298,,48,,,,,,,,244',
',,,,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332',
'118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,303',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63',
',,64,,,,298,,48,,,,,,,,244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,',
'89,,304,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329',
'330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,',
'83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,312,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,413,89,,,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119',
'120,,,246,,,,,,,327,,,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,303,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298',
',48,,,,,,,,244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,',
',,88,326,332,118,117,119,120,,,246,,,,,,,327,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
',49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',246,,,,,,,49,,,122,121,123,112,60,114,113,115,303,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48',
',,,,,,,244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,239,,,245,,,62,63,,,64,,800,,,,48,,,,,,,,244,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,',
',,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,',
'105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,303,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,300,,298,,48',
',,,,,,,244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,303,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',239,,,245,,,62,63,,,64,,697,,298,,48,,,,,,,,244,,,,,105,301,97,98,99',
'101,,,,96,106,,,,,,,89,,304,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246',
',,,,,,49,,,122,121,123,112,60,114,113,115,303,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,298,,48,,,,,,',
',244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,',
',245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118',
'117,119,120,,,246,,,,,,,327,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326',
'332,118,117,119,120,,,246,,,,,,,327,,,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,',
',,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,430,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121',
'123,112,60,114,113,115,303,116,124,125,,108,109,,45,46,44,,,,,,,,,,',
',,,,,,,,,239,,,245,,,62,63,,,64,,697,,,,48,,,,,,,,244,,,,,105,301,97',
'98,99,101,,,,96,106,,,,,,,89,,304,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,303,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,',
',,,244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,865,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,',
',,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123',
'112,60,114,113,115,303,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,239,,,245,,,62,63,,,64,,300,,298,,48,,,,,,,,244,,,,,105,301,97',
'98,99,101,,,,96,106,,,,,,,89,,304,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118',
'117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,',
',,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239',
',,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246',
',,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117',
'119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48',
',,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,',
',245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,49,,,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120',
',,246,,,,,,,49,,,122,121,123,112,60,114,113,115,303,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,,,298,,48,',
',,,,,,244,,,,,105,301,97,98,99,101,,,,96,106,,,,,,,89,,304,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62',
'63,,,64,,,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,327,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,,,333,,,,,,,,,,,,,,,,,,,,991',
',,245,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,',
',,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,,327,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,,,333,,,,,,,,,,,,',
',,,,,,,998,,,245,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,118,117,119,120,,,246,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64,,1003,,,,48,,,,,,,,244,,,',
',105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,118,117',
'119,120,,,246,,,,,,,327,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,,,333,,,,,,,,,,,,,,,,,,,,991,,,245,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332',
'118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245,,,62,63,,,64',
',,,,,48,,,,,,,,244,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,246,,,,,,,49,,,122,121,123,112,60,114,113',
'115,303,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,239,,,245',
',,62,63,,,64,,300,,298,,48,,,,,,,,244,,,,,105,301,97,98,99,101,,,,96',
'106,,,,,,,89,,304,93,100,102,,110,111,188,199,189,212,185,205,195,194',
'215,216,210,193,192,187,213,217,218,197,186,200,204,206,198,191,,,,207',
'214,209,208,201,211,196,184,203,202,,,,,,183,190,181,182,178,179,180',
'141,143,140,,142,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170,188,199,189,212',
'185,205,195,194,215,216,210,193,192,187,213,217,218,197,186,200,204',
'206,198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,,183,190',
'181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170,188',
'199,189,212,185,205,195,194,215,216,210,193,192,187,213,217,218,197',
'186,200,204,206,198,191,,,,207,214,209,378,377,379,376,184,203,202,',
',,,,183,190,181,182,373,374,375,371,143,114,113,372,,116,,,,,,,173,174',
',169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,385,',
',,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,',
',,,,,,,,,,,,,,,,170,188,199,189,212,185,205,195,194,215,216,210,193',
'192,187,213,217,218,197,186,200,204,206,198,191,,,,207,214,209,208,201',
'211,196,184,203,202,,,,,,183,190,181,182,178,179,180,141,143,410,409',
'142,,411,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,,,,,,,,,,,,,,,,170,188,199,189,212,185,205,195,194',
'215,216,210,193,192,187,213,217,218,197,186,200,204,206,198,191,,,,207',
'214,209,208,201,211,196,184,203,202,,,,,,183,190,181,182,178,179,180',
'141,143,,,142,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170,188,199,189,212,185',
'205,195,194,215,216,210,193,192,187,213,217,218,197,186,200,204,206',
'198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,,183,190,181',
'182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170,188,199',
'189,212,185,205,195,194,215,216,210,193,192,187,213,217,218,197,186',
'200,204,206,198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,',
'183,190,181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169,151,152',
'153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,453,457,,,454,,,,',
',,,,173,174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,,,,,460,464,,,459,,,,,,,,,173,174,170,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,,,,,678,457,,,679,,,,,,,,',
'173,174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,281,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,680,464,,,681,,,,,,,,,173,174,170,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,708,457,,,709,,,,,,,,,173',
'174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,',
',,281,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,,,,,711,464,,,712,,,,,,,,,173,174,170,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,678,457,,,679,,,,,,,,,173,174',
'170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,680,464,,,681,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,745,457,,,746,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'747,464,,,748,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,802,457,,,803,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'805,464,,,804,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,869,464,,,870,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,281,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'505,457,,,506,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,610,177,607,606,605,615,608,610,,607,606,605',
'615,608,,,618,,,,,170,,618,610,,607,606,605,615,608,,,,,,,,613,,618',
',,,,613,,623,622,626,625,,,,623,622,626,625,,,,,613,,,,,,,,,623,622',
'626,625,,,,1066,464,,,1065,619,,,,,,,619,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,619,175,176,161,162,,,,,,281,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,1069,457,,,1070,,',
',,,,,,173,174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,281,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,,,,,1071,464,,,1072,,,,,,,,,173,174,170,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,281,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,610,177,607,606,605,615,608,,,',
',,,,,,618,,,,,170,,,,,,,,,,,,,,,,,613,,,,,,,,,623,622,626,625,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,619' ]
        racc_action_table = arr = ::Array.new(25883, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'112,352,353,401,937,866,65,112,112,112,1,942,112,112,112,687,112,22',
'703,404,469,469,92,1069,112,481,112,112,112,360,92,361,703,5,17,17,112',
'112,5,112,112,112,112,112,20,708,364,709,1070,579,745,1082,746,22,140',
'3,766,481,867,140,140,481,481,718,718,13,401,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,569,404,112,112,112,20,112,112,765,765',
'112,719,65,112,112,15,112,719,112,20,112,687,112,112,112,112,112,112',
'112,469,112,708,112,709,352,353,747,937,866,352,353,866,937,866,942',
'112,112,112,112,942,112,115,112,360,1071,361,1069,112,115,115,115,1069',
'112,115,115,115,708,115,709,708,364,709,718,579,745,115,746,115,115',
'115,766,1070,867,708,1082,709,1070,115,115,1082,115,115,115,115,115',
'748,44,44,765,685,569,29,747,835,27,569,328,237,333,333,371,27,558,351',
'351,558,581,371,115,115,115,115,115,115,115,115,115,115,115,115,115',
'115,1071,685,115,115,115,835,115,115,372,747,115,639,373,115,115,372',
'115,582,115,373,115,16,115,115,115,115,115,115,115,748,115,237,115,41',
'29,642,1071,581,388,328,18,1071,44,44,581,115,115,115,115,581,115,459',
'115,581,333,333,29,115,459,459,459,328,115,768,459,459,482,459,748,19',
'582,581,639,639,768,41,19,582,307,711,841,639,582,307,25,19,582,459',
'459,41,459,459,459,459,459,40,642,642,482,388,388,388,482,482,582,642',
'374,768,768,523,357,559,43,374,559,357,869,238,459,459,459,459,459,459',
'459,459,459,459,459,459,459,459,711,841,459,459,459,390,459,711,841',
'768,459,583,711,459,240,583,711,841,459,395,459,49,459,459,459,459,459',
'459,459,437,459,977,459,398,711,841,406,869,523,523,523,238,977,73,869',
'459,459,460,459,869,459,42,475,869,460,460,460,459,523,875,460,460,459',
'460,875,99,390,390,390,100,240,869,460,678,392,977,977,392,733,733,395',
'395,395,460,460,437,460,460,460,460,460,337,101,42,398,398,398,406,406',
'406,563,453,1004,563,1004,679,802,42,475,977,803,824,913,102,460,460',
'460,460,460,460,460,460,460,460,460,460,460,460,138,678,460,460,460',
'337,460,392,392,454,460,662,879,460,375,453,219,879,460,337,460,375',
'460,460,460,460,460,460,460,453,460,460,460,679,802,239,50,376,803,824',
'913,47,47,50,376,460,460,680,460,241,460,454,50,662,680,680,680,460',
'242,680,680,680,460,680,951,454,246,662,280,951,295,496,680,680,680',
'680,47,47,377,854,759,759,854,680,680,377,680,680,680,680,680,902,378',
'902,902,902,296,902,613,378,613,613,613,496,613,379,381,496,496,496',
'496,299,379,381,680,680,680,680,680,680,680,680,680,680,680,680,680',
'680,313,902,680,680,680,236,680,680,613,315,680,316,236,680,680,317',
'680,613,680,323,680,236,680,680,680,680,680,680,680,326,680,680,680',
'386,327,386,386,386,386,386,9,9,9,9,9,680,680,680,680,386,680,681,680',
'1011,320,332,1011,680,681,681,681,320,680,681,681,681,334,681,338,321',
'320,386,386,771,771,497,321,681,681,681,386,386,386,386,341,321,347',
'681,681,358,681,681,681,681,681,1019,359,1019,1019,1019,363,1019,780',
'365,780,780,780,497,780,1040,1040,497,497,497,497,394,386,397,681,681',
'681,681,681,681,681,681,681,681,681,681,681,681,400,1019,681,681,681',
'322,681,681,780,403,681,426,322,681,681,429,681,780,681,431,681,322',
'681,681,681,681,681,681,681,434,681,448,681,596,451,596,596,596,596',
'596,311,311,311,311,311,681,681,681,681,596,681,804,681,452,461,471',
'483,681,804,804,804,484,681,485,804,804,901,804,901,901,901,596,901',
'1020,486,1020,1020,1020,502,1020,596,596,596,596,509,513,529,804,804',
'324,804,804,804,804,804,530,324,531,534,339,536,362,541,544,901,324',
'339,553,362,554,555,1020,560,901,561,339,596,362,804,804,804,804,804',
'804,804,804,804,804,804,804,804,804,436,540,804,804,804,585,804,436',
'540,564,804,566,585,804,570,571,436,540,804,572,804,585,804,804,804',
'804,804,804,804,573,804,587,804,590,598,751,990,712,599,601,602,603',
'751,990,712,804,804,805,804,712,804,751,990,712,805,805,805,804,612',
'620,805,805,804,805,490,490,490,490,490,490,490,624,805,490,490,995',
'627,646,996,649,490,490,995,805,805,996,805,805,805,805,805,995,655',
'663,996,668,490,674,490,682,490,490,490,490,490,490,490,784,490,784',
'784,784,683,784,805,805,805,805,805,805,805,805,805,805,805,805,805',
'805,870,997,805,805,805,686,805,870,997,690,805,692,870,805,694,696',
'870,997,805,705,805,707,805,805,805,805,805,805,805,710,805,805,805',
'999,713,714,717,790,790,735,999,790,790,790,741,805,805,744,805,999',
'805,2,2,2,2,2,2,805,767,1031,2,2,805,782,783,2,1031,2,2,2,2,2,2,2,785',
'1031,797,799,801,2,2,2,2,2,2,2,809,833,2,840,850,851,855,441,2,2,2,2',
'2,2,2,2,2,2,2,2,861,2,2,2,868,2,2,872,2,2,2,441,441,441,441,441,441',
'441,441,441,441,441,1039,441,441,876,877,441,441,1039,2,878,885,2,886',
'887,2,2,1039,891,2,892,2,441,894,441,2,441,441,441,441,441,441,441,2',
'441,895,897,1072,2,2,2,2,2,2,1072,900,910,2,2,1072,441,912,441,1072',
'919,2,920,922,2,2,2,923,2,2,36,36,36,36,36,36,924,926,927,36,36,928',
'950,957,36,958,36,36,36,36,36,36,36,346,346,346,346,346,36,36,36,36',
'36,36,36,959,974,36,975,988,991,993,447,36,36,36,36,36,36,36,36,36,36',
'36,36,998,36,36,36,1015,36,36,1016,36,36,36,447,447,447,447,447,447',
'447,447,447,447,447,1017,447,447,1018,1021,447,447,1024,36,1025,1026',
'36,1027,1029,36,36,1035,1045,36,1046,36,447,1054,447,36,447,447,447',
'447,447,447,447,36,447,1065,1066,1068,36,36,36,36,36,36,1077,1078,1079',
'36,36,1080,447,1081,1089,,,36,,,36,36,36,,36,36,221,221,221,221,221',
'221,,,,221,221,,,,221,,221,221,221,221,221,221,221,528,528,528,528,528',
'221,221,221,221,221,221,221,,960,221,960,960,960,,960,221,221,221,221',
'221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221,24',
'24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,221,,,221,,,221,221,,',
'221,,221,24,,24,221,24,24,24,24,24,24,24,221,24,,,,221,221,221,221,221',
'221,,,,221,221,,24,,,,,221,,,221,221,221,,221,221,245,245,245,245,245',
'245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245',
'245,245,245,245,,1048,245,1048,1048,1048,,1048,245,245,245,245,245,245',
'245,245,245,245,245,245,,245,245,245,,245,245,,245,245,245,293,293,293',
'293,293,293,293,293,293,293,293,,293,293,,,293,293,,245,,,245,,,245',
'245,,,245,,245,293,,293,245,293,293,293,293,293,293,293,245,293,,,,245',
'245,245,245,245,245,,,,245,245,,293,,,,,245,,,245,245,245,,245,245,314',
'314,314,314,314,314,,,,314,314,,,,314,,314,314,314,314,314,314,314,',
',,,,314,314,314,314,314,314,314,,,314,,,,,,314,314,314,314,314,314,314',
'314,314,314,314,314,,314,314,314,,314,314,,314,314,314,500,500,500,500',
'500,500,500,500,500,500,500,,500,500,,,500,500,,314,,,314,,,314,314',
',,314,,314,500,,500,314,500,500,500,500,500,500,500,314,500,,,,314,314',
'314,314,314,314,,,,314,314,500,500,,,,,314,,,314,314,314,,314,314,319',
'319,319,319,319,319,,,,319,319,,,,319,,319,319,319,319,319,319,319,',
',,,,319,319,319,319,319,319,319,,,319,,,,,,319,319,319,319,319,319,319',
'319,319,319,319,319,,319,319,319,,319,319,,319,319,319,551,551,551,551',
'551,551,551,551,551,551,551,,551,551,,,551,551,,319,,,319,,,319,319',
',,319,,319,551,,551,319,551,551,551,551,551,551,551,319,551,,,,319,319',
'319,319,319,319,,,,319,319,,551,,,,,319,,,319,319,319,,319,319,345,345',
'345,345,345,345,,,,345,345,,,,345,,345,345,345,345,345,345,345,,,,,',
'345,345,345,345,345,345,345,,,345,,,,,,345,345,345,345,345,345,345,345',
'345,345,345,345,,345,345,345,,345,345,,345,345,345,806,806,806,806,806',
'806,806,806,806,806,806,,806,806,,,806,806,,345,,,345,,,345,345,,,345',
',345,806,,806,345,806,806,806,806,806,806,806,345,806,,,,345,345,345',
'345,345,345,,,,345,345,,806,,,,,345,,,345,345,345,,345,345,355,355,355',
'355,355,355,,,,355,355,,,,355,,355,355,355,355,355,355,355,,,,,,355',
'355,355,355,355,355,355,,,355,,,,,,355,355,355,355,355,355,355,355,355',
'355,355,355,,355,355,355,,355,355,,355,355,355,918,918,918,918,918,918',
'918,918,918,918,918,,918,918,,,918,918,,355,,,355,,,355,355,,,355,,355',
'918,,918,355,918,918,918,918,918,918,918,355,918,,,,355,355,355,355',
'355,355,,,,355,355,,918,,,,,355,,,355,355,355,,355,355,356,356,356,356',
'356,356,,,,356,356,,,,356,,356,356,356,356,356,356,356,,,,,,356,356',
'356,356,356,356,356,,,356,,,,,,356,356,356,356,356,356,356,356,356,356',
'356,356,,356,356,356,,356,356,,356,356,356,479,479,479,479,479,479,479',
'479,479,479,479,,479,479,,,479,479,,356,,,356,,,356,356,,,356,,356,479',
',479,356,479,479,479,479,479,479,479,356,479,,,,356,356,356,356,356',
'356,,,,356,356,,,,,,,356,,,356,356,356,,356,356,565,565,565,565,565',
'565,,,,565,565,,,,565,,565,565,565,565,565,565,565,,,,,,565,565,565',
'565,565,565,565,,,565,,,,,,565,565,565,565,565,565,565,565,565,565,565',
'565,,565,565,565,,565,565,,565,565,565,480,480,480,480,480,480,480,480',
'480,480,480,,480,480,,,480,480,,565,,,565,,,565,565,,,565,,565,480,',
'480,565,480,480,480,480,480,480,480,565,480,,,,565,565,565,565,565,565',
',,,565,565,,,,,,,565,,,565,565,565,,565,565,568,568,568,568,568,568',
',,,568,568,,,,568,,568,568,568,568,568,568,568,,,,,,568,568,568,568',
'568,568,568,,,568,,,,,,568,568,568,568,568,568,568,568,568,568,568,568',
',568,568,568,,568,568,,568,568,568,491,491,491,491,491,491,491,,,491',
'491,,,,,,491,491,,568,,,568,,,568,568,,,568,,568,491,,491,568,491,491',
'491,491,491,491,491,568,491,,,,568,568,568,568,568,568,,,,568,568,,',
',,,,568,,,568,568,568,,568,568,651,651,651,651,651,651,,,,651,651,,',
',651,,651,651,651,651,651,651,651,,,,,,651,651,651,651,651,651,651,',
',651,,,,,,651,651,651,651,651,651,651,651,651,651,651,651,,651,651,651',
',651,651,,651,651,651,492,492,492,492,492,492,492,,,492,492,,,,,,492',
'492,,651,,,651,,,651,651,,,651,,651,492,,492,651,492,492,492,492,492',
'492,492,651,492,,,,651,651,651,651,651,651,,,,651,651,,,,,,,651,,,651',
'651,651,,651,651,749,749,749,749,749,749,,,,749,749,,,,749,,749,749',
'749,749,749,749,749,,,,,,749,749,749,749,749,749,749,,,749,,,,,,749',
'749,749,749,749,749,749,749,749,749,749,749,,749,749,749,,749,749,,749',
'749,749,493,493,493,493,493,493,493,,,493,493,,,,,,493,493,,749,,,749',
',,749,749,,,749,,749,493,,493,749,493,493,493,493,493,493,493,749,493',
',,,749,749,749,749,749,749,,,,749,749,,,,,,,749,,,749,749,749,,749,749',
'760,760,760,760,760,760,,,,760,760,,,,760,,760,760,760,760,760,760,760',
',,,,,760,760,760,760,760,760,760,,,760,,,,,,760,760,760,760,760,760',
'760,760,760,760,760,760,,760,760,760,,760,760,,760,760,760,494,494,494',
'494,494,494,494,,,494,494,,,,,,494,494,,760,,,760,,,760,760,,,760,,760',
'494,,494,760,494,494,494,494,494,494,494,760,494,,,,760,760,760,760',
'760,760,,,,760,760,,,,,,,760,,,760,760,760,,760,760,761,761,761,761',
'761,761,,,,761,761,,,,761,,761,761,761,761,761,761,761,,,,,,761,761',
'761,761,761,761,761,,,761,,,,,,761,761,761,761,761,761,761,761,761,761',
'761,761,,761,761,761,,761,761,,761,761,761,495,495,495,495,495,495,495',
',,495,495,,,,,,495,495,,761,,,761,,,761,761,,,761,,761,495,,495,761',
'495,495,495,495,495,495,495,761,495,,,,761,761,761,761,761,761,,,,761',
'761,,,,,,,761,,,761,761,761,,761,761,791,791,791,791,791,791,,,,791',
'791,,,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791',
'791,,,791,,,,,,791,791,791,791,791,791,791,791,791,791,791,791,,791',
'791,791,,791,791,,791,791,791,498,498,498,498,498,498,498,,,498,498',
',,,,,498,498,,791,,,791,,,791,791,,,791,,791,498,,498,791,498,498,498',
'498,498,498,498,791,498,,,,791,791,791,791,791,791,,,,791,791,,,,,,',
'791,,,791,791,791,,791,791,830,830,830,830,830,830,,,,830,830,,,,830',
',830,830,830,830,830,830,830,,,,,,830,830,830,830,830,830,830,,,830',
',,,,,830,830,830,830,830,830,830,830,830,830,830,830,,830,830,830,,830',
'830,,830,830,830,499,499,499,499,499,499,499,499,,499,499,,,,,,499,499',
',830,,,830,,,830,830,,,830,,830,499,,499,830,499,499,499,499,499,499',
'499,830,499,,,,830,830,830,830,830,830,,,,830,830,,,,,,,830,,,830,830',
'830,,830,830,848,848,848,848,848,848,,,,848,848,,,,848,,848,848,848',
'848,848,848,848,,,,,,848,848,848,848,848,848,848,,,848,,,,,,848,848',
'848,848,848,848,848,848,848,848,848,848,,848,848,848,,848,848,,848,848',
'848,501,,,,,,,,,,,,,,,,501,501,,848,,,848,,489,848,848,,,848,,848,501',
',501,848,501,501,501,501,489,489,501,848,501,,,,848,848,848,848,848',
'848,,,489,848,848,,489,489,489,489,,848,,,848,848,848,,848,848,860,860',
'860,860,860,860,,,,860,860,,,,860,,860,860,860,860,860,860,860,,,,,',
'860,860,860,860,860,860,860,,,860,,,,,,860,860,860,860,860,860,860,860',
'860,860,860,860,,860,860,860,,860,860,,860,860,860,550,,,,,,,,,,,,,',
',,550,550,,860,,,860,,,860,860,,,860,,860,550,,550,860,550,550,550,550',
',,550,860,550,,,,860,860,860,860,860,860,,,,860,860,,,,,,,860,,,860',
'860,860,,860,860,873,873,873,873,873,873,,,,873,873,,,,873,,873,873',
'873,873,873,873,873,,,,,,873,873,873,873,873,873,873,,,873,,,,,,873',
'873,873,873,873,873,873,873,873,873,873,873,,873,873,873,,873,873,,873',
'873,873,487,,,,,,,,,,,,,,,,487,487,,873,,,873,,,873,873,,,873,,873,487',
',487,873,487,487,487,487,,,,873,,,,,873,873,873,873,873,873,,,,873,873',
',,,,,,873,,,873,873,873,,873,873,883,883,883,883,883,883,,,,883,883',
',,,883,,883,883,883,883,883,883,883,,,,,,883,883,883,883,883,883,883',
',,883,,,,,,883,883,883,883,883,883,883,883,883,883,883,883,,883,883',
'883,,883,883,,883,883,883,488,,,,,,,,,,,,,,,,488,488,,883,,,883,,,883',
'883,,,883,,883,488,,488,883,488,488,488,488,,,,883,,,,,883,883,883,883',
'883,883,,,,883,883,,,,,,,883,,,883,883,883,,883,883,884,884,884,884',
'884,884,,,,884,884,,,,884,,884,884,884,884,884,884,884,,,,,,884,884',
'884,884,884,884,884,,,884,,,,,,884,884,884,884,884,884,884,884,884,884',
'884,884,,884,884,884,,884,884,,884,884,884,,,,,,,,,,,,,,,,,,,,884,,',
'884,,,884,884,,,884,,884,,,,884,,,,,,,,884,,,,,884,884,884,884,884,884',
',,,884,884,,,,,,,884,,,884,884,884,,884,884,934,934,934,934,934,934',
',,,934,934,,,,934,,934,934,934,934,934,934,934,,,,,,934,934,934,934',
'934,934,934,,,934,,,,,,934,934,934,934,934,934,934,934,934,934,934,934',
',934,934,934,,934,934,,934,934,934,,,,,,,,,,,,,,,,,,,,934,,,934,,,934',
'934,,,934,,934,,,,934,,,,,,,,934,,,,,934,934,934,934,934,934,,,,934',
'934,,,,,,,934,,,934,934,934,,934,934,935,935,935,935,935,935,,,,935',
'935,,,,935,,935,935,935,935,935,935,935,,,,,,935,935,935,935,935,935',
'935,,,935,,,,,,935,935,935,935,935,935,935,935,935,935,935,935,,935',
'935,935,,935,935,,935,935,935,,,,,,,,,,,,,,,,,,,,935,,,935,,,935,935',
',,935,,935,,,,935,,,,,,,,935,,,,,935,935,935,935,935,935,,,,935,935',
',,,,,,935,,,935,935,935,,935,935,947,947,947,947,947,947,,,,947,947',
',,,947,,947,947,947,947,947,947,947,,,,,,947,947,947,947,947,947,947',
',,947,,,,,,947,947,947,947,947,947,947,947,947,947,947,947,,947,947',
'947,,947,947,,947,947,947,,,,,,,,,,,,,,,,,,,,947,,,947,,,947,947,,,947',
',947,,,,947,,,,,,,,947,,,,,947,947,947,947,947,947,,,,947,947,,,,,,',
'947,,,947,947,947,,947,947,994,994,994,994,994,994,,,,994,994,,,,994',
',994,994,994,994,994,994,994,,,,,,994,994,994,994,994,994,994,,,994',
',,,,,994,994,994,994,994,994,994,994,994,994,994,994,,994,994,994,,994',
'994,,994,994,994,,,,,,,,,,,,,,,,,,,,994,,,994,,,994,994,,,994,,994,',
',,994,,,,,,,,994,,,,,994,994,994,994,994,994,,,,994,994,,,,,,,994,,',
'994,994,994,,994,994,1001,1001,1001,1001,1001,1001,,,,1001,1001,,,,1001',
',1001,1001,1001,1001,1001,1001,1001,,,,,,1001,1001,1001,1001,1001,1001',
'1001,,,1001,,,,,,1001,1001,1001,1001,1001,1001,1001,1001,1001,1001,1001',
'1001,,1001,1001,1001,,1001,1001,,1001,1001,1001,,,,,,,,,,,,,,,,,,,,1001',
',,1001,,,1001,1001,,,1001,,1001,,,,1001,,,,,,,,1001,,,,,1001,1001,1001',
'1001,1001,1001,,,,1001,1001,,,,,,,1001,,,1001,1001,1001,,1001,1001,1007',
'1007,1007,1007,1007,1007,,,,1007,1007,,,,1007,,1007,1007,1007,1007,1007',
'1007,1007,,,,,,1007,1007,1007,1007,1007,1007,1007,,,1007,,,,,,1007,1007',
'1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,,1007,1007,1007,,1007',
'1007,,1007,1007,1007,,,,,,,,,,,,,,,,,,,,1007,,,1007,,,1007,1007,,,1007',
',1007,,,,1007,,,,,,,,1007,,,,,1007,1007,1007,1007,1007,1007,,,,1007',
'1007,,,,,,,1007,,,1007,1007,1007,,1007,1007,1008,1008,1008,1008,1008',
'1008,,,,1008,1008,,,,1008,,1008,1008,1008,1008,1008,1008,1008,,,,,,1008',
'1008,1008,1008,1008,1008,1008,,,1008,,,,,,1008,1008,1008,1008,1008,1008',
'1008,1008,1008,1008,1008,1008,,1008,1008,1008,,1008,1008,,1008,1008',
'1008,,,,,,,,,,,,,,,,,,,,1008,,,1008,,,1008,1008,,,1008,,1008,,,,1008',
',,,,,,,1008,,,,,1008,1008,1008,1008,1008,1008,,,,1008,1008,,,,,,,1008',
',,1008,1008,1008,,1008,1008,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,',
',,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8',
',,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8',
',,,8,8,,,,,,,8,,,8,8,8,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',776,23,776,776,776,776,776,23,,,,,,,,23,776,,,,23,23,23,23,23,23,,',
',23,23,,,,,,,23,776,30,23,23,23,,23,23,30,30,30,776,776,30,30,30,762',
'30,762,762,762,762,762,,,,30,30,30,,,,762,,,,,30,30,,30,30,30,30,30',
'776,,,,,,,,,762,,,,,,,,,762,762,762,762,,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,762,30,,30,,30,30',
'30,30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30,31,30,,30,,,,31,31,31,30',
',31,31,31,763,31,763,763,763,763,763,,,,,31,31,,,,763,,,,,31,31,,31',
'31,31,31,31,,,,,,,,,,763,,,,,,,,,763,763,763,763,,31,31,31,31,31,31',
'31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,763,31,,31',
',31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,,31,31,,31,,31,32,32,32,,32',
',31,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32',
',,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,',
',,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32',
'32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,32,32,33,33,33,,33,,,,33',
'33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,',
'33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,',
',,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33',
'33,33,,,,33,33,,,,,,,33,,33,33,33,33,,33,33,34,34,34,,34,,,,34,34,,',
',34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,',
'34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,',
',,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34',
',,,34,34,,,,,,,34,,34,34,34,34,,34,34,37,37,37,,37,,,,37,37,,,,37,,37',
'37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37',
'37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,965,,965,965,965,965,965',
',,,,,,,37,,965,37,,,37,37,,,37,,37,,,,,,,,,,,,965,,,,,37,37,37,37,37',
'37,965,965,,37,37,,,,,,,37,,,37,37,37,,37,37,38,38,38,,38,,,,38,38,',
',,38,965,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38',
',,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,967,,967,967,967',
'967,967,,,,,,,,38,,967,38,,,38,38,,,38,,,,,,,,,,,,,,967,,,,,38,38,38',
'38,38,38,967,967,,38,38,,,,38,,,38,,,38,38,38,,38,38,45,45,45,,45,,',
',45,45,,,,45,967,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45',
',,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,',
',,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45',
'45,45,,,,45,45,,,,,,,45,,,45,45,45,,45,45,46,46,46,,46,,,,46,46,,,,46',
',46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46',
'46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,',
',46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,',
',,,,46,,,46,46,46,,46,46,48,48,48,,48,,,,48,48,,,,48,,48,48,48,48,48',
'48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48',
'48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,969',
'48,969,969,969,969,969,48,,,,,,,,48,969,,,,48,48,48,48,48,48,,,,48,48',
',,,,,,48,969,60,48,48,48,,48,48,60,60,60,969,969,60,60,60,772,60,772',
'772,772,772,772,,,,,60,60,60,,,772,,,,,60,60,,60,60,60,60,60,969,,,',
',,,,,772,,,,,,,,,772,772,772,772,,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,,,60,60,60,,,60,,,60,,,60,60,,60,772,60,,60,,60,60,60,60,60,60',
'60,,60,,60,,,,,,,,,,,,,60,60,60,60,,60,,60,,,,455,60,62,62,62,62,62',
'455,455,455,62,62,455,455,455,62,455,62,62,62,62,62,62,62,,455,455,455',
',62,62,62,62,62,62,62,455,455,62,455,455,455,455,455,62,62,,62,62,62',
'62,62,62,62,62,62,,62,62,62,,62,62,,62,62,62,455,455,455,455,455,455',
'455,455,455,455,455,455,455,455,,,455,455,455,62,,455,62,455,455,62',
'62,455,455,62,455,62,455,,455,62,455,455,455,455,455,455,455,62,455',
'455,455,,62,62,62,62,62,62,,,,62,62,455,455,,455,,455,62,,,62,62,62',
'455,62,62,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67',
'67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67',
',67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,',
',,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,67,67,68',
'68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68',
'68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,68,68,68',
',,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,,68,68',
'68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68,,68,68,71,71,71,,71,,,,71,71',
',,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71',
',,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,,,,,,,,,,,,,,',
',,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71,71,71,71,,,',
'71,71,71,,,,,71,71,,,71,71,71,,71,71,72,72,72,,72,,,,72,72,,,,72,,72',
'72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72',
'72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,985,,985,985,985,985,985',
',,,,,,,72,,985,72,,,72,72,,,72,,72,,,,,,,,,,,,985,,,,,72,72,72,72,72',
'72,985,985,,72,72,,,,,,,72,,,72,72,72,,72,72,128,128,128,128,128,,,',
'128,128,,,,128,985,128,128,128,128,128,128,128,,,,,,128,128,128,128',
'128,128,128,,,128,,,,,,128,128,128,128,128,128,128,128,128,128,128,128',
',128,128,128,,128,128,,128,128,128,,,,,,,,,,,,,,,,,,,,128,,,128,,,128',
'128,,,128,,128,,,,128,,,,,,,,128,,,,,128,128,128,128,128,128,,,,128',
'128,,,,,,128,128,,,128,128,128,,128,128,133,133,133,,133,,,,133,133',
',,,133,,133,133,133,133,133,133,133,,,,,,133,133,133,133,133,133,133',
',,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133,133,133,,133',
'133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,,,,,133',
',,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,,,,,,,133,,,133,133',
'133,,133,133,134,134,134,,134,,,,134,134,,,,134,,134,134,134,134,134',
'134,134,,,,,,134,134,134,134,134,134,134,,,134,,,,,,,134,,,134,134,134',
'134,134,134,134,134,,134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,',
',,,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134,134,134',
'134,134,134,,,,134,134,,,,,,,134,,,134,134,134,,134,134,135,135,135',
',135,,,,135,135,,,,135,,135,135,135,135,135,135,135,,,,,,135,135,135',
'135,135,135,135,,,135,,,,,,,135,,,135,135,135,135,135,135,135,135,,135',
'135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135',
',,135,,,,,,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135,135,,,',
',,,135,,,135,135,135,,135,135,136,136,136,,136,,,,136,136,,,,136,,136',
'136,136,136,136,136,136,,,,,,136,136,136,136,136,136,136,,,136,,,,,',
',136,,,136,136,136,136,136,136,136,136,,136,136,136,,136,136,,136,136',
'136,,,,,,,,,,,,,,,,,,,,136,,,136,,,136,136,,,136,,,,,,136,,,,,,,,136',
',,,,136,136,136,136,136,136,,,,136,136,,,,,,,136,,,136,136,136,,136',
'136,137,137,137,137,137,,,,137,137,,,,137,,137,137,137,137,137,137,137',
',,,,,137,137,137,137,137,137,137,,,137,,,,,,137,137,,137,137,137,137',
'137,137,137,137,137,,137,137,137,,137,137,,137,137,137,,,,,,,,,,,,,',
',,,,,,137,,,137,,,137,137,,,137,,137,,,,137,,,,,,,,137,,,,,137,137,137',
'137,137,137,,,,137,137,,,,,,,137,,,137,137,137,,137,137,222,222,222',
',222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222',
'222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222',
'222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222',
',,222,,222,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222',
',,,,,,222,,,222,222,222,,222,222,223,223,223,,223,,,,223,223,,,,223',
',223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223',
',,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223,,223',
'223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,223,,,,223,,,',
',,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,,,223,223,223',
',223,223,224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224',
'224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224',
'224,224,224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,',
',,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224',
'224,224,,,,224,224,,,,,,,224,,,224,224,224,,224,224,225,225,225,,225',
',,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225',
'225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225',
'225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225',
',,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225',
',,225,225,225,,225,225,226,226,226,,226,,,,226,226,,,,226,,226,226,226',
'226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226',
'226,226,226,226,226,226,226,,226,226,226,,226,226,,226,226,226,,,,,',
',,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226',
'226,226,226,226,226,,,,226,226,,,,,,,226,,,226,226,226,,226,226,227',
'227,227,,227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,,,227',
'227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227,227',
'227,227,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227',
',,227,227,,,227,,227,,227,,227,,,,,,,,227,,,,,227,227,227,227,227,227',
',,,227,227,,,,,,,227,,227,227,227,227,,227,227,231,231,231,,231,,,,231',
'231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231',
'231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231,',
'231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,',
',,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,,,,,,,231,',
',231,231,231,,231,231,232,232,232,,232,,,,232,232,,,,232,,232,232,232',
'232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232',
'232,232,232,232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,',
',,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232',
'232,232,232,232,232,,,,232,232,,,,,,,232,,,232,232,232,,232,232,233',
'233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233',
'233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233',
'233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233',
',,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233',
'233,233,,,,,,233,,,233,233,233,,233,233,244,244,244,,244,,,,244,244',
',,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244',
',,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244',
'244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244',
',,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244',
'244,,244,244,247,247,247,,247,,,,247,247,,,,247,,247,247,247,247,247',
'247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247',
'247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,',
',,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247',
'247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,247,247,248,248,248',
',248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248',
'248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248',
'248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248',
',,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,',
',,,248,,,248,248,248,,248,248,249,249,249,,249,,,,249,249,,,,249,,249',
'249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,',
',249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249',
'249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249',
',,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,249',
'249,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250',
',,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250',
',,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250',
',,,250,250,,,,,,,250,,,250,250,250,,250,250,251,251,251,,251,,,,251',
'251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251',
'251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,',
'251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,',
',251,251,251,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252',
'252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252',
'252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,',
',,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252',
'252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,252,252,253',
'253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253',
',,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253',
'253,,,,,,,253,,,253,253,253,,253,253,254,254,254,,254,,,,254,254,,,',
'254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,',
'254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254',
',254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,',
',,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254',
'254,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,',
',,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255',
'255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,255,255,256,256,256',
',256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256',
'256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,',
',,,256,,,256,256,256,,256,256,257,257,257,,257,,,,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257',
'257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257',
',,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,257',
'257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258',
',,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258',
'258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258',
',,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258',
',,,258,258,,,,,,,258,,,258,258,258,,258,258,259,259,259,,259,,,,259',
'259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259',
'259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,',
'259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,',
',,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,',
',259,259,259,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260',
'260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260',
'260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,',
',,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260',
'260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,260,260,261',
'261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261',
'261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261',
'261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261',
',,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261',
'261,,,,,,,261,,,261,261,261,,261,261,262,262,262,,262,,,,262,262,,,',
'262,,262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,',
'262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262',
',262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,',
',,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262',
'262,,262,262,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263',
'263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263',
'263,263,263,263,263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,',
',,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263',
'263,263,263,,,,263,263,,,,,,,263,,,263,263,263,,263,263,264,264,264',
',264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264',
'264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264',
'264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264',
',,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,',
',,,264,,,264,264,264,,264,264,265,265,265,,265,,,,265,265,,,,265,,265',
'265,265,265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,',
',265,,,265,265,265,265,265,265,265,265,,265,265,265,,265,265,,265,265',
'265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265',
',,,,265,265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265,,265',
'265,266,266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266,266',
',,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266',
'266,266,266,,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266',
',,266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266',
',,,266,266,,,,,,,266,,,266,266,266,,266,266,267,267,267,,267,,,,267',
'267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267',
'267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,',
'267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,',
',,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,',
',267,267,267,,267,267,268,268,268,,268,,,,268,268,,,,268,,268,268,268',
'268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268',
'268,268,268,268,268,268,268,,268,268,268,,268,268,,268,268,268,,,,,',
',,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268',
'268,268,268,268,268,,,,268,268,,,,,,,268,,,268,268,268,,268,268,273',
'273,273,,273,,,,273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273',
'273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273',
'273,,273,273,273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273',
',,273,273,,,273,,,,,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273',
'273,,,,,,,273,,,273,273,273,,273,273,281,281,281,,281,,,,281,281,,,',
'281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281,281,281,,',
'281,,,,,,,281,,,281,281,281,281,281,281,281,281,281,281,281,281,,281',
'281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,281,',
'281,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281,,,,,,,281',
',281,281,281,281,,281,281,282,282,282,,282,,,,282,282,,,,282,,282,282',
'282,282,282,282,282,,,,,,282,282,282,282,282,282,282,,,282,,,,,,,282',
',,282,282,282,282,282,282,282,282,282,282,282,282,,282,282,,282,282',
'282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,,282,,282,,282,,282,,,,',
',,,282,,,,,282,282,282,282,282,282,,,,282,282,,,,,,,282,,282,282,282',
'282,,282,282,291,291,291,,291,,,,291,291,,,,291,,291,291,291,291,291',
'291,291,,,,,,291,291,291,291,291,291,291,,,291,,,,,,,291,,,291,291,291',
'291,291,291,291,291,291,291,291,291,,291,291,,291,291,291,,,,,,,,,,',
',,,,,,,,,291,,,291,,,291,291,,,291,,291,,291,,291,,,,,,,,291,,,,,291',
'291,291,291,291,291,,,,291,291,291,,,,,,291,,291,291,291,291,,291,291',
'298,298,298,,298,,,,298,298,,,,298,,298,298,298,298,298,298,298,,,,',
',298,298,298,298,298,298,298,,,298,,,,,,,298,,,298,298,298,298,298,298',
'298,298,,298,298,298,,298,298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,',
'298,,,298,298,,,298,,,,,,298,,,,,,,,298,,,,,298,298,298,298,298,298',
',,,298,298,,,,,,,298,,,298,298,298,,298,298,300,300,300,,300,,,,300',
'300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300,300',
'300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300,300,300,',
'300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,',
',,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300,300,,,,,,,300,',
',300,300,300,,300,300,303,303,303,,303,,,,303,303,,,,303,,303,303,303',
'303,303,303,303,,,,,,303,303,303,303,303,303,303,,,303,,,,,,,303,,,303',
'303,303,303,303,303,303,303,,303,303,303,,303,303,,303,303,303,,,,,',
',,,,,,,,,,,,,,303,,,303,,,303,303,,,303,,,,,,303,,,,,,,,303,,,,,303',
'303,303,303,303,303,,,,303,303,,,,,,,303,,,303,303,303,,303,303,304',
'304,304,,304,,,,304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304',
'304,304,304,304,304,304,,,304,,,,,,,304,,,304,304,304,304,304,304,304',
'304,,304,304,304,,304,304,,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304',
',,304,304,,,304,,,,,,304,,,,,,,,304,,,,,304,304,304,304,304,304,,,,304',
'304,,,,,,,304,,,304,304,304,,304,304,310,310,310,310,310,,,,310,310',
',,,310,,310,310,310,310,310,310,310,,,,,,310,310,310,310,310,310,310',
',,310,,,,,,310,310,,310,310,310,310,310,310,310,310,310,,310,310,310',
',310,310,,310,310,310,,,,,,,,,,,,,,,,,,,,310,,,310,,,310,310,,,310,',
'310,,,,310,,,,,,,,310,,,,,310,310,310,310,310,310,,,,310,310,,,,,,,310',
',,310,310,310,,310,310,318,318,318,,318,,,,318,318,,,,318,,318,318,318',
'318,318,318,318,,,,,,318,318,318,318,318,318,318,,,318,,,,,,,318,,,318',
'318,318,318,318,318,318,318,,318,318,318,,318,318,,,,318,,,,,,1049,',
'1049,1049,1049,1049,1049,,,,,,,,318,,1049,318,,,318,318,,,318,,,,,,',
',,,,,,,1049,,,,,318,318,318,318,318,318,1049,1049,,318,318,,,,318,,',
'318,,,318,318,318,,318,318,335,335,335,,335,,,,335,335,,,,335,1049,335',
'335,335,335,335,335,335,,,,,,335,335,335,335,335,335,335,,,335,,,,,',
',335,,,335,335,335,335,335,335,335,335,,335,335,335,,335,335,,,,335',
',,,,,1058,,1058,1058,1058,1058,1058,,,,,,,,335,,1058,335,,,335,335,',
',335,,,,,,,,,,,,,,1058,,,,,335,335,335,335,335,335,1058,1058,,335,335',
',,,,,,335,,,335,335,335,,335,335,342,342,342,,342,,,,342,342,,,,342',
'1058,342,342,342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,',
'342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342,342,342,,342,342',
',342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,,,,342,',
',,,,,,342,,,,,342,342,342,342,342,342,,,,342,342,,,,,,,342,,,342,342',
'342,,342,342,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344',
'344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344,,,344,344,344',
'344,344,344,344,344,,344,344,344,,344,344,,344,344,344,,,,,,,,,,,,,',
',,,,,,344,,,344,344,,344,344,,,344,,,,,,344,,,,,,,,344,,,,,344,344,344',
'344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,344,344,348,348,348',
',348,,,,348,348,,,,348,,348,348,348,348,348,348,348,,,,,,348,348,348',
'348,348,348,348,,,348,,,,,,,348,,,348,348,348,348,348,348,348,348,348',
'348,348,348,,348,348,,348,348,348,,,,,,,,,,,,,,,,,,,,348,,,348,,,348',
'348,,,348,,348,,,,348,,,,,,,,348,,,,,348,348,348,348,348,348,,,,348',
'348,,,,,,,348,,348,348,348,348,,348,348,349,349,349,,349,,,,349,349',
',,,349,,349,349,349,349,349,349,349,,,,,,349,349,349,349,349,349,349',
',,349,,,,,,,349,,,349,349,349,349,349,349,349,349,349,349,349,349,,349',
'349,,349,349,349,,,,,,,,,,,,,,,,,,,,349,,,349,,,349,349,,,349,,,,,,349',
',,,,,,,349,,,,,349,349,349,349,349,349,,,,349,349,,,,,,,349,,349,349',
'349,349,,349,349,354,354,354,,354,,,,354,354,,,,354,,354,354,354,354',
'354,354,354,,,,,,354,354,354,354,354,354,354,,,354,,,,,,,354,,,354,354',
'354,354,354,354,354,354,,354,354,354,,354,354,,354,354,354,,,,,,,,,',
',,,,,,,,,,354,,,354,,,354,354,,,354,,,,,,354,,,,,,,,354,,,,,354,354',
'354,354,354,354,,,,354,354,,,,,,,354,,,354,354,354,,354,354,368,368',
'368,,368,,,,368,368,,,,368,,368,368,368,368,368,368,368,,,,,,368,368',
'368,368,368,368,368,,,368,,,,,,,368,,,368,368,368,368,368,368,368,368',
',368,368,368,,368,368,,,,368,,,,,,1060,,1060,1060,1060,1060,1060,,,',
',,,,368,,1060,368,,,368,368,,,368,,,,,,,,,,,,,,1060,,,,,368,368,368',
'368,368,368,1060,1060,,368,368,,,,,,,368,,,368,368,368,,368,368,370',
'370,370,,370,,,,370,370,,,,370,1060,370,370,370,370,370,370,370,,,,',
',370,370,370,370,370,370,370,,,370,,,,,,,370,,,370,370,370,370,370,370',
'370,370,,370,370,370,,370,370,,,,370,,,,,,1062,,1062,1062,1062,1062',
'1062,,,,,,,,370,,1062,370,,,370,370,,,370,,,,,,,,,,,,,,1062,,,,,370',
'370,370,370,370,370,1062,1062,,370,370,,,,,,,370,,,370,370,370,,370',
'370,430,430,430,,430,,,,430,430,,,,430,1062,430,430,430,430,430,430',
'430,,,,,,430,430,430,430,430,430,430,,,430,,,,,,,430,,,430,430,430,430',
'430,430,430,430,,430,430,430,,430,430,,430,430,430,,,,,,,,,,,,,,,,,',
',,430,,,430,,,430,430,,1084,430,1084,1084,1084,1084,1084,430,,,,,,,',
'430,1084,,,,430,430,430,430,430,430,,,,430,430,,,,,,,430,1084,464,430',
'430,430,,430,430,464,464,464,1084,1084,464,464,464,774,464,774,774,774',
'774,774,,,,464,464,464,464,,,774,,,,,464,464,,464,464,464,464,464,1084',
',,,,,,,,774,,,,,,,,,774,774,774,774,,464,464,464,464,464,464,464,464',
'464,464,464,464,464,464,,,464,464,464,,,464,,,464,,,464,464,,464,774',
'464,,464,,464,464,464,464,464,464,464,,464,464,464,828,,828,828,828',
'828,828,,,,,,464,464,464,464,828,464,465,464,,,,,464,465,465,465,,,465',
'465,465,,465,,,,828,,,,,465,465,465,465,828,828,828,828,,,,465,465,',
'465,465,465,465,465,,,,,,,,,,,,,,828,,,,,,,,828,,465,465,465,465,465',
'465,465,465,465,465,465,465,465,465,,,465,465,465,,,465,,,465,,,465',
'465,,465,,465,,465,,465,465,465,465,465,465,465,,465,465,465,,,,,,,',
',,,,,465,465,465,465,,465,,465,,474,474,474,465,474,,,,474,474,,,,474',
',474,474,474,474,474,474,474,,,,,,474,474,474,474,474,474,474,,,474',
',,,,,,474,,,474,474,474,474,474,474,474,474,474,474,474,474,,474,474',
',474,474,474,,,,,,,,,,,,,,,,,,,,474,,,474,,,474,474,,,474,,474,,474',
',474,,,,,,,,474,,,,,474,474,474,474,474,474,,,,474,474,,,,,,,474,,474',
'474,474,474,,474,474,476,476,476,,476,,,,476,476,,,,476,,476,476,476',
'476,476,476,476,,,,,,476,476,476,476,476,476,476,,,476,,,,,,,476,,,476',
'476,476,476,476,476,476,476,,476,476,476,,476,476,,476,476,476,,,,,',
',,,,,,,,,,,,,,476,,,476,,,476,476,,,476,,,,,,476,,,,,,,,476,,,,,476',
'476,476,476,476,476,,,,476,476,,,,,,,476,,,476,476,476,,476,476,477',
'477,477,,477,,,,477,477,,,,477,,477,477,477,477,477,477,477,,,,,,477',
'477,477,477,477,477,477,,,477,,,,,,,477,,,477,477,477,477,477,477,477',
'477,,477,477,477,,477,477,,477,477,477,,,,,,,,,,,,,,,,,,,,477,,,477',
',,477,477,,,477,,,,,,477,,,,,,,,477,,,,,477,477,477,477,477,477,,,,477',
'477,,,,,,,477,,,477,477,477,,477,477,478,478,478,,478,,,,478,478,,,',
'478,,478,478,478,478,478,478,478,,,,,,478,478,478,478,478,478,478,,',
'478,,,,,,,478,,,478,478,478,478,478,478,478,478,,478,478,478,,478,478',
',478,478,478,,,,,,,,,,,,,,,,,,,,478,,,478,,,478,478,,,478,,,,,,478,',
',,,,,,478,,,,,478,478,478,478,478,478,,,,478,478,,,,,,,478,,504,478',
'478,478,,478,478,504,504,504,,,504,504,504,,504,,,,,,,,,504,504,,,,',
',,,,,504,504,,504,504,504,504,504,,,,,,,,277,277,,,277,,,,,,,,,277,277',
',277,277,277,277,277,277,277,,,277,277,504,,,277,277,277,277,504,,,',
',504,504,,,,,,,277,277,,277,277,277,277,277,277,277,277,277,277,277',
'504,504,277,,,,,,,,,,,,504,,516,516,516,504,516,,277,,516,516,504,,',
'516,,516,516,516,516,516,516,516,,,,,,516,516,516,516,516,516,516,,',
'516,,,,,,,516,,,516,516,516,516,516,516,516,516,516,516,516,516,,516',
'516,,516,516,516,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,516,,,516,,516,',
'516,,516,,,,,,,,516,,,,,516,516,516,516,516,516,,,,516,516,,,,,,,516',
',516,516,516,516,,516,516,519,519,519,,519,,,,519,519,,,,519,,519,519',
'519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,,,519',
',,519,519,519,519,519,519,519,519,519,519,519,519,,519,519,,519,519',
'519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,,,519,,519,,,,,,,',
'519,,,,,519,519,519,519,519,519,,,,519,519,,,,,,,519,,519,519,519,519',
',519,519,521,521,521,,521,,,,521,521,,,,521,,521,521,521,521,521,521',
'521,,,,,,521,521,521,521,521,521,521,,,521,,,,,,,521,,,521,521,521,521',
'521,521,521,521,,521,521,521,,521,521,,521,521,521,,,,,,,,,,,,,,,,,',
',,521,,,521,,,521,521,,,521,,,,,,521,,,,,,,,521,,,,,521,521,521,521',
'521,521,,,,521,521,,,,,,,521,,,521,521,521,,521,521,527,527,527,527',
'527,,,,527,527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527,527',
'527,527,527,527,,,527,,,,,,527,527,527,527,527,527,527,527,527,527,527',
'527,,527,527,527,,527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527',
',,527,527,,,527,,527,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527,',
',,527,527,,,,,,527,527,,,527,527,527,,527,527,535,535,535,,535,,,,535',
'535,,,,535,,535,535,535,535,535,535,535,,,,,,535,535,535,535,535,535',
'535,,,535,,,,,,,535,,,535,535,535,535,535,535,535,535,,535,535,535,',
'535,535,,,,535,,,,,,,,,,,,,,,,,,,,535,,,535,,,535,535,,,535,,,,,,,,',
',,,,,,,,,,535,535,535,535,535,535,,,,535,535,,,,,,,535,,,535,535,535',
',535,535,537,537,537,,537,,,,537,537,,,,537,,537,537,537,537,537,537',
'537,,,,,,537,537,537,537,537,537,537,,,537,,,,,,,537,,,537,537,537,537',
'537,537,537,537,537,537,537,537,,537,537,,537,537,537,,,,,,,,,,,,,,',
',,,,,537,,,537,,,537,537,,,537,,537,,537,,537,,,,,,,,537,,,,,537,537',
'537,537,537,537,,,,537,537,,,,,,,537,,537,537,537,537,,537,537,543,543',
'543,,543,,,,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543,543',
'543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543,543,543,543,543',
',543,543,543,,543,543,,,,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543,543',
',,543,,,,,,,,,,,,,,,,,,,543,543,543,543,543,543,,,,543,543,,,,,,,543',
',,543,543,543,,543,543,546,546,546,,546,,,,546,546,,,,546,,546,546,546',
'546,546,546,546,,,,,,546,546,546,546,546,546,546,,,546,,,,,,,546,,,546',
'546,546,546,546,546,546,546,,546,546,546,,546,546,,546,546,546,,,,,',
',,,,,,,,,,,,,,546,,,546,,,546,546,,,546,,,,,,546,,,,,,,,546,,,,,546',
'546,546,546,546,546,,,,546,546,,,,,,,546,,,546,546,546,,546,546,547',
'547,547,,547,,,,547,547,,,,547,,547,547,547,547,547,547,547,,,,,,547',
'547,547,547,547,547,547,,,547,,,,,,,547,,,547,547,547,547,547,547,547',
'547,,547,547,547,,547,547,,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547',
',,547,547,,,547,,,,,,547,,,,,,,,547,,,,,547,547,547,547,547,547,,,,547',
'547,,,,,,,547,,,547,547,547,,547,547,552,552,552,,552,,,,552,552,,,',
'552,,552,552,552,552,552,552,552,,,,,,552,552,552,552,552,552,552,,',
'552,,,,,,,552,,,552,552,552,552,552,552,552,552,,552,552,552,,552,552',
',552,552,552,,,,,,,,,,,,,,,,,,,,552,,,552,,,552,552,,,552,,,,,,552,',
',,,,,,552,,,,,552,552,552,552,552,552,,,,552,552,,,,,,,552,,,552,552',
'552,,552,552,576,576,576,,576,,,,576,576,,,,576,,576,576,576,576,576',
'576,576,,,,,,576,576,576,576,576,576,576,,,576,,,,,,,576,,,576,576,576',
'576,576,576,576,576,576,576,576,576,,576,576,,576,576,576,,,,,,,,,,',
',,,,,,,,,576,,,576,,,576,576,,,576,,576,,576,,576,,,,,,,,576,,,,,576',
'576,576,576,576,576,,,,576,576,,,,,,,576,,576,576,576,576,,576,576,588',
'588,588,,588,,,,588,588,,,,588,,588,588,588,588,588,588,588,,,,,,588',
'588,588,588,588,588,588,,,588,,,,,,,588,,,588,588,588,588,588,588,588',
'588,,588,588,588,,588,588,,588,588,588,,,,,,,,,,,,,,,,,,,,588,,,588',
',,588,588,,,588,,,,,,588,,,,,,,,588,,,,,588,588,588,588,588,588,,,,588',
'588,,,,,,,588,,,588,588,588,,588,588,594,594,594,,594,,,,594,594,,,',
'594,,594,594,594,594,594,594,594,,,,,,594,594,594,594,594,594,594,,',
'594,,,,,,,594,,,594,594,594,594,594,594,594,594,,594,594,594,,594,594',
',594,594,594,,,,,,,,,,,,,,,,,,,,594,,,594,,,594,594,,,594,,,,,,594,',
',,,,,,594,,,,,594,594,594,594,594,594,,,,594,594,,,,,,,594,,,594,594',
'594,,594,594,616,616,616,,616,,,,616,616,,,,616,,616,616,616,616,616',
'616,616,,,,,,616,616,616,616,616,616,616,,,616,,,,,,,616,,,616,616,616',
'616,616,616,616,616,,616,616,616,,616,616,,616,616,616,,,,,,,,,,,,,',
',,,,,,616,,,616,,,616,616,,,616,,,,,,616,,,,,,,,616,,,,,616,616,616',
'616,616,616,,,,616,616,,,,,,,616,,,616,616,616,,616,616,656,656,656',
',656,,,,656,656,,,,656,,656,656,656,656,656,656,656,,,,,,656,656,656',
'656,656,656,656,,,656,,,,,,,656,,,656,656,656,656,656,656,656,656,,656',
'656,656,,656,656,,656,656,656,,,,,,,,,,,,,,,,,,,,656,,,656,,,656,656',
',,656,,656,,,,656,,,,,,,,656,,,,,656,656,656,656,656,656,,,,656,656',
',,,,,,656,,,656,656,656,,656,656,657,657,657,,657,,,,657,657,,,,657',
',657,657,657,657,657,657,657,,,,,,657,657,657,657,657,657,657,,,657',
',,,,,,657,,,657,657,657,657,657,657,657,657,,657,657,657,,657,657,,657',
'657,657,,,,,,,,,,,,,,,,,,,,657,,,657,,,657,657,,,657,,,,,,657,,,,,,',
',657,,,,,657,657,657,657,657,657,,,,657,657,,,,,,,657,,,657,657,657',
',657,657,658,658,658,,658,,,,658,658,,,,658,,658,658,658,658,658,658',
'658,,,,,,658,658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658',
'658,658,658,658,658,658,658,658,,658,658,,658,658,658,,,,,,,,,,,,,,',
',,,,,658,,,658,,,658,658,,,658,,658,,658,,658,,,,,,,,658,,,,,658,658',
'658,658,658,658,,,,658,658,,,,,,,658,,658,658,658,658,,658,658,661,661',
'661,,661,,,,661,661,,,,661,,661,661,661,661,661,661,661,,,,,,661,661',
'661,661,661,661,661,,,661,,,,,,,661,,,661,661,661,661,661,661,661,661',
',661,661,661,,661,661,,661,661,661,,,,,,,,,,,,,,,,,,,,661,,,661,,,661',
'661,,,661,,,,,,661,,,,,,,,661,,,,,661,661,661,661,661,661,,,,661,661',
',,,,,,661,,,661,661,661,,661,661,664,664,664,,664,,,,664,664,,,,664',
',664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,,,664',
',,,,,,664,,,664,664,664,664,664,664,664,664,664,664,664,664,,664,664',
',664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,664,,,664,,664,,664',
',664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664,664,,,,,,,664,,664',
'664,664,664,,664,664,665,665,665,,665,,,,665,665,,,,665,,665,665,665',
'665,665,665,665,,,,,,665,665,665,665,665,665,665,,,665,,,,,,,665,,,665',
'665,665,665,665,665,665,665,665,665,665,665,,665,665,,665,665,665,,',
',,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,,,665,,665,,,,,,,,665,,',
',,665,665,665,665,665,665,,,,665,665,,,,,,,665,,665,665,665,665,,665',
'665,666,666,666,,666,,,,666,666,,,,666,,666,666,666,666,666,666,666',
',,,,,666,666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666',
'666,666,666,,666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666',
',,666,,,666,666,,,666,,,,,,666,,,,,,,,666,,,,,666,666,666,666,666,666',
',,,666,666,,,,,,,666,,,666,666,666,,666,666,667,667,667,,667,,,,667',
'667,,,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667',
'667,,,667,,,,,,,667,,,667,667,667,667,667,667,667,667,,667,667,667,',
'667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,',
',,,667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667,',
',667,667,667,,667,667,672,672,672,,672,,,,672,672,,,,672,,672,672,672',
'672,672,672,672,,,,,,672,672,672,672,672,672,672,,,672,,,,,,,672,,,672',
'672,672,672,672,672,672,672,,672,672,672,,672,672,,672,672,672,,,,,',
',,,,,,,,,,,,,,672,,,672,,,672,672,,,672,,,,,,672,,,,,,,,672,,,,,672',
'672,672,672,672,672,,,,672,672,,,,,,,672,,,672,672,672,,672,672,673',
'673,673,,673,,,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673',
'673,673,673,673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673',
'673,,673,673,673,,673,673,,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673',
',,673,673,,,673,,,,,,673,,,,,,,,673,,,,,673,673,673,673,673,673,,,,673',
'673,,,,,,,673,,,673,673,673,,673,673,697,697,697,,697,,,,697,697,,,',
'697,,697,697,697,697,697,697,697,,,,,,697,697,697,697,697,697,697,,',
'697,,,,,,,697,,,697,697,697,697,697,697,697,697,,697,697,697,,697,697',
',697,697,697,,,,,,,,,,,,,,,,,,,,697,,,697,,,697,697,,,697,,,,,,697,',
',,,,,,697,,,,,697,697,697,697,697,697,,,,697,697,,,,,,,697,,,697,697',
'697,,697,697,700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700',
'700,700,,,,,,700,700,700,700,700,700,700,,,700,,,,,,,700,,,700,700,700',
'700,700,700,700,700,,700,700,700,,700,700,,700,700,700,,,,,,,,,,,,,',
',,,,,,700,,,700,,,700,700,,,700,,,,,,700,,,,,,,,700,,,,,700,700,700',
'700,700,700,,,,700,700,,,,,,,700,,,700,700,700,,700,700,704,704,704',
',704,,,,704,704,,,,704,,704,704,704,704,704,704,704,,,,,,704,704,704',
'704,704,704,704,,,704,,,,,,,704,,,704,704,704,704,704,704,704,704,,704',
'704,704,,704,704,,,,704,,,,,,,,,,,,,,,,,,,,704,,,704,,,704,704,,,704',
',,,,,,,,,,,,,,,,,,704,704,704,704,704,704,,,,704,704,,,,,,,704,,,704',
'704,704,,704,704,715,715,715,,715,,,,715,715,,,,715,,715,715,715,715',
'715,715,715,,,,,,715,715,715,715,715,715,715,,,715,,,,,,,715,,,715,715',
'715,715,715,715,715,715,,715,715,715,,715,715,,,,715,,,,,,,,,,,,,,,',
',,,,715,,,715,,,715,715,,,715,,,,,,,,,,,,,,,,,,,715,715,715,715,715',
'715,,,,715,715,,,,,,,715,,,715,715,715,,715,715,721,721,721,,721,,,',
'721,721,,,,721,,721,721,721,721,721,721,721,,,,,,721,721,721,721,721',
'721,721,,,721,,,,,,,721,,,721,721,721,721,721,721,721,721,,721,721,721',
',721,721,,721,721,721,,,,,,,,,,,,,,,,,,,,721,,,721,,,721,721,,,721,',
'721,,,,721,,,,,,,,721,,,,,721,721,721,721,721,721,,,,721,721,,,,,,,721',
',,721,721,721,,721,721,726,726,726,,726,,,,726,726,,,,726,,726,726,726',
'726,726,726,726,,,,,,726,726,726,726,726,726,726,,,726,,,,,,,726,,,726',
'726,726,726,726,726,726,726,726,726,726,726,,726,726,,726,726,726,,',
',,,,,,,,,,,,,,,,,726,,,726,,,726,726,,,726,,726,,,,726,,,,,,,,726,,',
',,726,726,726,726,726,726,,,,726,726,,,,,,,726,,726,726,726,726,,726',
'726,729,729,729,,729,,,,729,729,,,,729,,729,729,729,729,729,729,729',
',,,,,729,729,729,729,729,729,729,,,729,,,,,,,729,,,729,729,729,729,729',
'729,729,729,729,729,729,729,,729,729,,729,729,729,,,,,,,,,,,,,,,,,,',
',729,,,729,,,729,729,,,729,,,,,,729,,,,,,,,729,,,,,729,729,729,729,729',
'729,,,,729,729,,,,,,,729,,729,729,729,729,,729,729,743,743,743,,743',
',,,743,743,,,,743,,743,743,743,743,743,743,743,,,,,,743,743,743,743',
'743,743,743,,,743,,,,,,,743,,,743,743,743,743,743,743,743,743,,743,743',
'743,,743,743,,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743',
',743,,,,743,,,,,,,,743,,,,,743,743,743,743,743,743,,,,743,743,,,,,,',
'743,,,743,743,743,,743,743,755,755,755,,755,,,,755,755,,,,755,,755,755',
'755,755,755,755,755,,,,,,755,755,755,755,755,755,755,,,755,,,,,,,755',
',,755,755,755,755,755,755,755,755,755,755,755,755,,755,755,,755,755',
'755,,,,,,,,,,,,,,,,,,,,755,,,755,,,755,755,,,755,,755,,755,,755,,,,',
',,,755,,,,,755,755,755,755,755,755,,,,755,755,,,,,,,755,,755,755,755',
'755,,755,755,778,778,778,,778,,,,778,778,,,,778,,778,778,778,778,778',
'778,778,,,,,,778,778,778,778,778,778,778,,,778,,,,,,,778,,,778,778,778',
'778,778,778,778,778,,778,778,778,,778,778,,778,778,778,,,,,,,,,,,,,',
',,,,,,778,,,778,,,778,778,,,778,,,,,,778,,,,,,,,778,,,,,778,778,778',
'778,778,778,,,,778,778,,,,,,,778,,,778,778,778,,778,778,800,800,800',
',800,,,,800,800,,,,800,,800,800,800,800,800,800,800,,,,,,800,800,800',
'800,800,800,800,,,800,,,,,,,800,,,800,800,800,800,800,800,800,800,,800',
'800,800,,800,800,,800,800,800,,,,,,,,,,,,,,,,,,,,800,,,800,,,800,800',
',,800,,,,,,800,,,,,,,,800,,,,,800,800,800,800,800,800,,,,800,800,,,',
',,,800,,,800,800,800,,800,800,807,807,807,,807,,,,807,807,,,,807,,807',
'807,807,807,807,807,807,,,,,,807,807,807,807,807,807,807,,,807,,,,,',
',807,,,807,807,807,807,807,807,807,807,,807,807,807,,807,807,,807,807',
'807,,,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,,807,,,,,,807,,,,,,,,807',
',,,,807,807,807,807,807,807,,,,807,807,,,,,,,807,,,807,807,807,,807',
'807,820,820,820,,820,,,,820,820,,,,820,,820,820,820,820,820,820,820',
',,,,,820,820,820,820,820,820,820,,,820,,,,,,,820,,,820,820,820,820,820',
'820,820,820,,820,820,820,,820,820,,820,820,820,,,,,,,,,,,,,,,,,,,,820',
',,820,,,820,820,,,820,,,,,,820,,,,,,,,820,,,,,820,820,820,820,820,820',
',,,820,820,,,,,,,820,,,820,820,820,,820,820,821,821,821,,821,,,,821',
'821,,,,821,,821,821,821,821,821,821,821,,,,,,821,821,821,821,821,821',
'821,,,821,,,,,,,821,,,821,821,821,821,821,821,821,821,,821,821,821,',
'821,821,,821,821,821,,,,,,,,,,,,,,,,,,,,821,,,821,,,821,821,,,821,,',
',,,821,,,,,,,,821,,,,,821,821,821,821,821,821,,,,821,821,,,,,,,821,',
',821,821,821,,821,821,822,822,822,,822,,,,822,822,,,,822,,822,822,822',
'822,822,822,822,,,,,,822,822,822,822,822,822,822,,,822,,,,,,,822,,,822',
'822,822,822,822,822,822,822,,822,822,822,,822,822,,822,822,822,,,,,',
',,,,,,,,,,,,,,822,,,822,,,822,822,,,822,,,,,,822,,,,,,,,822,,,,,822',
'822,822,822,822,822,,,,822,822,,,,,,,822,,,822,822,822,,822,822,823',
'823,823,,823,,,,823,823,,,,823,,823,823,823,823,823,823,823,,,,,,823',
'823,823,823,823,823,823,,,823,,,,,,,823,,,823,823,823,823,823,823,823',
'823,,823,823,823,,823,823,,823,823,823,,,,,,,,,,,,,,,,,,,,823,,,823',
',,823,823,,,823,,,,,,823,,,,,,,,823,,,,,823,823,823,823,823,823,,,,823',
'823,,,,,,,823,,,823,823,823,,823,823,825,825,825,,825,,,,825,825,,,',
'825,,825,825,825,825,825,825,825,,,,,,825,825,825,825,825,825,825,,',
'825,,,,,,,825,,,825,825,825,825,825,825,825,825,,825,825,825,,825,825',
',825,825,825,,,,,,,,,,,,,,,,,,,,825,,,825,,,825,825,,,825,,,,,,825,',
',,,,,,825,,,,,825,825,825,825,825,825,,,,825,825,,,,,,,825,,,825,825',
'825,,825,825,858,858,858,,858,,,,858,858,,,,858,,858,858,858,858,858',
'858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,,,858,,,858,858,858',
'858,858,858,858,858,,858,858,858,,858,858,,858,858,858,,,,,,,,,,,,,',
',,,,,,858,,,858,,,858,858,,,858,,,,,,858,,,,,,,,858,,,,,858,858,858',
'858,858,858,,,,858,858,,,,,,,858,,,858,858,858,,858,858,865,865,865',
',865,,,,865,865,,,,865,,865,865,865,865,865,865,865,,,,,,865,865,865',
'865,865,865,865,,,865,,,,,,,865,,,865,865,865,865,865,865,865,865,,865',
'865,865,,865,865,,865,865,865,,,,,,,,,,,,,,,,,,,,865,,,865,,,865,865',
',,865,,,,,,865,,,,,,,,865,,,,,865,865,865,865,865,865,,,,865,865,,,',
',,,865,,,865,865,865,,865,865,874,874,874,,874,,,,874,874,,,,874,,874',
'874,874,874,874,874,874,,,,,,874,874,874,874,874,874,874,,,874,,,,,',
',874,,,874,874,874,874,874,874,874,874,,874,874,874,,874,874,,874,874',
'874,,,,,,,,,,,,,,,,,,,,874,,,874,,,874,874,,,874,,,,,,874,,,,,,,,874',
',,,,874,874,874,874,874,874,,,,874,874,,,,,,,874,,,874,874,874,,874',
'874,916,916,916,,916,,,,916,916,,,,916,,916,916,916,916,916,916,916',
',,,,,916,916,916,916,916,916,916,,,916,,,,,,,916,,,916,916,916,916,916',
'916,916,916,916,916,916,916,,916,916,,916,916,916,,,,,,,,,,,,,,,,,,',
',916,,,916,,,916,916,,,916,,,,916,,916,,,,,,,,916,,,,,916,916,916,916',
'916,916,,,,916,916,,,,,,,916,,916,916,916,916,,916,916,917,917,917,',
'917,,,,917,917,,,,917,,917,917,917,917,917,917,917,,,,,,917,917,917',
'917,917,917,917,,,917,,,,,,,917,,,917,917,917,917,917,917,917,917,,917',
'917,917,,917,917,,917,917,917,,,,,,,,,,,,,,,,,,,,917,,,917,,,917,917',
',,917,,,,,,917,,,,,,,,917,,,,,917,917,917,917,917,917,,,,917,917,,,',
',,,917,,,917,917,917,,917,917,929,929,929,,929,,,,929,929,,,,929,,929',
'929,929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,',
',929,,,929,929,929,929,929,929,929,929,,929,929,929,,929,929,,,,929',
',,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,,,,,,,,,,,,,,,,,,929,929',
'929,929,929,929,,,,929,929,,,,,,,929,,,929,929,929,,929,929,938,938',
'938,,938,,,,938,938,,,,938,,938,938,938,938,938,938,938,,,,,,938,938',
'938,938,938,938,938,,,938,,,,,,,938,,,938,938,938,938,938,938,938,938',
',938,938,938,,938,938,,,,938,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,938',
',,938,,,,,,,,,,,,,,,,,,,938,938,938,938,938,938,,,,938,938,,,,,,,938',
',,938,938,938,,938,938,946,946,946,,946,,,,946,946,,,,946,,946,946,946',
'946,946,946,946,,,,,,946,946,946,946,946,946,946,,,946,,,,,,,946,,,946',
'946,946,946,946,946,946,946,,946,946,946,,946,946,,946,946,946,,,,,',
',,,,,,,,,,,,,,946,,,946,,,946,946,,,946,,946,,,,946,,,,,,,,946,,,,,946',
'946,946,946,946,946,,,,946,946,,,,,,,946,,,946,946,946,,946,946,989',
'989,989,,989,,,,989,989,,,,989,,989,989,989,989,989,989,989,,,,,,989',
'989,989,989,989,989,989,,,989,,,,,,,989,,,989,989,989,989,989,989,989',
'989,,989,989,989,,989,989,,,,989,,,,,,,,,,,,,,,,,,,,989,,,989,,,989',
'989,,,989,,,,,,,,,,,,,,,,,,,989,989,989,989,989,989,,,,989,989,,,,,',
',989,,,989,989,989,,989,989,1003,1003,1003,,1003,,,,1003,1003,,,,1003',
',1003,1003,1003,1003,1003,1003,1003,,,,,,1003,1003,1003,1003,1003,1003',
'1003,,,1003,,,,,,,1003,,,1003,1003,1003,1003,1003,1003,1003,1003,,1003',
'1003,1003,,1003,1003,,1003,1003,1003,,,,,,,,,,,,,,,,,,,,1003,,,1003',
',,1003,1003,,,1003,,,,,,1003,,,,,,,,1003,,,,,1003,1003,1003,1003,1003',
'1003,,,,1003,1003,,,,,,,1003,,,1003,1003,1003,,1003,1003,1036,1036,1036',
',1036,,,,1036,1036,,,,1036,,1036,1036,1036,1036,1036,1036,1036,,,,,',
'1036,1036,1036,1036,1036,1036,1036,,,1036,,,,,,,1036,,,1036,1036,1036',
'1036,1036,1036,1036,1036,1036,1036,1036,1036,,1036,1036,,1036,1036,1036',
',,,,,,,,,,,,,,,,,,,1036,,,1036,,,1036,1036,,,1036,,1036,,1036,,1036',
',,,,,,,1036,,,,,1036,1036,1036,1036,1036,1036,,,,1036,1036,,,,,,,1036',
',1036,1036,1036,1036,,1036,1036,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11',
',,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11',
'11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11',
'11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12',
'12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12',
'12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12',
'12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75',
'75,75,75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75',
'75,,75,75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75',
',75,75,75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,,,,105,105,105,105,105,105,105,105,105,105,,,,,',
'105,105,105,105,105,105,105,105,105,105,105,105,,105,,,,,,,105,105,',
'105,105,105,105,105,105,105,,,105,105,,,,105,105,105,105,,,,,,,,,,,',
',,105,105,,105,105,105,105,105,105,105,105,105,105,105,,,105,,,,,,,',
',,,,,,,,,,,,105,421,421,421,421,421,421,421,421,421,421,421,421,421',
'421,421,421,421,421,421,421,421,421,421,421,,,,421,421,421,421,421,421',
'421,421,421,421,,,,,,421,421,421,421,421,421,421,421,421,,,421,,,,,',
',,,421,421,,421,421,421,421,421,421,421,,,421,421,,,,421,421,421,421',
',,,,,,,,,,,,,421,421,,421,421,421,421,421,421,421,421,421,421,421,,',
'421,421,,,,,,,,,,421,,,,,,,,,421,653,653,653,653,653,653,653,653,653',
'653,653,653,653,653,653,653,653,653,653,653,653,653,653,653,,,,653,653',
'653,653,653,653,653,653,653,653,,,,,,653,653,653,653,653,653,653,653',
'653,,,653,,,,,,,,,653,653,,653,653,653,653,653,653,653,,,653,653,,,',
'653,653,653,653,,,,,,,,,,,,,,653,653,,653,653,653,653,653,653,653,653',
'653,653,653,,,653,653,,,,,,,,,,653,,,,,,,,,653,764,764,764,764,764,764',
'764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764',
'764,,,,764,764,764,764,764,764,764,764,764,764,,,,,,764,764,764,764',
'764,764,764,764,764,,,764,,,,,,,,,764,764,,764,764,764,764,764,764,764',
',,764,764,,,,764,764,764,764,,,,,,,,,,,,,,764,764,,764,764,764,764,764',
'764,764,764,764,764,764,,,764,,,,,228,228,,,228,,,,,,,,,228,228,764',
'228,228,228,228,228,228,228,,,228,228,,,,228,228,228,228,,,,,,228,,',
',,,,,228,228,,228,228,228,228,228,228,228,228,228,228,228,,,228,,,,',
'229,229,,,229,,,,,,,,,229,229,228,229,229,229,229,229,229,229,,,229',
'229,,,,229,229,229,229,,,,,,229,,,,,,,,229,229,,229,229,229,229,229',
'229,229,229,229,229,229,,,229,,,,,472,472,,,472,,,,,,,,,472,472,229',
'472,472,472,472,472,472,472,,,472,472,,,,472,472,472,472,,,,,,472,,',
',,,,,472,472,,472,472,472,472,472,472,472,472,472,472,472,,,472,,,,',
'473,473,,,473,,,,,,,,,473,473,472,473,473,473,473,473,473,473,,,473',
'473,,,,473,473,473,473,,,,,,473,,,,,,,,473,473,,473,473,473,473,473',
'473,473,473,473,473,473,,,473,,,,,538,538,,,538,,,,,,,,,538,538,473',
'538,538,538,538,538,538,538,,,538,538,,,,538,538,538,538,,,,,,538,,',
',,,,,538,538,,538,538,538,538,538,538,538,538,538,538,538,,,538,,,,',
'539,539,,,539,,,,,,,,,539,539,538,539,539,539,539,539,539,539,,,539',
'539,,,,539,539,539,539,,,,,,539,,,,,,,,539,539,,539,539,539,539,539',
'539,539,539,539,539,539,,,539,,,,,548,548,,,548,,,,,,,,,548,548,539',
'548,548,548,548,548,548,548,,,548,548,,,,548,548,548,548,,,,,,548,,',
',,,,,548,548,,548,548,548,548,548,548,548,548,548,548,548,,,548,,,,',
'549,549,,,549,,,,,,,,,549,549,548,549,549,549,549,549,549,549,,,549',
'549,,,,549,549,549,549,,,,,,549,,,,,,,,549,549,,549,549,549,549,549',
'549,549,549,549,549,549,,,549,,,,,577,577,,,577,,,,,,,,,577,577,549',
'577,577,577,577,577,577,577,,,577,577,,,,577,577,577,577,,,,,,577,,',
',,,,,577,577,,577,577,577,577,577,577,577,577,577,577,577,,,577,,,,',
'578,578,,,578,,,,,,,,,578,578,577,578,578,578,578,578,578,578,,,578',
'578,,,,578,578,578,578,,,,,,578,,,,,,,,578,578,,578,578,578,578,578',
'578,578,578,578,578,578,,,578,,,,,659,659,,,659,,,,,,,,,659,659,578',
'659,659,659,659,659,659,659,,,659,659,,,,659,659,659,659,,,,,,659,,',
',,,,,659,659,,659,659,659,659,659,659,659,659,659,659,659,,,659,,,,',
'660,660,,,660,,,,,,,,,660,660,659,660,660,660,660,660,660,660,,,660',
'660,,,,660,660,660,660,,,,,,660,,,,,,,,660,660,,660,660,660,660,660',
'660,660,660,660,660,660,,,660,,,,,753,753,,,753,,,,,,,,,753,753,660',
'753,753,753,753,753,753,753,,,753,753,,,,753,753,753,753,,,,,,753,,',
',,,,,753,753,,753,753,753,753,753,753,753,753,753,753,753,,,753,,,,',
'754,754,,,754,,,,,,,,,754,754,753,754,754,754,754,754,754,754,,,754',
'754,,,,754,754,754,754,,,,,,754,,,,,,,,754,754,,754,754,754,754,754',
'754,754,754,754,754,754,,963,754,963,963,963,963,963,980,,980,980,980',
'980,980,,,963,,,,,754,,980,983,,983,983,983,983,983,,,,,,,,963,,983',
',,,,980,,963,963,963,963,,,,980,980,980,980,,,,,983,,,,,,,,,983,983',
'983,983,,,,1032,1032,,,1032,963,,,,,,,980,1032,1032,,1032,1032,1032',
'1032,1032,1032,1032,,,1032,1032,,,983,1032,1032,1032,1032,,,,,,1032',
',,,,,,,1032,1032,,1032,1032,1032,1032,1032,1032,1032,1032,1032,1032',
'1032,,,1032,,,,,1037,1037,,,1037,,,,,,,,,1037,1037,1032,1037,1037,1037',
'1037,1037,1037,1037,,,1037,1037,,,,1037,1037,1037,1037,,,,,,1037,,,',
',,,,1037,1037,,1037,1037,1037,1037,1037,1037,1037,1037,1037,1037,1037',
',,1037,,,,,1038,1038,,,1038,,,,,,,,,1038,1038,1037,1038,1038,1038,1038',
'1038,1038,1038,,,1038,1038,,,,1038,1038,1038,1038,,,,,,1038,,,,,,,,1038',
'1038,,1038,1038,1038,1038,1038,1038,1038,1038,1038,1038,1038,,1056,1038',
'1056,1056,1056,1056,1056,,,,,,,,,,1056,,,,,1038,,,,,,,,,,,,,,,,,1056',
',,,,,,,,1056,1056,1056,1056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1056' ]
        racc_action_check = arr = ::Array.new(25883, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    10,  1043,    55,   nil,   -93,   nil,   nil,  5102,   602,
   nil, 23660, 23793,   -47,   nil,   -47,    91,    -2,   166,   204,
   -43,   nil,   -73,  5241,  1323,   270,   nil,   107,   nil,   157,
  5375,  5503,  5633,  5772,  5911,   nil,  1183,  6050,  6189,   nil,
   179,   159,   309,   270,   116,  6328,  6467,   442,  6606,   240,
   431,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  6740,   nil,  6877,   nil,   nil,   -19,   nil,  7016,  7155,   nil,
   nil,  7294,  7433,   305,   nil, 23926,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -94,   nil,   nil,   nil,   nil,   nil,   nil,   280,
   284,   307,   328,   nil,   nil, 24059,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   nil,   nil,   132,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  7572,   nil,
   nil,   nil,   nil,  7711,  7850,  7989,  8128,  8267,   361,   nil,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   360,
   nil,  1323,  8406,  8545,  8684,  8823,  8962,  9101, 24526, 24594,
   nil,  9240,  9379,  9518,   nil,   nil,   528,   101,   243,   453,
   272,   379,   444,   nil,  9657,  1463,   449,  9796,  9935, 10074,
 10213, 10352, 10491, 10630, 10769, 10908, 11047, 11186, 11325, 11464,
 11603, 11742, 11881, 12020, 12159, 12298, 12437, 12576, 12715,   nil,
   nil,   nil,   nil, 12854,   nil,   nil,   nil, 16306,   nil,   nil,
   444, 12993, 13132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 13271,   nil,  1463,   nil,   414,   440,   nil, 13410,   496,
 13549,   nil,   nil, 13688, 13827,   nil,   nil,   165,   nil,   nil,
 13966,   734,   nil,   458,  1603,   484,   521,   487, 14105,  1743,
   577,   592,   660,   565,   744,   nil,   540,   509,   162,   nil,
   nil,   nil,   566,   128,   538, 14244,   nil,   349,   602,   754,
   nil,   618, 14383,   nil, 14522,  1883,  1168,   561, 14661, 14800,
   nil,   158,   -11,   -10, 14939,  2023,  2163,   197,   674,   566,
     5,     7,   756,   646,    22,   680,   nil,   nil, 15078,   nil,
 15217,   113,   143,   147,   241,   409,   432,   473,   487,   500,
   nil,   501,   nil,   nil,   nil,   nil,   583,   nil,   191,   nil,
   290,   nil,   359,   nil,   593,   304,   nil,   595,   318,   nil,
   610,   -57,   nil,   619,   -41,   nil,   321,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 24192,   nil,   nil,   nil,   nil,   631,   nil,   nil,   619,
 15356,   623,   nil,   nil,   619,   nil,   787,   287,   nil,   nil,
   nil,  1043,   nil,   nil,   nil,   nil,   nil,  1183,   638,   nil,
   nil,   638,   657,   359,   395,  6877,   nil,   nil,   nil,   264,
   392,   697,   nil,   nil, 15490, 15622,   nil,   nil,   nil,   -16,
   nil,   697, 24662, 24730, 15755,   310, 15894, 16033, 16172,  2163,
  2303,   -42,   212,   722,   727,   729,   740,  3703,  3843,  3447,
   862,  2443,  2583,  2723,  2863,  3003,   477,   609,  3143,  3283,
  1603,  3423,   802,   nil, 16306,   nil,   nil,   nil,   nil,   691,
   nil,   nil,   nil,   692,   nil,   nil, 16432,   nil,   nil, 16571,
   nil, 16710,   nil,   262,   nil,   nil,   nil, 16849,  1308,   707,
   702,   701,   nil,   nil,   702, 16988,   707, 17127, 24798, 24866,
   788,   745,   nil, 17266,   707,   nil, 17405, 17544, 24934, 25002,
  3563,  1743, 17683,   833,   833,   717,   nil,   nil,    67,   198,
   750,   734,   nil,   319,   786,  2303,   864,   nil,  2443,    55,
   870,   871,   868,   885,   nil,   nil, 17822, 25070, 25138,    25,
   nil,   172,   205,   305,   nil,   792,   nil,   789, 17961,   nil,
   808,   nil,   nil,   nil, 18100,   nil,   715,   nil,   770,   774,
   nil,   775,   776,   777,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   780,   520,   nil,   nil, 18239,   nil,   nil,   nil,
   873,   nil,   nil,   nil,   885,   nil,   nil,   890,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164,
   nil,   nil,   188,   nil,   nil,   nil,   812,   nil,   nil,   814,
   nil,  2583,   nil, 24325,   nil,   828, 18378, 18517, 18656, 25206,
 25274, 18795,   397,   863, 18934, 19073, 19212, 19351,   863,   nil,
   nil,   nil, 19490, 19629,   865,   nil,   nil,   nil,   331,   363,
   520,   652,   838,   849,   nil,   105,   971,   -10,   nil,   nil,
   889,   nil,   995,   nil,   878,   nil,   920, 19768,   nil,   nil,
 19907,   nil,   nil,  -111, 20046,   883,   nil,   888,    21,    23,
   932,   267,   824,   937,   899, 20185,   nil,   962,    27,    84,
   nil, 20324,   nil,   nil,   nil,   nil, 20463,   nil,   nil, 20602,
   nil,   nil,   nil,   410,   nil,  1018,   nil,   nil,   nil,   nil,
   nil,  1028,   nil, 20741,   914,    26,    28,    93,   152,  2723,
   nil,   822,   nil, 25342, 25410, 20880,   nil,   nil,   nil,   517,
  2863,  3003,  5339,  5467, 24458,    53,    28,   925,   220,   nil,
   nil,   574,  6704,   nil, 15454,   nil,  5285,   nil, 21019,   nil,
   652,   nil,   927,   928,   921,   941,   nil,   nil,   nil,   nil,
   977,  3143,   nil,   nil,   nil,   nil,   nil,   956,   nil,   941,
 21158,   945,   364,   368,   784,   912,  1883, 21297,   nil,   950,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 21436, 21575, 21714, 21853,   369, 21992,   nil,   nil, 15553,   nil,
  3283,   nil,   nil,   967,   nil,   109,   nil,   nil,   nil,   nil,
   953,   268,   nil,   nil,   nil,   nil,   nil,   nil,  3423,   nil,
   954,   996,   nil,   nil,   426,  1076,   nil,   nil, 22131,   nil,
  3563,  1090,   nil,   nil,   nil, 22270,    -7,    34,  1094,   304,
   915,   nil,   980,  3703, 22409,   278,  1115,  1116,  1004,   359,
   nil,   nil,   nil,  3843,  3983,  1000,  1007,  1005,   nil,   nil,
   nil,  1009,  1011,   nil,  1014,  1026,   nil,  1027,   nil,   nil,
  1039,   748,   513,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1028,   nil,  1042,   370,   nil,   nil, 22548, 22687,  2023,  1045,
  1047,   nil,  1048,  1052,  1061,   nil,  1082,  1066,  1052, 22826,
   nil,   nil,   nil,   nil,  4123,  4263,   nil,    -8, 22965,   nil,
   nil,   nil,    -1,   nil,   nil,   nil, 23104,  4403,   nil,   nil,
  1187,   411,   nil,   nil,   nil,   nil,   nil,  1107,  1086,  1210,
  1309,   nil,   nil, 25472,   nil,  6071,   nil,  6210,   nil,  6650,
   nil,   nil,   nil,   nil,  1091,  1093,   nil,   320,   nil,   nil,
 25479,   nil,   nil, 25496,   nil,  7454,   nil,   nil,  1114, 23243,
   823,  1169,   nil,  1217,  4543,   862,   865,   916,  1184,   948,
   nil,  4683,   nil, 23382,   433,   nil,   nil,  4823,  4963,   nil,
   nil,   528,   nil,   nil,   nil,  1114,  1117,  1132,  1135,   645,
   755,  1136,   nil,   nil,  1139,  1141,  1142,  1144,   nil,  1145,
   nil,   974, 25550,   nil,   nil,  1270, 23521, 25618, 25686,  1043,
   697,   nil,   nil,   nil,   nil,  1269,  1271,   nil,  1449, 14126,
   nil,   nil,   nil,   nil,  1154,   nil, 25748,   nil, 14265,   nil,
 15099,   nil, 15238,   nil,   nil,  1205,  1206,   nil,  1171,    11,
    36,   123,  1079,   nil,   nil,   nil,   nil,  1175,  1176,  1177,
  1180,  1182,    39,   nil, 15400,   nil,   nil,   nil,   nil,  1183,
   nil ]

racc_action_default = [
    -1,  -647,  -646,  -647,    -2,  -633,    -4,    -5,  -647,    -8,
    -9,  -647,  -647,  -647,   -36,  -647,  -647,   -40,  -647,  -647,
  -291,   -51,  -635,  -647,   -56,   -61,   -62,   -63,   -67,  -268,
  -268,  -268,  -306,  -339,  -340,   -79,  -646,   -83,   -91,   -93,
  -647,  -535,  -536,  -647,  -647,  -647,  -647,  -227,  -647,  -635,
  -241,  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -289,  -290,
  -620,  -293,  -295,  -302,  -304,  -314,  -316,  -647,  -647,   -58,
   -58,  -633,  -647,  -324,  -331,  -647,  -341,  -342,  -344,  -345,
  -346,  -347,  -348,  -349,  -350,  -351,  -352,  -353,  -362,  -417,
  -465,  -466,  -467,  -468,  -469,  -646,  -472,  -646,  -646,  -646,
  -646,  -646,  -646,  -508,  -509,  -646,  -511,  -517,  -519,  -520,
  -521,  -522,  -618,  -524,  -525,  -619,  -527,  -528,  -529,  -530,
  -531,  -532,  -533,  -534,  -539,  -540,  1091,    -3,  -634,  -642,
  -643,  -644,    -7,  -647,  -647,  -647,  -647,  -647,  -647,   -24,
  -647,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -132,  -133,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,
  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,   -29,
  -129,  -646,  -647,  -647,  -647,  -647,  -647,  -646,  -647,  -647,
  -630,  -647,  -647,  -635,  -636,   -55,  -647,  -535,  -536,  -647,
  -291,  -647,  -647,  -233,  -647,  -646,  -647,  -647,  -647,  -647,
  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -242,
  -243,  -244,  -245,  -647,  -355,  -445,  -425,  -647,  -631,  -632,
   -68,  -646,  -647,  -313,  -354,  -429,  -438,  -440,   -74,  -435,
   -75,  -635,   -76,  -248,  -263,  -646,  -646,  -267,  -647,  -273,
  -647,  -646,  -612,  -647,  -647,   -77,   -78,  -633,   -17,   -18,
  -647,   -21,   -22,   -81,  -646,  -635,  -647,   -84,   -87,  -646,
   -99,  -100,  -647,  -647,  -107,  -306,  -309,  -635,  -647,  -339,
  -340,  -343,  -436,  -647,   -89,  -647,   -95,  -301,  -518,  -647,
  -221,  -222,  -647,  -234,  -647,  -646,  -297,  -635,  -646,  -646,
  -315,   -57,  -647,  -647,  -647,  -646,  -646,  -633,  -647,  -634,
  -535,  -536,  -647,  -647,  -291,  -647,  -372,  -373,  -647,  -327,
  -647,  -122,  -123,  -162,  -163,  -164,  -180,  -185,  -192,  -195,
  -334,  -647,  -535,  -536,  -607,  -608,  -567,  -470,  -647,  -493,
  -647,  -495,  -647,  -497,  -647,  -647,  -477,  -647,  -647,  -483,
  -647,  -647,  -489,  -647,  -647,  -491,  -647,  -510,  -512,  -513,
  -514,  -515,    -6,  -645,   -30,   -31,   -32,   -33,   -34,   -10,
   -11,  -647,   -26,   -27,   -28,  -130,  -647,   -37,   -39,  -278,
  -647,  -647,  -277,   -38,  -647,   -41,  -647,  -291,   -49,   -50,
  -203,  -253,  -273,   -52,   -53,   -42,  -204,  -253,  -635,  -258,
  -259,  -646,  -646,  -621,  -622,  -268,  -433,  -623,  -624,  -622,
  -621,  -268,  -432,  -434,  -623,  -624,   -48,  -211,   -54,  -635,
  -312,  -647,  -647,  -647,  -646,  -301,  -647,  -647,  -647,  -212,
  -213,  -214,  -215,  -216,  -217,  -218,  -219,  -223,  -224,  -225,
  -226,  -228,  -229,  -230,  -231,  -232,  -235,  -236,  -237,  -238,
  -635,  -246,  -647,  -446,  -268,  -621,  -622,   -65,   -69,  -635,
  -269,  -442,  -445,  -635,  -308,  -264,  -647,  -272,  -265,  -647,
  -270,  -647,  -274,  -647,  -615,  -617,   -16,  -634,   -20,  -647,
  -635,   -80,  -299,   -96,   -85,  -647,  -635,  -646,  -647,  -647,
  -106,  -647,  -518,  -647,   -92,   -97,  -647,  -647,  -647,  -647,
  -247,  -239,  -647,  -457,  -647,  -635,  -296,  -249,  -639,  -639,
  -647,  -647,  -610,  -639,  -647,  -646,  -363,  -364,  -646,  -647,
  -647,  -647,  -647,  -647,  -358,  -452,  -646,  -647,  -647,  -301,
   -58,  -117,  -118,  -647,  -120,  -647,  -291,  -646,  -647,  -332,
  -545,  -336,  -628,  -629,  -647,  -418,  -567,  -421,  -606,  -606,
  -550,  -552,  -552,  -552,  -566,  -568,  -569,  -570,  -571,  -572,
  -573,  -574,  -575,  -647,  -577,  -579,  -581,  -586,  -588,  -589,
  -591,  -596,  -598,  -599,  -601,  -602,  -603,  -647,  -471,  -494,
  -499,  -500,  -502,  -473,  -496,  -474,  -498,  -475,  -476,  -647,
  -479,  -481,  -647,  -482,  -485,  -486,  -647,  -487,  -488,  -647,
  -516,  -646,   -25,  -647,   -35,  -281,  -647,  -647,  -646,  -647,
  -647,  -647,  -437,  -647,  -260,  -262,  -647,  -647,   -70,  -256,
  -257,  -430,  -647,  -647,   -72,  -431,  -311,  -637,  -621,  -622,
  -621,  -622,  -635,  -647,  -424,  -646,   -64,  -426,  -442,  -255,
  -647,  -443,  -647,  -307,  -646,  -271,  -275,  -647,  -613,  -614,
  -647,   -19,   -23,   -82,  -647,   -88,   -94,  -635,  -621,  -622,
  -646,  -103,  -105,  -647,   -90,  -647,  -210,  -220,  -635,  -646,
  -356,  -646,  -294,  -361,  -298,  -250,  -641,  -640,  -252,  -641,
  -303,  -305,  -611,  -646,  -365,  -646,   -59,  -366,  -367,  -319,
  -320,  -647,  -322,  -647,  -635,  -621,  -622,  -625,  -300,  -646,
  -117,  -118,  -119,  -647,  -647,  -646,  -325,  -541,  -543,  -328,
  -646,  -646,  -567,  -567,  -647,  -635,  -647,  -635,  -647,  -548,
  -549,  -647,  -647,  -559,  -647,  -562,  -647,  -564,  -647,  -374,
  -647,  -376,  -378,  -381,  -384,  -635,  -580,  -590,  -600,  -604,
  -647,  -646,  -478,  -480,  -484,  -490,  -492,  -647,  -131,  -279,
  -647,  -635,  -621,  -622,  -622,  -621,  -254,  -647,  -638,  -646,
   -44,  -206,   -45,  -207,   -71,   -46,  -209,   -47,  -208,   -73,
  -647,  -647,  -647,  -647,  -437,  -647,  -406,  -407,  -635,  -409,
  -646,  -428,  -427,  -647,  -439,  -646,  -441,  -266,  -276,  -616,
   -86,  -101,   -98,  -310,   -13,   -15,  -357,  -359,  -646,  -464,
  -458,  -646,  -459,  -460,  -639,  -647,  -360,  -368,  -647,  -370,
  -646,  -647,   -60,  -321,  -448,  -647,  -647,  -437,  -647,  -117,
  -118,  -121,  -635,  -646,  -647,  -647,  -647,  -647,  -635,  -647,
  -337,  -609,  -419,  -646,  -646,  -411,  -635,  -606,  -587,  -605,
  -551,  -552,  -552,  -578,  -552,  -552,  -597,  -552,  -575,  -592,
  -635,  -647,  -647,  -383,  -576,  -501,  -504,  -505,  -506,  -507,
  -647,   -12,  -280,  -437,   -43,  -205,  -261,  -647,  -240,  -606,
  -606,  -388,  -646,  -646,  -646,  -405,  -647,  -635,  -575,  -583,
  -584,  -594,  -447,   -66,  -646,  -646,  -463,  -647,  -647,  -462,
  -251,  -317,  -647,  -371,  -318,  -449,  -647,  -646,  -323,  -437,
  -647,  -647,  -329,  -333,  -335,  -544,  -546,  -545,  -647,  -647,
  -647,  -420,  -547,  -647,  -555,  -647,  -557,  -647,  -560,  -647,
  -563,  -565,  -375,  -377,  -379,  -382,  -503,  -647,  -386,  -387,
  -396,  -390,  -398,  -647,  -401,  -647,  -403,  -408,  -647,  -647,
  -582,  -647,  -444,  -646,  -646,  -108,  -109,  -647,  -647,  -116,
  -461,  -646,  -450,  -647,  -646,  -326,  -542,  -646,  -646,  -422,
  -423,  -635,  -413,  -415,  -416,  -552,  -552,  -552,  -552,  -647,
  -647,  -606,  -585,  -389,  -646,  -646,  -646,  -646,  -595,  -646,
  -410,  -593,  -647,  -301,   -14,  -457,  -646,  -647,  -647,  -115,
  -646,  -451,  -453,  -454,  -455,  -647,  -647,  -412,  -647,  -647,
  -553,  -556,  -558,  -561,  -380,  -385,  -647,  -393,  -647,  -395,
  -647,  -399,  -647,  -402,  -404,  -300,  -625,  -456,  -635,  -621,
  -622,  -625,  -114,  -369,  -330,  -338,  -414,  -552,  -646,  -646,
  -646,  -646,  -437,  -554,  -647,  -391,  -394,  -397,  -400,  -646,
  -392 ]

clist = [
'6,573,4,232,294,294,294,228,144,144,380,448,285,289,131,278,296,296',
'296,554,698,350,295,295,295,455,461,855,235,276,344,331,331,139,220',
'419,316,719,352,353,408,761,357,508,147,147,597,565,568,439,128,317',
'439,9,338,355,356,439,313,9,518,315,334,432,433,509,331,662,893,127',
'896,445,144,690,504,132,466,752,769,770,131,502,785,845,861,695,351',
'351,695,830,351,973,604,389,923,391,393,396,399,402,405,886,144,389',
'414,415,416,417,1012,544,725,728,975,346,388,732,779,1014,292,305,306',
'1028,639,1,406,642,2,280,288,290,587,634,589,636,138,358,640,651,844',
'640,935,701,529,219,367,428,421,736,862,277,688,653,351,351,351,351',
'342,560,687,384,561,365,926,756,381,591,698,345,612,347,555,348,19,349',
'368,446,873,588,19,9,467,875,1007,773,775,777,370,760,418,590,764,957',
'974,236,1028,412,1076,925,927,294,1011,595,236,236,236,1014,19,322,322',
'882,973,456,431,431,386,741,518,766,511,512,835,426,866,685,472,449',
'465,427,438,1054,698,438,19,695,695,1042,438,236,236,934,743,236,362',
'443,444,316,1024,871,851,900,833,468,469,294,294,937,767,387,682,896',
'390,988,392,294,395,893,296,398,401,455,461,404,295,905,790,296,893',
'791,407,449,874,295,891,779,888,1022,594,903,,,,,,517,517,892,,894,19',
'389,,824,604,236,236,236,236,19,541,705,538,285,331,,316,289,131,714',
'692,316,523,707,,,,569,841,548,,331,,,559,563,1073,710,313,,558,530',
',313,534,542,536,710,557,562,,545,577,924,527,1043,,570,571,1034,893',
',744,528,331,867,331,,131,962,510,,,526,,351,710,,,513,612,,793,,,793',
',,,,,,,19,236,436,236,236,436,236,,978,979,436,236,236,779,779,940,',
'1008,,,,,,,19,,698,144,,913,572,878,879,659,467,702,446,,663,,814,,',
'876,877,,819,670,,,,801,652,675,,294,,,517,517,236,236,669,147,456,455',
'461,837,,,236,,,,,,,604,604,465,,449,964,966,,968,970,840,971,19,683',
',439,19,695,1015,670,322,19,,949,439,439,,716,,,439,439,694,1055,669',
'1025,,322,1026,,,294,,810,812,,,19,,815,817,1067,,456,779,779,236,19',
'19,,,331,,456,,,,449,465,331,585,872,585,,,,612,612,465,950,294,545',
',710,,668,612,,612,545,959,674,456,947,852,,887,733,749,,735,,,718,',
'837,449,465,,,737,1078,,,,,,758,,,,,,,,,,,,1050,1051,1052,1053,,686',
',,,,759,,,928,,,765,,811,813,,,,,816,818,,920,,,,,,294,929,994,439,',
',,1001,,,,,456,832,236,,,1044,809,6,144,797,914,,,,449,465,,1083,,,438',
'663,,,,,,,,438,438,,,798,,438,438,,,1045,1046,826,,,147,1082,663,,831',
',517,670,,,675,19,331,880,,,9,,,322,,236,669,331,854,431,,322,,,,849',
'545,853,,,236,,,663,,294,,842,,859,,859,,19,,456,19,,,,,,,612,236,,885',
'868,465,,,449,,,915,,236,,,144,928,,236,928,,,,811,813,818,816,1021',
',,920,,,920,929,920,663,929,,,929,,929,,,910,,,,982,984,986,,,722,,',
',,,,517,,885,,,438,,,,739,740,,742,1068,19,,,,,,436,236,942,932,,,826',
'710,,436,436,928,,,29,436,436,,951,,29,936,939,,,920,663,920,,920,,920',
'929,943,929,29,929,,929,915,,,,,29,29,29,322,29,,351,,,920,,,958,952',
'322,,929,956,,,,,351,,,,1057,1059,1061,1063,29,1064,,,,29,29,885,,29',
',,,,,,,,19,981,981,981,331,,236,,,,,19,19,331,,992,993,895,470,897,',
',,,,,889,,1004,889,,,1085,1086,1087,1088,,,,,,1006,19,1090,,,,,29,,',
',,29,29,29,29,29,436,,,,,,331,,1037,,863,,,922,849,1047,,1035,514,,',
',,19,1040,859,,,921,,,294,,,,,,,,,,19,531,456,,981,981,981,981,,981',
'236,465,19,,,,449,465,,,859,,,,,19,236,,,,,663,,556,,19,19,,,,,,29,29',
'29,29,29,29,29,,,,29,29,29,,,,981,981,981,981,,,,,29,429,442,981,,,',
',,,,,,,,990,,941,,,19,19,,944,997,,,,,,948,,,19,,,29,29,953,954,,1016',
',1017,,1018,29,,,,,,,,,,,,,,,1027,,1029,,29,,,,29,889,,,921,29,1031',
'921,520,921,522,19,,524,525,,,,19,,676,,,,19,19,,,,,,29,,,,,,,,,29,29',
'29,1005,,,,,,,,,,236,,,,,1077,564,689,,,,693,1079,,1080,32,1081,,,,',
'32,,,,,,921,703,921,,921,,921,706,,32,,,,1089,,,,,32,32,32,,32,,,,724',
',921,,,,,,,,,,,,,,,,,,,,32,,,,,32,32,,,32,1074,1075,655,,,,,,,,,,,,',
',,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,32,32,32,32,32,,,',
',,,,,,29,,,,,,,,,,29,,,696,,,564,,699,,,,,,,29,,,,,,,,,,,,,29,,,29,',
',,,,,,29,,,,,,,843,,,,,29,,,,,,29,,,,,,,32,32,32,32,32,32,32,,,,32,32',
'32,,,,,,,,,,,,32,,,,,881,,,,,,,,,,786,,,,,,,,,,904,29,,,,,,29,29,,,32',
'32,,,,29,29,,,,32,29,29,,,,,,,799,,,,,,,,696,564,32,,,,32,,,,,32,,,',
',,,,,,,,,,,,,,,,,,838,,,839,32,,,,,,,,,32,32,32,,,,,,,955,,850,,,,29',
'696,961,,564,,29,,,,,29,29,,,,972,,864,,,,,,,,,,,,,,,,,,,,,,,,29,,,',
',,,,,,,899,,,,,29,,,,,,,,,,,,,,,,,912,,,,,,29,,,,,,,,,,243,,,,,,,,29',
'293,293,293,,,32,,,,29,,29,,340,341,,343,,,,,,,,29,29,,,,,,,,,29,29',
',,,,945,,,,,,,,,,,,,,,,,,32,,,,,,,,,,32,,,,,,,,,,,,,,,32,,29,29,,,,',
'564,,,,,32,,29,32,,,,,,,,32,,,,,,,,,,,,32,,1002,,,,32,,,,,,,,,,,,,,',
',,,,,29,,,,,,,29,,,,,,29,29,,,,,,,,,,,,,,,,,,,1041,,,,32,,,,,29,32,32',
'293,441,,,447,293,,32,32,447,,,,32,32,,,,,,,,243,,,479,480,481,482,483',
'484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500',
',,16,,501,,,,16,,,,293,293,,,,,,,,,293,,,,,,,293,,293,,,293,293,16,',
',,,,,32,,,,,,32,,,,,32,32,,,,,,,16,,,,,,,,,,366,550,,551,,,,293,293',
',,,,32,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,32,,,,16,,,,,,,,,16,18',
',,,32,,18,,,,,,,,32,,32,,,,,,,293,,,,,,32,32,,,,18,,,,,32,32,,,,,,,',
',,,,,,,,,,,,18,,,,,,,293,,447,447,447,,,,,,,,,,,,16,,434,,,434,,32,32',
',434,,,,,,,,,,32,,,,16,,293,,,293,,293,,,,,,,,,,,,18,,,,293,,,,,18,',
',,447,717,,,,,,,,,,32,,,,,,,32,,,,,,32,32,,,,,293,,,16,,,,16,,,,,16',
',,,,,,,,,,32,,,,,,,,,,,,,,,16,,293,,,,,,,,16,16,18,,18,,,18,,,,,18,',
',,,,20,,,,,,20,,18,,,,,,293,447,293,,,806,,,293,293,447,447,,,,,447',
'447,,,20,324,324,,,,,,,,,,,,,,,,,,,293,,,293,,20,,,,,,,,,,364,,,18,',
',,18,,293,,,18,,293,,,293,,,,,,,,,,,,,,293,,,,,,,18,,,,,293,,,,,18,18',
',,,,,,20,,,,,,,,,20,293,,,,,,,,,,,,,,,,,,16,,,,293,,,,41,,,447,,,41',
',,,,,,,,,447,447,447,447,,918,,,,,,,,,16,,,16,41,320,320,,,,,,,,,,,',
',,,,,,,,,20,,437,41,293,437,,,,,437,,,360,,,382,,,,,,,,20,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,293,447,,,16,,,,,,434,,,,41,,18,,,434,434,,,41,',
'434,434,,,,293,,,,20,,,,20,,,,324,20,,,,,,,,,,,18,,,18,,324,,,,,,,,',
',20,,,,,,,,,,20,20,,,,,,,293,,,,,586,,586,,,,,,,,16,,,,,41,,,,,,16,16',
',,,,,293,,,,,,,,,,,41,,,,,,,,,18,,,,16,,18,,,,,,,,,18,18,,,,434,18,18',
',,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,,,,41,,,,41,16,,,320,41,,,,,,,,16,,',
',,,,,320,,,,,16,,,,,41,,,,,16,16,18,,,41,41,,,,,,,18,18,20,,,382,,382',
',,324,,,,42,,,,324,,42,,,,,,,,,,,18,,,,,,,16,16,20,,1000,20,,,,18,42',
'321,321,16,,,,,,,,,,,,,,,,,,,18,,,,42,,,,,,,,,,361,,,383,18,,,,,,,,',
',16,,18,,,,,16,,,,,,16,16,18,,,,,,,,,,18,18,,20,,,,,,437,,,,,,,,42,437',
'437,,,,,437,437,42,,,,,,,,,,,,,,,41,,,,,,,,320,,18,18,,,,324,320,,,',
',,,18,,,324,,,,,,,,,,,,41,,,41,,,,,,,,,,,,,,,,,,,20,,,,,,,,,42,18,20',
'20,,,,,18,,,,,,18,18,,,,,,,,,42,,,,,,,,909,20,,,,,,,,,,,,,,,,437,,,',
',,41,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,42,20,,,42,,,,321,42,,,,20,',
',,,,320,,,,,,321,20,,,,320,,,,,42,20,20,,,,,,,,42,42,,,,,,,,,,,,383',
',383,,,,41,,,,,,,,,,,41,41,,,,,,586,,,,,20,20,,,999,,,,,,,,,20,,,,,',
'41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,586,,,41,,20,,,,,,,20,,,,,,20',
'20,,41,,,,,,,,,,,,41,,,,,,,,,,,,,41,,,,,,,,,,41,41,,,,,,,,,,,,,,,,,',
'42,,,,,,,,321,,,,,,,,321,,,,,,,,,,,382,,,,,41,41,,,995,,42,,,42,,,,41',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,382,,,,,41,,,,,,,41,,,,,,41',
'41,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,321,,,,,,,,,,,321,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,',
',,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,42,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,42,,,,,,,,,,,,,42,,,,,',
',,,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,383,,,,,42,42',
',,996,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,383,,,,,42',
',,,,,,42,,,,,,42,42' ]
        racc_goto_table = arr = ::Array.new(3842, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,113,2,40,46,46,46,38,71,71,70,36,85,85,118,38,84,84,84,12,220,102',
'82,82,82,50,50,107,27,171,40,78,78,22,22,10,14,15,24,24,70,121,24,52',
'73,73,170,106,106,25,8,63,25,9,76,42,42,25,59,9,87,60,64,29,29,36,78',
'37,210,5,215,33,71,53,50,7,33,68,153,153,118,172,147,17,109,88,31,31',
'88,160,31,145,204,6,158,6,6,6,6,6,6,162,71,6,24,24,24,24,164,65,83,83',
'148,9,188,83,146,165,58,58,58,216,192,1,188,192,3,51,51,51,69,193,69',
'193,11,5,193,13,16,193,18,20,21,23,26,30,32,43,45,49,55,74,31,31,31',
'31,79,81,86,98,101,115,162,117,122,123,220,124,209,125,126,127,35,128',
'129,75,130,131,35,9,75,132,133,207,207,207,134,135,9,136,137,138,149',
'35,216,7,164,150,156,46,163,166,35,35,35,165,35,35,35,167,145,85,82',
'82,168,113,87,169,174,175,177,14,178,180,38,6,71,27,27,148,220,27,35',
'88,88,181,27,35,35,160,182,35,35,31,31,14,158,68,183,147,53,31,31,46',
'46,184,170,187,36,215,189,162,190,46,191,210,84,194,195,50,50,196,82',
'197,198,84,210,199,202,6,203,82,208,146,212,213,219,146,,,,,,6,6,159',
',159,35,6,,37,204,35,35,35,35,35,40,65,38,85,78,,14,85,118,65,172,14',
'188,36,,,,24,37,38,,78,,,84,84,107,50,59,,82,60,,59,64,76,60,50,6,6',
',63,38,159,8,109,,14,14,17,210,,36,9,78,37,78,,118,153,58,,,5,,31,50',
',,58,209,,193,,,193,,,,,,,,35,35,35,35,35,35,35,,153,153,35,35,35,146',
'146,83,,121,,,,,,,35,,220,71,,37,5,170,170,38,75,10,75,,40,,52,,,12',
'12,,52,85,,,,36,22,85,,46,,,6,6,35,35,6,73,85,50,50,87,,,35,,,,,,,204',
'204,71,,6,207,207,,207,207,65,207,35,40,,25,35,88,159,85,35,35,,37,25',
'25,,75,,,25,25,84,153,6,159,,35,159,,,46,,33,33,,,35,,33,33,15,,85,146',
'146,35,35,35,,,78,,85,,,,6,71,78,35,36,35,,,,209,209,71,12,46,63,,50',
',51,209,,209,63,12,51,85,106,29,,152,14,42,,14,,,31,,87,6,71,,,118,159',
',,,,,6,,,,,,,,,,,,207,207,207,207,,51,,,,,31,,,209,,,31,,75,75,,,,,75',
'75,,152,,,,,,46,211,106,25,,,,106,,,,,85,102,35,,,113,84,6,71,2,33,',
',,6,71,,207,,,27,40,,,,,,,,27,27,,,22,,27,27,,,12,12,6,,,73,37,40,,171',
',6,85,,,85,35,78,70,,,9,,,35,,35,6,78,84,82,,35,,,,6,63,6,,,35,,,40',
',46,,63,,6,,6,,35,,85,35,,,,,,,209,35,,40,14,71,,,6,,,75,,35,,,71,209',
',35,209,,,,75,75,75,75,152,,,152,,,152,211,152,40,211,,,211,,211,,,14',
',,,155,155,155,,,100,,,,,,,6,,40,,,27,,,,100,100,,100,36,35,,,,,,35',
'35,24,14,,,6,50,,35,35,209,,,54,35,35,,24,,54,14,6,,,152,40,152,,152',
',152,211,14,211,54,211,,211,75,,,,,54,54,54,35,54,,31,,,152,,,14,118',
'35,,211,118,,,,,31,,,,155,155,155,155,54,155,,,,54,54,40,,54,,,,,,,',
',35,6,6,6,78,,35,,,,,35,35,78,,14,14,157,61,157,,,,,,,154,,14,154,,',
'155,155,155,155,,,,,,118,35,155,,,,,54,,,,,54,54,54,54,54,35,,,,,,78',
',38,,100,,,157,6,40,,14,61,,,,,35,14,6,,,154,,,46,,,,,,,,,,35,61,85',
',6,6,6,6,,6,35,71,35,,,,6,71,,,6,,,,,35,35,,,,,40,,61,,35,35,,,,,,54',
'54,54,54,54,54,54,,,,54,54,54,,,,6,6,6,6,,,,,54,80,80,6,,,,,,,,,,,,35',
',100,,,35,35,,100,35,,,,,,100,,,35,,,54,54,100,100,,157,,157,,157,54',
',,,,,,,,,,,,,,157,,157,,54,,,,54,154,,,154,54,35,154,80,154,80,35,,80',
'80,,,,35,,61,,,,35,35,,,,,,54,,,,,,,,,54,54,54,100,,,,,,,,,,35,,,,,157',
'80,61,,,,61,157,,157,57,157,,,,,57,,,,,,154,61,154,,154,,154,61,,57',
',,,157,,,,,57,57,57,,57,,,,61,,154,,,,,,,,,,,,,,,,,,,,57,,,,,57,57,',
',57,100,100,80,,,,,,,,,,,,,,,,,,,,54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,57,,,,,57,57,57,57,57,,,,,,,,,,54,,,,,,,,,,54,,,80,,,80,,80,,,,,,',
'54,,,,,,,,,,,,,54,,,54,,,,,,,,54,,,,,,,61,,,,,54,,,,,,54,,,,,,,57,57',
'57,57,57,57,57,,,,57,57,57,,,,,,,,,,,,57,,,,,61,,,,,,,,,,80,,,,,,,,',
',61,54,,,,,,54,54,,,57,57,,,,54,54,,,,57,54,54,,,,,,,80,,,,,,,,80,80',
'57,,,,57,,,,,57,,,,,,,,,,,,,,,,,,,,,,80,,,80,57,,,,,,,,,57,57,57,,,',
',,,61,,80,,,,54,80,61,,80,,54,,,,,54,54,,,,61,,80,,,,,,,,,,,,,,,,,,',
',,,,,54,,,,,,,,,,,80,,,,,54,,,,,,,,,,,,,,,,,80,,,,,,54,,,,,,,,,,41,',
',,,,,,54,41,41,41,,,57,,,,54,,54,,41,41,,41,,,,,,,,54,54,,,,,,,,,54',
'54,,,,,80,,,,,,,,,,,,,,,,,,57,,,,,,,,,,57,,,,,,,,,,,,,,,57,,54,54,,',
',,80,,,,,57,,54,57,,,,,,,,57,,,,,,,,,,,,57,,80,,,,57,,,,,,,,,,,,,,,',
',,,,54,,,,,,,54,,,,,,54,54,,,,,,,,,,,,,,,,,,,80,,,,57,,,,,54,57,57,41',
'41,,,41,41,,57,57,41,,,,57,57,,,,,,,,41,,,41,41,41,41,41,41,41,41,41',
'41,41,41,41,41,41,41,41,41,41,41,41,41,,,28,,41,,,,28,,,,41,41,,,,,',
',,,41,,,,,,,41,,41,,,41,41,28,,,,,,,57,,,,,,57,,,,,57,57,,,,,,,28,,',
',,,,,,,28,41,,41,,,,41,41,,,,,57,,,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,',
',,,,,57,,,,28,,,,,,,,,28,34,,,,57,,34,,,,,,,,57,,57,,,,,,,41,,,,,,57',
'57,,,,34,,,,,57,57,,,,,,,,,,,,,,,,,,,,34,,,,,,,41,,41,41,41,,,,,,,,',
',,,28,,28,,,28,,57,57,,28,,,,,,,,,,57,,,,28,,41,,,41,,41,,,,,,,,,,,',
'34,,,,41,,,,,34,,,,41,41,,,,,,,,,,57,,,,,,,57,,,,,,57,57,,,,,41,,,28',
',,,28,,,,,28,,,,,,,,,,,57,,,,,,,,,,,,,,,28,,41,,,,,,,,28,28,34,,34,',
',34,,,,,34,,,,,,39,,,,,,39,,34,,,,,,41,41,41,,,41,,,41,41,41,41,,,,',
'41,41,,,39,39,39,,,,,,,,,,,,,,,,,,,41,,,41,,39,,,,,,,,,,39,,,34,,,,34',
',41,,,34,,41,,,41,,,,,,,,,,,,,,41,,,,,,,34,,,,,41,,,,,34,34,,,,,,,39',
',,,,,,,,39,41,,,,,,,,,,,,,,,,,,28,,,,41,,,,66,,,41,,,66,,,,,,,,,,41',
'41,41,41,,41,,,,,,,,,28,,,28,66,66,66,,,,,,,,,,,,,,,,,,,,,39,,39,66',
'41,39,,,,,39,,,66,,,66,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,41',
',,28,,,,,,28,,,,66,,34,,,28,28,,,66,,28,28,,,,41,,,,39,,,,39,,,,39,39',
',,,,,,,,,,34,,,34,,39,,,,,,,,,,39,,,,,,,,,,39,39,,,,,,,41,,,,,39,,39',
',,,,,,,28,,,,,66,,,,,,28,28,,,,,,41,,,,,,,,,,,66,,,,,,,,,34,,,,28,,34',
',,,,,,,,34,34,,,,28,34,34,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,66,,,,66',
'28,,,66,66,,,,,,,,28,,,,,,,,66,,,,,28,,,,,66,,,,,28,28,34,,,66,66,,',
',,,,34,34,39,,,66,,66,,,39,,,,67,,,,39,,67,,,,,,,,,,,34,,,,,,,28,28',
'39,,28,39,,,,34,67,67,67,28,,,,,,,,,,,,,,,,,,,34,,,,67,,,,,,,,,,67,',
',67,34,,,,,,,,,,28,,34,,,,,28,,,,,,28,28,34,,,,,,,,,,34,34,,39,,,,,',
'39,,,,,,,,67,39,39,,,,,39,39,67,,,,,,,,,,,,,,,66,,,,,,,,66,,34,34,,',
',39,66,,,,,,,34,,,39,,,,,,,,,,,,66,,,66,,,,,,,,,,,,,,,,,,,39,,,,,,,',
',67,34,39,39,,,,,34,,,,,,34,34,,,,,,,,,67,,,,,,,,39,39,,,,,,,,,,,,,',
',,39,,,,,,66,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,67,39,,,67,,,,67,67',
',,,39,,,,,,66,,,,,,67,39,,,,66,,,,,67,39,39,,,,,,,,67,67,,,,,,,,,,,',
'67,,67,,,,66,,,,,,,,,,,66,66,,,,,,39,,,,,39,39,,,39,,,,,,,,,39,,,,,',
'66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,66,,39,,,,,,,39,,,,,,39,39',
',66,,,,,,,,,,,,66,,,,,,,,,,,,,66,,,,,,,,,,66,66,,,,,,,,,,,,,,,,,,67',
',,,,,,,67,,,,,,,,67,,,,,,,,,,,66,,,,,66,66,,,66,,67,,,67,,,,66,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,66,,,,,,,66,,,,,,66,66,,',
',,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,67,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,67,67',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,67,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,67,,,,,,,,,,,,,67,,,,,,,,,,67,67',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,67,67,,,67,,,,,,',
',,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,67,,,,,,,67,,,',
',,67,67' ]
        racc_goto_check = arr = ::Array.new(3842, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   123,     0,   126,   nil,    64,    -2,    67,    45,    51,
  -103,   124,  -326,  -283,     0,  -516,  -581,  -636,  -704,   nil,
  -386,  -170,    22,   131,   -29,  -174,    72,     5,  1925,  -159,
   -77,    19,     7,  -155,  2061,   170,  -216,  -381,   -12,  2296,
   -19,  1656,   -14,  -422,   nil,  -588,   -28,   nil,   nil,   122,
  -203,    98,  -237,  -438,   839,  -357,   nil,  1219,    86,    22,
    25,   704,   nil,    14,    24,  -226,  2458,  2833,  -506,  -238,
   -65,    -3,   nil,    33,  -274,   -51,    10,   nil,    -6,   109,
   863,  -191,   -10,  -448,   -16,   -17,  -346,  -236,  -431,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,
   246,  -189,   -44,   nil,   nil,   nil,  -305,  -706,   nil,  -651,
   nil,   nil,   nil,  -357,   nil,    89,   nil,  -424,     9,   nil,
   nil,  -549,    89,  -216,   106,   107,  -176,   108,   109,   101,
  -580,  -192,  -578,  -770,   112,  -402,  -191,  -401,  -689,   nil,
   nil,   nil,   nil,   nil,   nil,  -810,  -497,  -531,  -790,  -709,
  -631,   nil,  -204,  -520,   177,  -127,  -630,   162,  -734,  -477,
  -596,   nil,  -666,  -760,  -852,  -843,  -185,  -557,   125,  -378,
  -340,     4,  -194,   nil,   -68,   -68,   nil,  -471,  -521,   nil,
  -280,  -769,  -335,  -473,  -596,   nil,   nil,   165,    19,   163,
   164,   165,  -273,  -259,   167,   167,   169,  -517,  -357,  -355,
   nil,   nil,   173,  -477,  -294,   nil,   nil,  -418,  -490,  -218,
  -704,  -197,  -484,  -692,   nil,  -704,  -862,   nil,   nil,   -99,
  -499 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   308,     7,   359,   311,
   nil,   nil,   nil,   nil,   553,   nil,   nil,   nil,   nil,   307,
   309,   nil,   nil,   nil,   nil,    14,    15,    21,   241,   nil,
   nil,    17,   nil,   435,   242,   339,   nil,   nil,   754,   240,
   471,    24,   nil,   nil,   354,   nil,    25,    26,    27,   nil,
   713,   nil,   nil,   nil,   328,   nil,    28,   325,   450,    35,
   nil,   nil,    37,    40,    39,   nil,   237,   238,   584,   nil,
   146,   458,   145,    91,   nil,   440,   107,    47,    50,   273,
   299,   nil,   451,   nil,   452,   463,   671,   515,   297,   282,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
   nil,   nil,   283,    65,    66,    67,   nil,   nil,    68,   857,
    69,    70,    71,   nil,    72,   nil,    73,   nil,   566,    74,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,
   275,   721,   848,   575,   858,   781,   611,   nil,   782,   783,
  1023,   919,   599,   nil,   600,   nil,   nil,   601,   nil,   603,
   nil,   827,   nil,   nil,   nil,   609,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   462,   nil,   nil,   691,   nil,   nil,   503,
   nil,   nil,   nil,   nil,   nil,    90,    92,    94,   nil,   nil,
   nil,   nil,   nil,   629,   nil,   nil,   nil,   nil,   nil,   nil,
   103,   104,   nil,   nil,   890,   763,   598,   nil,   602,   898,
   614,   616,   617,   930,   620,   621,   931,   624,   627,   nil,
   302 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_none,
  0, 157, :_reduce_9,
  3, 153, :_reduce_10,
  0, 159, :_reduce_11,
  4, 156, :_reduce_12,
  0, 164, :_reduce_13,
  6, 158, :_reduce_14,
  3, 158, :_reduce_15,
  2, 160, :_reduce_16,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  3, 165, :_reduce_19,
  2, 165, :_reduce_20,
  1, 166, :_reduce_none,
  0, 167, :_reduce_22,
  3, 166, :_reduce_23,
  0, 178, :_reduce_24,
  4, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  3, 155, :_reduce_28,
  2, 155, :_reduce_29,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  3, 155, :_reduce_34,
  4, 155, :_reduce_35,
  1, 155, :_reduce_none,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  3, 155, :_reduce_39,
  1, 155, :_reduce_none,
  3, 171, :_reduce_41,
  3, 171, :_reduce_42,
  6, 171, :_reduce_43,
  5, 171, :_reduce_44,
  5, 171, :_reduce_45,
  5, 171, :_reduce_46,
  5, 171, :_reduce_47,
  3, 171, :_reduce_48,
  1, 179, :_reduce_49,
  1, 179, :_reduce_none,
  1, 177, :_reduce_none,
  3, 177, :_reduce_52,
  3, 177, :_reduce_53,
  3, 177, :_reduce_54,
  2, 177, :_reduce_55,
  1, 177, :_reduce_none,
  1, 170, :_reduce_57,
  0, 190, :_reduce_58,
  0, 191, :_reduce_59,
  4, 188, :_reduce_60,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 193, :_reduce_none,
  4, 193, :_reduce_64,
  0, 201, :_reduce_65,
  4, 198, :_reduce_66,
  1, 200, :_reduce_67,
  2, 192, :_reduce_68,
  3, 192, :_reduce_69,
  4, 192, :_reduce_70,
  5, 192, :_reduce_71,
  4, 192, :_reduce_72,
  5, 192, :_reduce_73,
  2, 192, :_reduce_74,
  2, 192, :_reduce_75,
  2, 192, :_reduce_76,
  2, 192, :_reduce_77,
  2, 192, :_reduce_78,
  1, 172, :_reduce_none,
  3, 172, :_reduce_80,
  1, 206, :_reduce_none,
  3, 206, :_reduce_82,
  1, 205, :_reduce_83,
  2, 205, :_reduce_84,
  3, 205, :_reduce_85,
  5, 205, :_reduce_86,
  2, 205, :_reduce_87,
  4, 205, :_reduce_88,
  2, 205, :_reduce_89,
  4, 205, :_reduce_90,
  1, 205, :_reduce_91,
  3, 205, :_reduce_92,
  1, 209, :_reduce_none,
  3, 209, :_reduce_94,
  2, 208, :_reduce_95,
  3, 208, :_reduce_96,
  1, 211, :_reduce_97,
  3, 211, :_reduce_98,
  1, 210, :_reduce_99,
  1, 210, :_reduce_100,
  4, 210, :_reduce_101,
  3, 210, :_reduce_102,
  3, 210, :_reduce_103,
  3, 210, :_reduce_104,
  3, 210, :_reduce_105,
  2, 210, :_reduce_106,
  1, 210, :_reduce_107,
  1, 174, :_reduce_108,
  1, 174, :_reduce_109,
  4, 174, :_reduce_110,
  3, 174, :_reduce_111,
  3, 174, :_reduce_112,
  3, 174, :_reduce_113,
  3, 174, :_reduce_114,
  2, 174, :_reduce_115,
  1, 174, :_reduce_116,
  1, 214, :_reduce_117,
  1, 214, :_reduce_none,
  2, 215, :_reduce_119,
  1, 215, :_reduce_120,
  3, 215, :_reduce_121,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_125,
  1, 216, :_reduce_none,
  1, 168, :_reduce_127,
  1, 168, :_reduce_none,
  1, 169, :_reduce_129,
  0, 220, :_reduce_130,
  4, 169, :_reduce_131,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  3, 187, :_reduce_203,
  3, 187, :_reduce_204,
  6, 187, :_reduce_205,
  5, 187, :_reduce_206,
  5, 187, :_reduce_207,
  5, 187, :_reduce_208,
  5, 187, :_reduce_209,
  4, 187, :_reduce_210,
  3, 187, :_reduce_211,
  3, 187, :_reduce_212,
  3, 187, :_reduce_213,
  3, 187, :_reduce_214,
  3, 187, :_reduce_215,
  3, 187, :_reduce_216,
  3, 187, :_reduce_217,
  3, 187, :_reduce_218,
  3, 187, :_reduce_219,
  4, 187, :_reduce_220,
  2, 187, :_reduce_221,
  2, 187, :_reduce_222,
  3, 187, :_reduce_223,
  3, 187, :_reduce_224,
  3, 187, :_reduce_225,
  3, 187, :_reduce_226,
  1, 187, :_reduce_none,
  3, 187, :_reduce_228,
  3, 187, :_reduce_229,
  3, 187, :_reduce_230,
  3, 187, :_reduce_231,
  3, 187, :_reduce_232,
  2, 187, :_reduce_233,
  2, 187, :_reduce_234,
  3, 187, :_reduce_235,
  3, 187, :_reduce_236,
  3, 187, :_reduce_237,
  3, 187, :_reduce_238,
  3, 187, :_reduce_239,
  6, 187, :_reduce_240,
  1, 187, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  3, 223, :_reduce_246,
  3, 223, :_reduce_247,
  1, 226, :_reduce_248,
  1, 227, :_reduce_none,
  2, 227, :_reduce_250,
  4, 227, :_reduce_251,
  2, 227, :_reduce_252,
  1, 221, :_reduce_none,
  3, 221, :_reduce_254,
  3, 231, :_reduce_255,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  2, 182, :_reduce_260,
  4, 182, :_reduce_261,
  2, 182, :_reduce_262,
  1, 204, :_reduce_263,
  2, 204, :_reduce_264,
  2, 204, :_reduce_265,
  4, 204, :_reduce_266,
  1, 204, :_reduce_267,
  0, 235, :_reduce_268,
  2, 197, :_reduce_269,
  2, 234, :_reduce_270,
  2, 233, :_reduce_271,
  1, 233, :_reduce_none,
  1, 228, :_reduce_273,
  2, 228, :_reduce_274,
  3, 228, :_reduce_275,
  4, 228, :_reduce_276,
  1, 176, :_reduce_277,
  1, 176, :_reduce_278,
  3, 175, :_reduce_279,
  4, 175, :_reduce_280,
  2, 175, :_reduce_281,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_292,
  0, 270, :_reduce_293,
  4, 224, :_reduce_294,
  0, 271, :_reduce_295,
  3, 224, :_reduce_296,
  0, 272, :_reduce_297,
  4, 224, :_reduce_298,
  3, 224, :_reduce_299,
  3, 224, :_reduce_300,
  2, 224, :_reduce_301,
  0, 273, :_reduce_302,
  4, 224, :_reduce_303,
  0, 274, :_reduce_304,
  4, 224, :_reduce_305,
  1, 224, :_reduce_306,
  4, 224, :_reduce_307,
  3, 224, :_reduce_308,
  1, 224, :_reduce_309,
  5, 224, :_reduce_310,
  4, 224, :_reduce_311,
  3, 224, :_reduce_312,
  2, 224, :_reduce_313,
  1, 224, :_reduce_none,
  2, 224, :_reduce_315,
  1, 224, :_reduce_316,
  6, 224, :_reduce_317,
  6, 224, :_reduce_318,
  4, 224, :_reduce_319,
  4, 224, :_reduce_320,
  5, 224, :_reduce_321,
  4, 224, :_reduce_322,
  6, 224, :_reduce_323,
  0, 275, :_reduce_324,
  0, 276, :_reduce_325,
  7, 224, :_reduce_326,
  0, 277, :_reduce_327,
  0, 278, :_reduce_328,
  0, 279, :_reduce_329,
  9, 224, :_reduce_330,
  0, 280, :_reduce_331,
  0, 281, :_reduce_332,
  6, 224, :_reduce_333,
  0, 282, :_reduce_334,
  6, 224, :_reduce_335,
  0, 283, :_reduce_336,
  0, 284, :_reduce_337,
  9, 224, :_reduce_338,
  1, 224, :_reduce_339,
  1, 224, :_reduce_340,
  1, 224, :_reduce_341,
  1, 224, :_reduce_342,
  1, 181, :_reduce_343,
  1, 245, :_reduce_none,
  1, 251, :_reduce_none,
  1, 254, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 260, :_reduce_none,
  1, 262, :_reduce_351,
  1, 265, :_reduce_352,
  1, 266, :_reduce_353,
  1, 285, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 162, :_reduce_none,
  1, 290, :_reduce_none,
  1, 246, :_reduce_none,
  1, 203, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  2, 252, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 253, :_reduce_none,
  5, 253, :_reduce_369,
  1, 255, :_reduce_none,
  2, 255, :_reduce_371,
  1, 261, :_reduce_none,
  1, 261, :_reduce_373,
  1, 291, :_reduce_none,
  3, 291, :_reduce_375,
  1, 294, :_reduce_376,
  3, 294, :_reduce_377,
  1, 293, :_reduce_378,
  3, 293, :_reduce_379,
  5, 293, :_reduce_380,
  1, 293, :_reduce_381,
  3, 293, :_reduce_382,
  2, 295, :_reduce_383,
  1, 295, :_reduce_384,
  4, 296, :_reduce_385,
  2, 296, :_reduce_386,
  2, 296, :_reduce_387,
  1, 296, :_reduce_388,
  2, 301, :_reduce_389,
  1, 301, :_reduce_none,
  6, 302, :_reduce_391,
  8, 302, :_reduce_392,
  4, 302, :_reduce_393,
  6, 302, :_reduce_394,
  4, 302, :_reduce_395,
  2, 302, :_reduce_396,
  6, 302, :_reduce_397,
  2, 302, :_reduce_398,
  4, 302, :_reduce_399,
  6, 302, :_reduce_400,
  2, 302, :_reduce_401,
  4, 302, :_reduce_402,
  2, 302, :_reduce_403,
  4, 302, :_reduce_404,
  1, 302, :_reduce_405,
  1, 306, :_reduce_406,
  1, 306, :_reduce_407,
  3, 307, :_reduce_408,
  1, 307, :_reduce_409,
  4, 307, :_reduce_410,
  1, 308, :_reduce_none,
  4, 308, :_reduce_412,
  1, 309, :_reduce_413,
  3, 309, :_reduce_414,
  1, 310, :_reduce_415,
  1, 310, :_reduce_none,
  0, 314, :_reduce_417,
  0, 315, :_reduce_418,
  5, 250, :_reduce_419,
  4, 312, :_reduce_420,
  1, 312, :_reduce_421,
  3, 313, :_reduce_422,
  3, 313, :_reduce_423,
  3, 317, :_reduce_424,
  2, 194, :_reduce_425,
  4, 194, :_reduce_426,
  5, 194, :_reduce_427,
  5, 194, :_reduce_428,
  2, 249, :_reduce_429,
  4, 249, :_reduce_430,
  4, 249, :_reduce_431,
  3, 249, :_reduce_432,
  3, 249, :_reduce_433,
  3, 249, :_reduce_434,
  2, 249, :_reduce_435,
  1, 249, :_reduce_436,
  4, 249, :_reduce_437,
  0, 320, :_reduce_438,
  4, 248, :_reduce_439,
  0, 321, :_reduce_440,
  4, 248, :_reduce_441,
  0, 322, :_reduce_442,
  0, 323, :_reduce_443,
  4, 199, :_reduce_444,
  0, 325, :_reduce_445,
  0, 326, :_reduce_446,
  4, 318, :_reduce_447,
  1, 324, :_reduce_448,
  2, 324, :_reduce_449,
  3, 324, :_reduce_450,
  4, 324, :_reduce_451,
  0, 328, :_reduce_452,
  6, 259, :_reduce_453,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  6, 161, :_reduce_456,
  0, 161, :_reduce_457,
  1, 329, :_reduce_458,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 330, :_reduce_461,
  1, 330, :_reduce_none,
  2, 163, :_reduce_463,
  1, 163, :_reduce_none,
  1, 236, :_reduce_465,
  1, 236, :_reduce_none,
  1, 237, :_reduce_467,
  1, 332, :_reduce_468,
  1, 332, :_reduce_none,
  2, 332, :_reduce_470,
  3, 333, :_reduce_471,
  1, 333, :_reduce_472,
  3, 238, :_reduce_473,
  3, 239, :_reduce_474,
  3, 240, :_reduce_475,
  3, 240, :_reduce_476,
  1, 337, :_reduce_477,
  3, 337, :_reduce_478,
  1, 338, :_reduce_none,
  2, 338, :_reduce_480,
  3, 242, :_reduce_481,
  3, 242, :_reduce_482,
  1, 340, :_reduce_483,
  3, 340, :_reduce_484,
  3, 241, :_reduce_485,
  3, 241, :_reduce_486,
  3, 243, :_reduce_487,
  3, 243, :_reduce_488,
  1, 341, :_reduce_489,
  3, 341, :_reduce_490,
  1, 342, :_reduce_491,
  3, 342, :_reduce_492,
  1, 334, :_reduce_493,
  2, 334, :_reduce_494,
  1, 335, :_reduce_495,
  2, 335, :_reduce_496,
  1, 336, :_reduce_497,
  2, 336, :_reduce_498,
  1, 339, :_reduce_499,
  0, 344, :_reduce_500,
  3, 339, :_reduce_501,
  0, 345, :_reduce_502,
  4, 339, :_reduce_503,
  1, 343, :_reduce_504,
  1, 343, :_reduce_505,
  1, 343, :_reduce_506,
  1, 343, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  2, 346, :_reduce_510,
  1, 346, :_reduce_511,
  1, 348, :_reduce_none,
  1, 348, :_reduce_none,
  1, 348, :_reduce_none,
  1, 348, :_reduce_none,
  3, 347, :_reduce_516,
  1, 331, :_reduce_none,
  2, 331, :_reduce_518,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 213, :_reduce_528,
  1, 213, :_reduce_529,
  1, 213, :_reduce_530,
  1, 213, :_reduce_531,
  1, 213, :_reduce_532,
  1, 213, :_reduce_533,
  1, 213, :_reduce_534,
  1, 244, :_reduce_535,
  1, 244, :_reduce_536,
  1, 180, :_reduce_537,
  1, 180, :_reduce_538,
  1, 185, :_reduce_539,
  1, 185, :_reduce_540,
  0, 349, :_reduce_541,
  4, 263, :_reduce_542,
  1, 263, :_reduce_543,
  3, 267, :_reduce_544,
  0, 351, :_reduce_545,
  3, 267, :_reduce_546,
  4, 350, :_reduce_547,
  2, 350, :_reduce_548,
  2, 350, :_reduce_549,
  1, 350, :_reduce_none,
  2, 353, :_reduce_551,
  0, 353, :_reduce_552,
  6, 316, :_reduce_553,
  8, 316, :_reduce_554,
  4, 316, :_reduce_555,
  6, 316, :_reduce_556,
  4, 316, :_reduce_557,
  6, 316, :_reduce_558,
  2, 316, :_reduce_559,
  4, 316, :_reduce_560,
  6, 316, :_reduce_561,
  2, 316, :_reduce_562,
  4, 316, :_reduce_563,
  2, 316, :_reduce_564,
  4, 316, :_reduce_565,
  1, 316, :_reduce_566,
  0, 316, :_reduce_567,
  1, 311, :_reduce_568,
  1, 311, :_reduce_569,
  1, 311, :_reduce_570,
  1, 311, :_reduce_571,
  1, 292, :_reduce_none,
  1, 292, :_reduce_573,
  1, 355, :_reduce_none,
  1, 356, :_reduce_none,
  3, 356, :_reduce_576,
  1, 303, :_reduce_577,
  3, 303, :_reduce_578,
  1, 357, :_reduce_none,
  2, 358, :_reduce_580,
  1, 358, :_reduce_581,
  2, 359, :_reduce_582,
  1, 359, :_reduce_583,
  1, 297, :_reduce_none,
  3, 297, :_reduce_585,
  1, 352, :_reduce_none,
  3, 352, :_reduce_587,
  1, 360, :_reduce_none,
  1, 360, :_reduce_none,
  2, 298, :_reduce_590,
  1, 298, :_reduce_591,
  3, 361, :_reduce_592,
  3, 362, :_reduce_593,
  1, 304, :_reduce_594,
  3, 304, :_reduce_595,
  1, 354, :_reduce_596,
  3, 354, :_reduce_597,
  1, 363, :_reduce_none,
  1, 363, :_reduce_none,
  2, 305, :_reduce_600,
  1, 305, :_reduce_601,
  1, 364, :_reduce_none,
  1, 364, :_reduce_none,
  2, 300, :_reduce_604,
  2, 299, :_reduce_605,
  0, 299, :_reduce_606,
  1, 268, :_reduce_none,
  0, 365, :_reduce_608,
  4, 268, :_reduce_609,
  1, 247, :_reduce_610,
  2, 247, :_reduce_none,
  1, 230, :_reduce_none,
  3, 230, :_reduce_613,
  3, 366, :_reduce_614,
  2, 366, :_reduce_615,
  4, 366, :_reduce_616,
  2, 366, :_reduce_617,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 184, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 186, :_reduce_none,
  1, 186, :_reduce_none,
  2, 207, :_reduce_none,
  2, 183, :_reduce_none,
  0, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 264, :_reduce_642,
  1, 264, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_645,
  0, 152, :_reduce_646 ]

racc_reduce_n = 647

racc_shift_n = 1091

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tLOWEST => 142,
  :tEQL => 143,
  :tBDOT2 => 144,
  :tBDOT3 => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLOWEST",
  "tEQL",
  "tBDOT2",
  "tBDOT3",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "@5",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@6",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@7",
  "@8",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@9",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@10",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "@28",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "case_args",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "ssym",
  "dsym",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 11
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      # TODO: move down to main match so I can just use val

                      warn "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug 12

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      result = val[2] # wtf?

    result
end

def _reduce_24(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_27(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_28(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_29(val, _values, result)
                      result = val[1]

    result
end

def _reduce_30(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_31(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_33(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_34(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_35(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug 13
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_38(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_43(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_44(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_45(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_47(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_48(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_49(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_55(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      blk, _, (msg, _line), args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      # self.env.unextend

    result
end

def _reduce_67(val, _values, result)
                      (msg, line), = val
                      result = new_call(nil, msg.to_sym).line line

    result
end

def _reduce_68(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_69(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_70(val, _values, result)
                      lhs, callop, (op, _), args = val

                      result = new_call lhs, op.to_sym, args, callop
                      result.line lhs.line

    result
end

def _reduce_71(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_72(val, _values, result)
                      lhs, _, (id, line), args = val

                      result = new_call lhs, id.to_sym, args
                      result.line line

    result
end

def _reduce_73(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_75(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_77(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]

    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_83(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_84(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_85(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_87(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_88(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_89(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_90(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_91(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_92(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]

    result
end

def _reduce_95(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_97(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_102(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_103(val, _values, result)
                      recv, _, (id, _line) = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_104(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 14
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, (id, _line) = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 15
                        yyerror "dynamic constant assignment"
                      end

                      _, (id, l) = val

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_107(val, _values, result)
                      ref, = val

                      self.backref_assign_error ref

    result
end

def _reduce_108(val, _values, result)
                      var, = val

                      result = self.assignable var

    result
end

def _reduce_109(val, _values, result)
                      var, = val

                      result = self.assignable var

                      debug 16

    result
end

def _reduce_110(val, _values, result)
                      lhs, _, args, _ = val

                      result = self.aryset lhs, args

    result
end

def _reduce_111(val, _values, result)
                      lhs, op, (id, _line) = val

                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_112(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_attrasgn lhs, id

    result
end

def _reduce_113(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_114(val, _values, result)
                      expr, _, (id, _line) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 17
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      _, (id, l) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 18
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      _, (name, line) = val
                      result = s(:colon3, name.to_sym).line line

    result
end

def _reduce_120(val, _values, result)
                      (id, line), = val
                      result = [id.to_sym, line] # TODO: sexp?

    result
end

def _reduce_121(val, _values, result)
                      pval, _, (name, _line) = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END

    result
end

# reduce 126 omitted

def _reduce_127(val, _values, result)
                      (id, line), = val

                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_130(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_131(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

def _reduce_203(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_204(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_205(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_208(val, _values, result)
                      lhs, _, (id, _line), (op, _), rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_209(val, _values, result)
                      lhs1, _, (lhs2, _line), op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_210(val, _values, result)
                      _, (lhs, line), op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_211(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_212(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_213(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      _, (num, line), _, arg = val
                      lit = s(:lit, num).line line
                      result = new_call(new_call(lit, :"**", argl(arg)), :"-@")


    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 227 omitted

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_231(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_232(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_233(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_234(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_235(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_237(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_238(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_239(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_240(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      lhs, (op, _), rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_247(val, _values, result)
                      lhs, (op, _), rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_248(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_251(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_252(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_255(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      result = args val

    result
end

def _reduce_261(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_262(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_263(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_264(val, _values, result)
                      result = call_args val

    result
end

def _reduce_265(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_266(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_267(val, _values, result)
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_269(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_270(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_271(val, _values, result)
                      result = val[1]

    result
end

# reduce 272 omitted

def _reduce_273(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_274(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_275(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_276(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_277(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_278(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_279(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_280(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_281(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      (msg, line), = val
                      result = new_call nil, msg.to_sym
                      result.line line

    result
end

def _reduce_293(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_294(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_295(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_296(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_297(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_298(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_299(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_300(val, _values, result)
                      expr, _, (id, _line) = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_301(val, _values, result)
                      _, (id, line) = val

                      result = s(:colon3, id.to_sym).line line

    result
end

def _reduce_302(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_303(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_304(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_305(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_306(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_307(val, _values, result)
                      (_, line), _, args, _ = val

                      result = new_yield(args).line line

    result
end

def _reduce_308(val, _values, result)
                      (_, line), _, _ = val

                      result = new_yield.line line

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val

                      result = new_yield.line line

    result
end

def _reduce_310(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_311(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_312(val, _values, result)
                      debug 20

    result
end

def _reduce_313(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 314 omitted

def _reduce_315(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_316(val, _values, result)
                      expr, = val
                      result = expr

    result
end

def _reduce_317(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_318(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_319(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_320(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_321(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_322(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_323(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_325(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_326(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_329(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_330(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_331(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_332(val, _values, result)
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_334(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

    result
end

def _reduce_335(val, _values, result)
                      result, in_def = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.ignore_body_comments

    result
end

def _reduce_336(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL

    result
end

def _reduce_338(val, _values, result)
                      # [kdef, recv, _, _, (name, line), in_def, args, body, kend]
                      # =>
                      # [kdef, recv, (name, line), in_def, args, body, kend]

                      val.delete_at 3
                      val.delete_at 2

                      result, in_def = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.ignore_body_comments

    result
end

def _reduce_339(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_340(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_341(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_342(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_343(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_352(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_353(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = val[1]

    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

def _reduce_376(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_377(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_378(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_379(val, _values, result)
                      args, _, rest = val

                      result = block_var args, rest

    result
end

def _reduce_380(val, _values, result)
                      lhs, _, splat, _, rhs = val

                      result = block_var lhs, splat, rhs

    result
end

def _reduce_381(val, _values, result)
                      rest, = val

                      result = block_var rest

    result
end

def _reduce_382(val, _values, result)
                      splat, _, rest = val

                      result = block_var splat, rest

    result
end

def _reduce_383(val, _values, result)
                      _, (id, line) = val

                      result = args ["*#{id}".to_sym]
                      result.line line

    result
end

def _reduce_384(val, _values, result)
                      result = args [:*]
                      result.line lexer.lineno # FIX: tSTAR -> line

    result
end

def _reduce_385(val, _values, result)
                      result = call_args val

    result
end

def _reduce_386(val, _values, result)
                      result = call_args val

    result
end

def _reduce_387(val, _values, result)
                      result = call_args val

    result
end

def _reduce_388(val, _values, result)
                      (id, line), = val
                      result = call_args [id]
                      result.line line

    result
end

def _reduce_389(val, _values, result)
                      result = args val

    result
end

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      result = args val

    result
end

def _reduce_392(val, _values, result)
                      result = args val

    result
end

def _reduce_393(val, _values, result)
                      result = args val

    result
end

def _reduce_394(val, _values, result)
                      result = args val

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

def _reduce_396(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args val

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
 result = 0
    result
end

def _reduce_407(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_408(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_410(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      result = args val

    result
end

def _reduce_413(val, _values, result)
                      result = args val

    result
end

def _reduce_414(val, _values, result)
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      (id, line), = val
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 416 omitted

def _reduce_417(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_418(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_419(val, _values, result)
                      _, (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_422(val, _values, result)
                      result = val[1]

    result
end

def _reduce_423(val, _values, result)
                      result = val[1]

    result
end

def _reduce_424(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_425(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      cmd, blk = val

                      syntax_error "Both block arg and actual block given." if
                        cmd.block_pass?

                      if inverted? val then
                        val = invert_block_call val
                        cmd, blk = val
                      end

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_426(val, _values, result)
                      lhs, _, (id, _line), args = val

                      result = new_call lhs, id.to_sym, args

    result
end

def _reduce_427(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_428(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_429(val, _values, result)
                      call, args = val

                      result = call.concat args.sexp_body if args

    result
end

def _reduce_430(val, _values, result)
                      recv, call_op, (op, _line), args = val

                      result = new_call recv, op.to_sym, args, call_op

    result
end

def _reduce_431(val, _values, result)
                      recv, _, (op, _line), args = val

                      result = new_call recv, op.to_sym, args

    result
end

def _reduce_432(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_call lhs, id.to_sym

    result
end

def _reduce_433(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_434(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_435(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_436(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_438(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_439(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_440(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_441(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_442(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_443(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_444(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_445(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_446(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_447(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_448(val, _values, result)
                      arg, = val

                      result = s(:array, arg).line arg.line

    result
end

def _reduce_449(val, _values, result)
                      _, arg = val

                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_450(val, _values, result)
                      args, _, id = val

                      result = self.list_append args, id

    result
end

def _reduce_451(val, _values, result)
                      args, _, _, id = val

                      result = self.list_append args, s(:splat, id).line(id.line)

    result
end

def _reduce_452(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_453(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line val[1]
                      result << val[5] if val[5]

    result
end

# reduce 454 omitted

# reduce 455 omitted

def _reduce_456(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_457(val, _values, result)
                      result = nil

    result
end

def _reduce_458(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 459 omitted

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = val[1]

    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 464 omitted

def _reduce_465(val, _values, result)
                      (lit, line), = val
                      result = s(:lit, lit).line line

    result
end

# reduce 466 omitted

def _reduce_467(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_468(val, _values, result)
                      debug 37

    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_471(val, _values, result)
                      (_, line), str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_DEDENT

                      result = str.line line

    result
end

def _reduce_472(val, _values, result)
                      result = new_string val

    result
end

def _reduce_473(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_474(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_475(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_476(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_477(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_478(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_481(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_482(val, _values, result)
                      (_, line), list, _, = val
                      list.line line
                      result = list

    result
end

def _reduce_483(val, _values, result)
                      result = new_symbol_list

    result
end

def _reduce_484(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_485(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_486(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_487(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_488(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_489(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_490(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_491(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_493(val, _values, result)
                      line = prev_value_to_lineno _values.last
                      result = s(:str, +"").line line

    result
end

def _reduce_494(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_495(val, _values, result)
                      result = nil

    result
end

def _reduce_496(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_497(val, _values, result)
                      result = nil

    result
end

def _reduce_498(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_499(val, _values, result)
                      result = new_string val

    result
end

def _reduce_500(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_501(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_502(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_503(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.pop
                      lexer.cmdarg.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug 38
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_504(val, _values, result)
                      (id, line), = val
                      result = s(:gvar, id.to_sym).line line

    result
end

def _reduce_505(val, _values, result)
                      (id, line), = val
                      result = s(:ivar, id.to_sym).line line

    result
end

def _reduce_506(val, _values, result)
                      (id, line), = val
                      result = s(:cvar, id.to_sym).line line

    result
end

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      _, (id, line) = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

def _reduce_511(val, _values, result)
                      (id, line), = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug 39
                      end

    result
end

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      _, (num, line) = val
                      result = [-num, line]

    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_529(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_530(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_531(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_535(val, _values, result)
                      raise "NO: #{val.inspect}" if Sexp === val.first
                      (var, line), = val
                      result = Sexp === var ? var : self.gettable(var)
                      result.line line

    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_537(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]
                      debug 40

    result
end

def _reduce_539(val, _values, result)
                      (ref, line), = val
                      result = s(:nth_ref, ref).line line

    result
end

def _reduce_540(val, _values, result)
                      (ref, line), = val
                      result = s(:back_ref, ref).line line

    result
end

def _reduce_541(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_542(val, _values, result)
                      result = val[2]

    result
end

def _reduce_543(val, _values, result)
                      result = nil

    result
end

def _reduce_544(val, _values, result)
                      result = end_args val

    result
end

def _reduce_545(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_546(val, _values, result)
                      result = end_args val

    result
end

def _reduce_547(val, _values, result)
                      result = args val

    result
end

def _reduce_548(val, _values, result)
                      result = args val

    result
end

def _reduce_549(val, _values, result)
                      result = args val

    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = val[1]

    result
end

def _reduce_552(val, _values, result)
                      result = nil

    result
end

def _reduce_553(val, _values, result)
                      result = args val

    result
end

def _reduce_554(val, _values, result)
                      result = args val

    result
end

def _reduce_555(val, _values, result)
                      result = args val

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val
                      # result.line lexer.lineno

    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      (id, line), = val
                      identifier = id.to_sym
                      self.env[identifier] = :lvar

                      result = [identifier, line]

    result
end

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      _, margs, _ = val

                      result = margs

    result
end

def _reduce_577(val, _values, result)
                      result = new_arg val

    result
end

def _reduce_578(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << (Sexp === item ? item : item.first)

    result
end

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_581(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_582(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_583(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      result = args val

    result
end

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      _, (id, line) = val

                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"**#{name}", line]

    result
end

def _reduce_591(val, _values, result)
                      id = :"**"
                      self.env[id] = :lvar # TODO: needed?!?
                      result = [id, lexer.lineno] # TODO: tPOW/tDSTAR include lineno

    result
end

def _reduce_592(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs
                      # TODO: detect duplicate names

    result
end

def _reduce_593(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs

    result
end

def _reduce_594(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_595(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_596(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_597(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 598 omitted

# reduce 599 omitted

def _reduce_600(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      _, (id, line) = val
                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"*#{name}", line]

    result
end

def _reduce_601(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = [name, lexer.lineno] # FIX: tSTAR to include lineno

    result
end

# reduce 602 omitted

# reduce 603 omitted

def _reduce_604(val, _values, result)
                      _, (id, line) = val
                      identifier = id.to_sym

                      self.env[identifier] = :lvar
                      result = ["&#{identifier}".to_sym, line]

    result
end

def _reduce_605(val, _values, result)
                      _, arg = val
                      result = arg

    result
end

def _reduce_606(val, _values, result)
                      result = nil

    result
end

# reduce 607 omitted

def _reduce_608(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_609(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_610(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 611 omitted

# reduce 612 omitted

def _reduce_613(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_614(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_615(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_616(val, _values, result)
                      (_, line), sym, _, value = val

                      sym.sexp_type = :dsym

                      result = s(:array, sym, value).line line

    result
end

def _reduce_617(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

def _reduce_642(val, _values, result)
 yyerrok
    result
end

# reduce 643 omitted

# reduce 644 omitted

def _reduce_645(val, _values, result)
 yyerrok
    result
end

def _reduce_646(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
