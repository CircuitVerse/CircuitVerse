# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby32 < Parser::Base


  def version
    32
  end

  def default_encoding
    Encoding::UTF_8
  end

  def endless_method_name(name_t)
    if !%w[=== == != <= >=].include?(name_t[0]) && name_t[0].end_with?('=')
      diagnostic :error, :endless_setter, nil, name_t
    end
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
    @max_numparam_stack.push(static: true)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
    @max_numparam_stack.pop
  end

  def try_declare_numparam(node)
    name = node.children[0]

    if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && @context.in_dynamic_block?
      # definitely an implicit param
      location = node.loc.expression

      if max_numparam_stack.has_ordinary_params?
        diagnostic :error, :ordinary_param_defined, nil, [nil, location]
      end

      raw_max_numparam_stack = max_numparam_stack.stack.dup
      # ignore current block scope
      raw_max_numparam_stack.pop

      raw_max_numparam_stack.reverse_each do |outer_scope|
        if outer_scope[:static]
          # found an outer scope that can't have numparams
          # like def/class/etc
          break
        else
          outer_scope_has_numparams = outer_scope[:value] > 0

          if outer_scope_has_numparams
            diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
          else
            # for now it's ok, but an outer scope can also be a block
            # like proc { _1; proc { proc { proc { _2 }} }}
            # with numparams, so we need to continue
          end
        end
      end

      static_env.declare(name)
      max_numparam_stack.register(name[1].to_i)

      true
    else
      false
    end
  end
##### State transition tables begin ###

clist = [
'-615,-116,-118,-124,1036,-121,830,-615,-615,-615,-728,-120,-615,-615',
'-615,927,-615,311,622,239,-122,1212,221,222,-615,311,-615,-615,-615',
'663,311,-117,-102,665,698,-118,-615,-615,-123,-615,-615,-615,-615,-615',
'-88,894,240,-728,-119,-620,622,622,699,-122,622,835,-620,894,240,629',
'240,-121,-124,-118,240,622,-615,-615,-615,-615,-615,-615,-615,-615,-615',
'-615,-615,-615,-615,-615,-119,622,-615,-615,-615,-120,-615,-615,-714',
'306,-615,-116,-123,-615,-615,662,-615,-715,-615,664,-615,-626,-615,-615',
'310,-615,-615,-615,-615,-615,126,-615,310,-615,-620,125,240,310,-715',
'-116,-118,-124,-117,-121,-116,-118,-124,-615,-121,-120,-615,-615,-615',
'-615,-120,-615,126,-615,-122,-719,1002,125,-615,-122,-109,-615,-719',
'-719,-719,-117,-714,-719,-719,-719,-117,-719,-123,-110,-112,122,-116',
'-123,-113,-719,-719,-719,-719,-719,126,126,-112,-115,126,125,125,-719',
'-719,125,-719,-719,-719,-719,-719,126,104,105,991,-110,125,-111,-728',
'-109,927,135,-111,221,222,-627,-119,126,-107,-114,524,-119,125,-719',
'-719,-719,-719,-719,-719,-719,-719,-719,-719,-719,-719,-719,-719,221',
'222,-719,-719,-719,-112,923,-719,927,218,-719,240,-108,-719,-719,233',
'-719,-617,-719,926,-719,602,-719,-719,-617,-719,-719,-719,-719,-719',
'1001,-719,-719,-719,-110,-714,-111,-117,-109,650,104,105,-124,106,107',
'-112,219,-719,-112,-618,-719,-719,-719,-719,-509,-719,-618,-719,237',
'-719,-112,629,-719,220,921,-120,-719,-719,-719,835,240,-740,-719,-719',
'-110,-719,-111,-110,-109,-111,-123,-109,-617,-719,-719,221,222,311,922',
'-110,223,-111,233,-109,240,-719,-719,300,-719,-719,-719,-719,-719,652',
'651,648,698,493,-619,490,489,488,498,491,-618,-619,877,-124,106,107',
'1064,684,501,-119,950,-719,-719,-719,-719,-719,-719,-719,-719,-719,-719',
'-719,-719,-719,-719,685,237,-719,-719,-719,496,690,-719,-121,-740,-719',
'650,306,-719,506,505,509,508,-719,361,-719,502,-719,-719,650,-719,-719',
'-719,-719,-719,-320,-719,-719,-719,-619,310,-118,-320,-320,-320,126',
'-119,-320,-320,-320,125,-320,-719,-115,264,-719,-719,90,-719,-320,-719',
'-320,-320,-320,-121,-124,487,-719,233,91,-120,-320,-320,362,-320,-320',
'-320,-320,-320,92,652,651,648,233,126,650,261,240,650,125,263,262,227',
'652,651,653,635,802,431,304,961,-320,-320,-320,-320,-320,-320,-320,-320',
'-320,-320,-320,-320,-320,-320,126,-623,-320,-320,-320,125,924,-320,-623',
'-740,-320,472,650,-320,-320,650,-320,650,-320,-633,-320,512,-320,-320',
'-740,-320,-320,-320,-320,-320,650,-320,-612,-320,652,651,657,652,651',
'-612,-612,-612,228,523,-612,-612,-612,-320,-612,525,-320,-320,-320,-320',
'1064,-320,-612,-320,-612,-612,-612,614,-320,635,616,-122,-623,961,-612',
'-612,526,-612,-612,-612,-612,-612,652,651,239,652,651,652,651,655,650',
'428,861,126,933,863,430,429,125,929,652,651,648,930,-612,-612,-612,-612',
'-612,-612,-612,-612,-612,-612,-612,-612,-612,-612,560,877,-612,-612',
'-612,650,-612,-612,221,222,-612,635,227,-612,-612,636,-612,-612,-612',
'304,-612,572,-612,-612,-612,-612,-612,-612,-612,-612,126,-612,685,-612',
'574,125,652,651,666,493,576,490,489,488,498,491,684,-612,-109,-615,-612',
'-612,-612,-612,501,-612,-615,-612,126,-719,-118,614,-612,125,616,-612',
'-719,-719,-719,652,651,661,-719,-719,-624,-719,496,228,135,-112,-87',
'-624,-612,-719,-719,506,505,509,508,240,-624,-121,502,-110,240,-719',
'-719,1196,-719,-719,-719,-719,-719,614,587,-119,616,493,-320,490,489',
'488,498,491,-615,-320,-622,588,240,595,-715,315,501,-622,-320,-719,-719',
'-719,-719,-719,-719,-719,-719,-719,-719,-719,-719,-719,-719,-624,-627',
'-719,-719,-719,496,690,-719,614,602,-719,613,-621,-719,506,505,509,508',
'-719,-621,-719,502,-719,-719,240,-719,-719,-719,-719,-719,-320,-719',
'-719,-719,-320,221,222,-320,-320,-320,1149,1150,-622,-320,-320,233,-320',
'-719,-108,233,-719,-719,306,-111,-320,-719,-114,951,952,599,-117,487',
'-719,-626,605,-120,-320,-320,-123,-320,-320,-320,-320,-320,986,894,264',
'-621,493,-625,490,489,488,498,491,1159,-625,490,489,488,608,491,240',
'501,617,-625,-320,-320,-320,-320,-320,-320,-320,-320,-320,-320,-320',
'-320,-320,-320,-107,618,-320,-320,-320,496,689,-320,986,894,-320,576',
'-116,-320,506,505,509,508,-320,629,-320,502,-320,-320,420,-320,-320',
'-320,-320,-320,-320,-320,633,-320,-625,509,508,-320,-320,-320,281,282',
'634,-320,-320,642,-320,-320,667,670,-320,-320,671,-320,-320,-320,-293',
'955,673,959,958,487,-320,960,674,-122,-320,-320,678,-320,-320,-320,-320',
'-320,240,682,280,279,493,227,490,489,488,498,491,493,594,490,489,488',
'683,491,306,501,957,592,-320,-320,-320,-320,-320,-320,-320,-320,-320',
'-320,-320,-320,-320,-320,696,697,-320,-320,-320,496,689,-320,240,701',
'-320,704,714,-320,506,505,509,508,-320,705,-320,502,-320,-320,707,-320',
'-320,-320,-320,-320,756,-320,709,-320,228,-385,-311,721,722,726,501',
'227,227,-311,756,728,734,-320,604,1164,-320,-320,-311,-113,501,-320',
'227,522,1162,735,264,487,-320,1187,264,-122,7,81,82,83,11,65,640,264',
'264,71,72,240,502,790,75,-715,73,74,76,35,36,79,80,240,1057,240,502',
'240,84,33,32,114,113,115,116,-311,-102,23,1057,805,228,228,240,10,53',
'9,12,118,117,119,108,64,110,109,111,228,112,120,121,227,104,105,49,50',
'48,-356,632,-615,608,227,816,821,-356,240,-615,630,638,823,826,-715',
'831,-356,832,-615,45,640,836,38,860,864,66,67,227,865,68,-294,40,878',
'560,1187,52,560,-715,890,264,894,855,856,640,24,857,120,121,912,102',
'90,93,94,915,95,97,96,98,916,228,240,919,91,101,240,-356,928,-615,945',
'228,85,261,92,106,107,263,262,46,47,333,81,82,83,11,65,946,947,963,71',
'72,965,300,228,75,-719,73,74,76,35,36,79,80,129,130,131,132,133,84,33',
'32,114,113,115,116,971,493,23,490,489,488,973,491,10,53,335,12,118,117',
'119,108,64,110,109,111,975,112,120,121,227,104,105,49,50,48,227,677',
'-719,574,-321,576,816,226,714,-719,675,-321,240,306,-714,306,224,718',
'-719,45,-321,816,38,264,894,66,67,227,988,68,989,40,240,240,521,52,493',
'-719,490,489,488,999,491,522,24,240,-295,240,1010,102,90,93,94,1014',
'95,97,96,98,-293,228,1018,704,91,101,699,228,1021,-719,1023,-321,85',
'1025,92,106,107,1027,1027,46,47,333,81,82,83,11,65,240,776,240,71,72',
'240,1055,228,75,-714,73,74,76,35,36,79,80,1058,927,498,973,1070,84,33',
'32,114,113,115,116,501,1159,23,490,489,488,240,491,10,53,335,12,118',
'117,119,108,64,110,109,111,816,112,120,121,-321,104,105,49,50,48,-320',
'-321,-612,509,508,1087,1089,-320,502,-612,-321,1094,-715,1095,-714,1100',
'-320,1101,-612,45,1102,-296,38,1115,1116,66,67,1117,240,68,240,40,240',
'240,240,52,240,-714,129,130,131,132,133,498,24,927,1124,1125,240,102',
'90,93,94,501,95,97,96,98,1129,-321,1130,1132,91,101,704,-320,1135,-612',
'1138,1140,85,1142,92,106,107,240,-385,46,47,333,81,82,83,11,65,1154',
'509,508,71,72,1165,502,1166,75,1027,73,74,76,35,36,79,80,256,1027,1027',
'1185,1188,84,33,32,114,113,115,116,1193,1194,23,129,130,131,132,133',
'10,53,335,12,118,117,119,108,64,110,109,111,696,112,120,121,1116,104',
'105,49,50,48,264,268,269,270,271,281,282,276,277,272,273,1204,257,258',
'1204,704,274,275,1206,45,1208,255,38,1210,1212,66,67,1212,240,68,1027',
'40,261,-715,267,52,263,262,-714,259,260,280,279,265,24,266,1229,1212',
'1212,102,90,93,94,1212,95,97,96,98,3,,,,91,101,,278,,,,,85,,92,106,107',
',,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,129',
'130,131,132,133,84,33,32,114,113,115,116,,,23,,,,,679,10,53,335,12,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,268,269',
'270,271,281,282,276,277,272,273,,257,258,,,274,275,,45,,,38,,,66,67',
',,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,278,,-265,,,85,,92,106,107,,,46,47,333,81',
'82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,679,10,53,335,12,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277,272,273',
',257,258,,,274,275,,45,,,337,,,66,67,,,68,,40,261,,267,52,263,262,,259',
'260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,278',
',,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74',
'76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,920,10,53,335',
'12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,264',
'268,269,270,271,281,282,276,277,272,273,,257,258,,,274,275,,45,,,38',
',,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46,47',
'333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,23,,,,,891,10,53,335,12,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277',
'272,273,,257,258,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263',
'262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,278,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53',
'335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48',
'264,268,269,270,271,281,282,276,277,272,273,,257,258,,,274,275,,45,',
',38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46',
'47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277',
'272,273,,257,258,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263',
'262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,278,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53',
'335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48',
'264,268,269,270,271,281,282,276,277,272,273,,257,258,,,274,275,,45,',
',38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46',
'47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277',
'272,273,,257,258,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263',
'262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,278,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53',
'335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48',
'264,268,269,270,271,281,282,276,277,272,273,,257,258,,,274,275,,45,',
',38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46',
'47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277',
'272,273,,257,258,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263',
'262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,278,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53',
'335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48',
'264,268,269,270,271,281,282,276,277,272,273,,257,258,,,274,275,,45,',
',38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46',
'47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277',
'272,273,,257,258,,,274,275,,45,,,337,,,66,67,,,68,,40,261,,267,52,263',
'262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,240,278,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,',
',,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10',
'53,335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,264,268,269,270,271,281,282,276,277,272,273,,257,258,,,274,275,,45',
',,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46',
'47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,493,23,490,489,488,,491,10,53,335,12,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,493,,490,489,488,',
'491,,714,,493,,490,489,488,,491,718,,45,,,38,,,66,67,,264,68,,40,,,',
'52,,714,,493,,490,489,488,24,491,718,714,,102,90,93,94,,95,97,96,98',
',,261,,91,101,263,262,,259,260,,85,,92,106,107,,714,46,47,333,81,82',
'83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,264,,,10,53,335,12,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,264,-741,-741,-741,-741,281,282,261,,-741',
'-741,263,262,,259,260,274,275,,45,,,337,,,66,67,,,68,,40,261,,267,52',
'263,262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,',
',91,101,,,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,',
'75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10',
'53,335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,264,268,269,270,271,281,282,276,277,272,273,,-741,-741,,,274,275',
',45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24',
'266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46',
'47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277',
'272,273,,-741,-741,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263',
'262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,',
'73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335',
'12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,264',
',,,,,,,,,,,,,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262',
',259,260,,,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,',
'85,,92,106,107,,,46,47,7,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35',
'36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,9,12,118,117',
'119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,268,269,270',
'271,281,282,276,277,272,273,,-741,-741,,,274,275,,45,,,38,,,66,67,,',
'68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,333,81,82,83',
'11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115',
'116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121',
',104,105,49,50,48,264,-741,-741,-741,-741,281,282,,,-741,-741,,,,,,274',
'275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265',
'24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107',
',,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,',
',84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,264,268,269,270,271,281,282',
'276,277,272,273,,-741,-741,,,274,275,,45,,,38,,,66,67,,,68,,40,261,',
'267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96',
'98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71',
'72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,',
',,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,264,268,269,270,271,281,282,,,272,273,,,,,,274,275,,45,,,38',
',,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,333',
'81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114',
'113,115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,264,-741,-741,-741,-741,281,282,,,-741,-741',
',,,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260',
'280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85',
',92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36',
'79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,-741,-741,-741',
'-741,281,282,,,-741,-741,,,,,,274,275,,45,,,38,,,66,67,,,68,,40,261',
',267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96',
'98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71',
'72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,',
',,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,264,-741,-741,-741,-741,281,282,,,-741,-741,,,,,,274,275,,45',
',,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,264,268,269,270,271,281,282,276,,272,273,,,,,,274,275,',
'245,,,253,,,66,67,,,68,,,261,,267,52,263,262,,259,260,280,279,265,250',
'266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106',
'107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113',
'115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121',
',104,105,49,50,48,264,-741,-741,-741,-741,281,282,,,-741,-741,,,,,,274',
'275,,245,,,253,,,66,67,,,68,,,261,,267,52,263,262,,259,260,280,279,265',
'250,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,264,,,,,,,,,,,,,,,,274,275,,245,,,253,,,66,67',
',,68,,,261,,267,52,263,262,,259,260,,,265,250,266,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,',
',,,,,,,,,,,,,,274,275,,245,,,253,,,66,67,,,68,,,261,,,52,263,262,,259',
'260,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106',
'107,-441,,46,47,,,,-441,-441,-441,,,-441,-441,-441,264,-441,,,,,,,,-441',
'-441,-441,-441,,,,274,275,,,,-441,-441,,-441,-441,-441,-441,-441,,,',
'261,,267,,263,262,,259,260,,,,,,,,,,,-441,-441,-441,-441,-441,-441,-441',
'-441,-441,-441,-441,-441,-441,-441,,,-441,-441,-441,,,-441,,306,-441',
',,-441,-441,,-441,,-441,,-441,,-441,-441,,-441,-441,-441,-441,-441,',
'-441,-441,-441,,,,,,,,,,,,,,-441,,,-441,-441,,-441,,-441,81,82,83,,65',
',-441,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,264,,,,,,,,,,,,,,,,274,275,,245,,,253,,,66,67,,,68,,,261,,267',
'52,263,262,,259,260,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,',
',,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,',
',,,91,101,,,,,,,85,,92,106,107,-327,,46,47,,,,-327,-327,-327,,,-327',
'-327,-327,,-327,,,,,,,,-327,,-327,-327,,,,,,,,,-327,-327,,-327,-327',
'-327,-327,-327,,,,,,,,,,,,,,,,,,,,,,,-327,-327,-327,-327,-327,-327,-327',
'-327,-327,-327,-327,-327,-327,-327,,,-327,-327,-327,,,-327,,315,-327',
',,-327,-327,,-327,,-327,,-327,,-327,-327,,-327,-327,-327,-327,-327,',
'-327,,-327,,,,,,,,,,,,,,-327,,,-327,-327,,-327,,-327,81,82,83,,65,,-327',
',71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104,105,49',
'50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52,,,328',
',,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65',
'92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52',
',,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85',
'65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,,,,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,799,,,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,,118,117',
'119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,',
',,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,240,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,',
'254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,',
',,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52',
',,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85',
'65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114',
'113,115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92',
'106,107,-275,,46,47,,,,-275,-275,-275,,,-275,-275,-275,493,-275,490',
'489,488,498,491,,,-275,-275,-275,,,,501,,,,,,-275,-275,,-275,-275,-275',
'-275,-275,,493,,490,489,488,498,491,496,646,,,,,,,501,506,505,509,508',
',,,502,,493,,490,489,488,498,491,-275,,,,,496,,-275,501,,,,306,-275',
'506,505,509,508,,,,502,,,,,,,,,496,487,,,,-275,-275,,,,,509,508,,,,502',
',,,-275,,,-275,,81,82,83,-275,65,,487,,71,72,-275,,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117',
'119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,',
',,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,327,112,120,121,,104,105,49,50,48,,',
',,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,799,,322,,52,,,328,,,,,,250',
',,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,322,',
'52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84',
'349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,,,,85,,92,106,107,,,46,47,81,82,83,11,65,,,,71,72,,,,75,,73,74,76',
'35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,,,420,85,,92,106,107,,,46,47,81,82,83,,65',
',,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,',
',254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52',
',,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,',
'91,101,,,,81,82,83,85,65,92,106,107,71,72,46,562,,75,,73,74,76,354,355',
'79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117',
'119,108,64,110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,',
',,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52,,,328,,,,,,250,,,,,102',
'325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104,105,49',
'50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52,,,328',
',,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,240,,,81,82,83,85',
'65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84',
'349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,',
',,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,',
'254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,',
',,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,',
',,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79',
'80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,,,,85,,92,106,107,,,46,47,81,82,83,11,65,,,,71,72,,,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53',
',12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,',
',,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,799,,,,52,,',
',,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65',
'92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324',
',322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,',
',,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79',
'80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,327,112,120,121,,104,105,49,50,48,,',
',,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,799,,322,,52,,,328,,,,,,250',
',,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,562,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,322,',
'52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84',
'349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,',
',,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,',
'254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,',
',,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,',
',,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79',
'80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,',
'254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,',
',,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52',
',,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65',
'92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,',
',,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79',
'80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,',
'118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,',
',,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47',
',75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53',
',,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,',
',,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52',
',,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',,,,85,,92,106,107,,,46,47,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35',
'36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,9,12,118,117',
'119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,',
',,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,,,,85,,92,106,107,-312,,46,47,,,,-312,-312,-312',
',,-312,-312,-312,,-312,,,,,,,,-312,,-312,-312,-312,,,,,,,,-312,-312',
',-312,-312,-312,-312,-312,,,,,,,,,,,,,,,,,,,,,,,-312,-312,-312,-312',
'-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,,,-312,-312,-312,',
',-312,,,-312,,,-312,-312,,-312,,-312,,-312,,-312,-312,,-312,-312,-312',
'-312,-312,,-312,,-312,,,,,,,,,,,,,,-312,,,-312,-312,-312,-312,,-312',
',-312,,81,82,83,-312,65,,,,71,72,,,,75,,73,74,76,354,355,79,80,,,,,',
'84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,436,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79',
'80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,',
',,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,',
',,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48',
',,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,81,82',
'83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,,10,53,,12,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,',
',52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
'327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,324,,,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,',
',91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355',
'79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,',
'245,,,253,,,66,67,,,68,,,,,,52,,,328,,,,,,250,,,,,102,325,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,',
',,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,',
',,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48',
',,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,',
',,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,126,,,,,125,85,,92,106,107,,,46',
'47,81,82,83,,65,,,,71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79',
'80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,',
'245,,,253,,,66,67,,,68,,799,,322,,52,,,328,,,,,,250,,,,,102,325,93,94',
',95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,-275,,46,47,,,,-275,-275',
'-275,,,-275,-275,-275,,-275,,,,,,,,-275,-275,-275,-275,,,,,,,,,-275',
'-275,,-275,-275,-275,-275,-275,,,,,,,,,,,,,,,,,,,,,,,-275,-275,-275',
'-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,,,-275,-275,-275',
',,-275,,306,-275,,,-275,-275,,-275,,-275,,-275,,-275,-275,,-275,-275',
'-275,-275,-275,,-275,-275,-275,493,,490,489,488,498,491,,,,,,,-275,',
'501,-275,-275,-720,-275,,-275,,,,-720,-720,-720,-275,,-720,-720,-720',
',-720,,,496,,,,,-720,-720,-720,-720,-720,,509,508,,,,502,-720,-720,',
'-720,-720,-720,-720,-720,,,,,,,,,,,,,,,,,,,,,,,-720,-720,-720,-720,-720',
'-720,-720,-720,-720,-720,-720,-720,-720,-720,,,-720,-720,-720,,,-720',
',,-720,,,-720,-720,,-720,,-720,,-720,,-720,-720,,-720,-720,-720,-720',
'-720,,-720,-720,-720,,,,,,,,,,,,,,-720,,,-720,-720,-720,-720,,-720,-721',
'-720,,,,,-720,-721,-721,-721,,,-721,-721,-721,,-721,,,,,,,,-721,-721',
'-721,-721,-721,,,,,,,,-721,-721,,-721,-721,-721,-721,-721,,,,,,,,,,',
',,,,,,,,,,,,-721,-721,-721,-721,-721,-721,-721,-721,-721,-721,-721,-721',
'-721,-721,,,-721,-721,-721,,,-721,,,-721,,,-721,-721,,-721,,-721,,-721',
',-721,-721,,-721,-721,-721,-721,-721,,-721,-721,-721,,,,,,,,,,,,,,-721',
',,-721,-721,-721,-721,,-721,,-721,,81,82,83,-721,65,,,,71,72,,,,75,',
'73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,',
'118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,',
',,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47',
',75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,',
',,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,81',
'82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,,10,53,9,12,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,',
',52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,420,85',
',92,106,107,,,46,47,81,82,83,,65,,,,71,72,,,,75,,73,74,76,35,36,79,80',
',,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79',
'80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,',
',,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36',
'79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,,,,85,,92,106,107,,,46,47,81,82,83,11,65,,,,71,72,,,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53',
',12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,',
',,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,81,82,83',
'11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115',
'116,,,23,,,,,,10,53,,12,118,117,119,108,64,110,109,111,,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52',
',,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65',
'92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,',
'91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36',
'79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,869,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,',
',,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,436,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,81,82',
'83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,,10,53,,12,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,',
',52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,',
'91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355',
'79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,436,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52',
',,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,',
'91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36',
'79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,',
'245,,,253,,,66,67,,,68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,,,52,,,,,,,,,250,,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116',
',,254,,,,,,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
',,358,,,,,,,,,,,,,,,,,,,,395,,,38,,,66,67,,,68,,40,,,,,,,,,,,,,,,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,1108,,,253,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,,,',
'75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,',
',,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68,,341,,,,,,,,,,,,,,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
',,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,350,,,118,117,119,400,64,110,109,401,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,407,,,402,,,253,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
',,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,1146,,,253,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,,,',
'75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,',
',,,350,,,118,117,119,400,64,110,109,401,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,402,,,253,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,,,',
'75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,',
',,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,,,',
'75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,',
',,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,346,,,253,,,66,67,,,68,,,493,,490,489,488,498,491',
',,,,,,,,501,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,360,,496,85,,92',
'106,107,81,82,83,,65,509,508,,71,72,502,,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,350,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,346,,,253',
',,66,67,,,68,,,493,,490,489,488,498,491,,,,,,,,,501,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,590,,496,85,,92,106,107,81,82,83,,65,509,508',
',71,72,502,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,,,358,,,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68,,,,,,,,,,,,,,,,',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116',
',,254,,,,,,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
',,358,,,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
',,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,1146,,,253,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,,,',
'75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,',
',,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,,,',
'75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,',
',,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,185,196,186,209,182',
'202,192,191,212,213,207,190,189,184,210,214,215,194,183,197,201,203',
'195,188,,,,204,211,206,205,198,208,193,181,200,199,,,,,,180,187,178',
'179,175,176,177,138,140,,,139,,,,,,,,169,170,,166,148,149,150,157,154',
'156,,,151,152,,,,171,172,158,159,,,,,,,,,,,,,,163,162,,147,168,165,164',
'173,160,161,155,153,145,167,146,,,174,102,,,,,,,,,,,,,,101,185,196,186',
'209,182,202,192,191,212,213,207,190,189,184,210,214,215,194,183,197',
'201,203,195,188,,,,204,211,206,205,198,208,193,181,200,199,,,,,,180',
'187,178,179,175,176,177,138,140,,,139,,,,,,,,169,170,,166,148,149,150',
'157,154,156,,,151,152,,,,171,172,158,159,,,,,,,,,,,,,,163,162,,147,168',
'165,164,173,160,161,155,153,145,167,146,,,174,102,,,,,,,,,,,,,,101,185',
'196,186,209,182,202,192,191,212,213,207,190,189,184,210,214,215,194',
'183,197,201,203,195,188,,,,204,211,206,205,198,208,193,181,200,199,',
',,,,180,187,178,179,175,176,177,138,140,137,,139,,,,,,,,169,170,,166',
'148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,,,,,,,,,163',
'162,,147,168,165,164,173,160,161,155,153,145,167,146,,,174,102,,,,,',
',,,,,,,,101,185,196,186,209,182,202,192,191,212,213,207,190,189,184',
'210,214,215,194,183,197,201,203,195,188,,,,204,211,206,205,198,208,193',
'181,200,199,,,,,,180,187,178,179,175,176,177,138,140,,,139,,,,,,,,169',
'170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,',
',,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,,,174',
'102,114,113,115,116,,,,,,,,,,101,,,118,117,119,776,,,493,779,490,489',
'488,498,491,104,105,,,358,,,,501,,,,,,,,,,,,,,,,778,,,749,,,496,747',
',,748,,,,,506,505,509,508,,,,502,,,,777,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,114,113,115,116,,,85,,92,106,107,,,764,765,,118,117,119,776',
',,,779,756,,,,,104,105,,,358,501,,,,,,,,,,,,,,,,,,,778,,,749,,,,747',
',,748,,751,,,,,,,502,,,,,,,777,,,,102,757,93,94,,95,97,96,98,,,,,91',
'101,114,113,115,116,,,85,,92,106,107,,,764,765,,118,117,119,776,,,493',
'779,490,489,488,498,491,104,105,,,358,,,,501,,,,,,,,,,,,,,,,778,,,749',
',,496,747,,,748,,,,,506,505,509,508,,,,502,,,,777,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,764,765,185,196,186,209,182',
'202,192,191,212,213,207,190,189,184,210,214,215,194,183,197,201,203',
'195,188,,,,204,211,206,205,198,208,193,181,200,199,,,,,,180,187,178',
'179,175,176,177,138,140,,,139,,,,,,,,169,170,,166,148,149,150,157,154',
'156,,,151,152,,,,171,172,158,159,,,,,,,,,,,,,,163,162,,147,168,165,164',
'173,160,161,155,153,145,167,146,,,174,114,113,115,116,,,,,,493,,490',
'489,488,498,491,118,117,119,776,,,,779,501,,,,,104,105,,,358,,,,,,,',
',,,,,496,,,,,,,778,,,749,509,508,,747,,502,748,,,,,,,,,,,,,,,,777,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,487,,85,,92,106',
'107,,,764,765,,118,117,119,776,,,493,779,490,489,488,498,491,104,105',
',,358,,,,501,,,,,,,,,,,,,,,,778,,,749,,,496,747,,,748,,,,,,,509,508',
',,,502,,,,777,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106',
'107,,,764,765,185,196,186,209,182,202,192,191,212,213,207,190,189,184',
'210,214,215,194,183,197,201,203,195,188,,,,204,211,206,294,293,295,292',
'181,200,199,,,,,,180,187,178,179,289,290,291,287,140,110,109,288,,112',
',,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159',
',,,,,299,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167',
'146,,,174,114,113,115,116,,,,,,,,,,,,,118,117,119,776,,,,779,,,,,,104',
'105,,,358,,,,,,,,,,,,,,,,,,,,778,,,749,,,,747,,,748,,751,,,,,,,493,',
'490,489,488,498,491,777,,,,102,90,93,94,501,95,97,96,98,,,,,91,101,240',
'114,113,115,116,,85,,92,106,107,496,,764,765,,,118,117,119,776,,509',
'508,779,,,502,,,104,105,,,358,,,,,,,,,,,,,,,,,,,,778,,,749,,,,747,,',
'748,,751,487,,,,,,,,,,,,,777,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
'114,113,115,116,,,85,,92,106,107,,,764,765,,118,117,119,776,,,,779,756',
',,,,104,105,,,358,501,,,,,,,,,,,,,,,,,,,778,,,749,,,,747,,,748,,751',
',,,,,,502,,,,,,,777,,,,102,757,93,94,,95,97,96,98,,,,,91,101,114,113',
'115,116,,,85,,92,106,107,,,764,765,,118,117,119,776,,,,779,756,,,,,104',
'105,,,358,501,,,,,,,,,,,,,,,,,,,778,,,749,,,,747,,,748,,751,,,,,,,502',
',,,,,,777,,,,102,757,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,',
',85,,92,106,107,,,764,765,,118,117,119,776,,,493,779,490,489,488,498',
'491,104,105,,,358,,,,501,,,,,,,,,,,,,,,,778,,,749,,,496,747,,,748,,',
',,506,505,509,508,,,,502,,,,777,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,114,113,115,116,,,85,,92,106,107,,,764,765,,118,117,119,776,,,,779',
',,,,,104,105,,,358,,,,,,,,,,,,,,,,,,,,778,,,749,,,,747,,,748,,,,,,,',
',,,,,,,,777,,,,102,90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116',
',,85,,92,106,107,,,764,765,,118,117,119,776,,,,779,,,,,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,778,,,749,,,,747,,,748,,751,,,,,,,,,,,,,,777,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,',
'764,765,,118,117,119,776,,,,779,,,,,,104,105,,,358,,,,,,,,,,,,,,,,,',
',,778,,,749,,,,747,,,748,,,,,,,,,,,,,,,,777,,,,102,90,93,94,,95,97,96',
'98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,764,765,,118,117,119',
'776,,,,779,756,,,,,104,105,,,358,501,,,,,,,,,,,,,,,,,,,778,,,749,,,',
'747,,,748,,751,,,,,,,502,,,,,,,777,,,,102,757,93,94,,95,97,96,98,,,',
',91,101,114,113,115,116,,,85,,92,106,107,,,764,765,,118,117,119,776',
',,,779,756,,,,,104,105,,,358,501,,,,,,,,,,,,,,,,,,,778,,,749,,,,747',
',,748,,751,,,,,,,502,,,,,,,777,,,,102,757,93,94,,95,97,96,98,,,,,91',
'101,114,113,115,116,,,85,,92,106,107,,,764,765,,118,117,119,776,,,,779',
',,,,,104,105,,,358,,,,,,,,114,113,115,116,,,,,,,,,778,,,749,118,117',
'119,747,,,748,,751,,,,,104,105,,,358,,,,,777,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,,,,85,,92,106,107,,,764,765,,,,,,,,,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,,,,118',
'117,119,,,,,,,,,,,104,105,,,358,114,113,115,116,,,,,,,,,,,,,118,117',
'119,,,,,,,,,,,104,105,,,358,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,,,,85,,92,106,107,,,,,,,,,102,90,93,94,,95,97,96,98,,',
',,91,101,114,113,115,116,,,85,,92,106,107,,,,,,118,117,119,493,,490',
'489,488,498,491,,,,104,105,,,358,501,,,,,,,,,,,493,,490,489,488,498',
'491,,,,,496,,,,501,,,,,506,505,509,508,,,,502,,,,,,,,,,496,102,90,93',
'94,,95,97,96,98,,509,508,,91,101,502,,,,,,85,,92,106,107,,,493,487,490',
'489,488,498,491,493,,490,489,488,498,491,,501,,,,,,,501,,,,,487,,,,',
',,,,,496,,,,,,,496,,,,509,508,,,,502,,509,508,841,470,,502,842,,,,,',
',,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159',
',,,487,,306,,,,,487,,,163,162,,147,168,165,164,173,160,161,155,153,145',
'167,146,558,462,174,,559,,,,,,,,169,170,,166,148,149,150,157,154,156',
',,151,152,,,,171,172,158,159,,,,,,,,,,,,,,163,162,,147,168,165,164,173',
'160,161,155,153,145,167,146,844,470,174,,845,,,,,,,,169,170,,166,148',
'149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163',
'162,,147,168,165,164,173,160,161,155,153,145,167,146,558,462,174,,559',
',,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158',
'159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145',
'167,146,812,470,174,,813,,,,,,,,169,170,,166,148,149,150,157,154,156',
',,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164',
'173,160,161,155,153,145,167,146,731,470,174,,732,,,,,,,,169,170,,166',
'148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,',
',163,162,,147,168,165,164,173,160,161,155,153,145,167,146,809,462,174',
',810,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172',
'158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153',
'145,167,146,839,462,174,,840,,,,,,,,169,170,,166,148,149,150,157,154',
'156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165',
'164,173,160,161,155,153,145,167,146,458,462,174,,459,,,,,,,,169,170',
',166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,',
',,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,729,462',
'174,,730,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171',
'172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155',
'153,145,167,146,1199,462,174,,1200,,,,,,,,169,170,,166,148,149,150,157',
'154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168',
'165,164,173,160,161,155,153,145,167,146,1201,470,174,,1202,,,,,,,,169',
'170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306',
',,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,1216',
'470,174,,1215,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152',
',,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160',
'161,155,153,145,167,146,466,470,174,,465,,,,,,,,169,170,,166,148,149',
'150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162',
',147,168,165,164,173,160,161,155,153,145,167,146,874,470,174,,873,,',
',,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159',
',,,,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167',
'146,871,462,174,,872,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151',
'152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173',
'160,161,155,153,145,167,146,729,462,174,,730,,,,,,,,169,170,,166,148',
'149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163',
'162,,147,168,165,164,173,160,161,155,153,145,167,146,731,470,174,,732',
',,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158',
'159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145',
'167,146,,,174' ]
        racc_action_table = arr = ::Array.new(28813, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'111,1105,1220,1109,925,1200,624,111,111,111,930,1201,111,111,111,1059',
'111,787,1017,23,1202,1234,982,982,111,31,111,111,111,416,69,1106,804',
'417,477,993,111,111,1165,111,111,111,111,111,804,1218,930,748,839,292',
'1090,385,477,842,1088,1218,292,1093,1059,1093,23,840,396,925,748,837',
'111,111,111,111,111,111,111,111,111,111,111,111,111,111,1199,384,111',
'111,111,841,111,111,1201,31,111,392,633,111,111,416,111,1202,111,417',
'111,243,111,111,787,111,111,111,111,111,624,111,31,111,292,624,982,69',
'842,1105,1220,1109,393,1200,1105,1220,1109,111,1200,1201,111,111,111',
'111,1201,111,1017,111,1202,731,852,1017,111,1202,993,111,731,731,731',
'1106,841,731,731,731,1106,731,1165,839,810,3,243,1165,842,731,731,731',
'731,731,1090,385,840,396,1088,1090,385,731,731,1088,731,731,731,731',
'731,837,48,48,837,809,837,812,929,980,737,9,841,517,517,244,1199,384',
'392,633,246,1199,384,731,731,731,731,731,731,731,731,731,731,731,731',
'731,731,555,555,731,731,731,810,731,731,934,12,731,929,393,731,731,251',
'731,293,731,737,731,523,731,731,293,731,731,731,731,731,852,731,731',
'731,809,812,812,244,980,949,358,358,246,48,48,810,14,731,810,294,731',
'731,731,731,934,731,294,731,443,874,810,627,731,15,729,731,874,874,874',
'627,517,251,874,874,809,874,812,809,980,812,523,980,293,874,874,643',
'643,351,730,809,17,812,252,980,555,874,874,27,874,874,874,874,874,949',
'949,949,758,234,295,234,234,234,234,234,294,295,1007,443,358,358,949',
'871,234,729,758,874,874,874,874,874,874,874,874,874,874,874,874,874',
'874,872,21,874,874,874,234,874,874,730,252,874,578,351,874,234,234,234',
'234,874,42,874,234,874,874,412,874,874,874,874,874,732,874,874,874,295',
'351,1007,732,732,732,643,871,732,732,732,643,732,874,21,533,874,874',
'88,874,732,874,732,732,732,872,21,234,874,20,88,874,732,732,45,732,732',
'732,732,732,88,578,578,578,19,997,414,533,53,1127,997,533,533,29,412',
'412,412,933,578,216,29,933,732,732,732,732,732,732,732,732,732,732,732',
'732,732,732,389,291,732,732,732,389,732,732,291,20,732,229,658,732,732',
'660,732,413,732,231,732,235,732,732,19,732,732,732,732,732,411,732,108',
'732,414,414,414,1127,1127,108,108,108,29,245,108,108,108,732,108,247',
'732,732,732,732,1127,732,108,732,108,108,108,377,732,778,377,732,291',
'778,108,108,248,108,108,108,108,108,658,658,254,660,660,413,413,413',
'418,137,658,5,746,660,137,137,5,746,411,411,411,746,108,108,108,108',
'108,108,108,108,108,108,108,108,108,108,305,680,108,108,108,415,108',
'108,383,383,108,402,286,108,108,402,108,287,108,286,108,319,108,108',
'287,108,108,108,108,108,331,108,459,108,320,331,418,418,418,973,323',
'973,973,973,973,973,458,108,680,288,108,108,108,108,973,108,288,108',
'511,466,680,824,108,511,824,108,466,466,466,415,415,415,466,466,343',
'466,973,286,335,459,336,343,287,466,466,973,973,973,973,338,343,459',
'973,458,1157,466,466,1157,466,466,466,466,466,380,339,458,380,233,845',
'233,233,233,233,233,288,845,289,340,973,346,845,349,233,289,845,466',
'466,466,466,466,466,466,466,466,466,466,466,466,466,343,44,466,466,466',
'233,466,466,376,362,466,376,290,466,233,233,233,233,466,290,466,233',
'466,466,350,466,466,466,466,466,873,466,466,466,845,16,16,873,873,873',
'1091,1091,289,873,873,352,873,466,44,353,466,466,357,466,873,466,362',
'761,761,359,44,233,466,43,366,466,873,873,362,873,873,873,873,873,1189',
'1189,368,290,705,344,705,705,705,705,705,1100,344,1100,1100,1100,371',
'1100,374,705,378,344,873,873,873,873,873,873,873,873,873,873,873,873',
'873,873,43,379,873,873,873,705,873,873,825,825,873,381,43,873,705,705',
'705,705,873,390,873,705,873,873,391,873,873,873,873,873,465,873,395',
'873,344,704,704,465,465,465,51,51,397,465,465,406,465,873,426,432,873',
'873,434,873,465,873,435,777,437,777,777,705,873,777,440,873,465,465',
'444,465,465,465,465,465,454,456,51,51,646,345,646,646,646,646,646,1116',
'345,1116,1116,1116,457,1116,467,646,777,345,465,465,465,465,465,465',
'465,465,465,465,465,465,465,465,473,474,465,465,465,646,465,465,478',
'479,465,480,1116,465,646,646,646,646,465,483,465,646,465,465,484,465',
'465,465,465,465,941,465,485,465,345,495,347,507,510,513,941,363,1107',
'347,947,519,527,465,363,1107,465,465,347,465,947,465,1145,363,1107,528',
'535,646,465,1145,536,465,2,2,2,2,2,2,1145,537,538,2,2,563,941,564,2',
'401,2,2,2,2,2,2,2,565,941,569,947,585,2,2,2,2,2,2,2,347,586,2,947,589',
'363,1107,591,2,2,2,2,2,2,2,2,2,2,2,2,1145,2,2,2,394,2,2,2,2,2,54,394',
'401,596,404,600,609,54,610,401,394,404,611,621,401,625,54,626,401,2',
'404,628,2,655,663,2,2,1186,665,2,672,2,681,686,1186,2,691,401,693,534',
'695,651,651,1186,2,651,651,651,711,2,2,2,2,716,2,2,2,2,717,394,719,724',
'2,2,733,54,742,401,750,404,2,534,2,2,2,534,534,2,2,1190,1190,1190,1190',
'1190,1190,751,752,781,1190,1190,784,786,1186,1190,844,1190,1190,1190',
'1190,1190,1190,1190,583,583,583,583,583,1190,1190,1190,1190,1190,1190',
'1190,792,496,1190,496,496,496,793,496,1190,1190,1190,1190,1190,1190',
'1190,1190,1190,1190,1190,1190,794,1190,1190,1190,442,1190,1190,1190',
'1190,1190,18,442,844,796,595,798,806,18,496,844,442,595,808,811,844',
'814,18,496,844,1190,595,815,1190,818,827,1190,1190,242,833,1190,834',
'1190,838,847,242,1190,718,844,718,718,718,851,718,242,1190,853,868,870',
'879,1190,1190,1190,1190,892,1190,1190,1190,1190,895,442,896,899,1190',
'1190,901,18,904,844,905,595,1190,907,1190,1190,1190,908,910,1190,1190',
'843,843,843,843,843,843,914,927,935,843,843,936,940,242,843,400,843',
'843,843,843,843,843,843,943,948,701,966,969,843,843,843,843,843,843',
'843,701,1196,843,1196,1196,1196,970,1196,843,843,843,843,843,843,843',
'843,843,843,843,843,979,843,843,843,636,843,843,843,843,843,813,636',
'400,701,701,984,987,813,701,400,636,994,813,996,400,1003,813,1004,400',
'843,1005,1006,843,1032,1033,843,843,1038,1043,843,1044,843,1045,1046',
'1047,843,1048,400,8,8,8,8,8,1132,843,1052,1053,1054,1056,843,843,843',
'843,1132,843,843,843,843,1060,636,1067,1072,843,843,1073,813,1075,400',
'1076,1077,843,1079,843,843,843,1080,1081,843,843,1104,1104,1104,1104',
'1104,1104,1097,1132,1132,1104,1104,1108,1132,1111,1104,1112,1104,1104',
'1104,1104,1104,1104,1104,25,1113,1114,1143,1146,1104,1104,1104,1104',
'1104,1104,1104,1155,1156,1104,334,334,334,334,334,1104,1104,1104,1104',
'1104,1104,1104,1104,1104,1104,1104,1104,1161,1104,1104,1104,1171,1104',
'1104,1104,1104,1104,25,25,25,25,25,25,25,25,25,25,25,1172,25,25,1173',
'1176,25,25,1179,1104,1180,25,1104,1181,1182,1104,1104,1184,1198,1104',
'1203,1104,25,1215,25,1104,25,25,1216,25,25,25,25,25,1104,25,1222,1223',
'1224,1104,1104,1104,1104,1225,1104,1104,1104,1104,1,,,,1104,1104,,25',
',,,,1104,,1104,1104,1104,,,1104,1104,1099,1099,1099,1099,1099,1099,',
',,1099,1099,,,,1099,,1099,1099,1099,1099,1099,1099,1099,373,373,373',
'373,373,1099,1099,1099,1099,1099,1099,1099,,,1099,,,,,447,1099,1099',
'1099,1099,1099,1099,1099,1099,1099,1099,1099,1099,,1099,1099,1099,,1099',
'1099,1099,1099,1099,447,447,447,447,447,447,447,447,447,447,447,,447',
'447,,,447,447,,1099,,,1099,,,1099,1099,,,1099,,1099,447,,447,1099,447',
'447,,447,447,447,447,447,1099,447,,,,1099,1099,1099,1099,,1099,1099',
'1099,1099,,,,,1099,1099,,447,,447,,,1099,,1099,1099,1099,,,1099,1099',
'337,337,337,337,337,337,,,,337,337,,,,337,,337,337,337,337,337,337,337',
',,,,,337,337,337,337,337,337,337,,,337,,,,,453,337,337,337,337,337,337',
'337,337,337,337,337,337,,337,337,337,,337,337,337,337,337,453,453,453',
'453,453,453,453,453,453,453,453,,453,453,,,453,453,,337,,,337,,,337',
'337,,,337,,337,453,,453,337,453,453,,453,453,453,453,453,337,453,,,',
'337,337,337,337,,337,337,337,337,,,,,337,337,,453,,,,,337,,337,337,337',
',,337,337,1098,1098,1098,1098,1098,1098,,,,1098,1098,,,,1098,,1098,1098',
'1098,1098,1098,1098,1098,,,,,,1098,1098,1098,1098,1098,1098,1098,,,1098',
',,,,725,1098,1098,1098,1098,1098,1098,1098,1098,1098,1098,1098,1098',
',1098,1098,1098,,1098,1098,1098,1098,1098,725,725,725,725,725,725,725',
'725,725,725,725,,725,725,,,725,725,,1098,,,1098,,,1098,1098,,,1098,',
'1098,725,,725,1098,725,725,,725,725,725,725,725,1098,725,,,,1098,1098',
'1098,1098,,1098,1098,1098,1098,,,,,1098,1098,,725,,,,,1098,,1098,1098',
'1098,,,1098,1098,1069,1069,1069,1069,1069,1069,,,,1069,1069,,,,1069',
',1069,1069,1069,1069,1069,1069,1069,,,,,,1069,1069,1069,1069,1069,1069',
'1069,,,1069,,,,,694,1069,1069,1069,1069,1069,1069,1069,1069,1069,1069',
'1069,1069,,1069,1069,1069,,1069,1069,1069,1069,1069,694,694,694,694',
'694,694,694,694,694,694,694,,694,694,,,694,694,,1069,,,1069,,,1069,1069',
',,1069,,1069,694,,694,1069,694,694,,694,694,694,694,694,1069,694,,,',
'1069,1069,1069,1069,,1069,1069,1069,1069,,,,,1069,1069,,694,,,,,1069',
',1069,1069,1069,,,1069,1069,644,644,644,644,644,644,,,,644,644,,,,644',
',644,644,644,644,644,644,644,,,,,,644,644,644,644,644,644,644,,,644',
',,,,,644,644,644,644,644,644,644,644,644,644,644,644,,644,644,644,,644',
'644,644,644,644,1035,1035,1035,1035,1035,1035,1035,1035,1035,1035,1035',
',1035,1035,,,1035,1035,,644,,,644,,,644,644,,,644,,644,1035,,1035,644',
'1035,1035,,1035,1035,1035,1035,1035,644,1035,,,,644,644,644,644,,644',
'644,644,644,,,,,644,644,,1035,,,,,644,,644,644,644,,,644,644,372,372',
'372,372,372,372,,,,372,372,,,,372,,372,372,372,372,372,372,372,,,,,',
'372,372,372,372,372,372,372,,,372,,,,,,372,372,372,372,372,372,372,372',
'372,372,372,372,,372,372,372,,372,372,372,372,372,876,876,876,876,876',
'876,876,876,876,876,876,,876,876,,,876,876,,372,,,372,,,372,372,,,372',
',372,876,,876,372,876,876,,876,876,876,876,876,372,876,,,,372,372,372',
'372,,372,372,372,372,,,,,372,372,,876,,,,,372,,372,372,372,,,372,372',
'859,859,859,859,859,859,,,,859,859,,,,859,,859,859,859,859,859,859,859',
',,,,,859,859,859,859,859,859,859,,,859,,,,,,859,859,859,859,859,859',
'859,859,859,859,859,859,,859,859,859,,859,859,859,859,859,317,317,317',
'317,317,317,317,317,317,317,317,,317,317,,,317,317,,859,,,859,,,859',
'859,,,859,,859,317,,317,859,317,317,,317,317,317,317,317,859,317,,,',
'859,859,859,859,,859,859,859,859,,,,,859,859,,317,,,,,859,,859,859,859',
',,859,859,1014,1014,1014,1014,1014,1014,,,,1014,1014,,,,1014,,1014,1014',
'1014,1014,1014,1014,1014,,,,,,1014,1014,1014,1014,1014,1014,1014,,,1014',
',,,,,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,,1014',
'1014,1014,,1014,1014,1014,1014,1014,1011,1011,1011,1011,1011,1011,1011',
'1011,1011,1011,1011,,1011,1011,,,1011,1011,,1014,,,1014,,,1014,1014',
',,1014,,1014,1011,,1011,1014,1011,1011,,1011,1011,1011,1011,1011,1014',
'1011,,,,1014,1014,1014,1014,,1014,1014,1014,1014,,,,,1014,1014,,1011',
',,,,1014,,1014,1014,1014,,,1014,1014,253,253,253,253,253,253,,,,253',
'253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253',
'253,,,253,,,,,,253,253,253,253,253,253,253,253,253,253,253,253,,253',
'253,253,,253,253,253,253,253,1012,1012,1012,1012,1012,1012,1012,1012',
'1012,1012,1012,,1012,1012,,,1012,1012,,253,,,253,,,253,253,,,253,,253',
'1012,,1012,253,1012,1012,,1012,1012,1012,1012,1012,253,1012,,,,253,253',
'253,253,,253,253,253,253,,,,,253,253,,1012,,,,,253,,253,253,253,,,253',
'253,236,236,236,236,236,236,,,,236,236,,,,236,,236,236,236,236,236,236',
'236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,236,236,236,236,236',
'236,236,236,236,236,236,236,,236,236,236,,236,236,236,236,236,1034,1034',
'1034,1034,1034,1034,1034,1034,1034,1034,1034,,1034,1034,,,1034,1034',
',236,,,236,,,236,236,,,236,,236,1034,,1034,236,1034,1034,,1034,1034',
'1034,1034,1034,236,1034,,,,236,236,236,236,,236,236,236,236,,,,,236',
'236,,1034,,,,,236,,236,236,236,,,236,236,218,218,218,218,218,218,,,',
'218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218,218',
'218,218,,,218,,,,,,218,218,218,218,218,218,218,218,218,218,218,218,',
'218,218,218,,218,218,218,218,218,1068,1068,1068,1068,1068,1068,1068',
'1068,1068,1068,1068,,1068,1068,,,1068,1068,,218,,,218,,,218,218,,,218',
',218,1068,,1068,218,1068,1068,,1068,1068,1068,1068,1068,218,1068,,,',
'218,218,218,218,,218,218,218,218,,,,,218,218,,1068,,,,,218,,218,218',
'218,,,218,218,38,38,38,38,38,38,,,,38,38,,,,38,,38,38,38,38,38,38,38',
',,,,,38,38,38,38,38,38,38,,,38,,,,,,38,38,38,38,38,38,38,38,38,38,38',
'38,,38,38,38,,38,38,38,38,38,552,552,552,552,552,552,552,552,552,552',
'552,,552,552,,,552,552,,38,,,38,,,38,38,,,38,,38,552,,552,38,552,552',
',552,552,552,552,552,38,552,,,,38,38,38,38,,38,38,38,38,,,,,38,38,552',
'552,,,,,38,,38,38,38,,,38,38,848,848,848,848,848,848,,,,848,848,,,,848',
',848,848,848,848,848,848,848,,,,,,848,848,848,848,848,848,848,,,848',
',,,,,848,848,848,848,848,848,848,848,848,848,848,848,,848,848,848,,848',
'848,848,848,848,819,819,819,819,819,819,819,819,819,819,819,,819,819',
',,819,819,,848,,,848,,,848,848,,,848,,848,819,,819,848,819,819,,819',
'819,819,819,819,848,819,,,,848,848,848,848,,848,848,848,848,,,,,848',
'848,,819,,,,,848,,848,848,848,,,848,848,974,974,974,974,974,974,,,,974',
'974,,,,974,,974,974,974,974,974,974,974,,,,,,974,974,974,974,974,974',
'974,,714,974,714,714,714,,714,974,974,974,974,974,974,974,974,974,974',
'974,974,,974,974,974,,974,974,974,974,974,915,,915,915,915,,915,,714',
',1115,,1115,1115,1115,,1115,714,,974,,,974,,,974,974,,549,974,,974,',
',,974,,915,,916,,916,916,916,974,916,915,1115,,974,974,974,974,,974',
'974,974,974,,,549,,974,974,549,549,,549,549,,974,,974,974,974,,916,974',
'974,342,342,342,342,342,342,,,,342,342,,,,342,,342,342,342,342,342,342',
'342,,,,,,342,342,342,342,342,342,342,,,342,,,548,,,342,342,342,342,342',
'342,342,342,342,342,342,342,,342,342,342,,342,342,342,342,342,546,546',
'546,546,546,546,546,548,,546,546,548,548,,548,548,546,546,,342,,,342',
',,342,342,,,342,,342,546,,546,342,546,546,,546,546,546,546,546,342,546',
',,,342,342,342,342,,342,342,342,342,,,,,342,342,,,,,,,342,,342,342,342',
',,342,342,998,998,998,998,998,998,,,,998,998,,,,998,,998,998,998,998',
'998,998,998,,,,,,998,998,998,998,998,998,998,,,998,,,,,,998,998,998',
'998,998,998,998,998,998,998,998,998,,998,998,998,,998,998,998,998,998',
'364,364,364,364,364,364,364,364,364,364,364,,364,364,,,364,364,,998',
',,998,,,998,998,,,998,,998,364,,364,998,364,364,,364,364,364,364,364',
'998,364,,,,998,998,998,998,,998,998,998,998,,,,,998,998,,,,,,,998,,998',
'998,998,,,998,998,620,620,620,620,620,620,,,,620,620,,,,620,,620,620',
'620,620,620,620,620,,,,,,620,620,620,620,620,620,620,,,620,,,,,,620',
'620,620,620,620,620,620,620,620,620,620,620,,620,620,620,,620,620,620',
'620,620,365,365,365,365,365,365,365,365,365,365,365,,365,365,,,365,365',
',620,,,620,,,620,620,,,620,,620,365,,365,620,365,365,,365,365,365,365',
'365,620,365,,,,620,620,620,620,,620,620,620,620,,,,,620,620,,,,,,,620',
',620,620,620,,,620,620,992,992,992,992,992,992,,,,992,992,,,,992,,992',
'992,992,992,992,992,992,,,,,,992,992,992,992,992,992,992,,,992,,,,,',
'992,992,992,992,992,992,992,992,992,992,992,992,,992,992,992,,992,992',
'992,992,992,606,,,,,,,,,,,,,,,,606,606,,992,,,992,,,992,992,,,992,,992',
'606,,606,992,606,606,,606,606,,,606,992,606,,,,992,992,992,992,,992',
'992,992,992,,,,,992,992,,,,,,,992,,992,992,992,,,992,992,135,135,135',
'135,135,135,,,,135,135,,,,135,,135,135,135,135,135,135,135,,,,,,135',
'135,135,135,135,135,135,,,135,,,,,,135,135,135,135,135,135,135,135,135',
'135,135,135,,135,135,135,,135,135,135,135,135,531,531,531,531,531,531',
'531,531,531,531,531,,531,531,,,531,531,,135,,,135,,,135,135,,,135,,135',
'531,,531,135,531,531,,531,531,531,531,531,135,531,,,,135,135,135,135',
',135,135,135,135,,,,,135,135,,,,,,,135,,135,135,135,,,135,135,894,894',
'894,894,894,894,,,,894,894,,,,894,,894,894,894,894,894,894,894,,,,,',
'894,894,894,894,894,894,894,,,894,,,,,,894,894,894,894,894,894,894,894',
'894,894,894,894,,894,894,894,,894,894,894,894,894,547,547,547,547,547',
'547,547,,,547,547,,,,,,547,547,,894,,,894,,,894,894,,,894,,894,547,',
'547,894,547,547,,547,547,547,547,547,894,547,,,,894,894,894,894,,894',
'894,894,894,,,,,894,894,,,,,,,894,,894,894,894,,,894,894,230,230,230',
'230,230,230,,,,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230',
'230,230,230,230,230,230,,,230,,,,,,230,230,230,230,230,230,230,230,230',
'230,230,230,,230,230,230,,230,230,230,230,230,532,532,532,532,532,532',
'532,532,532,532,532,,532,532,,,532,532,,230,,,230,,,230,230,,,230,,230',
'532,,532,230,532,532,,532,532,532,532,532,230,532,,,,230,230,230,230',
',230,230,230,230,,,,,230,230,,,,,,,230,,230,230,230,,,230,230,1147,1147',
'1147,1147,1147,1147,,,,1147,1147,,,,1147,,1147,1147,1147,1147,1147,1147',
'1147,,,,,,1147,1147,1147,1147,1147,1147,1147,,,1147,,,,,,1147,1147,1147',
'1147,1147,1147,1147,1147,1147,1147,1147,1147,,1147,1147,1147,,1147,1147',
'1147,1147,1147,550,550,550,550,550,550,550,,,550,550,,,,,,550,550,,1147',
',,1147,,,1147,1147,,,1147,,1147,550,,550,1147,550,550,,550,550,550,550',
'550,1147,550,,,,1147,1147,1147,1147,,1147,1147,1147,1147,,,,,1147,1147',
',,,,,,1147,,1147,1147,1147,,,1147,1147,623,623,623,623,623,623,,,,623',
'623,,,,623,,623,623,623,623,623,623,623,,,,,,623,623,623,623,623,623',
'623,,,623,,,,,,623,623,623,623,623,623,623,623,623,623,623,623,,623',
'623,623,,623,623,623,623,623,543,543,543,543,543,543,543,,,543,543,',
',,,,543,543,,623,,,623,,,623,623,,,623,,623,543,,543,623,543,543,,543',
'543,543,543,543,623,543,,,,623,623,623,623,,623,623,623,623,,,,,623',
'623,,,,,,,623,,623,623,623,,,623,623,388,388,388,388,388,388,,,,388',
'388,,,,388,,388,388,388,388,388,388,388,,,,,,388,388,388,388,388,388',
'388,,,388,,,,,,388,388,388,388,388,388,388,388,388,388,388,388,,388',
'388,388,,388,388,388,388,388,544,544,544,544,544,544,544,,,544,544,',
',,,,544,544,,388,,,388,,,388,388,,,388,,388,544,,544,388,544,544,,544',
'544,544,544,544,388,544,,,,388,388,388,388,,388,388,388,388,,,,,388',
'388,,,,,,,388,,388,388,388,,,388,388,387,387,387,387,387,387,,,,387',
'387,,,,387,,387,387,387,387,387,387,387,,,,,,387,387,387,387,387,387',
'387,,,387,,,,,,387,387,387,387,387,387,387,387,387,387,387,387,,387',
'387,387,,387,387,387,387,387,545,545,545,545,545,545,545,,,545,545,',
',,,,545,545,,387,,,387,,,387,387,,,387,,387,545,,545,387,545,545,,545',
'545,545,545,545,387,545,,,,387,387,387,387,,387,387,387,387,,,,,387',
'387,,,,277,277,277,387,277,387,387,387,277,277,387,387,,277,,277,277',
'277,277,277,277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,,,277',
',,277,277,277,277,277,277,277,277,,277,277,277,,277,277,277,277,277',
'551,551,551,551,551,551,551,551,,551,551,,,,,,551,551,,277,,,277,,,277',
'277,,,277,,,551,,551,277,551,551,,551,551,551,551,551,277,551,,,,277',
'277,277,277,,277,277,277,277,,,,,277,277,,,,276,276,276,277,276,277',
'277,277,276,276,277,277,,276,,276,276,276,276,276,276,276,,,,,,276,276',
'276,276,276,276,276,,,276,,,,,,,276,,,276,276,276,276,276,276,276,276',
',276,276,276,,276,276,276,276,276,542,542,542,542,542,542,542,,,542',
'542,,,,,,542,542,,276,,,276,,,276,276,,,276,,,542,,542,276,542,542,',
'542,542,542,542,542,276,542,,,,276,276,276,276,,276,276,276,276,,,,',
'276,276,,,,275,275,275,276,275,276,276,276,275,275,276,276,,275,,275',
'275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,',
',275,,,275,275,275,275,275,275,275,275,,275,275,275,,275,275,275,275',
'275,553,,,,,,,,,,,,,,,,553,553,,275,,,275,,,275,275,,,275,,,553,,553',
'275,553,553,,553,553,,,553,275,553,,,,275,275,275,275,,275,275,275,275',
',,,,275,275,,,,274,274,274,275,274,275,275,275,274,274,275,275,,274',
',274,274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274',
',,,,,,274,,,274,274,274,274,274,274,274,274,,274,274,274,,274,274,274',
'274,274,541,,,,,,,,,,,,,,,,541,541,,274,,,274,,,274,274,,,274,,,541',
',,274,541,541,,541,541,,,,274,,,,,274,274,274,274,,274,274,274,274,',
',,,274,274,,,,,,,274,,274,274,274,32,,274,274,,,,32,32,32,,,32,32,32',
'539,32,,,,,,,,32,32,32,32,,,,539,539,,,,32,32,,32,32,32,32,32,,,,539',
',539,,539,539,,539,539,,,,,,,,,,,32,32,32,32,32,32,32,32,32,32,32,32',
'32,32,,,32,32,32,,,32,,32,32,,,32,32,,32,,32,,32,,32,32,,32,32,32,32',
'32,,32,32,32,,,,,,,,,,,,,,32,,,32,32,,32,,32,957,957,957,,957,,32,,957',
'957,,,,957,,957,957,957,957,957,957,957,,,,,,957,957,957,957,957,957',
'957,,,957,,,,,,,957,,,957,957,957,957,957,957,957,957,,957,957,957,',
'957,957,957,957,957,540,,,,,,,,,,,,,,,,540,540,,957,,,957,,,957,957',
',,957,,,540,,540,957,540,540,,540,540,,,,957,,,,,957,957,957,957,,957',
'957,957,957,,,,,957,957,,,,963,963,963,957,963,957,957,957,963,963,957',
'957,,963,,963,963,963,963,963,963,963,,,,,,963,963,963,963,963,963,963',
',,963,,,,,,,963,,,963,963,963,963,963,963,963,963,,963,963,963,,963',
'963,963,963,963,,,,,,,,,,,,,,,,,,,,963,,,963,,,963,963,,,963,,,,,,963',
',,,,,,,,963,,,,,963,963,963,963,,963,963,963,963,,,,,963,963,,,,,,,963',
',963,963,963,33,,963,963,,,,33,33,33,,,33,33,33,,33,,,,,,,,33,,33,33',
',,,,,,,,33,33,,33,33,33,33,33,,,,,,,,,,,,,,,,,,,,,,,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,,,33,33,33,,,33,,33,33,,,33,33,,33,,33,,33,',
'33,33,,33,33,33,33,33,,33,,33,,,,,,,,,,,,,,33,,,33,33,,33,,33,34,34',
'34,,34,,33,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,34,,,,,,34',
',,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,685,685,685,34,685,34,34,34',
'685,685,34,34,,685,,685,685,685,685,685,685,685,,,,,,685,685,685,685',
'685,685,685,,,685,,,,,,,685,,,685,685,685,685,685,685,685,685,,685,685',
'685,,685,685,685,685,685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,685,,,685',
',,,,,685,,,,,,,,,685,,,,,685,685,685,685,,685,685,685,685,,,,,685,685',
',,,616,616,616,685,616,685,685,685,616,616,685,685,,616,,616,616,616',
'616,616,616,616,,,,,,616,616,616,616,616,616,616,,,616,,,,,,,616,,,616',
'616,616,616,616,616,616,616,616,616,616,616,,616,616,616,616,616,,,',
',,,,,,,,,,,,,,,,616,,,616,,,616,616,,,616,,,,,,616,,,616,,,,,,616,,',
',,616,616,616,616,,616,616,616,616,,,,,616,616,,,,613,613,613,616,613',
'616,616,616,613,613,616,616,,613,,613,613,613,613,613,613,613,,,,,,613',
'613,613,613,613,613,613,,,613,,,,,,,613,,,613,613,613,613,613,613,613',
'613,613,613,613,613,,613,613,613,613,613,,,,,,,,,,,,,,,,,,,,613,,,613',
',,613,613,,,613,,613,,,,613,,,613,,,,,,613,,,,,613,613,613,613,,613',
'613,613,613,,,,,613,613,,,,239,239,239,613,239,613,613,613,239,239,613',
'613,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239',
',,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,,239',
'239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239',
',,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239,239,,,607',
'607,607,239,607,239,239,239,607,607,239,239,,607,,607,607,607,607,607',
'607,607,,,,,,607,607,607,607,607,607,607,,,607,,,,,,,607,,,607,607,607',
'607,607,607,607,607,,607,607,607,,607,607,607,607,607,,,,,,,,,,,,,,',
',,,,,607,,,607,,,607,607,,,607,,,,,,607,,,,,,,,,607,,,,,607,607,607',
'607,,607,607,607,607,,,,,607,607,,,,605,605,605,607,605,607,607,607',
'605,605,607,607,,605,,605,605,605,605,605,605,605,,,,,,605,605,605,605',
'605,605,605,,,605,,,,,,,605,,,605,605,605,605,605,605,605,605,,605,605',
'605,,605,605,605,605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605',
',,,,,605,,,,,,,,,605,,,,,605,605,605,605,,605,605,605,605,,,,,605,605',
',,,602,602,602,605,602,605,605,605,602,602,605,605,,602,,602,602,602',
'602,602,602,602,,,,,,602,602,602,602,602,602,602,,,602,,,,,,,602,,,602',
'602,602,602,602,602,602,602,,602,602,602,,602,602,602,602,602,,,,,,',
',,,,,,,,,,,,,602,,,602,,,602,602,,,602,,,,,,602,,,,,,,,,602,,,,,602',
'602,602,602,,602,602,602,602,,,,,602,602,,,,877,877,877,602,877,602',
'602,602,877,877,602,602,,877,,877,877,877,877,877,877,877,,,,,,877,877',
'877,877,877,877,877,,,877,,,,,,,877,,,877,877,877,877,877,877,877,877',
',877,877,877,,877,877,877,877,877,,,,,,,,,,,,,,,,,,,,877,,,877,,,877',
'877,,,877,,,,,,877,,,,,,,,,877,,,,,877,877,877,877,,877,877,877,877',
',,,,877,877,,,,238,238,238,877,238,877,877,877,238,238,877,877,,238',
',238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238',
',,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238,238',
'238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,',
',,238,,,,,238,238,238,238,,238,238,238,238,,,,,238,238,,,,,,,238,,238',
'238,238,557,,238,238,,,,557,557,557,,,557,557,557,409,557,409,409,409',
'409,409,,,557,557,557,,,,409,,,,,,557,557,,557,557,557,557,557,,707',
',707,707,707,707,707,409,409,,,,,,,707,409,409,409,409,,,,409,,1140',
',1140,1140,1140,1140,1140,557,,,,,707,,557,1140,,,,557,557,707,707,707',
'707,,,,707,,,,,,,,,1140,409,,,,557,557,,,,,1140,1140,,,,1140,,,,557',
',,557,,562,562,562,557,562,,707,,562,562,557,,,562,,562,562,562,562',
'562,562,562,,,,,,562,562,562,562,562,562,562,,,562,,,,,,,562,,,562,562',
'562,562,562,562,562,562,,562,562,562,,562,562,562,562,562,,,,,,,,,,',
',,,,,,,,,562,,,562,,,562,562,,,562,,,,,,562,,,,,,,,,562,,,,,562,562',
'562,562,,562,562,562,562,,,,,562,562,,,,237,237,237,562,237,562,562',
'562,237,237,562,562,,237,,237,237,237,237,237,237,237,,,,,,237,237,237',
'237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237',
'237,237,,237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237',
',,237,,,,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,',
'237,237,,,,572,572,572,237,572,237,237,237,572,572,237,237,,572,,572',
'572,572,572,572,572,572,,,,,,572,572,572,572,572,572,572,,,572,,,,,',
',572,,,572,572,572,572,572,572,572,572,572,572,572,572,,572,572,572',
'572,572,,,,,,,,,,,,,,,,,,,,572,,,572,,,572,572,,,572,,572,,572,,572',
',,572,,,,,,572,,,,,572,572,572,572,,572,572,572,572,,,,,572,572,,,,574',
'574,574,572,574,572,572,572,574,574,572,572,,574,,574,574,574,574,574',
'574,574,,,,,,574,574,574,574,574,574,574,,,574,,,,,,,574,,,574,574,574',
'574,574,574,574,574,574,574,574,574,,574,574,574,574,574,,,,,,,,,,,',
',,,,,,,,574,,,574,,,574,574,,,574,,,,574,,574,,,574,,,,,,574,,,,,574',
'574,574,574,,574,574,574,574,,,,,574,574,,,,576,576,576,574,576,574',
'574,574,576,576,574,574,,576,,576,576,576,576,576,576,576,,,,,,576,576',
'576,576,576,576,576,,,576,,,,,,,576,,,576,576,576,576,576,576,576,576',
',576,576,576,,576,576,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576,,,576',
'576,,,576,,,,,,576,,,,,,,,,576,,,,,576,576,576,576,,576,576,576,576',
',,,,576,576,,,,,,,576,,576,576,576,,,576,576,582,582,582,582,582,,,',
'582,582,,,,582,,582,582,582,582,582,582,582,,,,,,582,582,582,582,582',
'582,582,,,582,,,,,,582,582,582,582,582,582,582,582,582,582,582,582,',
'582,582,582,,582,582,582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582',
'582,,,582,,582,,,,582,,,,,,,,,582,,,,,582,582,582,582,,582,582,582,582',
',,,,582,582,,,,,,582,582,,582,582,582,,,582,582,592,592,592,,592,,,',
'592,592,,,,592,,592,592,592,592,592,592,592,,,,,,592,592,592,592,592',
'592,592,,,592,,,,,,,592,,,592,592,592,592,592,592,592,592,592,592,592',
'592,,592,592,592,592,592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592',
',592,,592,,592,,,592,,,,,,592,,,,,592,592,592,592,,592,592,592,592,',
',,,592,592,,,,306,306,306,592,306,592,592,592,306,306,592,592,,306,',
'306,306,306,306,306,306,306,,,,,,306,306,306,306,306,306,306,,,306,',
',,,,,306,,,306,306,306,306,306,306,306,306,306,306,306,306,,306,306',
'306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,,,306,306,,,306,,306,,306,',
'306,,,306,,,,,,306,,,,,306,306,306,306,,306,306,306,306,,,,,306,306',
',,,890,890,890,306,890,306,306,306,890,890,306,306,,890,,890,890,890',
'890,890,890,890,,,,,,890,890,890,890,890,890,890,,,890,,,,,,,890,,,890',
'890,890,890,890,890,890,890,,890,890,890,,890,890,890,890,890,,,,,,',
',,,,,,,,,,,,,890,,,890,,,890,890,,,890,,,,,,890,,,,,,,,,890,,,,,890',
'890,890,890,,890,890,890,890,,,,,890,890,,,,891,891,891,890,891,890',
'890,890,891,891,890,890,,891,,891,891,891,891,891,891,891,,,,,,891,891',
'891,891,891,891,891,,,891,,,,,,,891,,,891,891,891,891,891,891,891,891',
',891,891,891,,891,891,891,891,891,,,,,,,,,,,,,,,,,,,,891,,,891,,,891',
'891,,,891,,,,,,891,,,,,,,,,891,,,,,891,891,891,891,,891,891,891,891',
',,,,891,891,,,,307,307,307,891,307,891,891,891,307,307,891,891,,307',
',307,307,307,307,307,307,307,,,,,,307,307,307,307,307,307,307,,,307',
',,,,,,307,,,307,307,307,307,307,307,307,307,307,307,307,307,,307,307',
'307,307,307,,,,,,,,,,,,,,,,,,,,307,,,307,,,307,307,,,307,,307,,307,',
'307,,,307,,,,,,307,,,,,307,307,307,307,,307,307,307,307,,,,,307,307',
',,,315,315,315,307,315,307,307,307,315,315,307,307,,315,,315,315,315',
'315,315,315,315,,,,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315',
'315,315,315,315,315,315,315,315,315,315,315,,315,315,315,315,315,,,',
',,,,,,,,,,,,,,,,315,,,315,,,315,315,,,315,,315,,315,,315,,,315,,,,,',
'315,,,,,315,315,315,315,,315,315,315,315,,,,,315,315,315,,,322,322,322',
'315,322,315,315,315,322,322,315,315,,322,,322,322,322,322,322,322,322',
',,,,,322,322,322,322,322,322,322,,,322,,,,,,,322,,,322,322,322,322,322',
'322,322,322,,322,322,322,,322,322,322,322,322,,,,,,,,,,,,,,,,,,,,322',
',,322,,,322,322,,,322,,,,,,322,,,,,,,,,322,,,,,322,322,322,322,,322',
'322,322,322,,,,,322,322,,,,324,324,324,322,324,322,322,322,324,324,322',
'322,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324,324',
',,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324,,324',
'324,324,324,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,,,,324',
',,,,,,,,324,,,,,324,324,324,324,,324,324,324,324,,,,,324,324,,,,327',
'327,327,324,327,324,324,324,327,327,324,324,,327,,327,327,327,327,327',
'327,327,,,,,,327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327',
'327,327,327,327,327,,327,327,327,,327,327,327,327,327,,,,,,,,,,,,,,',
',,,,,327,,,327,,,327,327,,,327,,,,,,327,,,,,,,,,327,,,,,327,327,327',
'327,,327,327,327,327,,,,,327,327,,,,328,328,328,327,328,327,327,327',
'328,328,327,327,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328',
'328,328,328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328',
'328,,328,328,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328',
',,,,,328,,,,,,,,,328,,,,,328,328,328,328,,328,328,328,328,,,,,328,328',
',,,283,283,283,328,283,328,328,328,283,283,328,328,,283,,283,283,283',
'283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283',
'283,283,283,283,283,283,283,,283,283,283,,283,283,283,283,283,,,,,,',
',,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283,,,,,283',
'283,283,283,,283,283,283,283,,,,,283,283,,,,919,919,919,283,919,283',
'283,283,919,919,283,283,,919,,919,919,919,919,919,919,919,,,,,,919,919',
'919,919,919,919,919,,,919,,,,,,,919,,,919,919,919,919,919,919,919,919',
',919,919,919,,919,919,919,919,919,,,,,,,,,,,,,,,,,,,,919,,,919,,,919',
'919,,,919,,,,,,919,,,,,,,,,919,,,,,919,919,919,919,,919,919,919,919',
',,,,919,919,,,,920,920,920,919,920,919,919,919,920,920,919,919,,920',
',920,920,920,920,920,920,920,,,,,,920,920,920,920,920,920,920,,,920',
',,,,,,920,,,920,920,920,920,920,920,920,920,,920,920,920,,920,920,920',
'920,920,,,,,,,,,,,,,,,,,,,,920,,,920,,,920,920,,,920,,,,,,920,,,,,,',
',,920,,,,,920,920,920,920,,920,920,920,920,,,,,920,920,,,,921,921,921',
'920,921,920,920,920,921,921,920,920,,921,,921,921,921,921,921,921,921',
',,,,,921,921,921,921,921,921,921,,,921,,,,,,,921,,,921,921,921,921,921',
'921,921,921,,921,921,921,,921,921,921,921,921,,,,,,,,,,,,,,,,,,,,921',
',,921,,,921,921,,,921,,,,,,921,,,,,,,,,921,,,,,921,921,921,921,,921',
'921,921,921,,,,,921,921,,,,922,922,922,921,922,921,921,921,922,922,921',
'921,,922,,922,922,922,922,922,922,922,,,,,,922,922,922,922,922,922,922',
',,922,,,,,,,922,,,922,922,922,922,922,922,922,922,,922,922,922,,922',
'922,922,922,922,,,,,,,,,,,,,,,,,,,,922,,,922,,,922,922,,,922,,,,,,922',
',,,,,,,,922,,,,,922,922,922,922,,922,922,922,922,,,,,922,922,,,,923',
'923,923,922,923,922,922,922,923,923,922,922,,923,,923,923,923,923,923',
'923,923,,,,,,923,923,923,923,923,923,923,,,923,,,,,,,923,,,923,923,923',
'923,923,923,923,923,,923,923,923,,923,923,923,923,923,,,,,,,,,,,,,,',
',,,,,923,,,923,,,923,923,,,923,,,,,,923,,,,,,,,,923,,,,,923,923,923',
'923,,923,923,923,923,,,,,923,923,,,,924,924,924,923,924,923,923,923',
'924,924,923,923,,924,,924,924,924,924,924,924,924,,,,,,924,924,924,924',
'924,924,924,,,924,,,,,,,924,,,924,924,924,924,924,924,924,924,,924,924',
'924,,924,924,924,924,924,,,,,,,,,,,,,,,,,,,,924,,,924,,,924,924,,,924',
',,,,,924,,,,,,,,,924,,,,,924,924,924,924,,924,924,924,924,,,,,924,924',
',,,278,278,278,924,278,924,924,924,278,278,924,924,,278,,278,278,278',
'278,278,278,278,,,,,,278,278,278,278,278,278,278,,,278,,,,,,,278,,,278',
'278,278,278,278,278,278,278,,278,278,278,,278,278,278,278,278,,,,,,',
',,,,,,,,,,,,,278,,,278,,,278,278,,,278,,,,,,278,,,,,,,,,278,,,,,278',
'278,278,278,,278,278,278,278,,,,,278,278,,,,,,,278,,278,278,278,,,278',
'278,333,333,333,333,333,,,,333,333,,,,333,,333,333,333,333,333,333,333',
',,,,,333,333,333,333,333,333,333,,,333,,,,,,333,333,,333,333,333,333',
'333,333,333,333,333,,333,333,333,,333,333,333,333,333,,,,,,,,,,,,,,',
',,,,,333,,,333,,,333,333,,,333,,333,,,,333,,,,,,,,,333,,,,,333,333,333',
'333,,333,333,333,333,,,,,333,333,,,,802,802,802,333,802,333,333,333',
'802,802,333,333,,802,,802,802,802,802,802,802,802,,,,,,802,802,802,802',
'802,802,802,,,802,,,,,,,802,,,802,802,802,802,802,802,802,802,,802,802',
'802,,802,802,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802',
',,,,,802,,,,,,,,,802,,,,,802,802,802,802,,802,802,802,802,,,,,802,802',
',,,799,799,799,802,799,802,802,802,799,799,802,802,,799,,799,799,799',
'799,799,799,799,,,,,,799,799,799,799,799,799,799,,,799,,,,,,,799,,,799',
'799,799,799,799,799,799,799,,799,799,799,,799,799,799,799,799,,,,,,',
',,,,,,,,,,,,,799,,,799,,,799,799,,,799,,,,,,799,,,,,,,,,799,,,,,799',
'799,799,799,,799,799,799,799,,,,,799,799,,,,986,986,986,799,986,799',
'799,799,986,986,799,799,,986,,986,986,986,986,986,986,986,,,,,,986,986',
'986,986,986,986,986,,,986,,,,,,,986,,,986,986,986,986,986,986,986,986',
',986,986,986,,986,986,986,986,986,,,,,,,,,,,,,,,,,,,,986,,,986,,,986',
'986,,,986,,,,,,986,,,,,,,,,986,,,,,986,986,986,986,,986,986,986,986',
',,,,986,986,,,,991,991,991,986,991,986,986,986,991,991,986,986,,991',
',991,991,991,991,991,991,991,,,,,,991,991,991,991,991,991,991,,,991',
',,,,,,991,,,991,991,991,991,991,991,991,991,,991,991,991,,991,991,991',
'991,991,,,,,,,,,,,,,,,,,,,,991,,,991,,,991,991,,,991,,991,,,,991,,,',
',,,,,991,,,,,991,991,991,991,,991,991,991,991,,,,,991,991,,,,35,35,35',
'991,35,991,991,991,35,35,991,991,,35,,35,35,35,35,35,35,35,,,,,,35,35',
'35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,',
'35,35,35,35,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,35,,35,,35,',
',35,,,,,,35,,,,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,273,273,273,35',
'273,35,35,35,273,273,35,35,,273,,273,273,273,273,273,273,273,,,,,,273',
'273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273',
'273,,273,273,273,,273,273,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,',
',273,273,,,273,,,,,,273,,,,,,,,,273,,,,,273,273,273,273,,273,273,273',
'273,,,,,273,273,,,,36,36,36,273,36,273,273,273,36,36,273,273,,36,,36',
'36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36',
'36,36,36,36,36,36,36,36,36,,36,36,36,36,36,,,,,,,,,,,,,,,,,,,,36,,,36',
',,36,36,,,36,,36,,36,,36,,,36,,,,,,36,,,,,36,36,36,36,,36,36,36,36,',
',,,36,36,,,,790,790,790,36,790,36,36,36,790,790,36,36,,790,,790,790',
'790,790,790,790,790,,,,,,790,790,790,790,790,790,790,,,790,,,,,,,790',
',,790,790,790,790,790,790,790,790,790,790,790,790,,790,790,790,790,790',
',,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,790,,790,,790,,,790,,',
',,,790,,,,,790,790,790,790,,790,790,790,790,,,,,790,790,,,,1010,1010',
'1010,790,1010,790,790,790,1010,1010,790,790,,1010,,1010,1010,1010,1010',
'1010,1010,1010,,,,,,1010,1010,1010,1010,1010,1010,1010,,,1010,,,,,,',
'1010,,,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,',
'1010,1010,1010,1010,1010,,,,,,,,,,,,,,,,,,,,1010,,,1010,,,1010,1010',
',,1010,,,,1010,,1010,,,1010,,,,,,1010,,,,,1010,1010,1010,1010,,1010',
'1010,1010,1010,,,,,1010,1010,,,,849,849,849,1010,849,1010,1010,1010',
'849,849,1010,1010,,849,,849,849,849,849,849,849,849,,,,,,849,849,849',
'849,849,849,849,,,849,,,,,,,849,,,849,849,849,849,849,849,849,849,,849',
'849,849,,849,849,849,849,849,,,,,,,,,,,,,,,,,,,,849,,,849,,,849,849',
',,849,,,,,,849,,,,,,,,,849,,,,,849,849,849,849,,849,849,849,849,,,,',
'849,849,,,,299,299,299,849,299,849,849,849,299,299,849,849,,299,,299',
'299,299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,',
',299,,,299,299,299,299,299,299,299,299,,299,299,299,,299,299,299,299',
'299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,299,,,,,,,,,299',
',,,,299,299,299,299,,299,299,299,299,,,,,299,299,,,,1036,1036,1036,299',
'1036,299,299,299,1036,1036,299,299,,1036,,1036,1036,1036,1036,1036,1036',
'1036,,,,,,1036,1036,1036,1036,1036,1036,1036,,,1036,,,,,,,1036,,,1036',
'1036,1036,1036,1036,1036,1036,1036,,1036,1036,1036,,1036,1036,1036,1036',
'1036,,,,,,,,,,,,,,,,,,,,1036,,,1036,,,1036,1036,,,1036,,,,,,1036,,,',
',,,,,1036,,,,,1036,1036,1036,1036,,1036,1036,1036,1036,,,,,1036,1036',
',,,272,272,272,1036,272,1036,1036,1036,272,272,1036,1036,,272,,272,272',
'272,272,272,272,272,,,,,,272,272,272,272,272,272,272,,,272,,,,,,,272',
',,272,272,272,272,272,272,272,272,,272,272,272,,272,272,272,272,272',
',,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,,272,,,,,,272,,,,,,,,,272,,',
',,272,272,272,272,,272,272,272,272,,,,,272,272,,,,271,271,271,272,271',
'272,272,272,271,271,272,272,,271,,271,271,271,271,271,271,271,,,,,,271',
'271,271,271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271',
'271,,271,271,271,,271,271,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,',
',271,271,,,271,,,,,,271,,,,,,,,,271,,,,,271,271,271,271,,271,271,271',
'271,,,,,271,271,,,,270,270,270,271,270,271,271,271,270,270,271,271,',
'270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270,,',
'270,,,,,,,270,,,270,270,270,270,270,270,270,270,,270,270,270,,270,270',
'270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,,',
',,,,,,270,,,,,270,270,270,270,,270,270,270,270,,,,,270,270,,,,369,369',
'369,270,369,270,270,270,369,369,270,270,,369,,369,369,369,369,369,369',
'369,,,,,,369,369,369,369,369,369,369,,,369,,,,,,,369,,,369,369,369,369',
'369,369,369,369,,369,369,369,,369,369,369,369,369,,,,,,,,,,,,,,,,,,',
',369,,,369,,,369,369,,,369,,,,,,369,,,,,,,,,369,,,,,369,369,369,369',
',369,369,369,369,,,,,369,369,,,,46,46,46,369,46,369,369,369,46,46,369',
'369,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46',
',,46,46,46,46,46,46,46,46,,46,46,46,,46,46,46,46,46,,,,,,,,,,,,,,,,',
',,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,,46,,,,,46,46,46,46,,46,46,46',
'46,,,,,46,46,,,,820,820,820,46,820,46,46,46,820,820,46,46,,820,,820',
'820,820,820,820,820,820,,,,,,820,820,820,820,820,820,820,,,820,,,,,',
',820,,,820,820,820,820,820,820,820,820,,820,820,820,,820,820,820,820',
'820,,,,,,,,,,,,,,,,,,,,820,,,820,,,820,820,,,820,,,,,,820,,,,,,,,,820',
',,,,820,820,820,820,,820,820,820,820,,,,,820,820,,,,47,47,47,820,47',
'820,820,820,47,47,820,820,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47',
'47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,47',
'47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,,47,,,',
',47,47,47,47,,47,47,47,47,,,,,47,47,,,,269,269,269,47,269,47,47,47,269',
'269,47,47,,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269',
'269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269,269,269',
',269,269,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,',
',,,269,,,,,,,,,269,,,,,269,269,269,269,,269,269,269,269,,,,,269,269',
',,,268,268,268,269,268,269,269,269,268,268,269,269,,268,,268,268,268',
'268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268',
'268,268,268,268,268,268,268,,268,268,268,,268,268,268,268,268,,,,,,',
',,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,,268,,,,,268',
'268,268,268,,268,268,268,268,,,,,268,268,,,,49,49,49,268,49,268,268',
'268,49,49,268,268,,49,,49,49,49,49,49,49,49,,,,,,49,49,49,49,49,49,49',
',,49,,,,,,,49,,,49,49,49,49,49,49,49,49,,49,49,49,,49,49,49,49,49,,',
',,,,,,,,,,,,,,,,,49,,,49,,,49,49,,,49,,,,,,49,,,,,,,,,49,,,,,49,49,49',
'49,,49,49,49,49,,,,,49,49,,,,267,267,267,49,267,49,49,49,267,267,49',
'49,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267',
',,267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,,267',
'267,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267',
',,,,,,,,267,,,,,267,267,267,267,,267,267,267,267,,,,,267,267,,,,50,50',
'50,267,50,267,267,267,50,50,267,267,,50,,50,50,50,50,50,50,50,,,,,,50',
'50,50,50,50,50,50,,,50,,,,,,,50,,,50,50,50,50,50,50,50,50,,50,50,50',
',50,50,50,50,50,,,,,,,,,,,,,,,,,,,,50,,,50,,,50,50,,,50,,,,,,50,,,,',
',,,,50,,,,,50,50,50,50,,50,50,50,50,,,,,50,50,,,,266,266,266,50,266',
'50,50,50,266,266,50,50,,266,,266,266,266,266,266,266,266,,,,,,266,266',
'266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266',
',266,266,266,,266,266,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266',
'266,,,266,,,,,,266,,,,,,,,,266,,,,,266,266,266,266,,266,266,266,266',
',,,,266,266,,,,735,735,735,266,735,266,266,266,735,735,266,266,,735',
',735,735,735,735,735,735,735,,,,,,735,735,735,735,735,735,735,,,735',
',,,,,,735,,,735,735,735,735,735,735,735,735,,735,735,735,,735,735,735',
'735,735,,,,,,,,,,,,,,,,,,,,735,,,735,,,735,735,,,735,,,,,,735,,,,,,',
',,735,,,,,735,735,735,735,,735,735,735,735,,,,,735,735,,,,734,734,734',
'735,734,735,735,735,734,734,735,735,,734,,734,734,734,734,734,734,734',
',,,,,734,734,734,734,734,734,734,,,734,,,,,,,734,,,734,734,734,734,734',
'734,734,734,,734,734,734,,734,734,734,734,734,,,,,,,,,,,,,,,,,,,,734',
',,734,,,734,734,,,734,,,,,,734,,,,,,,,,734,,,,,734,734,734,734,,734',
'734,734,734,,,,,734,734,,,,869,869,869,734,869,734,734,734,869,869,734',
'734,,869,,869,869,869,869,869,869,869,,,,,,869,869,869,869,869,869,869',
',,869,,,,,,,869,,,869,869,869,869,869,869,869,869,,869,869,869,,869',
'869,869,869,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869,,,869,,,,,,869',
',,,,,,,,869,,,,,869,869,869,869,,869,869,869,869,,,,,869,869,,,,386',
'386,386,869,386,869,869,869,386,386,869,869,,386,,386,386,386,386,386',
'386,386,,,,,,386,386,386,386,386,386,386,,,386,,,,,,,386,,,386,386,386',
'386,386,386,386,386,,386,386,386,,386,386,386,386,386,,,,,,,,,,,,,,',
',,,,,386,,,386,,,386,386,,,386,,,,,,386,,,,,,,,,386,,,,,386,386,386',
'386,,386,386,386,386,,,,,386,386,,,,265,265,265,386,265,386,386,386',
'265,265,386,386,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265',
'265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265',
'265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265',
',,,,,265,,,,,,,,,265,,,,,265,265,265,265,,265,265,265,265,,,,,265,265',
',,,264,264,264,265,264,265,265,265,264,264,265,265,,264,,264,264,264',
'264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264',
'264,264,264,264,264,264,264,,264,264,264,,264,264,264,264,264,,,,,,',
',,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,,264,,,,,264',
'264,264,264,,264,264,264,264,,,,,264,264,,,,263,263,263,264,263,264',
'264,264,263,263,264,264,,263,,263,263,263,263,263,263,263,,,,,,263,263',
'263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263',
',263,263,263,,263,263,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263',
'263,,,263,,,,,,263,,,,,,,,,263,,,,,263,263,263,263,,263,263,263,263',
',,,,263,263,,,,262,262,262,263,262,263,263,263,262,262,263,263,,262',
',262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262',
',,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,262',
'262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,',
',,262,,,,,262,262,262,262,,262,262,262,262,,,,,262,262,,,,24,24,24,262',
'24,262,262,262,24,24,262,262,,24,,24,24,24,24,24,24,24,,,,,,24,24,24',
'24,24,24,24,,,24,,,,,,,24,,,24,24,24,24,24,24,24,24,,24,24,24,,24,24',
'24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24,,,24,24,,,24,,,,,,24,,,,,,,,,24',
',,,,24,24,24,24,,24,24,24,24,,,,,24,24,,,,261,261,261,24,261,24,24,24',
'261,261,24,24,,261,,261,261,261,261,261,261,261,,,,,,261,261,261,261',
'261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261',
'261,,261,261,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261',
',,,,,261,,,,,,,,,261,,,,,261,261,261,261,,261,261,261,261,,,,,261,261',
',,,1149,1149,1149,261,1149,261,261,261,1149,1149,261,261,,1149,,1149',
'1149,1149,1149,1149,1149,1149,,,,,,1149,1149,1149,1149,1149,1149,1149',
',,1149,,,,,,,1149,,,1149,1149,1149,1149,1149,1149,1149,1149,,1149,1149',
'1149,,1149,1149,1149,1149,1149,,,,,,,,,,,,,,,,,,,,1149,,,1149,,,1149',
'1149,,,1149,,,,,,1149,,,,,,,,,1149,,,,,1149,1149,1149,1149,,1149,1149',
'1149,1149,,,,,1149,1149,,,,1150,1150,1150,1149,1150,1149,1149,1149,1150',
'1150,1149,1149,,1150,,1150,1150,1150,1150,1150,1150,1150,,,,,,1150,1150',
'1150,1150,1150,1150,1150,,,1150,,,,,,,1150,,,1150,1150,1150,1150,1150',
'1150,1150,1150,,1150,1150,1150,,1150,1150,1150,1150,1150,,,,,,,,,,,',
',,,,,,,,1150,,,1150,,,1150,1150,,,1150,,,,,,1150,,,,,,,,,1150,,,,,1150',
'1150,1150,1150,,1150,1150,1150,1150,,,,,1150,1150,,,,52,52,52,1150,52',
'1150,1150,1150,52,52,1150,1150,,52,,52,52,52,52,52,52,52,,,,,,52,52',
'52,52,52,52,52,,,52,,,,,,,52,,,52,52,52,52,52,52,52,52,,52,52,52,,52',
'52,52,52,52,,,,,,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,',
'52,,,,,52,52,52,52,,52,52,52,52,,,,,52,52,,,,712,712,712,52,712,52,52',
'52,712,712,52,52,,712,,712,712,712,712,712,712,712,,,,,,712,712,712',
'712,712,712,712,,,712,,,,,,,712,,,712,712,712,712,712,712,712,712,,712',
'712,712,,712,712,712,712,712,,,,,,,,,,,,,,,,,,,,712,,,712,,,712,712',
',,712,,,,,,712,,,,,,,,,712,,,,,712,712,712,712,,712,712,712,712,,,,',
'712,712,,,,1162,1162,1162,712,1162,712,712,712,1162,1162,712,712,,1162',
',1162,1162,1162,1162,1162,1162,1162,,,,,,1162,1162,1162,1162,1162,1162',
'1162,,,1162,,,,,,,1162,,,1162,1162,1162,1162,1162,1162,1162,1162,1162',
'1162,1162,1162,,1162,1162,1162,1162,1162,,,,,,,,,,,,,,,,,,,,1162,,,1162',
',,1162,1162,,,1162,,1162,,1162,,1162,,,1162,,,,,,1162,,,,,1162,1162',
'1162,1162,,1162,1162,1162,1162,,,,,1162,1162,,,,260,260,260,1162,260',
'1162,1162,1162,260,260,1162,1162,,260,,260,260,260,260,260,260,260,',
',,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260',
'260,260,260,,260,260,260,,260,260,260,260,260,,,,,,,,,,,,,,,,,,,,260',
',,260,,,260,260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260,260,260,,260',
'260,260,260,,,,,260,260,,,,,,,260,,260,260,260,,,260,260,7,7,7,7,7,',
',,7,7,,,,7,,7,7,7,7,7,7,7,,,,,,7,7,7,7,7,7,7,,,7,,,,,,7,7,7,7,7,7,7',
'7,7,7,7,7,,7,7,7,,7,7,7,7,7,,,,,,,,,,,,,,,,,,,,7,,,7,,,7,7,,,7,,7,,',
',7,,,,,,,,,7,,,,,7,7,7,7,,7,7,7,7,,,,,7,7,,,,,,,7,,7,7,7,64,,7,7,,,',
'64,64,64,,,64,64,64,,64,,,,,,,,64,,64,64,64,,,,,,,,64,64,,64,64,64,64',
'64,,,,,,,,,,,,,,,,,,,,,,,64,64,64,64,64,64,64,64,64,64,64,64,64,64,',
',64,64,64,,,64,,,64,,,64,64,,64,,64,,64,,64,64,,64,64,64,64,64,,64,',
'64,,,,,,,,,,,,,,64,,,64,64,64,64,,64,,64,,696,696,696,64,696,,,,696',
'696,,,,696,,696,696,696,696,696,696,696,,,,,,696,696,696,696,696,696',
'696,,,696,,,,,,,696,,,696,696,696,696,696,696,696,696,,696,696,696,',
'696,696,696,696,696,,,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696,,696',
',,,696,,,,,,,,,696,,,,,696,696,696,696,,696,696,696,696,,,,,696,696',
',,,259,259,259,696,259,696,696,696,259,259,696,696,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,259,259,259,,,,,,',
',,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259',
'259,259,259,,259,259,259,259,,,,,259,259,,,,407,407,407,259,407,259',
'259,259,407,407,259,259,,407,,407,407,407,407,407,407,407,,,,,,407,407',
'407,407,407,407,407,,,407,,,,,,,407,,,407,407,407,407,407,407,407,407',
',407,407,407,,407,407,407,407,407,,,,,,,,,,,,,,,,,,,,407,,,407,,,407',
'407,,,407,,,,,,407,,,,,,,,,407,,,,,407,407,407,407,,407,407,407,407',
',,,,407,407,,,,258,258,258,407,258,407,407,407,258,258,407,407,,258',
',258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258',
',,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,258',
'258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,',
',,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,257,257,257',
'258,257,258,258,258,257,257,258,258,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257',
'257,257,257,,,,,257,257,,,,690,690,690,257,690,257,257,257,690,690,257',
'257,,690,,690,690,690,690,690,690,690,,,,,,690,690,690,690,690,690,690',
',,690,,,,,,,690,,,690,690,690,690,690,690,690,690,,690,690,690,,690',
'690,690,690,690,,,,,,,,,,,,,,,,,,,,690,,,690,,,690,690,,,690,,,,,,690',
',,,,,,,,690,,,,,690,690,690,690,,690,690,690,690,,,,,690,690,,,,689',
'689,689,690,689,690,690,690,689,689,690,690,,689,,689,689,689,689,689',
'689,689,,,,,,689,689,689,689,689,689,689,,,689,,,,,,,689,,,689,689,689',
'689,689,689,689,689,,689,689,689,,689,689,689,689,689,,,,,,,,,,,,,,',
',,,,,689,,,689,,,689,689,,,689,,,,,,689,,,,,,,,,689,,,,,689,689,689',
'689,,689,689,689,689,,,,,689,689,,,,,,,689,,689,689,689,,,689,689,66',
'66,66,66,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66',
'66,66,,,66,,,,,,66,66,,66,66,66,66,66,66,66,66,66,,66,66,66,,66,66,66',
'66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,66,,,,66,,,,,,,,,66,',
',,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,67,67,67,66,67,66,66,66,67',
'67,66,66,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,',
',,,,67,,,67,67,67,67,67,67,67,67,67,67,67,67,,67,67,67,67,67,,,,,,,',
',,,,,,,,,,,,67,,,67,,,67,67,,,67,,67,,,,67,,,67,,,,,,67,,,,,67,67,67',
'67,,67,67,67,67,,,,,67,67,,,,68,68,68,67,68,67,67,67,68,68,67,67,,68',
',68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68',
'68,68,68,68,68,68,68,68,68,68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68',
',,68,,,68,68,,,68,,,,,,68,,,68,,,,,,68,,,,,68,68,68,68,,68,68,68,68',
',,,,68,68,,,,436,436,436,68,436,68,68,68,436,436,68,68,,436,,436,436',
'436,436,436,436,436,,,,,,436,436,436,436,436,436,436,,,436,,,,,,,436',
',,436,436,436,436,436,436,436,436,,436,436,436,,436,436,436,436,436',
',,,,,,,,,,,,,,,,,,,436,,,436,,,436,436,,,436,,,,,,436,,,,,,,,,436,,',
',,436,436,436,436,,436,436,436,436,,,,,436,436,,,,71,71,71,436,71,436',
'436,436,71,71,436,436,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71',
'71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,71,71',
'71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,,71,,,,,71',
'71,71,71,,71,71,71,71,,,,,71,71,,,,72,72,72,71,72,71,71,71,72,72,71',
'71,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72',
',,72,72,72,72,72,72,72,72,,72,72,72,,72,72,72,72,72,,,,,,,,,,,,,,,,',
',,,72,,,72,,,72,72,,,72,,,,,,72,,,,,,,,,72,,,,,72,72,72,72,,72,72,72',
'72,,,,,72,72,,,,684,684,684,72,684,72,72,72,684,684,72,72,,684,,684',
'684,684,684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,',
',684,,,684,684,684,684,684,684,684,684,,684,684,684,,684,684,684,684',
'684,,,,,,,,,,,,,,,,,,,,684,,,684,,,684,684,,,684,,,,,,684,,,,,,,,,684',
',,,,684,684,684,684,,684,684,684,684,,,,,684,684,,,,75,75,75,684,75',
'684,684,684,75,75,684,684,,75,,75,75,75,75,75,75,75,,,,,,75,75,75,75',
'75,75,75,,,75,,,,,,,75,,,75,75,75,75,75,75,75,75,,75,75,75,,75,75,75',
'75,75,,,,,,,,,,,,,,,,,,,,75,,,75,,,75,75,,,75,,,,,,75,,,,,,,,,75,,,',
',75,75,75,75,,75,75,75,75,,,,,75,75,75,,,,,75,75,,75,75,75,,,75,75,683',
'683,683,,683,,,,683,683,,,,683,,683,683,683,683,683,683,683,,,,,,683',
'683,683,683,683,683,683,,,683,,,,,,,683,,,683,683,683,683,683,683,683',
'683,683,683,683,683,,683,683,683,683,683,,,,,,,,,,,,,,,,,,,,683,,,683',
',,683,683,,,683,,,,683,,683,,,683,,,,,,683,,,,,683,683,683,683,,683',
'683,683,683,,,,,683,683,,,,682,682,682,683,682,683,683,683,682,682,683',
'683,,682,,682,682,682,682,682,682,682,,,,,,682,682,682,682,682,682,682',
',,682,,,,,,,682,,,682,682,682,682,682,682,682,682,682,682,682,682,,682',
'682,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,,,682,,682,,682',
',682,,,682,,,,,,682,,,,,682,682,682,682,,682,682,682,682,,,,,682,682',
',,,,,,682,,682,682,682,460,,682,682,,,,460,460,460,,,460,460,460,,460',
',,,,,,,460,460,460,460,,,,,,,,,460,460,,460,460,460,460,460,,,,,,,,',
',,,,,,,,,,,,,,460,460,460,460,460,460,460,460,460,460,460,460,460,460',
',,460,460,460,,,460,,460,460,,,460,460,,460,,460,,460,,460,460,,460',
'460,460,460,460,,460,460,460,1229,,1229,1229,1229,1229,1229,,,,,,,460',
',1229,460,460,470,460,,460,,,,470,470,470,460,,470,470,470,,470,,,1229',
',,,,470,470,470,470,470,,1229,1229,,,,1229,470,470,,470,470,470,470',
'470,,,,,,,,,,,,,,,,,,,,,,,470,470,470,470,470,470,470,470,470,470,470',
'470,470,470,,,470,470,470,,,470,,,470,,,470,470,,470,,470,,470,,470',
'470,,470,470,470,470,470,,470,470,470,,,,,,,,,,,,,,470,,,470,470,470',
'470,,470,471,470,,,,,470,471,471,471,,,471,471,471,,471,,,,,,,,471,471',
'471,471,471,,,,,,,,471,471,,471,471,471,471,471,,,,,,,,,,,,,,,,,,,,',
',,471,471,471,471,471,471,471,471,471,471,471,471,471,471,,,471,471',
'471,,,471,,,471,,,471,471,,471,,471,,471,,471,471,,471,471,471,471,471',
',471,471,471,,,,,,,,,,,,,,471,,,471,471,471,471,,471,,471,,472,472,472',
'471,472,,,,472,472,,,,472,,472,472,472,472,472,472,472,,,,,,472,472',
'472,472,472,472,472,,,472,,,,,,,472,,,472,472,472,472,472,472,472,472',
',472,472,472,,472,472,472,472,472,,,,,,,,,,,,,,,,,,,,472,,,472,,,472',
'472,,,472,,,,,,472,,,,,,,,,472,,,,,472,472,472,472,,472,472,472,472',
',,,,472,472,,,,679,679,679,472,679,472,472,472,679,679,472,472,,679',
',679,679,679,679,679,679,679,,,,,,679,679,679,679,679,679,679,,,679',
',,,,,,679,,,679,679,679,679,679,679,679,679,,679,679,679,,679,679,679',
'679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,,679,,,,,,679,,,,,,',
',,679,,,,,679,679,679,679,,679,679,679,679,,,,,679,679,,,,,,,679,,679',
'679,679,,,679,679,124,124,124,124,124,,,,124,124,,,,124,,124,124,124',
'124,124,124,124,,,,,,124,124,124,124,124,124,124,,,124,,,,,,124,124',
'124,124,124,124,124,124,124,124,124,124,,124,124,124,,124,124,124,124',
'124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124,,124,,,,124,,,,,,,',
',124,,,,,124,124,124,124,,124,124,124,124,,,,,124,124,,,,,,124,124,',
'124,124,124,,,124,124,129,129,129,,129,,,,129,129,,,,129,,129,129,129',
'129,129,129,129,,,,,,129,129,129,129,129,129,129,,,129,,,,,,,129,,,129',
'129,129,129,129,129,129,129,,129,129,129,,129,129,129,129,129,,,,,,',
',,,,,,,,,,,,,129,,,129,,,129,129,,,129,,,,,,129,,,,,,,,,129,,,,,129',
'129,129,129,,129,129,129,129,,,,,129,129,,,,130,130,130,129,130,129',
'129,129,130,130,129,129,,130,,130,130,130,130,130,130,130,,,,,,130,130',
'130,130,130,130,130,,,130,,,,,,,130,,,130,130,130,130,130,130,130,130',
',130,130,130,,130,130,130,130,130,,,,,,,,,,,,,,,,,,,,130,,,130,,,130',
'130,,,130,,,,,,130,,,,,,,,,130,,,,,130,130,130,130,,130,130,130,130',
',,,,130,130,,,,131,131,131,130,131,130,130,130,131,131,130,130,,131',
',131,131,131,131,131,131,131,,,,,,131,131,131,131,131,131,131,,,131',
',,,,,,131,,,131,131,131,131,131,131,131,131,,131,131,131,,131,131,131',
'131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,,,,,,131,,,,,,',
',,131,,,,,131,131,131,131,,131,131,131,131,,,,,131,131,,,,132,132,132',
'131,132,131,131,131,132,132,131,131,,132,,132,132,132,132,132,132,132',
',,,,,132,132,132,132,132,132,132,,,132,,,,,,,132,,,132,132,132,132,132',
'132,132,132,,132,132,132,,132,132,132,132,132,,,,,,,,,,,,,,,,,,,,132',
',,132,,,132,132,,,132,,,,,,132,,,,,,,,,132,,,,,132,132,132,132,,132',
'132,132,132,,,,,132,132,,,,,,,132,,132,132,132,,,132,132,133,133,133',
'133,133,,,,133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133',
'133,133,133,133,133,,,133,,,,,,133,133,,133,133,133,133,133,133,133',
'133,133,,133,133,133,,133,133,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133',
',,133,133,,,133,,133,,,,133,,,,,,,,,133,,,,,133,133,133,133,,133,133',
'133,133,,,,,133,133,,,,,,,133,,133,133,133,,,133,133,678,678,678,678',
'678,,,,678,678,,,,678,,678,678,678,678,678,678,678,,,,,,678,678,678',
'678,678,678,678,,,678,,,,,,678,678,,678,678,678,678,678,678,678,678',
'678,,678,678,678,,678,678,678,678,678,,,,,,,,,,,,,,,,,,,,678,,,678,',
',678,678,,,678,,678,,,,678,,,,,,,,,678,,,,,678,678,678,678,,678,678',
'678,678,,,,,678,678,,,,499,499,499,678,499,678,678,678,499,499,678,678',
',499,,499,499,499,499,499,499,499,,,,,,499,499,499,499,499,499,499,',
',499,,,,,,,499,,,499,499,499,499,499,499,499,499,,499,499,499,,499,499',
'499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,,,,,499,,',
',,,,,,499,,,,,499,499,499,499,,499,499,499,499,,,,,499,499,,,,675,675',
'675,499,675,499,499,499,675,675,499,499,,675,,675,675,675,675,675,675',
'675,,,,,,675,675,675,675,675,675,675,,,675,,,,,,,675,,,675,675,675,675',
'675,675,675,675,675,675,675,675,,675,675,675,675,675,,,,,,,,,,,,,,,',
',,,,675,,,675,,,675,675,,,675,,675,,675,,675,,,675,,,,,,675,,,,,675',
'675,675,675,,675,675,675,675,,,,,675,675,,,,674,674,674,675,674,675',
'675,675,674,674,675,675,,674,,674,674,674,674,674,674,674,,,,,,674,674',
'674,674,674,674,674,,,674,,,,,,,674,,,674,674,674,674,674,674,674,674',
',674,674,674,,674,674,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674',
'674,,,674,,,,,,674,,,,,,,,,674,,,,,674,674,674,674,,674,674,674,674',
',,,,674,674,,,,673,673,673,674,673,674,674,674,673,673,674,674,,673',
',673,673,673,673,673,673,673,,,,,,673,673,673,673,673,673,673,,,673',
',,,,,,673,,,673,673,673,673,673,673,673,673,,673,673,673,,673,673,673',
'673,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,,673,,,,673,,,',
',,,,,673,,,,,673,673,673,673,,673,673,673,673,,,,,673,673,,,,512,512',
'512,673,512,673,673,673,512,512,673,673,,512,,512,512,512,512,512,512',
'512,,,,,,512,512,512,512,512,512,512,,,512,,,,,,,512,,,512,512,512,512',
'512,512,512,512,,512,512,512,,512,512,512,512,512,,,,,,,,,,,,,,,,,,',
',512,,,512,,,512,512,,,512,,,,,,512,,,,,,,,,512,,,,,512,512,512,512',
',512,512,512,512,,,,,512,512,,,,219,219,219,512,219,512,512,512,219',
'219,512,512,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219,219',
'219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219,219',
',219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,219',
',,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219,,,,,219,219',
',,,,,,219,,219,219,219,,,219,219,671,671,671,671,671,,,,671,671,,,,671',
',671,671,671,671,671,671,671,,,,,,671,671,671,671,671,671,671,,,671',
',,,,,671,671,,671,671,671,671,671,671,671,671,671,,671,671,671,,671',
'671,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,671,,',
',671,,,,,,,,,671,,,,,671,671,671,671,,671,671,671,671,,,,,671,671,,',
',522,522,522,671,522,671,671,671,522,522,671,671,,522,,522,522,522,522',
'522,522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522',
'522,522,522,522,522,522,522,522,522,522,,522,522,522,522,522,,,,,,,',
',,,,,,,,,,,,522,,,522,,,522,522,,,522,,522,,522,,522,,,522,,,,,,522',
',,,,522,522,522,522,,522,522,522,522,,,,,522,522,,,,250,250,250,522',
'250,522,522,522,250,250,522,522,,250,,250,250,250,250,250,250,250,,',
',,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250',
',,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250',
'250,250,250,,,,,250,250,,,,524,524,524,250,524,250,250,250,524,524,250',
'250,,524,,524,524,524,524,524,524,524,,,,,,524,524,524,524,524,524,524',
',,524,,,,,,,524,,,524,524,524,524,524,524,524,524,,524,524,524,,524',
'524,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,,,,,524',
',,,,,,,,524,,,,,524,524,524,524,,524,524,524,524,,,,,524,524,,,,525',
'525,525,524,525,524,524,524,525,525,524,524,,525,,525,525,525,525,525',
'525,525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525',
'525,525,525,525,525,,525,525,525,,525,525,525,525,525,,,,,,,,,,,,,,',
',,,,,525,,,525,,,525,525,,,525,,,,,,525,,,,,,,,,525,,,,,525,525,525',
'525,,525,525,525,525,,,,,525,525,,,,526,526,526,525,526,525,525,525',
'526,526,525,525,,526,,526,526,526,526,526,526,526,,,,,,526,526,526,526',
'526,526,526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526,,526,526',
'526,,526,526,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526',
',,,,,526,,,,,,,,,526,,,,,526,526,526,526,,526,526,526,526,,,,,526,526',
',,,220,220,220,526,220,526,526,526,220,220,526,526,,220,,220,220,220',
'220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220',
'220,220,220,220,220,220,220,,220,220,220,,220,220,220,220,220,,,,,,',
',,,,,,,,,,,,,220,,,220,,,220,220,,,220,,220,,,,220,,,,,,,,,220,,,,,220',
'220,220,220,,220,220,220,220,,,,,220,220,,,,221,221,221,220,221,220',
'220,220,221,221,220,220,,221,,221,221,221,221,221,221,221,,,,,,221,221',
'221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221',
',221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221',
'221,,,221,,,,,,221,,,,,,,,,221,,,,,221,221,221,221,,221,221,221,221',
',,,,221,221,,,,222,222,222,221,222,221,221,221,222,222,221,221,,222',
',222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222',
',,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,,222,222,222',
'222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,',
',,222,,,,,222,222,222,222,,222,222,222,222,,,,,222,222,,,,223,223,223',
'222,223,222,222,222,223,223,222,222,,223,,223,223,223,223,223,223,223',
',,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223',
'223,223,223,,223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223',
',,223,,,223,223,,,223,,,,,,223,,,,,,,,,223,,,,,223,223,223,223,,223',
'223,223,223,,,,,223,223,,,,224,224,224,223,224,223,223,223,224,224,223',
'223,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224',
',,224,,,,,,,224,,,224,224,224,224,224,224,224,224,224,224,224,224,,224',
'224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,224,,224',
',224,,,224,,,,,,224,,,,,224,224,224,224,,224,224,224,224,,,,,224,224',
',,,640,640,640,224,640,224,224,224,640,640,224,224,,640,,640,640,640',
'640,640,640,640,,,,,,640,640,640,640,640,640,640,,,640,,,,,,,640,,,640',
'640,640,640,640,640,640,640,640,640,640,640,,640,640,640,640,640,,,',
',,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,640,,640,,640,,,640,,,,,',
'640,,,,,640,640,640,640,,640,640,640,640,,,,,640,640,,,,630,630,630',
'640,630,640,640,640,630,630,640,640,,630,,630,630,630,630,630,630,630',
',,,,,630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630',
'630,630,630,630,630,630,630,,630,630,630,630,630,,,,,,,,,,,,,,,,,,,',
'630,,,630,,,630,630,,,630,,630,,630,,630,,,630,,,,,,630,,,,,630,630',
'630,630,,630,630,630,630,,,,,630,630,,,,629,629,629,630,629,630,630',
'630,629,629,630,630,,629,,629,629,629,629,629,629,629,,,,,,629,629,629',
'629,629,629,629,,,629,,,,,,,629,,,629,629,629,629,629,629,629,629,,629',
'629,629,,629,629,629,629,629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629',
',,629,,629,,,,629,,,,,,,,,629,,,,,629,629,629,629,,629,629,629,629,',
',,,629,629,,,,76,76,76,629,76,629,629,629,76,76,629,629,,76,,76,76,76',
'76,76,76,76,,,,,,76,76,76,76,76,76,76,,,76,,,,,,,76,,,76,76,76,76,76',
'76,76,76,,76,76,76,,76,76,,,76,,,,,,,,,,,,,,,,,,,,76,,,76,,,76,76,,',
'76,,76,,,,,,,,,,,,,,,,,,76,76,76,76,,76,76,76,76,,,,,76,76,,,,1018,1018',
'1018,76,1018,76,76,76,1018,1018,,,,1018,,1018,1018,1018,1018,1018,1018',
'1018,,,,,,1018,1018,1018,1018,1018,1018,1018,,,1018,,,,,,,1018,,,1018',
'1018,1018,1018,1018,1018,1018,1018,,1018,1018,1018,,1018,1018,,,1018',
',,,,,,,,,,,,,,,,,,,1018,,,1018,,,1018,1018,,,1018,,,,,,,,,,,,,,,,,,',
',1018,1018,1018,1018,,1018,1018,1018,1018,,,,,1018,1018,,,,39,39,39',
'1018,39,1018,1018,1018,39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39,39',
'39,39,39,39,39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39,39,39,,39',
'39,,,39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,39,,,,,,,,,,,,,,,,',
',39,39,39,39,,39,39,39,39,,,,,39,39,,,,77,77,77,39,77,39,39,39,77,77',
',,,77,,77,77,77,77,77,77,77,,,,,,77,77,77,77,77,77,77,,,77,,,,,,,77',
',,77,77,77,77,77,77,77,77,,77,77,77,,77,77,,,77,,,,,,,,,,,,,,,,,77,',
',77,,,77,,,77,77,,,77,,,,,,,,,,,,,,,,,,,,77,77,77,77,,77,77,77,77,,',
',,77,77,,,,1144,1144,1144,77,1144,77,77,77,1144,1144,,,,1144,,1144,1144',
'1144,1144,1144,1144,1144,,,,,,1144,1144,1144,1144,1144,1144,1144,,,1144',
',,,,,,1144,,,1144,1144,1144,1144,1144,1144,1144,1144,,1144,1144,1144',
',1144,1144,,,1144,,,,,,,,,,,,,,,,,,,,1144,,,1144,,,1144,1144,,,1144',
',,,,,,,,,,,,,,,,,,,1144,1144,1144,1144,,1144,1144,1144,1144,,,,,1144',
'1144,,,,78,78,78,1144,78,1144,1144,1144,78,78,,,,78,,78,78,78,78,78',
'78,78,,,,,,78,78,78,78,78,78,78,,,78,,,,,,,78,,,78,78,78,78,78,78,78',
'78,,78,78,78,,78,78,,,78,,,,,,,,,,,,,,,,,,,,78,,,78,,,78,78,,,78,,,',
',,,,,,,,,,,,,,,,78,78,78,78,,78,78,78,78,,,,,78,78,,,,805,805,805,78',
'805,78,78,78,805,805,,,,805,,805,805,805,805,805,805,805,,,,,,805,805',
'805,805,805,805,805,,,805,,,,,,,805,,,805,805,805,805,805,805,805,805',
',805,805,805,,805,805,,,805,,,,,,,,,,,,,,,,,,,,805,,,805,,,805,805,',
',805,,,,,,,,,,,,,,,,,,,,805,805,805,805,,805,805,805,805,,,,,805,805',
',,,40,40,40,805,40,805,805,805,40,40,,,,40,,40,40,40,40,40,40,40,,,',
',,40,40,40,40,40,40,40,,,40,,,,,,,40,,,40,40,40,40,40,40,40,40,,40,40',
'40,,40,40,,,40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,40,,,40,,,1212,,1212',
'1212,1212,1212,1212,,,,,,,,,1212,,40,40,40,40,,40,40,40,40,,,,,40,40',
',,,40,,1212,40,,40,40,40,341,341,341,,341,1212,1212,,341,341,1212,,',
'341,,341,341,341,341,341,341,341,,,,,,341,341,341,341,341,341,341,,',
'341,,,,,,,341,,,341,341,341,341,341,341,341,341,,341,341,341,,341,341',
',,341,,,,,,,,,,,,,,,,,,,,341,,,341,,,341,341,,,341,,,1210,,1210,1210',
'1210,1210,1210,,,,,,,,,1210,,341,341,341,341,,341,341,341,341,,,,,341',
'341,,,,341,,1210,341,,341,341,341,360,360,360,,360,1210,1210,,360,360',
'1210,,,360,,360,360,360,360,360,360,360,,,,,,360,360,360,360,360,360',
'360,,,360,,,,,,,360,,,360,360,360,360,360,360,360,360,,360,360,360,',
'360,360,,,360,,,,,,,,,,,,,,,,,,,,360,,,360,,,360,360,,,360,,,,,,,,,',
',,,,,,,,,,360,360,360,360,,360,360,360,360,,,,,360,360,,,,816,816,816',
'360,816,360,360,360,816,816,,,,816,,816,816,816,816,816,816,816,,,,',
',816,816,816,816,816,816,816,,,816,,,,,,,816,,,816,816,816,816,816,816',
'816,816,,816,816,816,,816,816,,,816,,,,,,,,,,,,,,,,,,,,816,,,816,,,816',
'816,,,816,,,,,,,,,,,,,,,,,,,,816,816,816,816,,816,816,816,816,,,,,816',
'816,,,,1082,1082,1082,816,1082,816,816,816,1082,1082,,,,1082,,1082,1082',
'1082,1082,1082,1082,1082,,,,,,1082,1082,1082,1082,1082,1082,1082,,,1082',
',,,,,,1082,,,1082,1082,1082,1082,1082,1082,1082,1082,,1082,1082,1082',
',1082,1082,,,1082,,,,,,,,,,,,,,,,,,,,1082,,,1082,,,1082,1082,,,1082',
',,,,,,,,,,,,,,,,,,,1082,1082,1082,1082,,1082,1082,1082,1082,,,,,1082',
'1082,,,,599,599,599,1082,599,1082,1082,1082,599,599,,,,599,,599,599',
'599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,,599,,,,,,,599',
',,599,599,599,599,599,599,599,599,,599,599,599,,599,599,,,599,,,,,,',
',,,,,,,,,,,,,599,,,599,,,599,599,,,599,,,,,,,,,,,,,,,,,,,,599,599,599',
'599,,599,599,599,599,,,,,599,599,,,,590,590,590,599,590,599,599,599',
'590,590,,,,590,,590,590,590,590,590,590,590,,,,,,590,590,590,590,590',
'590,590,,,590,,,,,,,590,,,590,590,590,590,590,590,590,590,,590,590,590',
',590,590,,,590,,,,,,,,,,,,,,,,,,,,590,,,590,,,590,590,,,590,,,,,,,,',
',,,,,,,,,,,590,590,590,590,,590,590,590,590,,,,,590,590,,,,,,,590,,590',
'590,590,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,,,,427,427,427,427,427,427,427,427',
'427,427,,,,,,427,427,427,427,427,427,427,427,427,,,427,,,,,,,,427,427',
',427,427,427,427,427,427,427,,,427,427,,,,427,427,427,427,,,,,,,,,,',
',,,427,427,,427,427,427,427,427,427,427,427,427,427,427,427,,,427,427',
',,,,,,,,,,,,,427,669,669,669,669,669,669,669,669,669,669,669,669,669',
'669,669,669,669,669,669,669,669,669,669,669,,,,669,669,669,669,669,669',
'669,669,669,669,,,,,,669,669,669,669,669,669,669,669,669,,,669,,,,,',
',,669,669,,669,669,669,669,669,669,669,,,669,669,,,,669,669,669,669',
',,,,,,,,,,,,,669,669,,669,669,669,669,669,669,669,669,669,669,669,669',
',,669,669,,,,,,,,,,,,,,669,10,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,,,,10,10,10,10,10,10,10,10,10,10,,,,,',
'10,10,10,10,10,10,10,10,10,10,,10,,,,,,,,10,10,,10,10,10,10,10,10,10',
',,10,10,,,,10,10,10,10,,,,,,,,,,,,,,10,10,,10,10,10,10,10,10,10,10,10',
'10,10,10,,,10,10,,,,,,,,,,,,,,10,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11',
',,,,,11,11,11,11,11,11,11,11,11,,,11,,,,,,,,11,11,,11,11,11,11,11,11',
'11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11',
'11,11,11,11,,,11,11,944,944,944,944,,,,,,,,,,11,,,944,944,944,944,,',
'1138,944,1138,1138,1138,1138,1138,944,944,,,944,,,,1138,,,,,,,,,,,,',
',,,944,,,944,,,1138,944,,,944,,,,,1138,1138,1138,1138,,,,1138,,,,944',
',,,944,944,944,944,,944,944,944,944,,,,,944,944,990,990,990,990,,,944',
',944,944,944,,,944,944,,990,990,990,990,,,,990,990,,,,,990,990,,,990',
'990,,,,,,,,,,,,,,,,,,,990,,,990,,,,990,,,990,,990,,,,,,,990,,,,,,,990',
',,,990,990,990,990,,990,990,990,990,,,,,990,990,1204,1204,1204,1204',
',,990,,990,990,990,,,990,990,,1204,1204,1204,1204,,,1135,1204,1135,1135',
'1135,1135,1135,1204,1204,,,1204,,,,1135,,,,,,,,,,,,,,,,1204,,,1204,',
',1135,1204,,,1204,,,,,1135,1135,1135,1135,,,,1135,,,,1204,,,,1204,1204',
'1204,1204,,1204,1204,1204,1204,,,,,1204,1204,,,,,,,1204,,1204,1204,1204',
',,1204,1204,782,782,782,782,782,782,782,782,782,782,782,782,782,782',
'782,782,782,782,782,782,782,782,782,782,,,,782,782,782,782,782,782,782',
'782,782,782,,,,,,782,782,782,782,782,782,782,782,782,,,782,,,,,,,,782',
'782,,782,782,782,782,782,782,782,,,782,782,,,,782,782,782,782,,,,,,',
',,,,,,,782,782,,782,782,782,782,782,782,782,782,782,782,782,782,,,782',
'945,945,945,945,,,,,,1166,,1166,1166,1166,1166,1166,945,945,945,945',
',,,945,1166,,,,,945,945,,,945,,,,,,,,,,,,,1166,,,,,,,945,,,945,1166',
'1166,,945,,1166,945,,,,,,,,,,,,,,,,945,,,,945,945,945,945,,945,945,945',
'945,,,,,945,945,755,755,755,755,1166,,945,,945,945,945,,,945,945,,755',
'755,755,755,,,1208,755,1208,1208,1208,1208,1208,755,755,,,755,,,,1208',
',,,,,,,,,,,,,,,755,,,755,,,1208,755,,,755,,,,,,,1208,1208,,,,1208,,',
',755,,,,755,755,755,755,,755,755,755,755,,,,,755,755,,,,,,,755,,755',
'755,755,,,755,755,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26,,,,,,26,26,26',
'26,26,26,26,26,26,26,26,26,,26,,,,,,26,26,,26,26,26,26,26,26,26,,,26',
'26,,,,26,26,26,26,,,,,,26,,,,,,,,26,26,,26,26,26,26,26,26,26,26,26,26',
'26,26,,,26,747,747,747,747,,,,,,,,,,,,,747,747,747,747,,,,747,,,,,,747',
'747,,,747,,,,,,,,,,,,,,,,,,,,747,,,747,,,,747,,,747,,747,,,,,,,709,',
'709,709,709,709,709,747,,,,747,747,747,747,709,747,747,747,747,,,,,747',
'747,747,938,938,938,938,,747,,747,747,747,709,,747,747,,,938,938,938',
'938,,709,709,938,,,709,,,938,938,,,938,,,,,,,,,,,,,,,,,,,,938,,,938',
',,,938,,,938,,938,709,,,,,,,,,,,,,938,,,,938,938,938,938,,938,938,938',
'938,,,,,938,938,932,932,932,932,,,938,,938,938,938,,,938,938,,932,932',
'932,932,,,,932,932,,,,,932,932,,,932,932,,,,,,,,,,,,,,,,,,,932,,,932',
',,,932,,,932,,932,,,,,,,932,,,,,,,932,,,,932,932,932,932,,932,932,932',
'932,,,,,932,932,931,931,931,931,,,932,,932,932,932,,,932,932,,931,931',
'931,931,,,,931,931,,,,,931,931,,,931,931,,,,,,,,,,,,,,,,,,,931,,,931',
',,,931,,,931,,931,,,,,,,931,,,,,,,931,,,,931,931,931,931,,931,931,931',
'931,,,,,931,931,1117,1117,1117,1117,,,931,,931,931,931,,,931,931,,1117',
'1117,1117,1117,,,1206,1117,1206,1206,1206,1206,1206,1117,1117,,,1117',
',,,1206,,,,,,,,,,,,,,,,1117,,,1117,,,1206,1117,,,1117,,,,,1206,1206',
'1206,1206,,,,1206,,,,1117,,,,1117,1117,1117,1117,,1117,1117,1117,1117',
',,,,1117,1117,1125,1125,1125,1125,,,1117,,1117,1117,1117,,,1117,1117',
',1125,1125,1125,1125,,,,1125,,,,,,1125,1125,,,1125,,,,,,,,,,,,,,,,,',
',,1125,,,1125,,,,1125,,,1125,,,,,,,,,,,,,,,,1125,,,,1125,1125,1125,1125',
',1125,1125,1125,1125,,,,,1125,1125,1129,1129,1129,1129,,,1125,,1125',
'1125,1125,,,1125,1125,,1129,1129,1129,1129,,,,1129,,,,,,1129,1129,,',
'1129,,,,,,,,,,,,,,,,,,,,1129,,,1129,,,,1129,,,1129,,1129,,,,,,,,,,,',
',,1129,,,,1129,1129,1129,1129,,1129,1129,1129,1129,,,,,1129,1129,928',
'928,928,928,,,1129,,1129,1129,1129,,,1129,1129,,928,928,928,928,,,,928',
',,,,,928,928,,,928,,,,,,,,,,,,,,,,,,,,928,,,928,,,,928,,,928,,,,,,,',
',,,,,,,,928,,,,928,928,928,928,,928,928,928,928,,,,,928,928,529,529',
'529,529,,,928,,928,928,928,,,928,928,,529,529,529,529,,,,529,529,,,',
',529,529,,,529,529,,,,,,,,,,,,,,,,,,,529,,,529,,,,529,,,529,,529,,,',
',,,529,,,,,,,529,,,,529,529,529,529,,529,529,529,529,,,,,529,529,530',
'530,530,530,,,529,,529,529,529,,,529,529,,530,530,530,530,,,,530,530',
',,,,530,530,,,530,530,,,,,,,,,,,,,,,,,,,530,,,530,,,,530,,,530,,530',
',,,,,,530,,,,,,,530,,,,530,530,530,530,,530,530,530,530,,,,,530,530',
'926,926,926,926,,,530,,530,530,530,,,530,530,,926,926,926,926,,,,926',
',,,,,926,926,,,926,,,,,,,,765,765,765,765,,,,,,,,,926,,,926,765,765',
'765,926,,,926,,926,,,,,765,765,,,765,,,,,926,,,,926,926,926,926,,926',
'926,926,926,,,,,926,926,,,,,,,926,,926,926,926,,,926,926,,,,,,,,,,,',
'765,765,765,765,,765,765,765,765,,,,,765,765,951,951,951,951,,,765,',
'765,765,765,,,,,,951,951,951,,,,,,,,,,,951,951,,,951,952,952,952,952',
',,,,,,,,,,,,952,952,952,,,,,,,,,,,952,952,,,952,,,,,,,,,,,,,,,,951,951',
'951,951,,951,951,951,951,,,,,951,951,,,,,,,951,,951,951,951,,,,,,,,',
'952,952,952,952,,952,952,952,952,,,,,952,952,764,764,764,764,,,952,',
'952,952,952,,,,,,764,764,764,1021,,1021,1021,1021,1021,1021,,,,764,764',
',,764,1021,,,,,,,,,,,1023,,1023,1023,1023,1023,1023,,,,,1021,,,,1023',
',,,,1021,1021,1021,1021,,,,1021,,,,,,,,,,1023,764,764,764,764,,764,764',
'764,764,,1023,1023,,764,764,1023,,,,,,764,,764,764,764,,,1025,1021,1025',
'1025,1025,1025,1025,1027,,1027,1027,1027,1027,1027,,1025,,,,,,,1027',
',,,,1023,,,,,,,,,,1025,,,,,,,1027,,,,1025,1025,,,,1025,,1027,1027,632',
'632,,1027,632,,,,,,,,632,632,,632,632,632,632,632,632,632,,,632,632',
',,,632,632,632,632,,,,1025,,632,,,,,1027,,,632,632,,632,632,632,632',
'632,632,632,632,632,632,632,632,302,302,632,,302,,,,,,,,302,302,,302',
'302,302,302,302,302,302,,,302,302,,,,302,302,302,302,,,,,,,,,,,,,,302',
'302,,302,302,302,302,302,302,302,302,302,302,302,302,638,638,302,,638',
',,,,,,,638,638,,638,638,638,638,638,638,638,,,638,638,,,,638,638,638',
'638,,,,,,638,,,,,,,,638,638,,638,638,638,638,638,638,638,638,638,638',
'638,638,639,639,638,,639,,,,,,,,639,639,,639,639,639,639,639,639,639',
',,639,639,,,,639,639,639,639,,,,,,639,,,,,,,,639,639,,639,639,639,639',
'639,639,639,639,639,639,639,639,594,594,639,,594,,,,,,,,594,594,,594',
'594,594,594,594,594,594,,,594,594,,,,594,594,594,594,,,,,,594,,,,,,',
',594,594,,594,594,594,594,594,594,594,594,594,594,594,594,604,604,594',
',604,,,,,,,,604,604,,604,604,604,604,604,604,604,,,604,604,,,,604,604',
'604,604,,,,,,604,,,,,,,,604,604,,604,604,604,604,604,604,604,604,604',
'604,604,604,593,593,604,,593,,,,,,,,593,593,,593,593,593,593,593,593',
'593,,,593,593,,,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593,593,593',
'593,593,593,593,593,593,593,593,593,631,631,593,,631,,,,,,,,631,631',
',631,631,631,631,631,631,631,,,631,631,,,,631,631,631,631,,,,,,631,',
',,,,,,631,631,,631,631,631,631,631,631,631,631,631,631,631,631,225,225',
'631,,225,,,,,,,,225,225,,225,225,225,225,225,225,225,,,225,225,,,,225',
'225,225,225,,,,,,225,,,,,,,,225,225,,225,225,225,225,225,225,225,225',
'225,225,225,225,603,603,225,,603,,,,,,,,603,603,,603,603,603,603,603',
'603,603,,,603,603,,,,603,603,603,603,,,,,,603,,,,,,,,603,603,,603,603',
'603,603,603,603,603,603,603,603,603,603,1163,1163,603,,1163,,,,,,,,1163',
'1163,,1163,1163,1163,1163,1163,1163,1163,,,1163,1163,,,,1163,1163,1163',
'1163,,,,,,1163,,,,,,,,1163,1163,,1163,1163,1163,1163,1163,1163,1163',
'1163,1163,1163,1163,1163,1164,1164,1163,,1164,,,,,,,,1164,1164,,1164',
'1164,1164,1164,1164,1164,1164,,,1164,1164,,,,1164,1164,1164,1164,,,',
',,1164,,,,,,,,1164,1164,,1164,1164,1164,1164,1164,1164,1164,1164,1164',
'1164,1164,1164,1187,1187,1164,,1187,,,,,,,,1187,1187,,1187,1187,1187',
'1187,1187,1187,1187,,,1187,1187,,,,1187,1187,1187,1187,,,,,,1187,,,',
',,,,1187,1187,,1187,1187,1187,1187,1187,1187,1187,1187,1187,1187,1187',
'1187,226,226,1187,,226,,,,,,,,226,226,,226,226,226,226,226,226,226,',
',226,226,,,,226,226,226,226,,,,,,226,,,,,,,,226,226,,226,226,226,226',
'226,226,226,226,226,226,226,226,677,677,226,,677,,,,,,,,677,677,,677',
'677,677,677,677,677,677,,,677,677,,,,677,677,677,677,,,,,,677,,,,,,',
',677,677,,677,677,677,677,677,677,677,677,677,677,677,677,676,676,677',
',676,,,,,,,,676,676,,676,676,676,676,676,676,676,,,676,676,,,,676,676',
'676,676,,,,,,676,,,,,,,,676,676,,676,676,676,676,676,676,676,676,676',
'676,676,676,520,520,676,,520,,,,,,,,520,520,,520,520,520,520,520,520',
'520,,,520,520,,,,520,520,520,520,,,,,,520,,,,,,,,520,520,,520,520,520',
'520,520,520,520,520,520,520,520,520,521,521,520,,521,,,,,,,,521,521',
',521,521,521,521,521,521,521,,,521,521,,,,521,521,521,521,,,,,,521,',
',,,,,,521,521,,521,521,521,521,521,521,521,521,521,521,521,521,,,521' ]
        racc_action_check = arr = ::Array.new(28813, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1560,  1004,   159,   nil,   425,   nil, 16385,  1357,    81,
 25302, 25430,   116,   nil,   120,   137,   718,   223,  1137,   347,
   332,   273,   nil,   -70, 15325,  1436, 26177,   289,   nil,   368,
   nil,     0,  5701,  6107,  6241, 11526, 11788,   nil,  3164, 23450,
 24105,   nil,   244,   696,   634,   371, 13098, 13360,   123, 13753,
 14015,   798, 15849,   310,   993,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 16526,   nil, 17592, 17723, 17854,     5,
   nil, 18116, 18247,   nil,   nil, 18509, 23188, 23581, 23843,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   294,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   500,   nil,
   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 19603,   nil,   nil,   nil,   nil, 19746,
 19877, 20008, 20139, 20282,   nil,  4172,   nil,   500,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   318,   nil,  3020, 21211,
 22140, 22271, 22402, 22533, 22664, 28149, 28454,   nil,   nil,   334,
  4460,   342,   nil,   636,   275,   344,  2876,  7822,  7420,  6765,
   nil,   nil,  1164,    15,   111,   456,   116,   372,   452,   nil,
 21616,   145,   222,  2732,   457,   nil,   nil, 17187, 17056, 16794,
 16242, 15456, 15194, 15063, 14932, 14801, 14146, 13884, 13622, 13491,
 12836, 12705, 12574, 11657,  5560,  5429,  5298,  5167, 10728,   nil,
   nil,   nil,   nil,  9811,   nil,   nil,   515,   520,   552,   619,
   654,   392,   -28,   159,   191,   250,   nil,   nil,   nil, 12312,
   nil,   nil, 27722,   nil,   nil,   484,  8632,  9025,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  9156,   nil,  2444,   nil,   468,
   481,   nil,  9287,   533,  9418,   nil,   nil,  9549,  9680,   nil,
   nil,   480,   nil, 10871,  1436,   546,   515,  1724,   539,   594,
   564, 24244,  3596,   577,   721,   831,   644,   898,   nil,   612,
   613,   281,   675,   679,   nil,   nil,   nil,   682,   198,   645,
 24383,   nil,   642,   903,  3740,  3884,   717,   nil,   729, 12967,
   nil,   720,  2300,  1565,   681,   nil,   597,   399,   719,   717,
   553,   753,   nil,   552,    69,    39, 14670,  5036,  4892,   338,
   832,   718,    67,    98,   987,   806,    38,   847,   nil,   nil,
  1283,   995,   540,   nil,   997,   nil,   767, 16925,   nil,  7525,
   nil,   438,   322,   425,   378,   525,   -31,   -27,   492,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   764, 25046,   nil,   nil,
   nil,   nil,   765,   nil,   838,   752, 17985,   754,   nil,   nil,
   748,   nil,  1131,   191,   854,   nil,   nil,  1580,   nil,   nil,
   nil,   nil,   nil,  1724,   773,   nil,   771,   786,   540,   526,
 18924,   nil,   nil,   nil,   nil,   859,   639,   832,   nil,   nil,
 19056, 19192, 19329,   932,   931,   nil,   nil,     1,   817,   815,
   817,   nil,   nil,   825,   830,   838,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   829,  1134,   nil,   nil, 20556,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   925,   nil,   nil,
   926,   508, 21080,   969,   nil,   nil,   nil,   159,   nil,   894,
 28637, 28698, 21485,   154, 21747, 21878, 22009,   840,   853, 27045,
 27143,  4172,  4460,   341,  1043,   933,   937,   946,   947,  5650,
  5835,  5560,  5298,  4748,  4892,  5036,  3596,  4316,  3571,  3480,
  4604,  5167,  3164,  5429,   nil,   183,   nil,  7561,   nil,   nil,
   nil,   nil,  7691,   886,   885,   898,   nil,   nil,   nil,   900,
   nil,   nil,  7953,   nil,  8084,   nil,  8215,   nil,   309,   nil,
   nil,   nil,  8358,  1133,   nil,   902,   908,   nil,   nil,   911,
 24907,   917,  8501, 28027, 27905,  1141,   984,   nil,   nil, 24776,
   942,   nil,  7158, 28210, 27966,  7027,  4028,  6896,   nil,  1067,
   948,   992,   nil,  6634,   nil,   nil,  6503,   nil,   nil,   nil,
  3884,  1071,   nil,  4748,   -20,  1076,  1078,   264,  1082, 23057,
 22926, 28088, 27661,    68,   nil,   nil,  1275,   nil, 27783, 27844,
 22795,   nil,   nil,   268,  2156,   nil,   856,   nil,   nil,   nil,
   nil,  1058,   nil,   nil,   nil,   974,   nil,   nil,   420,   nil,
   423,   nil,   nil,   960,   nil,   964,   nil,   nil,   nil, 25174,
   nil, 21354,   967, 20949, 20818, 20687, 28576, 28515, 20425, 19460,
   495,  1008, 18783, 18652, 18378,  6372,  1007,   nil,   nil, 17449,
 17318,  1010,   nil,  1065,  2012,  1096, 16663,   nil,   nil,   nil,
   nil,  1262,   nil,   nil,   765,   746,   nil,  7555,   nil, 26313,
   nil,   973, 15980,   nil,  3438,   nil,   990,   995,  1199,  1000,
   nil,   nil,   nil,   nil,  1088,  1868,   nil,   nil,   nil,   197,
   221,   139,   388,  1004, 14408, 14277,   nil,   105,   nil,   nil,
   nil,   nil,  1027,   nil,   nil,   nil,   472, 26260,   -66,   nil,
  1005,  1104,  1023,   nil,   nil, 26034,   nil,   nil,   292,   nil,
   nil,   698,   nil,   nil, 27512, 27282,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   835,   480,   nil,
   nil,  1025, 25853,   nil,  1151,   nil,  1134,    -8,   nil,   nil,
 11919,   nil,  1071,  1081,  1195,   nil,  1084,   nil,  1132, 11133,
   nil,   nil, 11002,   nil,  -101, 23974,  1087,   nil,  1096,   163,
   134,  1138,   165,  1281,  1140,  1102, 24514,   nil,  1171,  3308,
 13229,   nil,   nil,   nil,   511,   824,   nil,  1224,   nil,   nil,
   nil,   nil,   nil,  1233,  1235,   nil,   nil,    53,  1116,    24,
    37,    61,    29,  1292,  1139,   611,   nil,  1117,  3308, 12181,
   nil,  1246,   112,  1129,   nil,   nil,   nil,   nil,   nil,  2444,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1127, 14539,
  1131,   254,   272,   749,   278,   nil,  2300,  7289,   nil,  1129,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  8763,  8894,  1259,   nil,  4316,  1139,  1187,   nil,   nil,  1142,
   nil,  1227,   nil,   nil,  1147,  1149,   nil,  1152,  1156,   nil,
  1157,   nil,   nil,   nil,  1169,  3467,  3506,   nil,   nil,  9942,
 10073, 10204, 10335, 10466, 10597,   -82, 27241,  1249, 26947,   100,
   -84, 26555, 26457,   398,   140,  1171,  1174,   nil, 26359,   nil,
  1172,   913,   nil,  1203, 25514, 25936,   nil,   927,  1230,   198,
   nil, 27380, 27414,   nil,   nil,   nil,   nil,  5835,   nil,   nil,
   nil,   nil,   nil,  5966,   nil,   nil,  1210,   nil,   nil,  1207,
  1204,   nil,   nil,   568,  3452,   nil,   nil,   nil,   nil,  1215,
   167,   nil,   -14,   nil,  1354,   nil, 11264,  1355,   nil,   nil,
 25612, 11395,  4028,    11,  1360,   nil,  1362,   307,  3740,   nil,
   nil,   nil,   nil,  1238,  1285,  1251,  1246,   249,   nil,   nil,
 12050,  2588,  2732,   nil,  2588,   nil,   nil,     6, 23319,   nil,
   nil, 27512,   nil, 27538,   nil, 27604,   nil, 27611,   nil,   nil,
   nil,   nil,  1248,  1249,  2876,  2156, 12443,   nil,  1252,   nil,
   nil,   nil,   nil,  1256,  1258,  1260,  1261,  1262,  1264,   nil,
   nil,   nil,  1316,  1271,  1272,   nil,  1276,   nil,   nil,   -72,
  1283,   nil,   nil,   nil,   nil,   nil,   nil,  1328,  3020,  2012,
   nil,   nil,  1286,  1289,   nil,  1291,  1293,  1294,   nil,  1320,
  1303,  1289, 24645,   nil,   nil,   nil,   nil,   nil,    42,   nil,
    38,   720,   nil,    43,   nil,   nil,   nil,  1434,  1868,  1580,
   753,   nil,   nil,   nil,  1436,   -11,    19,   904,  1393,    -9,
   nil,  1317,  1319,  1328,  1329,  3477,   863, 26653,   nil,   nil,
   nil,   nil,   nil,   nil,   nil, 26751,   nil,   381,   nil, 26849,
   nil,   nil,  1345,   nil,   nil, 25713,   nil,   nil, 25517,   nil,
  7580,   nil,   nil,  1354, 23712,   918,  1409,  4604,   nil, 15587,
 15718,   nil,   nil,   nil,   nil,  1359,  1464,   544,   nil,   nil,
   nil,  1485, 16111, 28271, 28332,    26, 25926,   nil,   nil,   nil,
   nil,  1363,  1380,  1383,   nil,   nil,  1384,   nil,   nil,  1387,
  1389,  1392,  1393,   nil,  1396,   nil,  1020, 28393,   nil,   780,
  1148,   nil,   nil,   nil,   nil,   nil,  1278,   nil,  1400,    68,
    -7,    -1,     8,  1399, 25710,   nil, 26656,   nil, 26037,   nil,
 24291,   nil, 24152,   nil,   nil,  1446,  1451,   nil,    31,   nil,
   -10,   nil,  1415,  1416,  1417,  1422,   nil,   nil,   nil, 18987,
   nil,   nil,   nil,   nil,  -112,   nil ]

racc_action_default = [
    -1,  -741,    -4,  -741,    -2,  -726,    -5,  -741,    -8,  -741,
  -741,  -741,  -741,   -31,  -741,  -741,   -36,  -741,  -741,  -637,
  -637,  -311,   -52,  -728,  -741,   -61,  -741,   -69,   -70,   -71,
   -75,  -287,  -287,  -287,  -324,  -352,  -353,   -87,   -13,   -91,
   -99,  -101,  -741,  -624,  -625,  -741,  -741,  -741,  -741,  -741,
  -741,  -239,  -741,  -728,  -258,  -302,  -303,  -304,  -305,  -306,
  -307,  -308,  -309,  -310,  -716,  -313,  -317,  -740,  -705,  -333,
  -335,  -741,  -741,   -63,   -63,  -726,  -741,  -741,  -741,  -354,
  -355,  -357,  -358,  -359,  -360,  -419,  -561,  -562,  -563,  -564,
  -585,  -567,  -568,  -587,  -589,  -572,  -577,  -581,  -583,  -599,
  -600,  -601,  -585,  -603,  -605,  -606,  -607,  -608,  -714,  -613,
  -614,  -715,  -616,  -617,  -618,  -619,  -620,  -621,  -622,  -623,
  -628,  -629,  1236,    -3,  -727,  -736,  -737,  -738,    -7,  -741,
  -741,  -741,  -741,  -741,    -9,    -4,   -19,  -741,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
  -205,  -206,  -207,  -208,  -209,  -210,   -24,  -137,   -13,  -741,
  -741,  -741,  -741,  -741,  -277,  -741,  -741,  -724,  -725,  -741,
   -13,  -636,  -634,  -660,  -660,  -741,   -13,  -741,  -741,  -728,
  -729,   -56,  -741,  -624,  -625,  -741,  -311,  -741,  -741,  -245,
  -741,  -637,  -637,   -13,  -741,   -57,   -59,  -222,  -223,  -741,
  -741,  -741,  -741,  -741,  -741,  -741,  -741,  -741,  -741,  -741,
  -741,  -741,  -741,  -741,  -741,  -741,  -741,  -741,  -741,  -259,
  -260,  -261,  -262,  -741,   -65,   -66,  -741,  -130,  -131,  -170,
  -171,  -172,  -188,  -193,  -200,  -203,  -624,  -625,  -703,  -741,
  -428,  -430,  -741,  -722,  -723,   -76,  -277,  -741,  -332,  -434,
  -443,  -445,   -82,  -440,   -83,  -728,   -84,  -265,  -282,  -292,
  -292,  -286,  -290,  -293,  -741,  -585,  -707,  -711,  -741,   -85,
   -86,  -726,   -14,  -741,   -17,  -741,   -89,   -13,  -728,  -741,
   -92,   -95,   -13,  -107,  -108,  -741,  -741,  -115,  -324,  -327,
  -728,  -741,  -637,  -637,  -352,  -353,  -356,  -441,  -741,   -97,
  -741,  -103,  -321,  -741,  -224,  -225,  -604,  -233,  -234,  -741,
  -246,  -251,   -13,  -315,  -728,  -266,  -733,  -733,  -741,  -741,
  -733,  -741,  -334,   -62,  -741,  -741,  -741,   -13,   -13,  -726,
  -741,  -727,  -624,  -625,  -741,  -741,  -311,  -741,  -370,  -371,
  -125,  -126,  -741,  -128,  -741,  -311,  -632,  -741,  -348,  -660,
  -565,  -741,  -741,  -741,  -741,  -741,  -741,  -741,  -741,    -6,
  -739,   -25,   -26,   -27,   -28,   -29,  -741,  -741,   -21,   -22,
   -23,  -138,  -741,   -32,   -35,  -298,  -741,  -741,  -297,   -33,
  -741,   -37,  -741,  -311,   -49,   -51,  -211,  -270,  -293,   -53,
   -54,   -38,  -212,  -270,  -728,  -278,  -292,  -292,  -714,  -715,
  -287,  -438,  -716,  -717,  -718,  -715,  -714,  -287,  -437,  -439,
  -716,  -718,  -741,  -553,  -741,  -383,  -384,  -686,  -728,  -702,
  -702,  -642,  -643,  -645,  -645,  -645,  -659,  -661,  -662,  -663,
  -664,  -665,  -666,  -667,  -668,  -669,  -741,  -671,  -673,  -675,
  -680,  -682,  -683,  -684,  -691,  -693,  -694,  -696,  -697,  -698,
  -700,  -741,  -741,  -741,   -48,  -219,   -55,  -728,  -331,  -741,
  -741,  -741,  -277,  -321,  -741,  -741,  -741,  -741,  -741,  -741,
  -741,  -220,  -221,  -226,  -227,  -228,  -229,  -230,  -231,  -235,
  -236,  -237,  -238,  -240,  -241,  -242,  -243,  -244,  -247,  -248,
  -249,  -250,  -728,  -263,   -67,  -728,  -449,  -287,  -714,  -715,
   -73,   -77,  -661,  -728,  -292,  -728,  -288,  -447,  -449,  -728,
  -326,  -283,  -741,  -284,  -741,  -289,  -741,  -294,  -741,  -710,
  -713,   -12,  -727,   -16,   -18,  -728,   -88,  -319,  -104,   -93,
  -741,  -728,  -277,  -741,  -741,  -114,  -741,  -636,  -604,  -741,
  -100,  -105,  -741,  -741,  -741,  -741,  -264,  -741,  -328,  -741,
  -728,  -741,  -267,  -735,  -734,  -269,  -735,  -322,  -323,  -706,
   -13,  -361,  -362,   -13,  -741,  -741,  -741,  -741,  -741,  -741,
  -277,  -741,  -741,  -321,   -63,  -125,  -126,  -127,  -741,  -741,
  -277,  -344,  -630,  -741,   -13,  -420,  -660,  -423,  -566,  -586,
  -591,  -741,  -593,  -569,  -588,  -741,  -590,  -571,  -741,  -574,
  -741,  -576,  -579,  -741,  -580,  -741,  -602,   -10,   -20,  -741,
   -30,  -741,  -301,  -741,  -741,  -277,  -741,  -741,  -741,  -741,
  -442,  -741,  -279,  -281,  -741,  -741,   -78,  -276,  -435,  -741,
  -741,   -80,  -436,   -44,  -254,  -740,  -740,  -350,  -522,  -685,
  -635,  -741,  -640,  -641,  -741,  -741,  -652,  -741,  -655,  -741,
  -657,  -741,  -741,  -372,  -741,  -374,  -376,  -379,  -382,  -728,
  -674,  -695,  -699,  -638,   -46,  -256,  -351,  -330,  -730,  -714,
  -715,  -714,  -715,  -728,  -741,  -741,   -58,  -463,  -466,  -467,
  -468,  -469,  -471,  -473,  -476,  -477,  -532,  -728,  -489,  -492,
  -502,  -506,  -511,  -513,  -514,  -517,  -518,  -585,  -521,  -523,
  -524,  -525,  -530,  -531,  -741,  -741,  -535,  -536,  -537,  -538,
  -539,  -540,  -541,  -542,  -543,  -544,  -545,  -741,  -741,  -551,
   -60,  -741,  -741,  -704,  -741,  -450,   -72,  -431,  -447,  -272,
  -279,  -274,  -741,  -409,  -741,  -325,  -292,  -291,  -295,  -741,
  -708,  -709,  -741,   -15,   -90,  -741,   -96,  -102,  -728,  -714,
  -715,  -275,  -719,  -113,  -741,   -98,  -741,  -218,  -232,  -252,
  -741,  -314,  -316,  -318,  -733,  -740,  -363,  -740,   -64,  -364,
  -365,  -338,  -339,  -741,  -741,  -455,  -341,  -741,  -728,  -714,
  -715,  -719,  -320,   -13,  -125,  -126,  -129,  -728,   -13,  -741,
  -346,  -741,  -741,  -728,  -592,  -595,  -596,  -597,  -598,   -13,
  -570,  -573,  -575,  -578,  -582,  -584,  -139,   -34,  -299,  -741,
  -728,  -714,  -715,  -715,  -714,   -50,  -271,  -741,  -731,  -292,
   -40,  -214,   -41,  -215,   -79,   -42,  -217,   -43,  -216,   -81,
  -741,  -741,  -740,  -368,   -13,  -554,  -740,  -555,  -556,  -702,
  -681,  -686,  -701,  -644,  -645,  -645,  -672,  -645,  -645,  -692,
  -645,  -669,  -386,  -687,  -728,  -741,  -741,  -381,  -670,  -741,
  -741,  -741,  -741,  -741,  -741,  -442,  -464,  -741,  -741,  -474,
  -475,  -741,  -741,  -741,  -494,  -728,  -728,  -488,  -495,  -499,
  -741,  -741,  -491,  -741,  -741,  -741,  -505,  -512,  -516,  -741,
  -520,  -528,  -529,  -533,  -534,  -546,  -547,  -741,  -609,  -610,
  -611,  -126,  -549,  -741,   -68,  -429,  -409,  -433,  -432,  -741,
  -728,  -444,  -410,  -728,   -13,  -446,  -285,  -296,  -712,   -94,
  -442,  -106,  -728,  -268,  -741,  -366,  -741,  -741,  -340,  -342,
  -741,  -741,   -13,  -442,  -741,  -442,  -741,  -741,   -13,  -349,
  -421,  -424,  -426,  -413,  -741,  -741,  -300,  -442,   -39,  -213,
  -280,   -45,  -255,   -11,   -13,  -560,  -369,  -741,  -741,  -558,
  -639,  -741,  -648,  -741,  -650,  -741,  -653,  -741,  -656,  -658,
  -373,  -375,  -377,  -380,   -47,  -257,  -741,  -465,  -502,  -470,
  -472,  -481,  -485,  -728,  -728,  -728,  -728,  -728,  -728,  -550,
  -486,  -487,  -509,  -496,  -497,  -500,  -728,  -585,  -732,  -728,
  -503,  -507,  -510,  -515,  -519,  -526,  -527,  -741,  -253,   -13,
   -74,  -273,  -702,  -702,  -390,  -392,  -392,  -392,  -408,  -741,
  -728,  -669,  -677,  -678,  -689,  -448,  -329,  -336,  -741,  -337,
  -741,  -460,  -295,  -740,  -343,  -345,  -631,  -741,   -13,   -13,
  -741,  -422,  -594,  -559,   -13,  -624,  -625,  -741,  -741,  -311,
  -557,  -645,  -645,  -645,  -645,  -741,  -741,  -741,  -478,  -479,
  -480,  -482,  -483,  -484,  -501,  -741,  -490,  -741,  -493,  -741,
  -548,  -451,  -741,  -388,  -389,  -393,  -399,  -401,  -741,  -404,
  -741,  -406,  -411,  -741,  -741,  -676,  -741,   -13,  -456,  -741,
  -741,  -452,  -453,  -454,  -347,  -741,  -741,  -728,  -415,  -417,
  -418,  -553,  -277,  -741,  -741,  -321,  -741,  -646,  -649,  -651,
  -654,  -378,  -503,  -498,  -504,  -508,  -702,  -679,  -391,  -392,
  -392,  -392,  -392,  -690,  -392,  -412,  -688,  -741,  -321,  -740,
   -13,  -461,  -462,  -425,  -427,  -414,  -741,  -552,  -728,  -714,
  -715,  -719,  -320,  -645,  -741,  -387,  -741,  -396,  -741,  -398,
  -741,  -402,  -741,  -405,  -407,  -320,  -719,  -367,  -740,  -416,
  -442,  -647,  -392,  -392,  -392,  -392,  -457,  -458,  -459,  -741,
  -394,  -397,  -400,  -403,  -392,  -395 ]

clist = [
'44,225,301,127,284,44,411,141,141,340,232,232,303,285,382,356,356,695',
'418,620,623,628,834,141,297,463,463,318,318,318,384,385,702,703,389',
'573,44,344,344,637,136,217,495,495,454,309,313,565,712,909,241,892,356',
'356,356,387,388,1033,375,474,713,144,144,451,44,513,984,706,708,710',
'320,320,320,127,393,297,297,514,1031,899,8,438,439,486,486,8,792,236',
'421,422,423,424,906,460,467,736,780,134,366,942,739,739,463,377,380',
'905,336,907,445,302,124,445,974,128,719,612,615,561,338,619,478,511',
'44,600,1038,445,563,1004,305,312,314,44,359,44,4,1183,1054,758,758,935',
'1076,936,123,800,373,529,784,383,383,406,408,383,1158,316,329,330,902',
'1160,794,902,953,954,18,1045,1048,658,660,18,597,597,557,1078,573,1056',
'286,1032,782,797,1157,797,644,998,645,987,242,800,1000,409,852,427,434',
'1098,1060,1099,242,242,242,787,18,345,345,609,8,1183,556,383,383,383',
'383,229,235,425,390,8,567,568,44,318,495,17,966,1151,1090,471,17,520',
'18,1226,44,990,419,242,242,1190,44,242,394,404,404,461,452,578,232,232',
'399,433,444,1079,1219,444,848,44,800,1160,515,17,1171,820,833,486,216',
'1039,1040,444,931,932,374,426,941,303,944,654,656,659,659,846,610,372',
'713,1031,1,1062,917,17,18,1069,1063,797,797,242,242,242,242,18,803,18',
'647,449,450,318,318,1013,1179,641,397,956,896,969,318,901,1017,410,412',
'413,516,517,414,356,1037,236,463,463,788,1043,1046,1044,1047,1174,593',
'127,601,44,914,415,416,44,356,417,854,344,44,17,733,320,859,624,603',
'1065,1066,849,17,320,17,806,1143,760,760,379,344,298,904,2,815,909,1172',
'309,554,319,319,319,44,313,1173,1077,669,555,900,631,18,242,442,242',
'242,442,242,44,44,127,460,467,18,1177,369,463,463,797,18,442,242,242',
'376,607,530,463,463,336,378,1126,598,828,336,583,808,18,906,962,1136',
'585,737,737,236,1111,591,584,141,676,566,1080,1074,,1217,463,463,589',
'569,17,582,17,463,463,17,527,528,,,,,17,,1152,838,,1020,17,17,495,,668',
',242,847,811,383,,,693,242,242,581,,17,811,992,851,687,242,463,463,144',
'713,713,692,,643,,,,,1022,1024,,1026,1028,18,1029,870,486,18,884,811',
',345,18,889,,724,339,811,,723,1176,976,,,495,318,495,862,471,862,345',
',906,,880,882,627,774,774,885,887,970,18,853,461,1180,,,1181,758,758',
'515,,452,460,467,242,18,18,758,17,,437,437,17,758,1091,686,897,17,601',
'739,445,983,691,,356,242,979,601,1049,687,445,445,1227,356,,445,445',
'800,44,,,,,318,,902,344,17,1074,471,,1074,976,1074,,344,758,906,,471',
',,17,17,1222,461,796,,,,,1228,,797,843,461,44,817,,44,829,318,,1133',
'1134,,,471,,,242,318,1144,471,934,,,564,319,850,44,,948,461,,,319,824',
',,1104,461,786,,,,,,,1074,,1074,,1074,141,1074,318,44,,,242,949,471',
',44,996,,713,713,,242,,1074,,432,898,,,461,,,,,1167,1168,1169,1170,866',
'444,881,883,,,1197,886,888,,,444,444,,,,444,444,1008,879,,144,339,,1147',
'1153,1148,,,,1205,,908,968,910,,,1053,,,,901,238,18,1061,,774,,,,867',
'345,,242,774,,,875,760,760,345,284,967,774,774,,445,,760,,964,,371,',
'760,,601,,,,141,18,356,1081,18,,,981,1221,,,242,,356,,,,,,,17,242,,',
'344,18,339,,,997,,339,,,,344,934,760,,,,934,934,,,,687,879,1097,692',
',495,18,,1059,442,242,,17,18,,17,44,,,442,442,44,,,442,442,,,,,625,626',
'44,,,,17,,,,,,,,,,,381,,,,,1082,,737,,,,1015,,,,1019,17,,,17,44,,1009',
'17,982,,1131,,,17,17,444,1073,,17,17,,,,,,,,1061,1067,,,,,,,1061,774',
'383,774,1175,1156,774,774,,,,,,774,,881,883,888,886,774,774,1081,1088',
',1081,,774,774,,,,,,,,680,,,,837,463,463,345,,,,,,,44,1127,,,345,,,',
'242,,1198,,,,,463,774,,44,,,,356,1096,44,1075,,,,,1175,18,,,,,18,242',
',,44,,,1081,1106,,,18,,,,435,448,,,,,437,,811,,383,,,1082,442,,1082',
',,1082,,1082,1112,,1113,,1114,,,,1009,18,,,,356,,17,,383,,,17,1073,44',
'596,1073,,1073,,,,,17,,,,297,,,,,,,,825,,1163,827,611,,17,,44,44,,,',
',44,,,,,,1191,1192,1082,17,1082,,1082,774,1082,242,,,356,,,774,,,575',
'774,577,,,579,580,1082,18,,,1073,,1073,,1073,297,1073,,44,242,,,34,',
',18,,34,318,,,18,,1073,471,1182,,1184,,,,,,,34,681,,18,,,461,1107,,',
'34,34,34,471,34,,,44,,1203,17,,,,,,,,,,,774,,,,,,,17,,,,34,,17,,,34',
'34,,,34,,,383,383,,,18,1223,17,1224,,1225,,,925,,,672,,1145,,,,,,,,',
'937,,1234,,,,,18,18,20,,,,18,20,,,,,781,34,,,,,34,34,34,34,34,,34,,',
',17,,,,,,,,,,20,353,353,,,,,720,1186,,,18,,242,242,994,980,,,17,17,',
',,,17,242,,20,,,1005,,,,,,,353,353,353,,,15,,,993,,15,,,,,,18,995,,',
',,,,,,,,1016,,17,34,34,34,34,34,34,34,,,1007,15,798,34,381,,801,,20',
'34,34,34,34,,,,,20,,20,,,,,,,34,,,15,,,,17,,,,,,398,,,,798,,,381,,,',
',,,,,,,,,448,1042,,,,,1050,1051,,1085,,,,34,,,,,681,,34,34,,,,,,1093',
'15,34,,,681,943,,,,15,,15,1137,1139,1141,20,868,20,,34,20,1103,,34,',
'798,381,20,34,,,,,20,20,,,,,895,,,,,,,,,,,20,,,,,913,,,34,,,,,,,681',
',,,,,,34,34,34,,,,,,,,,,,,,,,1121,1122,1123,,34,15,681,440,,,440,,,',
',681,1155,15,,,,1003,1161,15,440,,,1207,1209,1211,1213,,1214,,,,,,681',
',15,20,,,798,20,,,,353,20,,,977,,,978,,,,,,,,,1189,,,353,34,1230,1231',
'1232,1233,,,,,,,20,,1235,,,,,,,,,,,,,20,20,,681,,,,,681,681,,,,1218',
'34,,,,,,,,,,34,15,,,1006,15,,,,,15,,,,,,,,,,,,1003,,,,,,,,,,,1220,,',
',,,,15,,,,,,,,,,,,,,,15,15,,,,34,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,',
',681,681,681,34,,,34,,,,943,,,34,,,,,,,,,518,34,,,,34,,,,1092,,,1003',
',,,,,,,,,,,,,,,381,,,,34,,,34,34,,,34,,,,,,34,34,21,,,34,34,21,,20,',
',,,,,,353,,,,,,,,,353,,,,,570,,,,,,,21,347,347,,,,1195,,,20,,,20,,,',
'586,,,,,,,,,,,,21,,,,,20,,,,,396,405,405,,,,,,,681,,,15,,,,,,,,,,20',
',,20,,,,20,,,,,,20,20,,,,20,20,,,,,,,21,,15,,,15,,,,21,,21,34,,,,773',
'773,,,,,,,,,15,,,,,,,,,34,,,,,34,34,,,,,,,,,,34,,15,,,440,,,,15,,,,',
',440,440,,34,700,440,440,,,,,,,,,,,,,,34,,,,,,,,21,,443,,,443,,,,,,',
'21,,353,727,766,766,21,443,,,,,,353,,,,,,,,,,21,,,,,,,,,,,,,,,,,20,783',
',34,,20,,,,789,,791,,,,795,20,,,,34,,,,,,,,,,,804,34,,20,,,807,34,,',
',,,34,,,,,,,20,,,,,822,,,,34,,,21,,,,21,,,,347,21,,,,,,,15,,,,,15,,',
',773,,347,,,,,15,773,,19,,,,21,19,,773,773,,,,,,,440,,34,,21,21,,,,',
',,,,,,,15,20,,,19,352,352,,,,,,,,34,34,,,,20,34,,,,,20,,,,,,,19,,,918',
',,,,,20,352,352,352,353,,,,,,,766,,,,,,,,766,,,34,,34,34,,,766,766,',
',,,,772,772,34,,15,,,,,,,,,,19,,,,,,20,,15,19,,19,,,15,,34,,,353,,,',
',,,,,,,15,,,,1110,20,20,,,767,767,20,,,,,,773,,773,,,773,773,,,,,,773',
',,,,,773,773,,,,,,773,773,,,,,,,,353,,,20,15,,,771,771,,,21,,19,,19',
',,19,347,,,,,,19,,,347,,773,19,19,15,15,,,,,15,,,,,,,20,,19,21,,,21',
',,,,,,1030,766,,766,,,766,766,,,,,,766,21,1041,,,,766,766,858,,15,,',
'766,766,,,,,,,,,,,43,,,21,,43,443,,,,21,,,,,,443,443,1071,,,443,443',
',296,,772,766,15,,1086,19,,,772,19,43,343,343,352,19,,,772,772,,,,,',
',,,,,,,,352,,773,,,,43,,,,773,,19,,773,,392,296,296,,,767,,,,,,19,19',
'767,,,,1118,1119,1120,,,767,767,,,,,,,,,,1128,,,,,,,,,,,,,,,43,,,,,',
'771,770,770,43,,43,,,771,347,,,,,,,,771,771,773,347,,,,,,766,,,,,,,',
'766,,,,766,,,,,,,,,21,,,,,21,,,,,,,,,,,21,,,,,,,,,,,,,,772,,772,,443',
'772,772,,,,,43,772,,,,,,772,772,,21,,43,,772,772,775,775,43,,,,,,,766',
',,,,,,,,,43,,,,,,,767,,767,,,767,767,,,,,772,767,,,,,,767,767,,,19,',
',767,767,,,,352,,,,,,,,,352,,,,,,,,,21,771,,771,,,771,771,,,,,19,771',
',19,767,,21,771,771,,,,21,43,771,771,,43,,,,343,43,,19,,,,21,770,,,1109',
',,,,770,,,343,,,,,,770,770,,,,19,43,771,19,,,,19,,,,,,19,19,,43,43,19',
'19,,,,,,,,772,,,,,21,,,772,,,,772,,,,,,405,,,,,,,,,,,,,,,,21,21,,,,',
'21,,,,,,,,,,,,,767,775,,,,,,,767,775,,,767,,,,,,775,775,,,,,,768,768',
'405,,,21,,,,772,,,,,,,,,,,,,,,771,,,,,352,,,771,,,,771,,,,352,,,,,,',
',21,,,,770,,770,,,770,770,,31,,767,,770,31,,19,,,770,770,19,,,,,770',
'770,,,,31,19,,,,,,,,,31,31,31,,31,,,,,19,,,,,43,,,,,771,,,343,,770,',
'19,,,,,343,31,,,,,31,31,,,31,,,,,,,,,,,43,,,43,,,,,,,,775,,775,,,775',
'775,,,,,,775,43,,,,,775,775,,,,,,775,775,31,,,,,31,31,31,31,31,,31,',
'43,,,19,,,,43,,,,,,,,,,,,,,19,,768,775,,,19,,,,768,,,,,,,,,768,768,',
'19,,,,352,770,769,769,,,,,,770,,,,770,,,,,,,,,,,,,,,,,,,,,31,31,31,31',
'31,31,31,,,,,,31,,,,,19,31,31,31,31,,,,,,,,,352,,,,,31,,,,,,,,,,,19',
'19,,,,,19,343,770,,,,,,,,,,343,,,,,,775,,,,,,,,775,,,31,775,,,,,,31',
'31,,43,352,,,19,43,31,,,,,,,,,,43,,,,,,,,31,,,,31,,768,,768,31,,768',
'768,,,,,,768,,,,,19,768,768,,43,,,,768,768,,,,,,,31,,,775,,,,,,,,,,',
'31,31,31,,,,,,,,,,,,,,,768,769,,,31,,,,,769,,,,,,,,,769,769,,,,,,,,',
',,,,,,,,,43,,,,,,,,,,,,,,,,,,43,,,,,,43,,,249,,,,,31,,,,,317,317,317',
'43,,,,1105,,,,,364,365,,367,368,,370,,,,,,,,,,,,,,,317,317,31,,,,,,',
',,,31,,,,,,,,768,,,,,43,,,768,,,,768,,,,,,296,,,,,,,,,,,,,,,,43,43,',
',,,43,,,,,,,,,,,,31,769,,769,,,769,769,,,31,,,769,,,,,,769,769,,,,,',
'769,769,296,,,43,,,,768,,,31,,,31,,,,,,,31,,,,,,,,,,31,,,,31,,,769,',
',,,,,,,43,,,,,,317,447,,,453,317,,,,31,,,31,31,,,31,,453,,,,31,31,,',
',31,31,,,249,,,,,,,531,532,533,534,535,536,537,538,539,540,541,542,543',
'544,545,546,547,548,549,550,551,552,,,,,553,,,,,,,,,,,,,,,,,,,,,,,317',
'317,,,,,,,,317,,,,,,,317,,317,,,317,317,,,769,,,,,,,,769,,,,769,,,,',
',,,,,,,,,,,,,,,,,,,,,606,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,31,,,,,31,31',
',,,,,,,,,31,,769,,,,,,,,,,,,,,,,31,,317,,,,,,,,,,,,,,,31,,,,,,,,,,,',
',,,,,,,,,694,,,,,,,,,,,,,,,,,,,,,,,,,,,317,,,,,,,,,,,,,725,,31,,,,,',
',,317,,453,453,453,,,,,31,,,,,,,,,,,,31,,,,,,31,,,,,,31,,,,,,,365,,',
',,,,,,31,317,,317,,317,,,,,,,,,,,,,,,,317,,,,,,,,,,453,,,818,,819,,',
',,,317,,,317,,,,,,,,,,31,,,317,317,,,,,,,,,,317,,,,,,,,,,,,,,,31,31',
',,,,31,,,,,,,,,,,,317,453,317,,,,876,,,317,317,453,453,,,,453,453,,',
',,,317,,,,,,,,31,,31,31,,,,,317,,,,,,,31,,,,,,,,,,,,,,,694,725,,,,,',
',,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,317,,,,,,,,,317,',
',317,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,317,,,,,,,,453,,,,,,,,,,,,,1011,1012,,,,,,,,,,,,,,,,,,,,,,,,,,,,1034',
'1035,453,453,453,453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1068,,,,',
',,,,,,,,,,,,,,,,,,,,,,,317,,,,,,,,,,,,,,,,,,,317,,,,,,,,,,,,,,,,,,,',
',,,,,,453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,317' ]
        racc_goto_table = arr = ::Array.new(4637, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'72,33,158,117,48,72,198,75,75,68,87,87,33,46,107,82,82,12,198,110,110',
'112,113,75,72,61,61,36,36,36,19,19,139,139,19,94,72,72,72,73,17,17,230',
'230,31,91,91,92,135,235,22,13,82,82,82,44,44,130,87,10,128,77,77,28',
'72,10,111,228,228,228,90,90,90,117,72,72,72,28,127,133,8,24,24,225,225',
'8,58,119,19,19,19,19,231,55,55,41,41,9,80,187,177,177,61,90,90,146,64',
'146,20,51,7,20,147,6,129,89,89,57,65,89,157,157,72,70,192,20,31,149',
'56,56,56,72,69,72,2,236,192,200,200,175,145,176,5,239,8,42,161,26,26',
'74,74,26,151,63,63,63,140,152,161,140,202,202,30,178,178,214,214,30',
'224,224,55,136,94,178,50,131,52,95,150,95,126,125,153,13,30,239,154',
'155,156,27,25,159,193,160,30,30,30,93,30,30,30,10,8,236,162,26,26,26',
'26,35,35,8,5,8,164,165,72,36,230,29,168,169,170,75,29,33,30,171,72,172',
'6,30,30,173,72,30,30,30,30,91,79,198,87,87,21,22,22,149,151,22,124,72',
'239,152,79,29,130,123,112,225,18,180,182,22,183,184,122,2,188,33,189',
'215,215,215,215,73,121,120,128,127,1,195,128,29,30,147,196,95,95,30',
'30,30,30,30,16,30,157,26,26,36,36,14,145,116,114,205,206,58,36,200,207',
'210,211,212,26,26,213,82,175,119,61,61,60,175,175,176,176,192,33,117',
'68,72,129,216,217,72,82,218,219,72,72,29,31,90,220,19,33,202,202,223',
'29,90,29,70,149,201,201,106,72,105,229,3,70,235,193,91,51,88,88,88,72',
'91,193,146,78,26,233,33,30,30,30,30,30,30,30,72,72,117,55,55,30,234',
'83,61,61,95,30,30,30,30,88,84,43,61,61,64,86,187,80,45,64,8,31,30,231',
'73,142,65,174,174,119,146,65,9,75,33,63,143,140,,111,61,61,69,63,29',
'7,29,61,61,29,35,35,,,,,29,,13,31,,139,29,29,230,,17,,30,31,55,26,,',
'36,30,30,5,,29,55,110,10,91,30,61,61,77,128,128,91,,26,,,,,228,228,',
'228,228,30,228,31,225,30,57,55,,30,30,57,,36,11,55,,117,133,94,,,230',
'36,230,215,75,215,30,,231,,28,28,5,72,72,28,28,92,30,157,91,146,,,146',
'200,200,79,,79,55,55,30,30,30,200,29,,88,88,29,200,41,56,24,29,68,177',
'20,89,56,,82,30,70,68,73,91,20,20,13,82,,20,20,239,72,,,,,36,,140,72',
'29,140,75,,140,94,140,,72,200,231,,75,,,29,29,146,91,90,,,,,113,,95',
'44,91,72,79,,72,117,36,,139,139,,,75,,,30,36,135,75,174,,,88,88,117',
'72,,174,91,,,88,90,,,110,91,56,,,,,,,140,,140,,140,75,140,36,72,,,30',
'198,75,,72,10,,128,128,,30,,140,,11,87,,,91,,,,,228,228,228,228,17,22',
'79,79,,,12,79,79,,,22,22,,,,22,22,28,90,,77,11,,110,112,110,,,,139,',
'144,107,144,,,191,,,,200,40,30,191,,72,,,,8,30,,30,72,,,8,201,201,30',
'48,158,72,72,,20,,201,,46,,40,,201,,68,,,,75,30,82,230,30,,,68,228,',
',30,,82,,,,,,,29,30,,,72,30,11,,,19,,11,,,,72,174,201,,,,174,174,,,',
'91,90,10,91,,230,30,,174,30,30,,29,30,,29,72,,,30,30,72,,,30,30,,,,',
'11,11,72,,,,29,,,,,,,,,,,85,,,,,232,,174,,,,87,,,,87,29,,,29,72,,79',
'29,26,,10,,,29,29,22,132,,29,29,,,,,,,,191,19,,,,,,,191,72,26,72,191',
'10,72,72,,,,,,72,,79,79,79,79,72,72,230,19,,230,,72,72,,,,,,,,32,,,',
'88,61,61,30,,,,,,,72,198,,,30,,,,30,,31,,,,,61,72,,72,,,,82,117,72,144',
',,,,191,30,,,,,30,30,,,72,,,230,72,,,30,,,,85,85,,,,,88,,55,,26,,,232',
'30,,232,,,232,,232,144,,144,,144,,,,79,30,,,,82,,29,,26,,,29,132,72',
'40,132,,132,,,,,29,,,,72,,,,,,,,11,,33,11,40,,29,,72,72,,,,,72,,,,,',
'19,19,232,29,232,,232,72,232,30,,,82,,,72,,,85,72,85,,,85,85,232,30',
',,132,,132,,132,72,132,,72,30,,,62,,,30,,62,36,,,30,,132,75,144,,144',
',,,,,,62,40,,30,,,91,30,,,62,62,62,75,62,,,72,,144,29,,,,,,,,,,,72,',
',,,,,29,,,,62,,29,,,62,62,,,62,,,26,26,,,30,144,29,144,,144,,,32,,,85',
',30,,,,,,,,,32,,144,,,,,30,30,38,,,,30,38,,,,,40,62,,,,,62,62,62,62',
'62,,62,,,,29,,,,,,,,,,38,38,38,,,,,85,30,,,30,,30,30,11,32,,,29,29,',
',,,29,30,,38,,,11,,,,,,,38,38,38,,,23,,,32,,23,,,,,,30,32,,,,,,,,,,',
'11,,29,62,62,62,62,62,62,62,,,32,23,85,62,85,,85,,38,62,62,62,62,,,',
',38,,38,,,,,,,62,,,23,,,,29,,,,,,23,,,,85,,,85,,,,,,,,,,,,,85,32,,,',
',32,32,,11,,,,62,,,,,40,,62,62,,,,,,11,23,62,,,40,40,,,,23,,23,141,141',
'141,38,85,38,,62,38,11,,62,,85,85,38,62,,,,,38,38,,,,,85,,,,,,,,,,,38',
',,,,85,,,62,,,,,,,40,,,,,,,62,62,62,,,,,,,,,,,,,,,32,32,32,,62,23,40',
'23,,,23,,,,,40,11,23,,,,40,11,23,23,,,141,141,141,141,,141,,,,,,40,',
'23,38,,,85,38,,,,38,38,,,85,,,85,,,,,,,,,11,,,38,62,141,141,141,141',
',,,,,,38,,141,,,,,,,,,,,,,38,38,,40,,,,,40,40,,,,11,62,,,,,,,,,,62,23',
',,85,23,,,,,23,,,,,,,,,,,,40,,,,,,,,,,,32,,,,,,,23,,,,,,,,,,,,,,,23',
'23,,,,62,,,,,,,,,,62,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,62,,,62,,,,40',
',,62,,,,,,,,,66,62,,,,62,,,,85,,,40,,,,,,,,,,,,,,,,85,,,,62,,,62,62',
',,62,,,,,,62,62,39,,,62,62,39,,38,,,,,,,,38,,,,,,,,,38,,,,,66,,,,,,',
'39,39,39,,,,40,,,38,,,38,,,,66,,,,,,,,,,,,39,,,,,38,,,,,39,39,39,,,',
',,,40,,,23,,,,,,,,,,38,,,38,,,,38,,,,,,38,38,,,,38,38,,,,,,,39,,23,',
',23,,,,39,,39,62,,,,104,104,,,,,,,,,23,,,,,,,,,62,,,,,62,62,,,,,,,,',
',62,,23,,,23,,,,23,,,,,,23,23,,62,66,23,23,,,,,,,,,,,,,,62,,,,,,,,39',
',39,,,39,,,,,,,39,,38,66,97,97,39,39,,,,,,38,,,,,,,,,,39,,,,,,,,,,,',
',,,,,38,66,,62,,38,,,,66,,66,,,,66,38,,,,62,,,,,,,,,,,66,62,,38,,,66',
'62,,,,,,62,,,,,,,38,,,,,66,,,,62,,,39,,,,39,,,,39,39,,,,,,,23,,,,,23',
',,,104,,39,,,,,23,104,,34,,,,39,34,,104,104,,,,,,,23,,62,,39,39,,,,',
',,,,,,,23,38,,,34,34,34,,,,,,,,62,62,,,,38,62,,,,,38,,,,,,,34,,,66,',
',,,,38,34,34,34,38,,,,,,,97,,,,,,,,97,,,62,,62,62,,,97,97,,,,,,103,103',
'62,,23,,,,,,,,,,34,,,,,,38,,23,34,,34,,,23,,62,,,38,,,,,,,,,,,23,,,',
'23,38,38,,,98,98,38,,,,,,104,,104,,,104,104,,,,,,104,,,,,,104,104,,',
',,,104,104,,,,,,,,38,,,38,23,,,102,102,,,39,,34,,34,,,34,39,,,,,,34',
',,39,,104,34,34,23,23,,,,,23,,,,,,,38,,34,39,,,39,,,,,,,66,97,,97,,',
'97,97,,,,,,97,39,66,,,,97,97,39,,23,,,97,97,,,,,,,,,,,71,,,39,,71,39',
',,,39,,,,,,39,39,66,,,39,39,,71,,103,97,23,,66,34,,,103,34,71,71,71',
'34,34,,,103,103,,,,,,,,,,,,,,34,,104,,,,71,,,,104,,34,,104,,71,71,71',
',,98,,,,,,34,34,98,,,,66,66,66,,,98,98,,,,,,,,,,66,,,,,,,,,,,,,,,71',
',,,,,102,101,101,71,,71,,,102,39,,,,,,,,102,102,104,39,,,,,,97,,,,,',
',,97,,,,97,,,,,,,,,39,,,,,39,,,,,,,,,,,39,,,,,,,,,,,,,,103,,103,,39',
'103,103,,,,,71,103,,,,,,103,103,,39,,71,,103,103,109,109,71,,,,,,,97',
',,,,,,,,,71,,,,,,,98,,98,,,98,98,,,,,103,98,,,,,,98,98,,,34,,,98,98',
',,,34,,,,,,,,,34,,,,,,,,,39,102,,102,,,102,102,,,,,34,102,,34,98,,39',
'102,102,,,,39,71,102,102,,71,,,,71,71,,34,,,,39,101,,,39,,,,,101,,,71',
',,,,,101,101,,,,34,71,102,34,,,,34,,,,,,34,34,,71,71,34,34,,,,,,,,103',
',,,,39,,,103,,,,103,,,,,,39,,,,,,,,,,,,,,,,39,39,,,,,39,,,,,,,,,,,,',
'98,109,,,,,,,98,109,,,98,,,,,,109,109,,,,,,99,99,39,,,39,,,,103,,,,',
',,,,,,,,,,102,,,,,34,,,102,,,,102,,,,34,,,,,,,,39,,,,101,,101,,,101',
'101,,59,,98,,101,59,,34,,,101,101,34,,,,,101,101,,,,59,34,,,,,,,,,59',
'59,59,,59,,,,,34,,,,,71,,,,,102,,,71,,101,,34,,,,,71,59,,,,,59,59,,',
'59,,,,,,,,,,,71,,,71,,,,,,,,109,,109,,,109,109,,,,,,109,71,,,,,109,109',
',,,,,109,109,59,,,,,59,59,59,59,59,,59,,71,,,34,,,,71,,,,,,,,,,,,,,34',
',99,109,,,34,,,,99,,,,,,,,,99,99,,34,,,,34,101,100,100,,,,,,101,,,,101',
',,,,,,,,,,,,,,,,,,,,59,59,59,59,59,59,59,,,,,,59,,,,,34,59,59,59,59',
',,,,,,,,34,,,,,59,,,,,,,,,,,34,34,,,,,34,71,101,,,,,,,,,,71,,,,,,109',
',,,,,,,109,,,59,109,,,,,,59,59,,71,34,,,34,71,59,,,,,,,,,,71,,,,,,,',
'59,,,,59,,99,,99,59,,99,99,,,,,,99,,,,,34,99,99,,71,,,,99,99,,,,,,,59',
',,109,,,,,,,,,,,59,59,59,,,,,,,,,,,,,,,99,100,,,59,,,,,100,,,,,,,,,100',
'100,,,,,,,,,,,,,,,,,,71,,,,,,,,,,,,,,,,,,71,,,,,,71,,,37,,,,,59,,,,',
'37,37,37,71,,,,71,,,,,37,37,,37,37,,37,,,,,,,,,,,,,,,37,37,59,,,,,,',
',,,59,,,,,,,,99,,,,,71,,,99,,,,99,,,,,,71,,,,,,,,,,,,,,,,71,71,,,,,71',
',,,,,,,,,,,59,100,,100,,,100,100,,,59,,,100,,,,,,100,100,,,,,,100,100',
'71,,,71,,,,99,,,59,,,59,,,,,,,59,,,,,,,,,,59,,,,59,,,100,,,,,,,,,71',
',,,,,37,37,,,37,37,,,,59,,,59,59,,,59,,37,,,,59,59,,,,59,59,,,37,,,',
',,,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37',
',,,,37,,,,,,,,,,,,,,,,,,,,,,,37,37,,,,,,,,37,,,,,,,37,,37,,,37,37,,',
'100,,,,,,,,100,,,,100,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,59,,,,,,,,',
',,,,,,,,,,,,,,59,,,,,59,59,,,,,,,,,,59,,100,,,,,,,,,,,,,,,,59,,37,,',
',,,,,,,,,,,,59,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,37,',
',,,,,,,,,,,37,,59,,,,,,,,37,,37,37,37,,,,,59,,,,,,,,,,,,59,,,,,,59,',
',,,,59,,,,,,,37,,,,,,,,,59,37,,37,,37,,,,,,,,,,,,,,,,37,,,,,,,,,,37',
',,37,,37,,,,,,37,,,37,,,,,,,,,,59,,,37,37,,,,,,,,,,37,,,,,,,,,,,,,,',
'59,59,,,,,59,,,,,,,,,,,,37,37,37,,,,37,,,37,37,37,37,,,,37,37,,,,,,37',
',,,,,,,59,,59,59,,,,,37,,,,,,,59,,,,,,,,,,,,,,,37,37,,,,,,,,,,,,59,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,37,,,37,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,',
'37,,,,,,,,,,,,,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,37',
',,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37' ]
        racc_goto_check = arr = ::Array.new(4637, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   280,   132,   361,   nil,   137,   106,   105,    78,    88,
  -171,   468,  -456,  -644,  -591,   nil,  -288,    30,   249,   -41,
  -112,   168,    26,  1337,  -138,   -29,    76,    53,  -160,   217,
   160,  -180,   504,   -17,  2197,   190,    -7,  3474,  1258,  1831,
   718,  -434,  -110,   146,   -18,  -215,   -13,   nil,   -22,   nil,
   148,    80,  -378,   nil,   nil,  -132,    97,  -188,  -481,  3031,
  -238,  -200,  1147,   119,    68,    80,  1547,   nil,   -30,    92,
  -237,  2497,    -2,  -363,    72,    -3,   nil,    51,   -57,    17,
    50,   nil,   -24,   341,    30,   804,   339,    -9,   333,  -261,
    36,    14,  -259,  -360,  -285,  -395,   nil,  1536,  1831,  2444,
  2688,  2099,  1880,  1778,  1442,   333,   289,   -55,   nil,  2202,
  -365,  -759,  -369,  -605,   228,   nil,  -103,    -2,   nil,    67,
   212,   -97,   200,  -351,  -391,  -669,  -228,  -837,  -436,  -382,
  -859,  -740,   -69,  -622,   nil,  -447,  -802,   nil,   nil,  -447,
  -545,   398,  -659,  -546,    24,  -833,  -600,  -681,   nil,  -726,
  -922,  -948,  -943,  -227,  -666,   102,  -457,  -113,   -25,  -810,
  -809,  -410,   -96,   nil,   -96,   -96,   nil,   nil,  -565,  -872,
  -768,  -991,  -606,  -915,  -111,  -608,  -606,  -429,  -768,   nil,
  -666,   nil,  -666,  -482,  -481,   nil,   nil,  -649,  -480,  -479,
   nil,  -202,  -802,  -753,   nil,  -666,  -661,   nil,   -84,   nil,
  -392,  -174,  -604,   nil,   nil,  -472,  -390,  -586,   nil,   nil,
   223,   219,   219,   221,  -249,  -141,   237,   237,   239,  -313,
  -308,   nil,   nil,  -293,  -184,  -150,   nil,   nil,  -416,  -345,
  -191,  -613,   -96,  -325,  -741,  -658, -1003,   nil,   nil,  -431 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,     6,   391,   334,   nil,
   nil,   473,   nil,   985,   nil,   331,   332,   nil,   nil,   nil,
    13,    14,    22,   247,   nil,   nil,    16,   nil,   441,   248,
   363,   nil,   nil,   639,   251,   nil,    27,    25,   252,   246,
   519,   nil,   nil,   nil,   nil,   nil,   nil,   386,   143,    26,
   nil,   nil,   nil,    28,    29,   814,   nil,   nil,   nil,   351,
   nil,    30,   348,   455,    37,   nil,   nil,    39,    42,    41,
   nil,   243,   244,   403,   nil,   464,   142,    87,   nil,   446,
   103,    51,    54,   283,   nil,   323,   nil,   893,   456,   nil,
   457,   469,   482,   688,   571,   321,   307,    55,    56,    57,
    58,    59,    60,    61,    62,    63,   nil,   308,    69,    70,
   nil,   nil,   nil,   nil,   nil,    77,   nil,   621,    78,   230,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   715,   494,   nil,
   716,   717,   480,   475,   476,   nil,  1178,   711,  1072,   nil,
   481,   nil,   nil,   nil,   483,   nil,   485,   nil,   972,   nil,
   nil,   nil,   492,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   468,   nil,   nil,   793,   785,   nil,   nil,
   nil,   nil,   nil,   nil,  1052,   nil,   738,   939,   740,   741,
   745,   742,   743,   nil,   nil,   744,   746,   nil,   nil,   nil,
   938,   940,   750,   nil,   752,   753,   754,   755,   nil,   759,
   477,   503,   761,   762,   763,   nil,   nil,   nil,    86,    88,
    89,   nil,   nil,   nil,   nil,   649,   nil,   nil,   nil,   nil,
   nil,    99,   100,   nil,   231,   903,   234,   479,   nil,   484,
   911,   497,   499,   500,  1083,   504,  1084,   507,   510,   326 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  0, 151, :_reduce_4,
  1, 151, :_reduce_5,
  3, 151, :_reduce_6,
  2, 151, :_reduce_7,
  1, 153, :_reduce_none,
  2, 153, :_reduce_9,
  3, 156, :_reduce_10,
  4, 157, :_reduce_11,
  2, 158, :_reduce_12,
  0, 162, :_reduce_13,
  1, 162, :_reduce_14,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  1, 163, :_reduce_none,
  2, 163, :_reduce_18,
  0, 174, :_reduce_19,
  4, 155, :_reduce_20,
  3, 155, :_reduce_21,
  3, 155, :_reduce_22,
  3, 155, :_reduce_23,
  2, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  3, 155, :_reduce_28,
  3, 155, :_reduce_29,
  4, 155, :_reduce_30,
  1, 155, :_reduce_none,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  5, 155, :_reduce_34,
  3, 155, :_reduce_35,
  1, 155, :_reduce_none,
  3, 167, :_reduce_37,
  3, 167, :_reduce_38,
  6, 167, :_reduce_39,
  5, 167, :_reduce_40,
  5, 167, :_reduce_41,
  5, 167, :_reduce_42,
  5, 167, :_reduce_43,
  4, 167, :_reduce_44,
  6, 167, :_reduce_45,
  4, 167, :_reduce_46,
  6, 167, :_reduce_47,
  3, 167, :_reduce_48,
  1, 175, :_reduce_none,
  3, 175, :_reduce_50,
  1, 175, :_reduce_none,
  1, 173, :_reduce_none,
  3, 173, :_reduce_53,
  3, 173, :_reduce_54,
  3, 173, :_reduce_55,
  2, 173, :_reduce_56,
  0, 189, :_reduce_57,
  4, 173, :_reduce_58,
  0, 190, :_reduce_59,
  4, 173, :_reduce_60,
  1, 173, :_reduce_none,
  1, 166, :_reduce_none,
  0, 194, :_reduce_63,
  3, 191, :_reduce_64,
  1, 193, :_reduce_65,
  2, 181, :_reduce_66,
  0, 199, :_reduce_67,
  5, 185, :_reduce_68,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 200, :_reduce_none,
  4, 200, :_reduce_72,
  0, 207, :_reduce_73,
  4, 204, :_reduce_74,
  1, 206, :_reduce_none,
  2, 183, :_reduce_76,
  3, 183, :_reduce_77,
  4, 183, :_reduce_78,
  5, 183, :_reduce_79,
  4, 183, :_reduce_80,
  5, 183, :_reduce_81,
  2, 183, :_reduce_82,
  2, 183, :_reduce_83,
  2, 183, :_reduce_84,
  2, 183, :_reduce_85,
  2, 183, :_reduce_86,
  1, 168, :_reduce_87,
  3, 168, :_reduce_88,
  1, 212, :_reduce_89,
  3, 212, :_reduce_90,
  1, 211, :_reduce_none,
  2, 211, :_reduce_92,
  3, 211, :_reduce_93,
  5, 211, :_reduce_94,
  2, 211, :_reduce_95,
  4, 211, :_reduce_96,
  2, 211, :_reduce_97,
  4, 211, :_reduce_98,
  1, 211, :_reduce_99,
  3, 211, :_reduce_100,
  1, 215, :_reduce_none,
  3, 215, :_reduce_102,
  2, 214, :_reduce_103,
  3, 214, :_reduce_104,
  1, 217, :_reduce_105,
  3, 217, :_reduce_106,
  1, 216, :_reduce_107,
  1, 216, :_reduce_108,
  4, 216, :_reduce_109,
  3, 216, :_reduce_110,
  3, 216, :_reduce_111,
  3, 216, :_reduce_112,
  3, 216, :_reduce_113,
  2, 216, :_reduce_114,
  1, 216, :_reduce_115,
  1, 170, :_reduce_116,
  1, 170, :_reduce_117,
  4, 170, :_reduce_118,
  3, 170, :_reduce_119,
  3, 170, :_reduce_120,
  3, 170, :_reduce_121,
  3, 170, :_reduce_122,
  2, 170, :_reduce_123,
  1, 170, :_reduce_124,
  1, 220, :_reduce_125,
  1, 220, :_reduce_none,
  2, 221, :_reduce_127,
  1, 221, :_reduce_128,
  3, 221, :_reduce_129,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 164, :_reduce_135,
  1, 164, :_reduce_none,
  1, 165, :_reduce_137,
  0, 225, :_reduce_138,
  4, 165, :_reduce_139,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  3, 184, :_reduce_211,
  3, 184, :_reduce_212,
  6, 184, :_reduce_213,
  5, 184, :_reduce_214,
  5, 184, :_reduce_215,
  5, 184, :_reduce_216,
  5, 184, :_reduce_217,
  4, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 184, :_reduce_220,
  3, 184, :_reduce_221,
  2, 184, :_reduce_222,
  2, 184, :_reduce_223,
  2, 184, :_reduce_224,
  2, 184, :_reduce_225,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  3, 184, :_reduce_230,
  3, 184, :_reduce_231,
  4, 184, :_reduce_232,
  2, 184, :_reduce_233,
  2, 184, :_reduce_234,
  3, 184, :_reduce_235,
  3, 184, :_reduce_236,
  3, 184, :_reduce_237,
  3, 184, :_reduce_238,
  1, 184, :_reduce_none,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  3, 184, :_reduce_242,
  3, 184, :_reduce_243,
  3, 184, :_reduce_244,
  2, 184, :_reduce_245,
  2, 184, :_reduce_246,
  3, 184, :_reduce_247,
  3, 184, :_reduce_248,
  3, 184, :_reduce_249,
  3, 184, :_reduce_250,
  0, 231, :_reduce_251,
  4, 184, :_reduce_252,
  6, 184, :_reduce_253,
  4, 184, :_reduce_254,
  6, 184, :_reduce_255,
  4, 184, :_reduce_256,
  6, 184, :_reduce_257,
  1, 184, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  3, 228, :_reduce_263,
  3, 228, :_reduce_264,
  1, 232, :_reduce_none,
  1, 233, :_reduce_none,
  2, 233, :_reduce_none,
  4, 233, :_reduce_268,
  2, 233, :_reduce_269,
  1, 226, :_reduce_none,
  3, 226, :_reduce_271,
  3, 238, :_reduce_272,
  5, 238, :_reduce_273,
  3, 238, :_reduce_274,
  0, 240, :_reduce_275,
  1, 240, :_reduce_none,
  0, 178, :_reduce_277,
  1, 178, :_reduce_none,
  2, 178, :_reduce_none,
  4, 178, :_reduce_280,
  2, 178, :_reduce_281,
  1, 210, :_reduce_282,
  2, 210, :_reduce_283,
  2, 210, :_reduce_284,
  4, 210, :_reduce_285,
  1, 210, :_reduce_286,
  0, 243, :_reduce_287,
  2, 203, :_reduce_288,
  2, 242, :_reduce_289,
  1, 242, :_reduce_290,
  2, 241, :_reduce_291,
  0, 241, :_reduce_292,
  1, 235, :_reduce_293,
  2, 235, :_reduce_294,
  3, 235, :_reduce_295,
  4, 235, :_reduce_296,
  1, 172, :_reduce_297,
  1, 172, :_reduce_none,
  3, 171, :_reduce_299,
  4, 171, :_reduce_300,
  2, 171, :_reduce_301,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_312,
  0, 267, :_reduce_313,
  4, 229, :_reduce_314,
  0, 268, :_reduce_315,
  4, 229, :_reduce_316,
  0, 269, :_reduce_317,
  4, 229, :_reduce_318,
  3, 229, :_reduce_319,
  3, 229, :_reduce_320,
  2, 229, :_reduce_321,
  3, 229, :_reduce_322,
  3, 229, :_reduce_323,
  1, 229, :_reduce_324,
  4, 229, :_reduce_325,
  3, 229, :_reduce_326,
  1, 229, :_reduce_327,
  0, 270, :_reduce_328,
  6, 229, :_reduce_329,
  4, 229, :_reduce_330,
  3, 229, :_reduce_331,
  2, 229, :_reduce_332,
  1, 229, :_reduce_none,
  2, 229, :_reduce_334,
  1, 229, :_reduce_none,
  6, 229, :_reduce_336,
  6, 229, :_reduce_337,
  4, 229, :_reduce_338,
  4, 229, :_reduce_339,
  5, 229, :_reduce_340,
  4, 229, :_reduce_341,
  5, 229, :_reduce_342,
  6, 229, :_reduce_343,
  0, 271, :_reduce_344,
  6, 229, :_reduce_345,
  0, 272, :_reduce_346,
  7, 229, :_reduce_347,
  0, 273, :_reduce_348,
  5, 229, :_reduce_349,
  4, 229, :_reduce_350,
  4, 229, :_reduce_351,
  1, 229, :_reduce_352,
  1, 229, :_reduce_353,
  1, 229, :_reduce_354,
  1, 229, :_reduce_355,
  1, 177, :_reduce_none,
  1, 262, :_reduce_357,
  1, 265, :_reduce_358,
  1, 196, :_reduce_359,
  1, 209, :_reduce_360,
  1, 257, :_reduce_none,
  1, 257, :_reduce_none,
  2, 257, :_reduce_363,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 258, :_reduce_none,
  5, 258, :_reduce_367,
  1, 160, :_reduce_none,
  2, 160, :_reduce_369,
  1, 261, :_reduce_none,
  1, 261, :_reduce_none,
  1, 274, :_reduce_372,
  3, 274, :_reduce_373,
  1, 277, :_reduce_374,
  3, 277, :_reduce_375,
  1, 276, :_reduce_none,
  3, 276, :_reduce_377,
  5, 276, :_reduce_378,
  1, 276, :_reduce_379,
  3, 276, :_reduce_380,
  2, 278, :_reduce_381,
  1, 278, :_reduce_382,
  1, 279, :_reduce_none,
  1, 279, :_reduce_none,
  0, 284, :_reduce_385,
  2, 282, :_reduce_386,
  4, 283, :_reduce_387,
  2, 283, :_reduce_388,
  2, 283, :_reduce_389,
  1, 283, :_reduce_390,
  2, 288, :_reduce_391,
  0, 288, :_reduce_392,
  1, 289, :_reduce_none,
  6, 290, :_reduce_394,
  8, 290, :_reduce_395,
  4, 290, :_reduce_396,
  6, 290, :_reduce_397,
  4, 290, :_reduce_398,
  2, 290, :_reduce_none,
  6, 290, :_reduce_400,
  2, 290, :_reduce_401,
  4, 290, :_reduce_402,
  6, 290, :_reduce_403,
  2, 290, :_reduce_404,
  4, 290, :_reduce_405,
  2, 290, :_reduce_406,
  4, 290, :_reduce_407,
  1, 290, :_reduce_none,
  0, 294, :_reduce_409,
  1, 294, :_reduce_410,
  3, 295, :_reduce_411,
  4, 295, :_reduce_412,
  1, 296, :_reduce_413,
  4, 296, :_reduce_414,
  1, 297, :_reduce_415,
  3, 297, :_reduce_416,
  1, 298, :_reduce_417,
  1, 298, :_reduce_none,
  0, 302, :_reduce_419,
  0, 303, :_reduce_420,
  5, 256, :_reduce_421,
  4, 300, :_reduce_422,
  1, 300, :_reduce_423,
  0, 306, :_reduce_424,
  4, 301, :_reduce_425,
  0, 307, :_reduce_426,
  4, 301, :_reduce_427,
  0, 309, :_reduce_428,
  4, 305, :_reduce_429,
  2, 201, :_reduce_430,
  4, 201, :_reduce_431,
  5, 201, :_reduce_432,
  5, 201, :_reduce_433,
  2, 255, :_reduce_434,
  4, 255, :_reduce_435,
  4, 255, :_reduce_436,
  3, 255, :_reduce_437,
  3, 255, :_reduce_438,
  3, 255, :_reduce_439,
  2, 255, :_reduce_440,
  1, 255, :_reduce_441,
  4, 255, :_reduce_442,
  0, 311, :_reduce_443,
  4, 254, :_reduce_444,
  0, 312, :_reduce_445,
  4, 254, :_reduce_446,
  0, 313, :_reduce_447,
  3, 205, :_reduce_448,
  0, 314, :_reduce_449,
  0, 315, :_reduce_450,
  4, 308, :_reduce_451,
  5, 259, :_reduce_452,
  1, 316, :_reduce_453,
  1, 316, :_reduce_none,
  0, 319, :_reduce_455,
  0, 320, :_reduce_456,
  7, 260, :_reduce_457,
  1, 318, :_reduce_458,
  1, 318, :_reduce_none,
  1, 317, :_reduce_460,
  3, 317, :_reduce_461,
  3, 317, :_reduce_462,
  1, 188, :_reduce_none,
  2, 188, :_reduce_464,
  3, 188, :_reduce_465,
  1, 188, :_reduce_466,
  1, 188, :_reduce_467,
  1, 188, :_reduce_468,
  1, 321, :_reduce_none,
  3, 326, :_reduce_470,
  1, 326, :_reduce_none,
  3, 328, :_reduce_472,
  1, 328, :_reduce_none,
  1, 330, :_reduce_474,
  1, 331, :_reduce_475,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  4, 329, :_reduce_478,
  4, 329, :_reduce_479,
  4, 329, :_reduce_480,
  3, 329, :_reduce_481,
  4, 329, :_reduce_482,
  4, 329, :_reduce_483,
  4, 329, :_reduce_484,
  3, 329, :_reduce_485,
  3, 329, :_reduce_486,
  3, 329, :_reduce_487,
  2, 329, :_reduce_488,
  0, 335, :_reduce_489,
  4, 329, :_reduce_490,
  2, 329, :_reduce_491,
  0, 336, :_reduce_492,
  4, 329, :_reduce_493,
  1, 322, :_reduce_494,
  1, 322, :_reduce_495,
  2, 322, :_reduce_496,
  2, 322, :_reduce_497,
  4, 322, :_reduce_498,
  1, 322, :_reduce_none,
  2, 337, :_reduce_500,
  3, 337, :_reduce_501,
  1, 324, :_reduce_502,
  3, 324, :_reduce_503,
  5, 323, :_reduce_504,
  2, 339, :_reduce_505,
  1, 339, :_reduce_506,
  1, 340, :_reduce_507,
  3, 340, :_reduce_508,
  1, 338, :_reduce_none,
  3, 325, :_reduce_510,
  1, 325, :_reduce_511,
  2, 325, :_reduce_512,
  1, 325, :_reduce_513,
  1, 341, :_reduce_514,
  3, 341, :_reduce_515,
  2, 343, :_reduce_516,
  1, 343, :_reduce_517,
  1, 344, :_reduce_518,
  3, 344, :_reduce_519,
  2, 346, :_reduce_520,
  1, 346, :_reduce_521,
  2, 348, :_reduce_522,
  1, 342, :_reduce_none,
  1, 342, :_reduce_524,
  1, 332, :_reduce_none,
  3, 332, :_reduce_526,
  3, 332, :_reduce_527,
  2, 332, :_reduce_528,
  2, 332, :_reduce_529,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  2, 332, :_reduce_533,
  2, 332, :_reduce_534,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_543,
  1, 349, :_reduce_none,
  1, 327, :_reduce_545,
  2, 350, :_reduce_546,
  2, 350, :_reduce_547,
  4, 351, :_reduce_548,
  2, 333, :_reduce_549,
  3, 333, :_reduce_550,
  1, 333, :_reduce_551,
  6, 159, :_reduce_552,
  0, 159, :_reduce_553,
  1, 353, :_reduce_554,
  1, 353, :_reduce_none,
  1, 353, :_reduce_none,
  2, 354, :_reduce_557,
  1, 354, :_reduce_none,
  2, 161, :_reduce_559,
  1, 161, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 245, :_reduce_563,
  1, 356, :_reduce_564,
  2, 356, :_reduce_565,
  3, 357, :_reduce_566,
  1, 357, :_reduce_567,
  1, 357, :_reduce_568,
  3, 246, :_reduce_569,
  4, 247, :_reduce_570,
  3, 248, :_reduce_571,
  0, 360, :_reduce_572,
  3, 360, :_reduce_573,
  1, 361, :_reduce_574,
  2, 361, :_reduce_575,
  3, 250, :_reduce_576,
  0, 363, :_reduce_577,
  3, 363, :_reduce_578,
  3, 249, :_reduce_579,
  3, 251, :_reduce_580,
  0, 364, :_reduce_581,
  3, 364, :_reduce_582,
  0, 365, :_reduce_583,
  3, 365, :_reduce_584,
  0, 345, :_reduce_585,
  2, 345, :_reduce_586,
  0, 358, :_reduce_587,
  2, 358, :_reduce_588,
  0, 359, :_reduce_589,
  2, 359, :_reduce_590,
  1, 362, :_reduce_591,
  2, 362, :_reduce_592,
  0, 367, :_reduce_593,
  4, 362, :_reduce_594,
  1, 366, :_reduce_595,
  1, 366, :_reduce_596,
  1, 366, :_reduce_597,
  1, 366, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 368, :_reduce_601,
  3, 369, :_reduce_602,
  1, 355, :_reduce_603,
  2, 355, :_reduce_604,
  1, 227, :_reduce_605,
  1, 227, :_reduce_606,
  1, 227, :_reduce_607,
  1, 227, :_reduce_608,
  1, 352, :_reduce_609,
  1, 352, :_reduce_610,
  1, 352, :_reduce_611,
  1, 218, :_reduce_612,
  1, 218, :_reduce_613,
  1, 218, :_reduce_614,
  1, 218, :_reduce_615,
  1, 218, :_reduce_616,
  1, 219, :_reduce_617,
  1, 219, :_reduce_618,
  1, 219, :_reduce_619,
  1, 219, :_reduce_620,
  1, 219, :_reduce_621,
  1, 219, :_reduce_622,
  1, 219, :_reduce_623,
  1, 252, :_reduce_624,
  1, 252, :_reduce_625,
  1, 176, :_reduce_626,
  1, 176, :_reduce_627,
  1, 186, :_reduce_628,
  1, 186, :_reduce_629,
  0, 370, :_reduce_630,
  4, 263, :_reduce_631,
  0, 263, :_reduce_632,
  1, 182, :_reduce_none,
  1, 182, :_reduce_634,
  3, 371, :_reduce_635,
  1, 266, :_reduce_none,
  0, 373, :_reduce_637,
  3, 266, :_reduce_638,
  4, 372, :_reduce_639,
  2, 372, :_reduce_640,
  2, 372, :_reduce_641,
  1, 372, :_reduce_642,
  1, 372, :_reduce_643,
  2, 375, :_reduce_644,
  0, 375, :_reduce_645,
  6, 304, :_reduce_646,
  8, 304, :_reduce_647,
  4, 304, :_reduce_648,
  6, 304, :_reduce_649,
  4, 304, :_reduce_650,
  6, 304, :_reduce_651,
  2, 304, :_reduce_652,
  4, 304, :_reduce_653,
  6, 304, :_reduce_654,
  2, 304, :_reduce_655,
  4, 304, :_reduce_656,
  2, 304, :_reduce_657,
  4, 304, :_reduce_658,
  1, 304, :_reduce_659,
  0, 304, :_reduce_660,
  1, 239, :_reduce_661,
  1, 299, :_reduce_662,
  1, 299, :_reduce_663,
  1, 299, :_reduce_664,
  1, 299, :_reduce_665,
  1, 275, :_reduce_none,
  1, 275, :_reduce_667,
  1, 377, :_reduce_668,
  1, 378, :_reduce_669,
  3, 378, :_reduce_670,
  1, 291, :_reduce_671,
  3, 291, :_reduce_672,
  1, 379, :_reduce_673,
  2, 380, :_reduce_674,
  1, 380, :_reduce_675,
  2, 381, :_reduce_676,
  1, 381, :_reduce_677,
  1, 285, :_reduce_678,
  3, 285, :_reduce_679,
  1, 374, :_reduce_680,
  3, 374, :_reduce_681,
  1, 347, :_reduce_none,
  1, 347, :_reduce_none,
  1, 281, :_reduce_684,
  2, 280, :_reduce_685,
  1, 280, :_reduce_686,
  3, 382, :_reduce_687,
  3, 383, :_reduce_688,
  1, 292, :_reduce_689,
  3, 292, :_reduce_690,
  1, 376, :_reduce_691,
  3, 376, :_reduce_692,
  1, 384, :_reduce_none,
  1, 384, :_reduce_none,
  2, 293, :_reduce_695,
  1, 293, :_reduce_696,
  1, 385, :_reduce_none,
  1, 385, :_reduce_none,
  2, 287, :_reduce_699,
  1, 287, :_reduce_700,
  2, 286, :_reduce_701,
  0, 286, :_reduce_702,
  1, 197, :_reduce_none,
  3, 197, :_reduce_704,
  0, 253, :_reduce_705,
  2, 253, :_reduce_none,
  1, 237, :_reduce_707,
  3, 237, :_reduce_708,
  3, 386, :_reduce_709,
  2, 386, :_reduce_710,
  1, 386, :_reduce_711,
  4, 386, :_reduce_712,
  2, 386, :_reduce_713,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 180, :_reduce_724,
  1, 180, :_reduce_725,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 213, :_reduce_730,
  2, 179, :_reduce_731,
  2, 334, :_reduce_732,
  0, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 264, :_reduce_736,
  1, 264, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 234, :_reduce_740 ]

racc_reduce_n = 741

racc_shift_n = 1236

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@2",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "defn_head",
  "f_opt_paren_args",
  "command",
  "arg",
  "defs_head",
  "backref",
  "opt_nl",
  "p_top_expr_body",
  "@3",
  "@4",
  "expr_value_do",
  "do",
  "def_name",
  "@5",
  "fname",
  "k_def",
  "singleton",
  "dot_or_colon",
  "@6",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@7",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "op",
  "reswords",
  "symbol",
  "@8",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@9",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@10",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "f_any_kwrest",
  "f_kwrest",
  "f_no_kwarg",
  "f_eq",
  "block_args_tail",
  "@18",
  "f_block_kwarg",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "excessed_comma",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@19",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "@22",
  "do_body",
  "@23",
  "operation3",
  "@24",
  "@25",
  "@26",
  "@27",
  "@28",
  "cases",
  "p_top_expr",
  "p_cases",
  "@29",
  "@30",
  "p_expr",
  "p_args",
  "p_find",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@31",
  "@32",
  "p_args_head",
  "p_arg",
  "p_rest",
  "p_args_post",
  "p_kwarg",
  "p_any_kwrest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "p_kwrest",
  "kwrest_mark",
  "p_kwnorest",
  "p_primitive",
  "p_var_ref",
  "p_expr_ref",
  "nonlocal_var",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@33",
  "ssym",
  "dsym",
  "@34",
  "f_paren_args",
  "args_tail",
  "@35",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      @current_arg_stack.push(nil)
                      @max_numparam_stack.push(static: true)
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]

                      @current_arg_stack.pop
                      @max_numparam_stack.pop
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = val
                    
    result
end

def _reduce_11(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_13(val, _values, result)
                      result = []
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_19(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_23(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 31 omitted

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_34(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_44(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_method(def_t, name_t,
                                 val[1], val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_45(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(def_t, name_t,
                                 val[1], val[2], method_body)

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_46(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_singleton(def_t, recv, dot_t, name_t,
                                 val[1], val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_47(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(def_t, recv, dot_t, name_t,
                                 val[1], val[2], method_body)

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_48(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_55(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_57(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_58(val, _values, result)
                      @pattern_variables.pop
                      @context.in_kwarg = val[2]
                      result = @builder.match_pattern(val[0], val[1], val[3])
                    
    result
end

def _reduce_59(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_60(val, _values, result)
                      @pattern_variables.pop
                      @context.in_kwarg = val[2]
                      result = @builder.match_pattern_p(val[0], val[1], val[3])
                    
    result
end

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_64(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

def _reduce_65(val, _values, result)
                      local_push
                      @current_arg_stack.push(nil)

                      result = [ val[0], @context.dup ]
                      @context.in_def = true
                    
    result
end

def _reduce_66(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_67(val, _values, result)
                      @lexer.state = :expr_fname
                      @context.in_argdef = true
                    
    result
end

def _reduce_68(val, _values, result)
                      result = [ val[0], val[1], val[2], val[4] ]
                    
    result
end

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_74(val, _values, result)
                      @context.in_block = val[1].in_block
                      result = [ val[0], *val[2], val[3] ]
                    
    result
end

# reduce 75 omitted

def _reduce_76(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_79(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 91 omitted

def _reduce_92(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 101 omitted

def _reduce_102(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_104(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_106(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_110(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_112(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_117(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_119(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_120(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_121(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_122(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_123(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_124(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_125(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 126 omitted

def _reduce_127(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_128(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_129(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

def _reduce_135(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 136 omitted

def _reduce_137(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_138(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_139(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

def _reduce_211(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_217(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_218(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_244(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_246(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_247(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_249(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_250(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_251(val, _values, result)
                      @context.in_defined = true
                    
    result
end

def _reduce_252(val, _values, result)
                      @context.in_defined = false
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[3] ], nil)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

def _reduce_254(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_method(def_t, name_t,
                                 val[1], val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_255(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(def_t, name_t,
                                 val[1], val[2], method_body)

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_256(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_singleton(def_t, recv, dot_t, name_t,
                                 val[1], val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_257(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(def_t, recv, dot_t, name_t,
                                 val[1], val[2], method_body)

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 270 omitted

def _reduce_271(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_272(val, _values, result)
                      result = val
                    
    result
end

def _reduce_273(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[3]
                      end

                      result = [val[0], [*val[1], @builder.forwarded_args(val[3])], val[4]]
                    
    result
end

def _reduce_274(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_275(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 276 omitted

def _reduce_277(val, _values, result)
                      result = []
                    
    result
end

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_281(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_282(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_285(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_286(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_287(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_288(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_290(val, _values, result)
                      if !@static_env.declared_anonymous_blockarg?
                        diagnostic :error, :no_anonymous_blockarg, nil, val[0]
                      end

                      result = @builder.block_pass(val[0], nil)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_292(val, _values, result)
                      result = []
                    
    result
end

def _reduce_293(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 298 omitted

def _reduce_299(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_300(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

def _reduce_312(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_313(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_314(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_326(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_328(val, _values, result)
                      @context.in_defined = true
                    
    result
end

def _reduce_329(val, _values, result)
                      @context.in_defined = false
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[4] ], val[5])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_332(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_337(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_338(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_339(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_340(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_341(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_342(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_344(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_345(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end
                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_346(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_347(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_348(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_349(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end
                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_350(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      result = @builder.def_method(def_t, name_t, val[1],
                                  val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_351(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      result = @builder.def_singleton(def_t, recv, dot_t, name_t, val[1],
                                  val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_352(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0]
                      @context.in_argdef = true
                    
    result
end

def _reduce_360(val, _values, result)
                      if @context.in_class && !@context.in_def && !(context.in_block || context.in_lambda)
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 361 omitted

# reduce 362 omitted

def _reduce_363(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

def _reduce_367(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      result = val
                    
    result
end

# reduce 370 omitted

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

# reduce 383 omitted

# reduce 384 omitted

def _reduce_385(val, _values, result)
                      @context.in_argdef = false
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_390(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_391(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_392(val, _values, result)
                      result = []
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_401(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_402(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_403(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_405(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 408 omitted

def _reduce_409(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_410(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_411(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      @context.in_argdef = false
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_412(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      @context.in_argdef = false
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_413(val, _values, result)
                      result = []
                    
    result
end

def _reduce_414(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_416(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_417(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push(static: false)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_420(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_421(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      begin_t, body, end_t = val[4]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                      @context.in_lambda = val[1].in_lambda

                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_422(val, _values, result)
                      @context.in_argdef = false
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_423(val, _values, result)
                      @context.in_argdef = false
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_424(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_425(val, _values, result)
                      @context.in_lambda = val[1].in_lambda
                      result = [ val[0], val[2], val[3] ]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_427(val, _values, result)
                      @context.in_lambda = val[1].in_lambda
                      result = [ val[0], val[2], val[3] ]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_429(val, _values, result)
                      @context.in_block = val[1].in_block
                      result = [ val[0], *val[2], val[3] ]
                    
    result
end

def _reduce_430(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_431(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_432(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_433(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_434(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_435(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_436(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_437(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_438(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_439(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_440(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_441(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_444(val, _values, result)
                      @context.in_block = val[1].in_block
                      result = [ val[0], *val[2], val[3] ]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_446(val, _values, result)
                      @context.in_block = val[1].in_block
                      result = [ val[0], *val[2], val[3] ]
                    
    result
end

def _reduce_447(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push(static: false)
                    
    result
end

def _reduce_448(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_449(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push(static: false)
                    
    result
end

def _reduce_450(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_451(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_452(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 454 omitted

def _reduce_455(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_456(val, _values, result)
                      @pattern_variables.pop
                      @pattern_hash_keys.pop
                      @context.in_kwarg = val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.find_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 476 omitted

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_479(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_480(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_481(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_482(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_483(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_484(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_485(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.array_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.find_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_489(val, _values, result)
                      @pattern_hash_keys.push
                      result = @context.in_kwarg
                      @context.in_kwarg = false
                    
    result
end

def _reduce_490(val, _values, result)
                      @pattern_hash_keys.pop
                      @context.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_492(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_493(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [ *val[0], val[1], *val[3] ]
                    
    result
end

# reduce 499 omitted

def _reduce_500(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_501(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_502(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_503(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [ val[0], *val[2], val[4] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = @builder.match_rest(val[0], val[1])
                    
    result
end

def _reduce_506(val, _values, result)
                      result = @builder.match_rest(val[0])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_508(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_514(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_515(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_518(val, _values, result)
                    result = [:label, val[0]]
                  
    result
end

def _reduce_519(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_520(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_521(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val
                    
    result
end

# reduce 523 omitted

def _reduce_524(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0][0], val[0][1]) ]
                    
    result
end

# reduce 525 omitted

def _reduce_526(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_527(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_529(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

def _reduce_533(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

# reduce 542 omitted

def _reduce_543(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

# reduce 544 omitted

def _reduce_545(val, _values, result)
                      result = @builder.assignable(@builder.match_var(val[0]))
                    
    result
end

def _reduce_546(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_547(val, _values, result)
                      non_lvar = @builder.accessible(val[1])
                      result = @builder.pin(val[0], non_lvar)
                    
    result
end

def _reduce_548(val, _values, result)
                      expr = @builder.begin(val[1], val[2], val[3])
                      result = @builder.pin(val[0], expr)
                    
    result
end

def _reduce_549(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_550(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_552(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = []
                    
    result
end

def _reduce_554(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 560 omitted

# reduce 561 omitted

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_564(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_566(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_567(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_568(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_569(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_570(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_571(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = []
                    
    result
end

def _reduce_573(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_576(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = []
                    
    result
end

def _reduce_578(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_579(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_580(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_581(val, _values, result)
                      result = []
                    
    result
end

def _reduce_582(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_583(val, _values, result)
                      result = []
                    
    result
end

def _reduce_584(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = []
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      result = []
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_589(val, _values, result)
                      result = []
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_591(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_593(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_594(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

def _reduce_601(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_602(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_603(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_604(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_605(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_606(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_607(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_608(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_609(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_610(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_611(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_612(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_614(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_615(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_616(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_617(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_618(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_620(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_621(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_622(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_623(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_624(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_625(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_626(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_627(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_628(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_629(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_630(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_631(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_632(val, _values, result)
                      result = nil
                    
    result
end

# reduce 633 omitted

def _reduce_634(val, _values, result)
                      @context.in_argdef = false
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_635(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                      @context.in_argdef = false
                    
    result
end

# reduce 636 omitted

def _reduce_637(val, _values, result)
                      result = @context.dup
                      @context.in_kwarg = true
                      @context.in_argdef = true
                    
    result
end

def _reduce_638(val, _values, result)
                      @context.in_kwarg = val[0].in_kwarg
                      @context.in_argdef = false
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_639(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_640(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_641(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_642(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_643(val, _values, result)
                      @static_env.declare_forward_args
                      result = [ @builder.forward_arg(val[0]) ]
                    
    result
end

def _reduce_644(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_645(val, _values, result)
                      result = []
                    
    result
end

def _reduce_646(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_647(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_648(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_649(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_650(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_651(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_652(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_653(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_654(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_655(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_656(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_657(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_658(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_659(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_660(val, _values, result)
                      result = []
                    
    result
end

def _reduce_661(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_662(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_663(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_664(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_665(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 666 omitted

def _reduce_667(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_668(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_669(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_670(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_671(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_672(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_673(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])
                      @context.in_argdef = false

                      result = val[0]
                    
    result
end

def _reduce_674(val, _values, result)
                      @current_arg_stack.set(nil)
                      @context.in_argdef = true
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_675(val, _values, result)
                      @current_arg_stack.set(nil)
                      @context.in_argdef = true
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_676(val, _values, result)
                      @context.in_argdef = true
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_677(val, _values, result)
                      @context.in_argdef = true
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_678(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_679(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_680(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_681(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 682 omitted

# reduce 683 omitted

def _reduce_684(val, _values, result)
                      result = [ @builder.kwnilarg(val[0][0], val[0][1]) ]
                    
    result
end

def _reduce_685(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_686(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_687(val, _values, result)
                      @current_arg_stack.set(0)
                      @context.in_argdef = true
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_688(val, _values, result)
                      @current_arg_stack.set(0)
                      @context.in_argdef = true
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_689(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_690(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_691(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_692(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 693 omitted

# reduce 694 omitted

def _reduce_695(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_696(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 697 omitted

# reduce 698 omitted

def _reduce_699(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_700(val, _values, result)
                      @static_env.declare_anonymous_blockarg

                      result = @builder.blockarg(val[0], nil)
                    
    result
end

def _reduce_701(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_702(val, _values, result)
                      result = []
                    
    result
end

# reduce 703 omitted

def _reduce_704(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_705(val, _values, result)
                      result = []
                    
    result
end

# reduce 706 omitted

def _reduce_707(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_708(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_709(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_710(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_711(val, _values, result)
                      result = @builder.pair_label(val[0])
                    
    result
end

def _reduce_712(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_713(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 714 omitted

# reduce 715 omitted

# reduce 716 omitted

# reduce 717 omitted

# reduce 718 omitted

# reduce 719 omitted

# reduce 720 omitted

# reduce 721 omitted

# reduce 722 omitted

# reduce 723 omitted

def _reduce_724(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_725(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 726 omitted

# reduce 727 omitted

# reduce 728 omitted

# reduce 729 omitted

def _reduce_730(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_731(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_732(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 733 omitted

# reduce 734 omitted

# reduce 735 omitted

def _reduce_736(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 737 omitted

# reduce 738 omitted

# reduce 739 omitted

def _reduce_740(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby32
  end   # module Parser
