#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby23Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-523,631,568,224,225,-108,-94,-523,-523,-523,-109,568,-523,-523,-523',
'-102,-523,-116,568,224,225,-80,568,647,-523,285,-523,-523,-523,-115',
'234,-108,-537,650,3,-538,-523,-523,230,-523,-523,-523,-523,-523,-111',
'280,728,224,225,727,-109,95,-104,-113,568,885,739,-103,728,96,126,730',
'633,632,629,-110,235,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,-116,-102,-523,-523,-523,646,-523,-523,-108,282',
'-523,-109,235,-523,-523,649,-523,285,-523,221,-523,231,-523,-523,-523',
'-523,-523,-523,-523,-99,-523,287,-523,222,-100,130,-102,-115,-104,-102',
'129,-107,-621,-103,130,-523,-523,-523,-523,129,-523,130,-523,-106,-102',
'130,129,-523,-526,-111,129,-523,-113,-523,-108,-526,-526,-526,-102,-108',
'-526,-526,-526,-104,-526,130,-104,-104,-103,884,129,-103,-526,-109,-526',
'-526,-526,130,-109,-101,947,-104,129,-110,-526,-526,-103,-526,-526,-526',
'-526,-526,-112,-101,287,-114,-112,285,-114,-523,830,224,225,830,-116',
'-526,-523,-533,232,-116,224,225,-526,223,-533,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,-526,-526,-526,108,109,-526,-526,-526',
'829,-526,-526,829,847,-526,285,-115,-526,-526,848,-526,-115,-526,226',
'-526,-107,-526,-526,-526,-526,-526,-526,-526,477,-526,-101,-526,-621',
'-111,-622,-116,-113,631,-111,631,-621,-113,275,-622,-526,-526,-526,-526',
'232,-526,-300,-526,337,547,287,821,-526,-300,-300,-300,-526,235,-526',
'-300,-300,-101,-300,-110,-101,616,235,-103,-110,-105,-537,282,-112,110',
'111,-114,619,-112,822,-101,-114,-116,-300,-300,667,-300,-300,-300,-300',
'-300,108,109,-532,287,633,632,633,632,338,-532,631,-116,130,793,235',
'795,-115,129,-111,627,626,-618,-99,-300,-300,-300,-300,-300,-300,-300',
'-300,-300,-300,-300,-300,-300,-300,-108,370,-300,-300,-300,230,673,751',
'-113,668,-300,752,229,-300,-111,-619,620,861,-300,575,-300,227,-300',
'-300,-300,-300,-300,-300,-300,616,-300,-343,-300,395,633,632,629,-523',
'-343,-538,619,110,111,547,-523,-300,-300,-343,-105,-618,-300,-625,918',
'-523,701,808,398,-300,-625,-625,-625,-300,401,-114,-625,-625,-113,-625',
'-526,231,-534,-618,404,627,626,-526,-625,-534,631,255,-619,-100,230',
'421,-526,-106,631,-625,-625,474,-625,-625,-625,-625,-625,-343,-109,-535',
'475,-531,-115,-523,-619,-528,-535,631,-531,620,426,-110,-528,252,-110',
'-535,728,254,253,730,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-526,476,-625,-625,-625,-536,674,633,632,634,-625',
'478,-536,-625,231,633,632,639,-625,631,-625,-536,-625,-625,-625,-625',
'-625,-625,-625,-535,-625,-625,-625,667,633,632,644,479,611,234,608,607',
'606,616,609,-625,-625,508,-103,-529,-625,517,230,-530,619,593,-529,-625',
'-625,540,-530,-625,594,-112,520,-625,-625,-625,538,-536,-625,-625,-625',
'255,-625,-102,614,272,273,522,633,632,651,-625,-625,-625,-625,627,626',
'728,-111,-625,730,235,-625,-625,1049,-625,-625,-625,-625,-625,130,-79',
'-291,252,235,129,230,254,253,-291,271,270,631,550,231,636,130,533,-291',
'620,534,129,475,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,857,861,-625,-625,-625,-625,823,-625,224,225,-625,668',
'-625,-625,-625,541,-625,-621,-625,292,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-291,-625,-625,-625,231,235,423,633,632,130,-625,425',
'424,282,129,230,-625,-625,-625,-625,808,-625,579,-625,-104,130,627,626',
'-625,-300,129,577,-625,544,-112,548,-300,-300,-300,-113,-625,-300,-300',
'-300,611,-300,608,607,606,616,609,230,857,861,130,-300,-300,-300,661',
'129,619,255,-101,235,575,-300,-300,659,-300,-300,-300,-300,-300,414',
'580,581,638,-110,642,231,645,648,614,597,611,655,608,607,606,-273,609',
'624,623,627,626,657,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300',
'-300,-300,-300,-300,658,235,-300,-300,-300,231,824,-300,665,666,-300',
'282,781,-300,-300,678,-300,620,-300,255,-300,785,-300,-300,-300,-300',
'-300,-300,-300,255,-300,255,-300,611,255,608,607,606,616,609,133,134',
'135,136,137,-300,-300,-300,-300,619,-300,-300,-300,685,235,235,421,-300',
'-300,-300,-300,-300,235,-114,-300,-300,-94,-300,-301,230,705,614,235',
'553,716,-301,754,721,724,-301,624,623,627,626,-301,756,-301,-300,-300',
'-300,-300,-300,-300,-300,-300,-301,-300,-300,235,731,732,-622,522,735',
'-300,-300,724,724,611,-622,608,607,606,-300,609,575,620,724,-300,-300',
'-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-301,231',
'-300,-300,-300,758,673,763,769,772,-300,-301,773,-300,781,775,777,255',
'-300,779,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,611',
'-300,608,607,606,616,609,611,788,608,607,606,789,609,-300,-300,619,-300',
'252,-300,-625,790,254,253,250,251,-300,-625,-625,-625,-300,796,-114',
'-625,-625,797,-625,230,614,133,134,135,136,137,1033,-625,-274,624,623',
'627,626,230,809,756,508,508,-625,-625,1039,-625,-625,-625,-625,-625',
'907,908,230,1037,909,124,125,235,826,1033,275,611,835,608,607,606,837',
'609,756,620,520,522,716,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-625,231,235,-625,-625,-625,611,674,608,607,606',
'-625,609,781,-625,231,282,282,255,-625,716,-625,785,-625,-625,-625,-625',
'-625,-625,-625,231,-625,-625,-625,265,266,1014,255,608,607,606,861,609',
'724,781,235,-625,-625,235,-625,252,-625,258,785,254,253,250,251,-625',
'-436,902,903,-625,235,-112,912,-436,-436,-436,-275,235,-436,-436,-436',
'611,-436,608,607,606,616,609,255,917,934,-436,-436,-436,716,-273,939',
'619,724,724,724,235,-436,-436,724,-436,-436,-436,-436,-436,611,724,608',
'607,606,235,609,961,235,614,252,772,964,966,254,253,250,251,624,623',
'627,626,968,-436,-436,-436,-436,-436,-436,-436,-436,-436,-436,-436,-436',
'-436,-436,970,781,-436,-436,-436,970,235,-436,977,282,-436,-276,978',
'-436,-436,772,-436,620,-436,981,-436,984,-436,-436,-436,-436,-436,-436',
'-436,986,-436,-436,-436,611,988,608,607,606,616,609,133,134,135,136',
'137,-436,-436,235,-436,619,-436,-309,133,134,135,136,137,-436,-309,-309',
'-309,-436,990,-309,-309,-309,724,-309,255,763,611,614,608,607,606,1010',
'609,-309,-309,1011,624,623,627,626,265,266,1020,-309,-309,1021,-309',
'-309,-309,-309,-309,1014,1031,608,607,606,252,609,258,1034,254,253,250',
'251,781,847,256,1040,257,1050,970,970,620,970,-309,-309,-309,-309,-309',
'-309,-309,-309,-309,-309,-309,-309,-309,-309,772,1057,-309,-309,-309',
'1059,1061,-309,1063,292,-309,1063,721,-309,-309,724,-309,724,-309,1021',
'-309,-622,-309,-309,-309,-309,-309,-309,-309,-621,-309,235,-309,611',
'970,608,607,606,616,609,1085,1063,1063,1063,1063,-309,-309,,-309,619',
'-309,-292,,,,,,-309,-292,-292,-292,-309,,-292,-292,-292,,-292,255,,',
'614,,,,,,-292,-292,-292,624,623,627,626,265,266,,-292,-292,,-292,-292',
'-292,-292,-292,,,,,,252,,258,,254,253,250,251,,,256,,257,,,,620,,-292',
'-292,-292,-292,-292,-292,-292,-292,-292,-292,-292,-292,-292,-292,,,-292',
'-292,-292,,,-292,,,-292,,,-292,-292,,-292,,-292,,-292,,-292,-292,-292',
'-292,-292,-292,-292,,-292,,-292,611,,608,607,606,616,609,,,,,,-292,-292',
'-292,-292,619,-292,-647,-292,,,,,-292,-647,-647,-647,-292,,-647,-647',
'-647,,-647,255,,,614,,,,,-647,-647,-647,,624,623,627,626,265,266,,-647',
'-647,,-647,-647,-647,-647,-647,,,,,,252,,258,,254,253,250,251,235,,',
',,,,,620,,-647,-647,-647,-647,-647,-647,-647,-647,-647,-647,-647,-647',
'-647,-647,,,-647,-647,-647,,,-647,,282,-647,,,-647,-647,,-647,,-647',
',-647,,-647,-647,-647,-647,-647,-647,-647,,-647,-647,-647,611,,608,607',
'606,616,609,,,,,,-647,-647,,-647,619,-647,-626,,,,,,-647,-626,-626,-626',
'-647,,-626,-626,-626,,-626,255,,,614,,,,,-626,-626,-626,-626,624,623',
'627,626,265,266,,-626,-626,,-626,-626,-626,-626,-626,,,,,,252,,,,254',
'253,250,251,,,,,,,,,620,,-626,-626,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,-626,-626,,,-626,-626,-626,,,-626,,,-626,,,-626,-626',
',-626,,-626,,-626,,-626,-626,-626,-626,-626,-626,-626,,-626,-626,-626',
'611,,608,607,606,616,609,,,,,,-626,-626,-626,-626,619,-626,-627,-626',
',,,,-626,-627,-627,-627,-626,,-627,-627,-627,,-627,,,,614,,,,,-627,-627',
'-627,-627,,,627,626,,,,-627,-627,,-627,-627,-627,-627,-627,,,,,,,,,',
',,,,,,,,,,,,620,,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627',
'-627,-627,-627,,,-627,-627,-627,,,-627,,,-627,,,-627,-627,,-627,,-627',
',-627,,-627,-627,-627,-627,-627,-627,-627,,-627,-627,-627,,,,,,,,,,',
',,-627,-627,-627,-627,,-627,-647,-627,,,,,-627,-647,-647,-647,-627,',
'-647,-647,-647,,-647,,,,,,,,,-647,-647,,,,,,,,,,-647,-647,,-647,-647',
'-647,-647,-647,,,,,,,,506,458,,,507,,,,,,,,,173,174,,169,151,152,153',
'160,157,159,,,154,155,-647,,,175,176,161,162,-647,,,,,282,-647,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,-647,-647,177',
',,,,,,,,,,,-647,,,,,-647,,,170,,,,-647,,,,-647,8,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,662,11,49,10,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,105,95,97,98,99,101,,,,96,106,,269,,-248,,,89,,,93,100,102',
',110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,662,11,49,313,13,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,248,249,,,265,266,,43,,,315,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,',
',96,106,,269,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
'11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,105,95,97,98,99,101,,,,96,106,,269,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,269',
',,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255,259',
'260,261,262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,315,,,62',
'63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95',
'97,98,99,101,,,,96,106,235,269,,,,,89,,,93,100,102,,110,111,311,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,',
'248,249,,,265,266,,43,,,315,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,269,,,,,89',
',,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255,259,260,261',
'262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64',
',38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99',
'101,,,,96,106,,269,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,',
',265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270',
'256,23,257,,,,105,95,97,98,99,101,,,,96,106,,269,,,,,89,,,93,100,102',
',110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,-648,-648,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,255,259,260,261,262,272,273,267,268,263,264,,-648,-648,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,255,-648,-648,-648,-648,272,273,,,-648',
'-648,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,10,13,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,255,-648,-648,-648,-648',
'272,273,,,-648,-648,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313',
'13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255',
'-648,-648,-648,-648,272,273,,,-648,-648,,,,,,265,266,,43,,,36,,,62,63',
',,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,255,-648,-648,-648,-648,272,273,,,-648,-648,,,,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,255,-648,-648,-648,-648,272,273,,,-648',
'-648,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255,-648,-648,-648',
'-648,272,273,,,-648,-648,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,255,259,260,261,262,272,273,,,263,264,,,,,,265,266,,43,,,36,,,62',
'63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,',
'108,109,,45,46,44,255,259,260,261,262,272,273,267,,263,264,,,,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
'11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313',
'13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,',
'108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,10,13,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,',
',49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245',
',,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89',
',305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99',
'101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,,',
'334,,,,,,611,,608,607,606,616,609,,,,,,,,324,,619,320,,,62,63,,,64,',
'319,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,611,,608,607,606',
'616,609,,,,,,,,324,,619,246,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95',
'97,98,99,101,627,626,,96,106,,,,336,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,620,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,',
'83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,130,,,,,129,89,',
',93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,611,,608,607,606,616',
'609,,,,,,,,364,,619,36,,,62,63,,,64,,38,,,,,,,,,,,,614,,,,,105,95,97',
'98,99,101,627,626,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12',
'78,,,,79,80,,,,83,620,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,22,,,,,,11,49,10,13,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,414,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49',
',13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431,,,,48,,,,,',
',,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431',
',,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,',
',122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,235,,,,',
',89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96',
'106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105',
'302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48',
',,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,235,,,,,,89,,305,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,,,334,,,,,,611,,608,607,606,616,609,,,,,',
',,324,,619,246,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95,97,98,99,101',
'627,626,,96,106,,,,536,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,620,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',,,334,,,,,,611,,608,607,606,616,609,,,,,,,,324,,619,320,,,62,63,,,64',
',,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96,106,,,,,,,89,,',
'93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,553,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,,,48,,,,,,',
',245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115',
'304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,',
'89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122',
'121,123,582,60,114,113,583,,116,124,125,,108,109,,,,334,,,,,,611,,608',
'607,606,616,609,,,,,,,,584,,619,246,,,62,63,,,64,,,,,,,,,,,,,,614,,',
',,105,95,97,98,99,101,627,626,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,620,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,328,,,122,121,123,582,60,114,113,583,,116',
'124,125,,108,109,,,,334,,,,,,611,,608,607,606,616,609,,,,,,,,584,,619',
'246,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81',
'82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,',
',122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,',
',,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,698,,299,,48,,,',
',,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106',
',,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,414,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,,,334,,,,,,611,,608,607,606,616,609,,,,,,,,324,,619',
'320,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105',
'302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119',
'120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117',
'119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97',
'98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,801,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,',
'96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,',
',,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245',
',,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,698,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,',
',,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,',
'83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,',
',,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245',
',,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,431,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121',
'123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,',
',,,,,,,,,240,,,246,,,62,63,,,64,,698,,,,48,,,,,,,,245,,,,,105,302,97',
'98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,866,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,',
',,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97',
'98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117',
'119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299,,48,',
',,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,,,,,,,,,,,,,,,992',
',,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,',
',,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,,,,,,,',
',,,,,,,999,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,1004,,,,48,,,,,,,,245,,,',
',105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117',
'119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,,,334,,,,,,,,,,,,,,,,,,,,992,,,246,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96',
'106,,,,,,,89,,305,93,100,102,,110,111,188,199,189,212,185,205,195,194',
'215,216,210,193,192,187,213,217,218,197,186,200,204,206,198,191,,,,207',
'214,209,208,201,211,196,184,203,202,,,,,,183,190,181,182,178,179,180',
'141,143,140,,142,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170,188,199,189,212',
'185,205,195,194,215,216,210,193,192,187,213,217,218,197,186,200,204',
'206,198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,,183,190',
'181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170,188',
'199,189,212,185,205,195,194,215,216,210,193,192,187,213,217,218,197',
'186,200,204,206,198,191,,,,207,214,209,379,378,380,377,184,203,202,',
',,,,183,190,181,182,374,375,376,372,143,114,113,373,,116,,,,,,,173,174',
',169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,386,',
',,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,',
',,,,,,,,,,,,,,,,170,188,199,189,212,185,205,195,194,215,216,210,193',
'192,187,213,217,218,197,186,200,204,206,198,191,,,,207,214,209,208,201',
'211,196,184,203,202,,,,,,183,190,181,182,178,179,180,141,143,411,410',
'142,,412,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,,,,,,,,,,,,,,,,170,188,199,189,212,185,205,195,194',
'215,216,210,193,192,187,213,217,218,197,186,200,204,206,198,191,,,,207',
'214,209,208,201,211,196,184,203,202,,,,,,183,190,181,182,178,179,180',
'141,143,,,142,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170,188,199,189,212,185',
'205,195,194,215,216,210,193,192,187,213,217,218,197,186,200,204,206',
'198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,,183,190,181',
'182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170,188,199',
'189,212,185,205,195,194,215,216,210,193,192,187,213,217,218,197,186',
'200,204,206,198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,',
'183,190,181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169,151,152',
'153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,454,458,,,455,,,,',
',,,,173,174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,,,,,461,465,,,460,,,,,,,,,173,174,170,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,,,,,679,458,,,680,,,,,,,,',
'173,174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,681,465,,,682,,,,,,,,,173,174,170,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,709,458,,,710,,,,,,,,,173',
'174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,',
',,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,,,,,712,465,,,713,,,,,,,,,173,174,170,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,679,458,,,680,,,,,,,,,173,174',
'170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,681,465,,,682,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,746,458,,,747,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'748,465,,,749,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,803,458,,,804,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'806,465,,,805,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,870,465,,,871,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'506,458,,,507,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,611,177,608,607,606,616,609,611,,608,607,606',
'616,609,,,619,,,,,170,,619,,,,,,,,,,,,,,,614,,,,,,,614,,624,623,627',
'626,,,,624,623,627,626,,,,,,,,,,,,,,,,,,1067,465,,,1066,,,,620,,,,,173',
'174,620,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,',
',,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,,,,,1070,458,,,1071,,,,,,,,,173,174,170,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,1072,465,,,1073,,,,,,,,,173',
'174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,',
',,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,611',
'177,608,607,606,616,609,,,,,,,,,,619,,,,,170,,,,,,,,,,,,,,,,,614,,,',
',,,,,624,623,627,626,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,620' ]
        racc_action_table = arr = ::Array.new(26089, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'112,389,353,470,470,361,704,112,112,112,362,354,112,112,112,709,112',
'365,938,17,17,704,943,402,112,29,112,112,112,580,22,996,238,405,1,239',
'112,112,27,112,112,112,112,112,746,27,559,352,352,559,997,92,710,747',
'867,767,570,712,560,92,3,560,389,389,389,868,22,112,112,112,112,112',
'112,112,112,112,112,112,112,112,112,1000,709,112,112,112,402,112,112',
'238,29,112,239,470,112,112,405,112,65,112,13,112,27,112,112,112,112',
'112,112,112,361,112,29,112,15,362,353,709,1040,710,709,353,365,712,712',
'354,112,112,112,112,354,112,938,112,580,709,943,938,112,115,1070,943',
'112,1071,112,996,115,115,115,746,996,115,115,115,710,115,570,710,747',
'712,767,570,712,115,997,115,115,115,867,997,868,867,710,867,1083,115',
'115,712,115,115,115,115,115,1072,842,65,1073,748,688,749,372,686,719',
'719,836,1000,373,372,374,20,1000,766,766,373,16,374,115,115,115,115',
'115,115,115,115,115,115,115,115,115,115,44,44,115,115,115,686,115,115',
'836,720,115,329,1040,115,115,720,115,1040,115,18,115,20,115,115,115',
'115,115,115,115,241,115,842,115,748,1070,749,20,1071,640,1070,643,1072',
'1071,25,1073,115,115,115,115,438,115,460,115,40,476,688,679,115,460',
'460,460,115,719,115,460,460,842,460,1083,842,769,766,748,1083,749,41',
'329,1072,44,44,1073,769,1072,680,842,1073,241,460,460,803,460,460,460',
'460,460,334,334,375,329,640,640,643,643,43,375,524,438,5,640,49,643',
'476,5,679,769,769,582,41,460,460,460,460,460,460,460,460,460,460,460',
'460,460,460,41,73,460,460,460,19,460,584,680,804,460,584,19,460,803',
'583,769,1005,460,1005,460,19,460,460,460,460,460,460,460,978,460,50',
'460,99,524,524,524,582,50,42,978,334,334,338,582,460,460,50,460,582',
'460,461,825,582,524,914,100,460,461,461,461,460,101,460,461,461,804',
'461,583,19,376,582,102,978,978,583,461,376,391,482,583,42,237,138,583',
'338,396,461,461,237,461,461,461,461,461,50,42,321,237,377,338,582,583',
'378,321,399,377,978,219,825,378,482,914,321,564,482,482,564,461,461',
'461,461,461,461,461,461,461,461,461,461,461,461,583,240,461,461,461',
'322,461,391,391,391,461,242,322,461,237,396,396,396,461,407,461,322',
'461,461,461,461,461,461,461,321,461,461,461,454,399,399,399,243,777',
'247,777,777,777,777,777,461,461,281,461,379,461,296,323,380,777,382',
'379,461,681,323,380,461,382,461,297,681,681,681,323,322,681,681,681',
'483,681,454,777,47,47,300,407,407,407,681,681,681,681,777,777,855,454',
'870,855,1012,681,681,1012,681,681,681,681,681,308,314,325,483,316,308',
'340,483,483,325,47,47,393,340,323,393,358,317,325,777,318,358,340,681',
'681,681,681,681,681,681,681,681,681,681,681,681,681,734,734,681,681',
'681,870,681,681,760,760,681,455,870,681,681,324,681,870,681,327,681',
'870,681,681,681,681,681,681,681,325,681,681,681,340,328,140,393,393',
'876,870,140,140,333,876,363,681,681,681,681,663,681,363,681,455,880',
'772,772,681,682,880,363,681,335,681,339,682,682,682,455,870,682,682',
'682,387,682,387,387,387,387,387,437,1041,1041,952,682,682,682,437,952',
'387,342,663,348,359,682,682,437,682,682,682,682,682,360,364,366,395',
'663,398,363,401,404,387,387,614,427,614,614,614,430,614,387,387,387',
'387,432,682,682,682,682,682,682,682,682,682,682,682,682,682,682,435',
'449,682,682,682,437,682,682,452,453,682,462,614,682,682,472,682,387',
'682,484,682,614,682,682,682,682,682,682,682,485,682,486,682,597,487',
'597,597,597,597,597,9,9,9,9,9,682,682,682,682,597,682,805,682,503,510',
'514,530,682,805,805,805,682,531,682,805,805,532,805,541,586,535,597',
'537,542,545,541,586,554,555,752,597,597,597,597,541,586,752,805,805',
'713,805,805,805,805,805,752,713,871,556,561,562,713,565,567,871,713',
'571,572,903,871,903,903,903,871,903,573,597,574,805,805,805,805,805',
'805,805,805,805,805,805,805,805,805,541,586,805,805,805,588,805,591',
'599,600,805,752,602,805,903,603,604,497,805,613,805,713,805,805,805',
'805,805,805,805,871,805,763,805,763,763,763,763,763,785,621,785,785',
'785,625,785,805,805,763,805,497,805,806,628,497,497,497,497,805,806',
'806,806,805,647,805,806,806,650,806,991,763,312,312,312,312,312,991',
'806,656,763,763,763,763,998,664,991,669,675,806,806,998,806,806,806',
'806,806,791,791,1032,998,791,791,791,683,684,1032,687,781,691,781,781',
'781,693,781,1032,763,695,697,706,806,806,806,806,806,806,806,806,806',
'806,806,806,806,806,991,708,806,806,806,902,806,902,902,902,806,902',
'781,806,998,711,714,488,806,715,806,781,806,806,806,806,806,806,806',
'1032,806,806,806,488,488,961,718,961,961,961,736,961,742,902,745,806',
'806,768,806,488,806,488,902,488,488,488,488,806,30,783,784,806,786,806',
'798,30,30,30,800,802,30,30,30,764,30,764,764,764,764,764,498,810,834',
'30,30,30,841,851,852,764,856,862,869,873,30,30,877,30,30,30,30,30,1020',
'878,1020,1020,1020,879,1020,886,887,764,498,888,892,893,498,498,498',
'498,764,764,764,764,895,30,30,30,30,30,30,30,30,30,30,30,30,30,30,896',
'1020,30,30,30,898,901,30,911,30,30,913,920,30,30,921,30,764,30,923,30',
'924,30,30,30,30,30,30,30,925,30,30,30,773,927,773,773,773,773,773,347',
'347,347,347,347,30,30,928,30,773,30,31,529,529,529,529,529,30,31,31',
'31,30,929,31,31,31,951,31,502,958,1021,773,1021,1021,1021,959,1021,31',
'31,960,773,773,773,773,502,502,975,31,31,976,31,31,31,31,31,1049,989',
'1049,1049,1049,502,1049,502,992,502,502,502,502,1021,994,502,999,502',
'1016,1017,1018,773,1019,31,31,31,31,31,31,31,31,31,31,31,31,31,31,1022',
'1025,31,31,31,1026,1027,31,1028,31,31,1030,1036,31,31,1046,31,1047,31',
'1055,31,1066,31,31,31,31,31,31,31,1067,31,1069,31,775,1078,775,775,775',
'775,775,1079,1080,1081,1082,1090,31,31,,31,775,31,60,,,,,,31,60,60,60',
'31,,60,60,60,,60,551,,,775,,,,,,60,60,60,775,775,775,775,551,551,,60',
'60,,60,60,60,60,60,,,,,,551,,551,,551,551,551,551,,,551,,551,,,,775',
',60,60,60,60,60,60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60',
'60,,60,,60,,60,,60,60,60,60,60,60,60,,60,,60,829,,829,829,829,829,829',
',,,,,60,60,60,60,829,60,456,60,,,,,60,456,456,456,60,,456,456,456,,456',
'489,,,829,,,,,456,456,456,,829,829,829,829,489,489,,456,456,,456,456',
'456,456,456,,,,,,489,,489,,489,489,489,489,829,,,,,,,,829,,456,456,456',
'456,456,456,456,456,456,456,456,456,456,456,,,456,456,456,,,456,,456',
'456,,,456,456,,456,,456,,456,,456,456,456,456,456,456,456,,456,456,456',
'964,,964,964,964,964,964,,,,,,456,456,,456,964,456,465,,,,,,456,465',
'465,465,456,,465,465,465,,465,490,,,964,,,,,465,465,465,465,964,964',
'964,964,490,490,,465,465,,465,465,465,465,465,,,,,,490,,,,490,490,490',
'490,,,,,,,,,964,,465,465,465,465,465,465,465,465,465,465,465,465,465',
'465,,,465,465,465,,,465,,,465,,,465,465,,465,,465,,465,,465,465,465',
'465,465,465,465,,465,465,465,966,,966,966,966,966,966,,,,,,465,465,465',
'465,966,465,466,465,,,,,465,466,466,466,465,,466,466,466,,466,,,,966',
',,,,466,466,466,466,,,966,966,,,,466,466,,466,466,466,466,466,,,,,,',
',,,,,,,,,,,,,,,966,,466,466,466,466,466,466,466,466,466,466,466,466',
'466,466,,,466,466,466,,,466,,,466,,,466,466,,466,,466,,466,,466,466',
'466,466,466,466,466,,466,466,466,,,,,,,,,,,,,466,466,466,466,,466,505',
'466,,,,,466,505,505,505,466,,505,505,505,,505,,,,,,,,,505,505,,,,,,',
',,,505,505,,505,505,505,505,505,,,,,,,,278,278,,,278,,,,,,,,,278,278',
',278,278,278,278,278,278,278,,,278,278,505,,,278,278,278,278,505,,,',
',505,505,,,,,,,278,278,,278,278,278,278,278,278,278,278,278,278,278',
'505,505,278,,,,,,,,,,,,505,,,,,505,,,278,,,,505,,,,505,2,2,2,2,2,2,',
',,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,442,2,2,2,2,2,2',
'2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,442,442,442,442,442,442,442,442,442,442',
'442,,442,442,,,442,442,,2,,,2,,,2,2,,,2,,2,442,,442,2,442,442,442,442',
'442,442,442,2,442,,,,2,2,2,2,2,2,,,,2,2,,442,,442,,,2,,,2,2,2,,2,2,36',
'36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36',
'36,36,36,,,36,,,,,448,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36',
',36,36,,36,36,36,448,448,448,448,448,448,448,448,448,448,448,,448,448',
',,448,448,,36,,,36,,,36,36,,,36,,36,448,,448,36,448,448,448,448,448',
'448,448,36,448,,,,36,36,36,36,36,36,,,,36,36,,448,,,,,36,,,36,36,36',
',36,36,221,221,221,221,221,221,,,,221,221,,,,221,,221,221,221,221,221',
'221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,221,221,221,221',
'221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221,24',
'24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,221,,,221,,,221,221,,',
'221,,221,24,,24,221,24,24,24,24,24,24,24,221,24,,,,221,221,221,221,221',
'221,,,,221,221,,24,,,,,221,,,221,221,221,,221,221,246,246,246,246,246',
'246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246',
'246,246,246,246,,,246,,,,,,246,246,246,246,246,246,246,246,246,246,246',
'246,,246,246,246,,246,246,,246,246,246,294,294,294,294,294,294,294,294',
'294,294,294,,294,294,,,294,294,,246,,,246,,,246,246,,,246,,246,294,',
'294,246,294,294,294,294,294,294,294,246,294,,,,246,246,246,246,246,246',
',,,246,246,,294,,,,,246,,,246,246,246,,246,246,315,315,315,315,315,315',
',,,315,315,,,,315,,315,315,315,315,315,315,315,,,,,,315,315,315,315',
'315,315,315,,,315,,,,,,315,315,315,315,315,315,315,315,315,315,315,315',
',315,315,315,,315,315,,315,315,315,501,501,501,501,501,501,501,501,501',
'501,501,,501,501,,,501,501,,315,,,315,,,315,315,,,315,,315,501,,501',
'315,501,501,501,501,501,501,501,315,501,,,,315,315,315,315,315,315,',
',,315,315,501,501,,,,,315,,,315,315,315,,315,315,320,320,320,320,320',
'320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320',
'320,320,320,320,,,320,,,,,,320,320,320,320,320,320,320,320,320,320,320',
'320,,320,320,320,,320,320,,320,320,320,552,552,552,552,552,552,552,552',
'552,552,552,,552,552,,,552,552,,320,,,320,,,320,320,,,320,,320,552,',
'552,320,552,552,552,552,552,552,552,320,552,,,,320,320,320,320,320,320',
',,,320,320,,552,,,,,320,,,320,320,320,,320,320,346,346,346,346,346,346',
',,,346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346,346,346',
'346,346,346,,,346,,,,,,346,346,346,346,346,346,346,346,346,346,346,346',
',346,346,346,,346,346,,346,346,346,807,807,807,807,807,807,807,807,807',
'807,807,,807,807,,,807,807,,346,,,346,,,346,346,,,346,,346,807,,807',
'346,807,807,807,807,807,807,807,346,807,,,,346,346,346,346,346,346,',
',,346,346,,807,,,,,346,,,346,346,346,,346,346,356,356,356,356,356,356',
',,,356,356,,,,356,,356,356,356,356,356,356,356,,,,,,356,356,356,356',
'356,356,356,,,356,,,,,,356,356,356,356,356,356,356,356,356,356,356,356',
',356,356,356,,356,356,,356,356,356,919,919,919,919,919,919,919,919,919',
'919,919,,919,919,,,919,919,,356,,,356,,,356,356,,,356,,356,919,,919',
'356,919,919,919,919,919,919,919,356,919,,,,356,356,356,356,356,356,',
',,356,356,,919,,,,,356,,,356,356,356,,356,356,357,357,357,357,357,357',
',,,357,357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357,357,357',
'357,357,357,,,357,,,,,,357,357,357,357,357,357,357,357,357,357,357,357',
',357,357,357,,357,357,,357,357,357,480,480,480,480,480,480,480,480,480',
'480,480,,480,480,,,480,480,,357,,,357,,,357,357,,,357,,357,480,,480',
'357,480,480,480,480,480,480,480,357,480,,,,357,357,357,357,357,357,',
',,357,357,,,,,,,357,,,357,357,357,,357,357,566,566,566,566,566,566,',
',,566,566,,,,566,,566,566,566,566,566,566,566,,,,,,566,566,566,566,566',
'566,566,,,566,,,,,,566,566,566,566,566,566,566,566,566,566,566,566,',
'566,566,566,,566,566,,566,566,566,481,481,481,481,481,481,481,481,481',
'481,481,,481,481,,,481,481,,566,,,566,,,566,566,,,566,,566,481,,481',
'566,481,481,481,481,481,481,481,566,481,,,,566,566,566,566,566,566,',
',,566,566,,,,,,,566,,,566,566,566,,566,566,569,569,569,569,569,569,',
',,569,569,,,,569,,569,569,569,569,569,569,569,,,,,,569,569,569,569,569',
'569,569,,,569,,,,,,569,569,569,569,569,569,569,569,569,569,569,569,',
'569,569,569,,569,569,,569,569,569,491,491,491,491,491,491,491,,,491',
'491,,,,,,491,491,,569,,,569,,,569,569,,,569,,569,491,,491,569,491,491',
'491,491,491,491,491,569,491,,,,569,569,569,569,569,569,,,,569,569,,',
',,,,569,,,569,569,569,,569,569,652,652,652,652,652,652,,,,652,652,,',
',652,,652,652,652,652,652,652,652,,,,,,652,652,652,652,652,652,652,',
',652,,,,,,652,652,652,652,652,652,652,652,652,652,652,652,,652,652,652',
',652,652,,652,652,652,492,492,492,492,492,492,492,,,492,492,,,,,,492',
'492,,652,,,652,,,652,652,,,652,,652,492,,492,652,492,492,492,492,492',
'492,492,652,492,,,,652,652,652,652,652,652,,,,652,652,,,,,,,652,,,652',
'652,652,,652,652,750,750,750,750,750,750,,,,750,750,,,,750,,750,750',
'750,750,750,750,750,,,,,,750,750,750,750,750,750,750,,,750,,,,,,750',
'750,750,750,750,750,750,750,750,750,750,750,,750,750,750,,750,750,,750',
'750,750,493,493,493,493,493,493,493,,,493,493,,,,,,493,493,,750,,,750',
',,750,750,,,750,,750,493,,493,750,493,493,493,493,493,493,493,750,493',
',,,750,750,750,750,750,750,,,,750,750,,,,,,,750,,,750,750,750,,750,750',
'761,761,761,761,761,761,,,,761,761,,,,761,,761,761,761,761,761,761,761',
',,,,,761,761,761,761,761,761,761,,,761,,,,,,761,761,761,761,761,761',
'761,761,761,761,761,761,,761,761,761,,761,761,,761,761,761,494,494,494',
'494,494,494,494,,,494,494,,,,,,494,494,,761,,,761,,,761,761,,,761,,761',
'494,,494,761,494,494,494,494,494,494,494,761,494,,,,761,761,761,761',
'761,761,,,,761,761,,,,,,,761,,,761,761,761,,761,761,762,762,762,762',
'762,762,,,,762,762,,,,762,,762,762,762,762,762,762,762,,,,,,762,762',
'762,762,762,762,762,,,762,,,,,,762,762,762,762,762,762,762,762,762,762',
'762,762,,762,762,762,,762,762,,762,762,762,495,495,495,495,495,495,495',
',,495,495,,,,,,495,495,,762,,,762,,,762,762,,,762,,762,495,,495,762',
'495,495,495,495,495,495,495,762,495,,,,762,762,762,762,762,762,,,,762',
'762,,,,,,,762,,,762,762,762,,762,762,792,792,792,792,792,792,,,,792',
'792,,,,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792,792,792',
'792,,,792,,,,,,792,792,792,792,792,792,792,792,792,792,792,792,,792',
'792,792,,792,792,,792,792,792,496,496,496,496,496,496,496,,,496,496',
',,,,,496,496,,792,,,792,,,792,792,,,792,,792,496,,496,792,496,496,496',
'496,496,496,496,792,496,,,,792,792,792,792,792,792,,,,792,792,,,,,,',
'792,,,792,792,792,,792,792,831,831,831,831,831,831,,,,831,831,,,,831',
',831,831,831,831,831,831,831,,,,,,831,831,831,831,831,831,831,,,831',
',,,,,831,831,831,831,831,831,831,831,831,831,831,831,,831,831,831,,831',
'831,,831,831,831,499,499,499,499,499,499,499,,,499,499,,,,,,499,499',
',831,,,831,,,831,831,,,831,,831,499,,499,831,499,499,499,499,499,499',
'499,831,499,,,,831,831,831,831,831,831,,,,831,831,,,,,,,831,,,831,831',
'831,,831,831,849,849,849,849,849,849,,,,849,849,,,,849,,849,849,849',
'849,849,849,849,,,,,,849,849,849,849,849,849,849,,,849,,,,,,849,849',
'849,849,849,849,849,849,849,849,849,849,,849,849,849,,849,849,,849,849',
'849,500,500,500,500,500,500,500,500,,500,500,,,,,,500,500,,849,,,849',
',,849,849,,,849,,849,500,,500,849,500,500,500,500,500,500,500,849,500',
',,,849,849,849,849,849,849,,,,849,849,,,,,,,849,,,849,849,849,,849,849',
'861,861,861,861,861,861,,,,861,861,,,,861,,861,861,861,861,861,861,861',
',,,,,861,861,861,861,861,861,861,,,861,,,,,,861,861,861,861,861,861',
'861,861,861,861,861,861,,861,861,861,,861,861,,861,861,861,,,,,,,,,',
',,,,,,,,,,861,,,861,,,861,861,,,861,,861,,,,861,,,,,,,,861,,,,,861,861',
'861,861,861,861,,,,861,861,,,,,,,861,,,861,861,861,,861,861,874,874',
'874,874,874,874,,,,874,874,,,,874,,874,874,874,874,874,874,874,,,,,',
'874,874,874,874,874,874,874,,,874,,,,,,874,874,874,874,874,874,874,874',
'874,874,874,874,,874,874,874,,874,874,,874,874,874,,,,,,,,,,,,,,,,,',
',,874,,,874,,,874,874,,,874,,874,,,,874,,,,,,,,874,,,,,874,874,874,874',
'874,874,,,,874,874,,,,,,,874,,,874,874,874,,874,874,884,884,884,884',
'884,884,,,,884,884,,,,884,,884,884,884,884,884,884,884,,,,,,884,884',
'884,884,884,884,884,,,884,,,,,,884,884,884,884,884,884,884,884,884,884',
'884,884,,884,884,884,,884,884,,884,884,884,,,,,,,,,,,,,,,,,,,,884,,',
'884,,,884,884,,,884,,884,,,,884,,,,,,,,884,,,,,884,884,884,884,884,884',
',,,884,884,,,,,,,884,,,884,884,884,,884,884,885,885,885,885,885,885',
',,,885,885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885,885,885',
'885,885,885,,,885,,,,,,885,885,885,885,885,885,885,885,885,885,885,885',
',885,885,885,,885,885,,885,885,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885',
'885,,,885,,885,,,,885,,,,,,,,885,,,,,885,885,885,885,885,885,,,,885',
'885,,,,,,,885,,,885,885,885,,885,885,935,935,935,935,935,935,,,,935',
'935,,,,935,,935,935,935,935,935,935,935,,,,,,935,935,935,935,935,935',
'935,,,935,,,,,,935,935,935,935,935,935,935,935,935,935,935,935,,935',
'935,935,,935,935,,935,935,935,,,,,,,,,,,,,,,,,,,,935,,,935,,,935,935',
',,935,,935,,,,935,,,,,,,,935,,,,,935,935,935,935,935,935,,,,935,935',
',,,,,,935,,,935,935,935,,935,935,936,936,936,936,936,936,,,,936,936',
',,,936,,936,936,936,936,936,936,936,,,,,,936,936,936,936,936,936,936',
',,936,,,,,,936,936,936,936,936,936,936,936,936,936,936,936,,936,936',
'936,,936,936,,936,936,936,,,,,,,,,,,,,,,,,,,,936,,,936,,,936,936,,,936',
',936,,,,936,,,,,,,,936,,,,,936,936,936,936,936,936,,,,936,936,,,,,,',
'936,,,936,936,936,,936,936,948,948,948,948,948,948,,,,948,948,,,,948',
',948,948,948,948,948,948,948,,,,,,948,948,948,948,948,948,948,,,948',
',,,,,948,948,948,948,948,948,948,948,948,948,948,948,,948,948,948,,948',
'948,,948,948,948,,,,,,,,,,,,,,,,,,,,948,,,948,,,948,948,,,948,,948,',
',,948,,,,,,,,948,,,,,948,948,948,948,948,948,,,,948,948,,,,,,,948,,',
'948,948,948,,948,948,995,995,995,995,995,995,,,,995,995,,,,995,,995',
'995,995,995,995,995,995,,,,,,995,995,995,995,995,995,995,,,995,,,,,',
'995,995,995,995,995,995,995,995,995,995,995,995,,995,995,995,,995,995',
',995,995,995,,,,,,,,,,,,,,,,,,,,995,,,995,,,995,995,,,995,,995,,,,995',
',,,,,,,995,,,,,995,995,995,995,995,995,,,,995,995,,,,,,,995,,,995,995',
'995,,995,995,1002,1002,1002,1002,1002,1002,,,,1002,1002,,,,1002,,1002',
'1002,1002,1002,1002,1002,1002,,,,,,1002,1002,1002,1002,1002,1002,1002',
',,1002,,,,,,1002,1002,1002,1002,1002,1002,1002,1002,1002,1002,1002,1002',
',1002,1002,1002,,1002,1002,,1002,1002,1002,,,,,,,,,,,,,,,,,,,,1002,',
',1002,,,1002,1002,,,1002,,1002,,,,1002,,,,,,,,1002,,,,,1002,1002,1002',
'1002,1002,1002,,,,1002,1002,,,,,,,1002,,,1002,1002,1002,,1002,1002,1008',
'1008,1008,1008,1008,1008,,,,1008,1008,,,,1008,,1008,1008,1008,1008,1008',
'1008,1008,,,,,,1008,1008,1008,1008,1008,1008,1008,,,1008,,,,,,1008,1008',
'1008,1008,1008,1008,1008,1008,1008,1008,1008,1008,,1008,1008,1008,,1008',
'1008,,1008,1008,1008,,,,,,,,,,,,,,,,,,,,1008,,,1008,,,1008,1008,,,1008',
',1008,,,,1008,,,,,,,,1008,,,,,1008,1008,1008,1008,1008,1008,,,,1008',
'1008,,,,,,,1008,,,1008,1008,1008,,1008,1008,1009,1009,1009,1009,1009',
'1009,,,,1009,1009,,,,1009,,1009,1009,1009,1009,1009,1009,1009,,,,,,1009',
'1009,1009,1009,1009,1009,1009,,,1009,,,,,,1009,1009,1009,1009,1009,1009',
'1009,1009,1009,1009,1009,1009,,1009,1009,1009,,1009,1009,,1009,1009',
'1009,,,,,,,,,,,,,,,,,,,,1009,,,1009,,,1009,1009,,,1009,,1009,,,,1009',
',,,,,,,1009,,,,,1009,1009,1009,1009,1009,1009,,,,1009,1009,,,,,,,1009',
',,1009,1009,1009,,1009,1009,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,',
',,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8',
',,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8',
',,,8,8,,,,,,,8,,,8,8,8,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,',
'32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32',
'32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32',
',32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,',
'32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33',
'33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33',
'33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,',
',,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,33,33,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,34,34,37,37,37,,37',
',,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37',
',,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,968,',
'968,968,968,968,968,,,,,,,,37,,968,37,,,37,37,,,37,,37,,,,,,,,,,,,968',
',,,,37,37,37,37,37,37,968,968,,37,37,,,,,,,37,,,37,37,37,,37,37,38,38',
'38,,38,,,,38,38,,,,38,968,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38',
'38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,',
',,,970,,970,970,970,970,970,,,,,,,,38,,970,38,,,38,38,,,38,,,,,,,,,',
',,,,970,,,,,38,38,38,38,38,38,970,970,,38,38,,,,38,,,38,,,38,38,38,',
'38,38,45,45,45,,45,,,,45,45,,,,45,970,45,45,45,45,45,45,45,,,,,,45,45',
'45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45',
'45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,',
'45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,45,45,46,46,46',
',46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,',
',46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,',
',,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46',
'46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,46,46,48,48,48,,48,,,,48,48,',
',,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,',
',48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,',
',,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48,,,,48',
'48,,,,,,,48,,,48,48,48,,48,48,62,62,62,62,62,,,,62,62,,,,62,,62,62,62',
'62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,62,62,,62,62,62,62,62',
'62,62,62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,',
'62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,',
'62,,,62,62,62,,62,62,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67',
'67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67',
',67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,',
',,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67',
',67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68',
'68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68',
'68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,',
'68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68,,68,68,71,71,71',
',71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,',
',71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,',
',,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71',
'71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,71,71,72,72,72,,72,,,,72',
'72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,',
'72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,986,,986,986',
'986,986,986,,,,,,,,72,,986,72,,,72,72,,,72,,72,,,,,,,,,,,,986,,,,,72',
'72,72,72,72,72,986,986,,72,72,,,,,,,72,,,72,72,72,,72,72,128,128,128',
'128,128,,,,128,128,,,,128,986,128,128,128,128,128,128,128,,,,,,128,128',
'128,128,128,128,128,,,128,,,,,,128,128,128,128,128,128,128,128,128,128',
'128,128,,128,128,128,,128,128,,128,128,128,,,,,,,,,,,,,,,,,,,,128,,',
'128,,,128,128,,,128,,128,,,,128,,,,,,,,128,,,,,128,128,128,128,128,128',
',,,128,128,,,,,,128,128,,,128,128,128,,128,128,133,133,133,,133,,,,133',
'133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133,133,133,133',
'133,,,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133,133,133,',
'133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,',
',,,133,,,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,,,,,,,133,',
',133,133,133,,133,133,134,134,134,,134,,,,134,134,,,,134,,134,134,134',
'134,134,134,134,,,,,,134,134,134,134,134,134,134,,,134,,,,,,,134,,,134',
'134,134,134,134,134,134,134,,134,134,134,,134,134,,134,134,134,,,,,',
',,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134',
'134,134,134,134,134,,,,134,134,,,,,,,134,,,134,134,134,,134,134,135',
'135,135,,135,,,,135,135,,,,135,,135,135,135,135,135,135,135,,,,,,135',
'135,135,135,135,135,135,,,135,,,,,,,135,,,135,135,135,135,135,135,135',
'135,,135,135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135',
',,135,135,,,135,,,,,,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135',
'135,,,,,,,135,,,135,135,135,,135,135,136,136,136,,136,,,,136,136,,,',
'136,,136,136,136,136,136,136,136,,,,,,136,136,136,136,136,136,136,,',
'136,,,,,,,136,,,136,136,136,136,136,136,136,136,,136,136,136,,136,136',
',136,136,136,,,,,,,,,,,,,,,,,,,,136,,,136,,,136,136,,,136,,,,,,136,',
',,,,,,136,,,,,136,136,136,136,136,136,,,,136,136,,,,,,,136,,,136,136',
'136,,136,136,137,137,137,137,137,,,,137,137,,,,137,,137,137,137,137',
'137,137,137,,,,,,137,137,137,137,137,137,137,,,137,,,,,,137,137,,137',
'137,137,137,137,137,137,137,137,,137,137,137,,137,137,,137,137,137,',
',,,,,,,,,,,,,,,,,,137,,,137,,,137,137,,,137,,137,,,,137,,,,,,,,137,',
',,,137,137,137,137,137,137,,,,137,137,,,,,,,137,,,137,137,137,,137,137',
'222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,',
',222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222',
'222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,',
'222,,,222,222,,,222,,222,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222',
',,,222,222,,,,,,,222,,,222,222,222,,222,222,223,223,223,,223,,,,223',
'223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223',
'223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,',
'223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,223',
',,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,',
',223,223,223,,223,223,224,224,224,,224,,,,224,224,,,,224,,224,224,224',
'224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224',
'224,224,224,224,224,224,224,,224,224,224,,224,224,,224,224,224,,,,,',
',,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224',
'224,224,224,224,224,,,,224,224,,,,,,,224,,,224,224,224,,224,224,225',
'225,225,,225,,,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225',
'225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225',
'225,,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225',
',,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225',
'225,,,,,,,225,,,225,225,225,,225,225,226,226,226,,226,,,,226,226,,,',
'226,,226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,',
'226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226',
',226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,',
',,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,,226,,,226,226',
'226,,226,226,227,227,227,,227,,,,227,227,,,,227,,227,227,227,227,227',
'227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227',
'227,227,227,227,227,227,227,227,227,,227,227,,227,227,227,,,,,,,,,,',
',,,,,,,,,227,,,227,,,227,227,,,227,,227,,227,,227,,,,,,,,227,,,,,227',
'227,227,227,227,227,,,,227,227,,,,,,,227,,227,227,227,227,,227,227,232',
'232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232',
'232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232',
'232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232',
',,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232',
'232,,,,,,,232,,,232,232,232,,232,232,233,233,233,,233,,,,233,233,,,',
'233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,',
'233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233',
',233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,',
',,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233,,,233,233',
'233,,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234',
'234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,',
',,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234',
'234,234,234,,,,234,234,234,,,,,,234,,,234,234,234,,234,234,245,245,245',
',245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245',
'245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245',
',,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,',
',,,245,,,245,245,245,,245,245,248,248,248,,248,,,,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248',
',,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,,248',
'248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249',
',,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249',
',,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249',
',,,249,249,,,,,,,249,,,249,249,249,,249,249,250,250,250,,250,,,,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250,',
'250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250,',
',250,250,250,,250,250,251,251,251,,251,,,,251,251,,,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,',
',,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251',
'251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,251,251,252',
'252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252',
'252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252',
'252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252',
',,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252',
'252,,,,,,,252,,,252,252,252,,252,252,253,253,253,,253,,,,253,253,,,',
'253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,',
'253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253',
',253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,',
',,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253',
'253,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,',
',,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254',
'254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,254,254,255,255,255',
',255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255',
'255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,',
',,,255,,,255,255,255,,255,255,256,256,256,,256,,,,256,256,,,,256,,256',
'256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,',
',256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,,256,256',
'256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256',
',,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,256',
'256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257',
',,,257,257,,,,,,,257,,,257,257,257,,257,257,258,258,258,,258,,,,258',
'258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258',
'258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,',
'258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,',
',258,258,258,,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,',
',,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259',
'259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,259,259,260',
'260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260,,,,,,260',
'260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260',
'260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260',
',,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260',
'260,,,,,,,260,,,260,260,260,,260,260,261,261,261,,261,,,,261,261,,,',
'261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,',
'261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261',
',261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,',
',,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261',
'261,,261,261,262,262,262,,262,,,,262,262,,,,262,,262,262,262,262,262',
'262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262',
'262,262,262,262,262,,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,',
',,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262,262,262',
'262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,262,262,263,263,263',
',263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263',
'263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263',
'263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263',
',,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,',
',,,263,,,263,263,263,,263,263,264,264,264,,264,,,,264,264,,,,264,,264',
'264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,',
',264,,,264,264,264,264,264,264,264,264,,264,264,264,,264,264,,264,264',
'264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264',
',,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,,,264,264,264,,264',
'264,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265,265',
',,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265',
'265,265,265,,265,265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265',
',,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265',
',,,265,265,,,,,,,265,,,265,265,265,,265,265,266,266,266,,266,,,,266',
'266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266',
'266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266,,266,266,266,',
'266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,',
',,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,',
',266,266,266,,266,266,267,267,267,,267,,,,267,267,,,,267,,267,267,267',
'267,267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267',
'267,267,267,267,267,267,267,,267,267,267,,267,267,,267,267,267,,,,,',
',,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267',
'267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267,267,,267,267,268',
'268,268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268',
'268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268',
'268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268',
',,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268',
'268,,,,,,,268,,,268,268,268,,268,268,269,269,269,,269,,,,269,269,,,',
'269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269,,',
'269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269,269,269,,269,269',
',269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,',
',,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,,,269,269',
'269,,269,269,274,274,274,,274,,,,274,274,,,,274,,274,274,274,274,274',
'274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274',
'274,274,274,274,274,,274,274,274,,274,274,,274,274,274,,,,,,,,,,,,,',
',,,,,,274,,,274,,,274,274,,,274,,,,,,274,,,,,,,,274,,,,,274,274,274',
'274,274,274,,,,274,274,,,,,,,274,,,274,274,274,,274,274,282,282,282',
',282,,,,282,282,,,,282,,282,282,282,282,282,282,282,,,,,,282,282,282',
'282,282,282,282,,,282,,,,,,,282,,,282,282,282,282,282,282,282,282,282',
'282,282,282,,282,282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282',
'282,,,282,,282,,282,,282,,,,,,,,282,,,,,282,282,282,282,282,282,,,,282',
'282,,,,,,,282,,282,282,282,282,,282,282,283,283,283,,283,,,,283,283',
',,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283,283,283',
',,283,,,,,,,283,,,283,283,283,283,283,283,283,283,283,283,283,283,,283',
'283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,283,',
'283,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,,,,,,,283',
',283,283,283,283,,283,283,292,292,292,,292,,,,292,292,,,,292,,292,292',
'292,292,292,292,292,,,,,,292,292,292,292,292,292,292,,,292,,,,,,,292',
',,292,292,292,292,292,292,292,292,292,292,292,292,,292,292,,292,292',
'292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,292,,292,,292,,,,',
',,,292,,,,,292,292,292,292,292,292,,,,292,292,292,,,,,,292,,292,292',
'292,292,,292,292,299,299,299,,299,,,,299,299,,,,299,,299,299,299,299',
'299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,,,299,,,299,299',
'299,299,299,299,299,299,,299,299,299,,299,299,,299,299,299,,,,,,,,,',
',,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,299,,,,,,,,299,,,,,299,299',
'299,299,299,299,,,,299,299,,,,,,,299,,,299,299,299,,299,299,301,301',
'301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301',
'301,301,301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301,301',
',301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301',
'301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301',
',,,,,,301,,,301,301,301,,301,301,304,304,304,,304,,,,304,304,,,,304',
',304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304',
',,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304,,304,304,,304',
'304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,304,,,,,,',
',304,,,,,304,304,304,304,304,304,,,,304,304,,,,,,,304,,,304,304,304',
',304,304,305,305,305,,305,,,,305,305,,,,305,,305,305,305,305,305,305',
'305,,,,,,305,305,305,305,305,305,305,,,305,,,,,,,305,,,305,305,305,305',
'305,305,305,305,,305,305,305,,305,305,,305,305,305,,,,,,,,,,,,,,,,,',
',,305,,,305,,,305,305,,,305,,,,,,305,,,,,,,,305,,,,,305,305,305,305',
'305,305,,,,305,305,,,,,,,305,,,305,305,305,,305,305,311,311,311,311',
'311,,,,311,311,,,,311,,311,311,311,311,311,311,311,,,,,,311,311,311',
'311,311,311,311,,,311,,,,,,311,311,,311,311,311,311,311,311,311,311',
'311,,311,311,311,,311,311,,311,311,311,,,,,,,,,,,,,,,,,,,,311,,,311',
',,311,311,,,311,,311,,,,311,,,,,,,,311,,,,,311,311,311,311,311,311,',
',,311,311,,,,,,,311,,,311,311,311,,311,311,319,319,319,,319,,,,319,319',
',,,319,,319,319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319',
',,319,,,,,,,319,,,319,319,319,319,319,319,319,319,,319,319,319,,319',
'319,,,,319,,,,,,1050,,1050,1050,1050,1050,1050,,,,,,,,319,,1050,319',
',,319,319,,,319,,,,,,,,,,,,,,1050,,,,,319,319,319,319,319,319,1050,1050',
',319,319,,,,319,,,319,,,319,319,319,,319,319,336,336,336,,336,,,,336',
'336,,,,336,1050,336,336,336,336,336,336,336,,,,,,336,336,336,336,336',
'336,336,,,336,,,,,,,336,,,336,336,336,336,336,336,336,336,,336,336,336',
',336,336,,,,336,,,,,,1059,,1059,1059,1059,1059,1059,,,,,,,,336,,1059',
'336,,,336,336,,,336,,,,,,,,,,,,,,1059,,,,,336,336,336,336,336,336,1059',
'1059,,336,336,,,,,,,336,,,336,336,336,,336,336,343,343,343,,343,,,,343',
'343,,,,343,1059,343,343,343,343,343,343,343,,,,,,343,343,343,343,343',
'343,343,,,343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343',
',343,343,,343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,',
',,,,343,,,,,,,,343,,,,,343,343,343,343,343,343,,,,343,343,,,,,,,343',
',,343,343,343,,343,343,345,345,345,,345,,,,345,345,,,,345,,345,345,345',
'345,345,345,345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,,345,,,345',
'345,345,345,345,345,345,345,,345,345,345,,345,345,,345,345,345,,,,,',
',,,,,,,,,,,,,,345,,,345,345,,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345',
'345,345,345,345,345,,,,345,345,,,,,,,345,,,345,345,345,,345,345,349',
'349,349,,349,,,,349,349,,,,349,,349,349,349,349,349,349,349,,,,,,349',
'349,349,349,349,349,349,,,349,,,,,,,349,,,349,349,349,349,349,349,349',
'349,349,349,349,349,,349,349,,349,349,349,,,,,,,,,,,,,,,,,,,,349,,,349',
',,349,349,,,349,,349,,,,349,,,,,,,,349,,,,,349,349,349,349,349,349,',
',,349,349,,,,,,,349,,349,349,349,349,,349,349,350,350,350,,350,,,,350',
'350,,,,350,,350,350,350,350,350,350,350,,,,,,350,350,350,350,350,350',
'350,,,350,,,,,,,350,,,350,350,350,350,350,350,350,350,350,350,350,350',
',350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,,,350,350,,,350,',
',,,,350,,,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,,,,,,,350',
',350,350,350,350,,350,350,355,355,355,,355,,,,355,355,,,,355,,355,355',
'355,355,355,355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,,,355',
',,355,355,355,355,355,355,355,355,,355,355,355,,355,355,,355,355,355',
',,,,,,,,,,,,,,,,,,,355,,,355,,,355,355,,,355,,,,,,355,,,,,,,,355,,,',
',355,355,355,355,355,355,,,,355,355,,,,,,,355,,,355,355,355,,355,355',
'369,369,369,,369,,,,369,369,,,,369,,369,369,369,369,369,369,369,,,,',
',369,369,369,369,369,369,369,,,369,,,,,,,369,,,369,369,369,369,369,369',
'369,369,,369,369,369,,369,369,,,,369,,,,,,1061,,1061,1061,1061,1061',
'1061,,,,,,,,369,,1061,369,,,369,369,,,369,,,,,,,,,,,,,,1061,,,,,369',
'369,369,369,369,369,1061,1061,,369,369,,,,,,,369,,,369,369,369,,369',
'369,371,371,371,,371,,,,371,371,,,,371,1061,371,371,371,371,371,371',
'371,,,,,,371,371,371,371,371,371,371,,,371,,,,,,,371,,,371,371,371,371',
'371,371,371,371,,371,371,371,,371,371,,,,371,,,,,,1063,,1063,1063,1063',
'1063,1063,,,,,,,,371,,1063,371,,,371,371,,,371,,,,,,,,,,,,,,1063,,,',
',371,371,371,371,371,371,1063,1063,,371,371,,,,,,,371,,,371,371,371',
',371,371,431,431,431,,431,,,,431,431,,,,431,1063,431,431,431,431,431',
'431,431,,,,,,431,431,431,431,431,431,431,,,431,,,,,,,431,,,431,431,431',
'431,431,431,431,431,,431,431,431,,431,431,,431,431,431,,,,,,,,,,,,,',
',,,,,,431,,,431,,,431,431,,,431,,,,,,431,,,,,,,,431,,,,,431,431,431',
'431,431,431,,,,431,431,,,,,,,431,,,431,431,431,,431,431,475,475,475',
',475,,,,475,475,,,,475,,475,475,475,475,475,475,475,,,,,,475,475,475',
'475,475,475,475,,,475,,,,,,,475,,,475,475,475,475,475,475,475,475,475',
'475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475,,,475',
'475,,,475,,475,,475,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475',
'475,,,,,,,475,,475,475,475,475,,475,475,477,477,477,,477,,,,477,477',
',,,477,,477,477,477,477,477,477,477,,,,,,477,477,477,477,477,477,477',
',,477,,,,,,,477,,,477,477,477,477,477,477,477,477,,477,477,477,,477',
'477,,477,477,477,,,,,,,,,,,,,,,,,,,,477,,,477,,,477,477,,,477,,,,,,477',
',,,,,,,477,,,,,477,477,477,477,477,477,,,,477,477,,,,,,,477,,,477,477',
'477,,477,477,478,478,478,,478,,,,478,478,,,,478,,478,478,478,478,478',
'478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478,478',
'478,478,478,478,478,,478,478,478,,478,478,,478,478,478,,,,,,,,,,,,,',
',,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,,,478,,,,,478,478,478',
'478,478,478,,,,478,478,,,,,,,478,,,478,478,478,,478,478,479,479,479',
',479,,,,479,479,,,,479,,479,479,479,479,479,479,479,,,,,,479,479,479',
'479,479,479,479,,,479,,,,,,,479,,,479,479,479,479,479,479,479,479,,479',
'479,479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479,479',
',,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479,479,479,,,,479,479,,,',
',,,479,,,479,479,479,,479,479,517,517,517,,517,,,,517,517,,,,517,,517',
'517,517,517,517,517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,',
',517,,,517,517,517,517,517,517,517,517,517,517,517,517,,517,517,,517',
'517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517,,517,,517,,517',
',,,,,,,517,,,,,517,517,517,517,517,517,,,,517,517,,,,,,,517,,517,517',
'517,517,,517,517,520,520,520,,520,,,,520,520,,,,520,,520,520,520,520',
'520,520,520,,,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520',
'520,520,520,520,520,520,520,520,520,520,,520,520,,520,520,520,,,,,,',
',,,,,,,,,,,,,520,,,520,,,520,520,,,520,,,,520,,520,,,,,,,,520,,,,,520',
'520,520,520,520,520,,,,520,520,,,,,,,520,,520,520,520,520,,520,520,522',
'522,522,,522,,,,522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522',
'522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522',
'522,,522,522,522,,522,522,,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522',
',,522,522,,,522,,,,,,522,,,,,,,,522,,,,,522,522,522,522,522,522,,,,522',
'522,,,,,,,522,,,522,522,522,,522,522,528,528,528,528,528,,,,528,528',
',,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528',
',,528,,,,,,528,528,528,528,528,528,528,528,528,528,528,528,,528,528',
'528,,528,528,,528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528',
',528,,,,528,,,,,,,,528,,,,,528,528,528,528,528,528,,,,528,528,,,,,,528',
'528,,,528,528,528,,528,528,536,536,536,,536,,,,536,536,,,,536,,536,536',
'536,536,536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536',
',,536,536,536,536,536,536,536,536,,536,536,536,,536,536,,,,536,,,,,',
'1085,,1085,1085,1085,1085,1085,,,,,,,,536,,1085,536,,,536,536,,,536',
',,,,,,,,,,,,,1085,,,,,536,536,536,536,536,536,1085,1085,,536,536,,,',
',,,536,,,536,536,536,,536,536,538,538,538,,538,,,,538,538,,,,538,1085',
'538,538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538,,,538,',
',,,,,538,,,538,538,538,538,538,538,538,538,538,538,538,538,,538,538',
',538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538,,538,,538',
',538,,,,,,,,538,,,,,538,538,538,538,538,538,,,,538,538,,,,,,,538,,538',
'538,538,538,,538,538,544,544,544,,544,,,,544,544,,,,544,,544,544,544',
'544,544,544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,,,544,,,544',
'544,544,544,544,544,544,544,,544,544,544,,544,544,,,,544,,,,,,,,,,,',
',,,,,,,,544,,,544,,,544,544,,,544,,,,,,,,,,,,,,,,,,,544,544,544,544',
'544,544,,,,544,544,,,,,,,544,,,544,544,544,,544,544,547,547,547,,547',
',,,547,547,,,,547,,547,547,547,547,547,547,547,,,,,,547,547,547,547',
'547,547,547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,547,,547,547',
'547,,547,547,,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,547,,,547',
',,,,,547,,,,,,,,547,,,,,547,547,547,547,547,547,,,,547,547,,,,,,,547',
',,547,547,547,,547,547,548,548,548,,548,,,,548,548,,,,548,,548,548,548',
'548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548,,,,,,,548,,,548',
'548,548,548,548,548,548,548,,548,548,548,,548,548,,548,548,548,,,,,',
',,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,,,,,548,,,,,,,,548,,,,,548',
'548,548,548,548,548,,,,548,548,,,,,,,548,,,548,548,548,,548,548,553',
'553,553,,553,,,,553,553,,,,553,,553,553,553,553,553,553,553,,,,,,553',
'553,553,553,553,553,553,,,553,,,,,,,553,,,553,553,553,553,553,553,553',
'553,,553,553,553,,553,553,,553,553,553,,,,,,,,,,,,,,,,,,,,553,,,553',
',,553,553,,,553,,,,,,553,,,,,,,,553,,,,,553,553,553,553,553,553,,,,553',
'553,,,,,,,553,,,553,553,553,,553,553,577,577,577,,577,,,,577,577,,,',
'577,,577,577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,',
'577,,,,,,,577,,,577,577,577,577,577,577,577,577,577,577,577,577,,577',
'577,,577,577,577,,,,,,,,,,,,,,,,,,,,577,,,577,,,577,577,,,577,,577,',
'577,,577,,,,,,,,577,,,,,577,577,577,577,577,577,,,,577,577,,,,,,,577',
',577,577,577,577,,577,577,589,589,589,,589,,,,589,589,,,,589,,589,589',
'589,589,589,589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,,,589',
',,589,589,589,589,589,589,589,589,,589,589,589,,589,589,,589,589,589',
',,,,,,,,,,,,,,,,,,,589,,,589,,,589,589,,,589,,,,,,589,,,,,,,,589,,,',
',589,589,589,589,589,589,,,,589,589,,,,,,,589,,,589,589,589,,589,589',
'595,595,595,,595,,,,595,595,,,,595,,595,595,595,595,595,595,595,,,,',
',595,595,595,595,595,595,595,,,595,,,,,,,595,,,595,595,595,595,595,595',
'595,595,,595,595,595,,595,595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,',
'595,,,595,595,,,595,,,,,,595,,,,,,,,595,,,,,595,595,595,595,595,595',
',,,595,595,,,,,,,595,,,595,595,595,,595,595,617,617,617,,617,,,,617',
'617,,,,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617,617,617',
'617,,,617,,,,,,,617,,,617,617,617,617,617,617,617,617,,617,617,617,',
'617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,,',
',,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,,,,,,,617,',
',617,617,617,,617,617,657,657,657,,657,,,,657,657,,,,657,,657,657,657',
'657,657,657,657,,,,,,657,657,657,657,657,657,657,,,657,,,,,,,657,,,657',
'657,657,657,657,657,657,657,,657,657,657,,657,657,,657,657,657,,,,,',
',,,,,,,,,,,,,,657,,,657,,,657,657,,,657,,657,,,,657,,,,,,,,657,,,,,657',
'657,657,657,657,657,,,,657,657,,,,,,,657,,,657,657,657,,657,657,658',
'658,658,,658,,,,658,658,,,,658,,658,658,658,658,658,658,658,,,,,,658',
'658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658,658,658',
'658,,658,658,658,,658,658,,658,658,658,,,,,,,,,,,,,,,,,,,,658,,,658',
',,658,658,,,658,,,,,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658',
'658,,,,,,,658,,,658,658,658,,658,658,659,659,659,,659,,,,659,659,,,',
'659,,659,659,659,659,659,659,659,,,,,,659,659,659,659,659,659,659,,',
'659,,,,,,,659,,,659,659,659,659,659,659,659,659,659,659,659,659,,659',
'659,,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,659,',
'659,,659,,,,,,,,659,,,,,659,659,659,659,659,659,,,,659,659,,,,,,,659',
',659,659,659,659,,659,659,662,662,662,,662,,,,662,662,,,,662,,662,662',
'662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662',
',,662,662,662,662,662,662,662,662,,662,662,662,,662,662,,662,662,662',
',,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,,,,,662,,,,,,,,662,,,',
',662,662,662,662,662,662,,,,662,662,,,,,,,662,,,662,662,662,,662,662',
'665,665,665,,665,,,,665,665,,,,665,,665,665,665,665,665,665,665,,,,',
',665,665,665,665,665,665,665,,,665,,,,,,,665,,,665,665,665,665,665,665',
'665,665,665,665,665,665,,665,665,,665,665,665,,,,,,,,,,,,,,,,,,,,665',
',,665,,,665,665,,,665,,665,,665,,665,,,,,,,,665,,,,,665,665,665,665',
'665,665,,,,665,665,,,,,,,665,,665,665,665,665,,665,665,666,666,666,',
'666,,,,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666,666,666',
'666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666,666,666',
'666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666',
'666,,,666,,,,666,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666',
'666,,,,,,,666,,666,666,666,666,,666,666,667,667,667,,667,,,,667,667',
',,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667,667',
',,667,,,,,,,667,,,667,667,667,667,667,667,667,667,,667,667,667,,667',
'667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,,,,,667',
',,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667,,,667,667',
'667,,667,667,668,668,668,,668,,,,668,668,,,,668,,668,668,668,668,668',
'668,668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668,,,668,668,668',
'668,668,668,668,668,,668,668,668,,668,668,,668,668,668,,,,,,,,,,,,,',
',,,,,,668,,,668,,,668,668,,,668,,,,,,668,,,,,,,,668,,,,,668,668,668',
'668,668,668,,,,668,668,,,,,,,668,,,668,668,668,,668,668,673,673,673',
',673,,,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673,673',
'673,673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673,673,,673',
'673,673,,673,673,,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673',
',,673,,,,,,673,,,,,,,,673,,,,,673,673,673,673,673,673,,,,673,673,,,',
',,,673,,,673,673,673,,673,673,674,674,674,,674,,,,674,674,,,,674,,674',
'674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674,,,674,,,,,',
',674,,,674,674,674,674,674,674,674,674,,674,674,674,,674,674,,674,674',
'674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,,,,,674,,,,,,,,674',
',,,,674,674,674,674,674,674,,,,674,674,,,,,,,674,,,674,674,674,,674',
'674,698,698,698,,698,,,,698,698,,,,698,,698,698,698,698,698,698,698',
',,,,,698,698,698,698,698,698,698,,,698,,,,,,,698,,,698,698,698,698,698',
'698,698,698,,698,698,698,,698,698,,698,698,698,,,,,,,,,,,,,,,,,,,,698',
',,698,,,698,698,,,698,,,,,,698,,,,,,,,698,,,,,698,698,698,698,698,698',
',,,698,698,,,,,,,698,,,698,698,698,,698,698,701,701,701,,701,,,,701',
'701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701,701,701,701,701',
'701,,,701,,,,,,,701,,,701,701,701,701,701,701,701,701,,701,701,701,',
'701,701,,701,701,701,,,,,,,,,,,,,,,,,,,,701,,,701,,,701,701,,,701,,',
',,,701,,,,,,,,701,,,,,701,701,701,701,701,701,,,,701,701,,,,,,,701,',
',701,701,701,,701,701,705,705,705,,705,,,,705,705,,,,705,,705,705,705',
'705,705,705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705,,,705',
'705,705,705,705,705,705,705,,705,705,705,,705,705,,,,705,,,,,,,,,,,',
',,,,,,,,705,,,705,,,705,705,,,705,,,,,,,,,,,,,,,,,,,705,705,705,705',
'705,705,,,,705,705,,,,,,,705,,,705,705,705,,705,705,716,716,716,,716',
',,,716,716,,,,716,,716,716,716,716,716,716,716,,,,,,716,716,716,716',
'716,716,716,,,716,,,,,,,716,,,716,716,716,716,716,716,716,716,,716,716',
'716,,716,716,,,,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,,716,,,',
',,,,,,,,,,,,,,,716,716,716,716,716,716,,,,716,716,,,,,,,716,,,716,716',
'716,,716,716,722,722,722,,722,,,,722,722,,,,722,,722,722,722,722,722',
'722,722,,,,,,722,722,722,722,722,722,722,,,722,,,,,,,722,,,722,722,722',
'722,722,722,722,722,,722,722,722,,722,722,,722,722,722,,,,,,,,,,,,,',
',,,,,,722,,,722,,,722,722,,,722,,722,,,,722,,,,,,,,722,,,,,722,722,722',
'722,722,722,,,,722,722,,,,,,,722,,,722,722,722,,722,722,727,727,727',
',727,,,,727,727,,,,727,,727,727,727,727,727,727,727,,,,,,727,727,727',
'727,727,727,727,,,727,,,,,,,727,,,727,727,727,727,727,727,727,727,727',
'727,727,727,,727,727,,727,727,727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727',
'727,,,727,,727,,,,727,,,,,,,,727,,,,,727,727,727,727,727,727,,,,727',
'727,,,,,,,727,,727,727,727,727,,727,727,730,730,730,,730,,,,730,730',
',,,730,,730,730,730,730,730,730,730,,,,,,730,730,730,730,730,730,730',
',,730,,,,,,,730,,,730,730,730,730,730,730,730,730,730,730,730,730,,730',
'730,,730,730,730,,,,,,,,,,,,,,,,,,,,730,,,730,,,730,730,,,730,,,,,,730',
',,,,,,,730,,,,,730,730,730,730,730,730,,,,730,730,,,,,,,730,,730,730',
'730,730,,730,730,744,744,744,,744,,,,744,744,,,,744,,744,744,744,744',
'744,744,744,,,,,,744,744,744,744,744,744,744,,,744,,,,,,,744,,,744,744',
'744,744,744,744,744,744,,744,744,744,,744,744,,744,744,744,,,,,,,,,',
',,,,,,,,,,744,,,744,,,744,744,,,744,,744,,,,744,,,,,,,,744,,,,,744,744',
'744,744,744,744,,,,744,744,,,,,,,744,,,744,744,744,,744,744,756,756',
'756,,756,,,,756,756,,,,756,,756,756,756,756,756,756,756,,,,,,756,756',
'756,756,756,756,756,,,756,,,,,,,756,,,756,756,756,756,756,756,756,756',
'756,756,756,756,,756,756,,756,756,756,,,,,,,,,,,,,,,,,,,,756,,,756,',
',756,756,,,756,,756,,756,,756,,,,,,,,756,,,,,756,756,756,756,756,756',
',,,756,756,,,,,,,756,,756,756,756,756,,756,756,779,779,779,,779,,,,779',
'779,,,,779,,779,779,779,779,779,779,779,,,,,,779,779,779,779,779,779',
'779,,,779,,,,,,,779,,,779,779,779,779,779,779,779,779,,779,779,779,',
'779,779,,779,779,779,,,,,,,,,,,,,,,,,,,,779,,,779,,,779,779,,,779,,',
',,,779,,,,,,,,779,,,,,779,779,779,779,779,779,,,,779,779,,,,,,,779,',
',779,779,779,,779,779,801,801,801,,801,,,,801,801,,,,801,,801,801,801',
'801,801,801,801,,,,,,801,801,801,801,801,801,801,,,801,,,,,,,801,,,801',
'801,801,801,801,801,801,801,,801,801,801,,801,801,,801,801,801,,,,,',
',,,,,,,,,,,,,,801,,,801,,,801,801,,,801,,,,,,801,,,,,,,,801,,,,,801',
'801,801,801,801,801,,,,801,801,,,,,,,801,,,801,801,801,,801,801,808',
'808,808,,808,,,,808,808,,,,808,,808,808,808,808,808,808,808,,,,,,808',
'808,808,808,808,808,808,,,808,,,,,,,808,,,808,808,808,808,808,808,808',
'808,,808,808,808,,808,808,,808,808,808,,,,,,,,,,,,,,,,,,,,808,,,808',
',,808,808,,,808,,,,,,808,,,,,,,,808,,,,,808,808,808,808,808,808,,,,808',
'808,,,,,,,808,,,808,808,808,,808,808,821,821,821,,821,,,,821,821,,,',
'821,,821,821,821,821,821,821,821,,,,,,821,821,821,821,821,821,821,,',
'821,,,,,,,821,,,821,821,821,821,821,821,821,821,,821,821,821,,821,821',
',821,821,821,,,,,,,,,,,,,,,,,,,,821,,,821,,,821,821,,,821,,,,,,821,',
',,,,,,821,,,,,821,821,821,821,821,821,,,,821,821,,,,,,,821,,,821,821',
'821,,821,821,822,822,822,,822,,,,822,822,,,,822,,822,822,822,822,822',
'822,822,,,,,,822,822,822,822,822,822,822,,,822,,,,,,,822,,,822,822,822',
'822,822,822,822,822,,822,822,822,,822,822,,822,822,822,,,,,,,,,,,,,',
',,,,,,822,,,822,,,822,822,,,822,,,,,,822,,,,,,,,822,,,,,822,822,822',
'822,822,822,,,,822,822,,,,,,,822,,,822,822,822,,822,822,823,823,823',
',823,,,,823,823,,,,823,,823,823,823,823,823,823,823,,,,,,823,823,823',
'823,823,823,823,,,823,,,,,,,823,,,823,823,823,823,823,823,823,823,,823',
'823,823,,823,823,,823,823,823,,,,,,,,,,,,,,,,,,,,823,,,823,,,823,823',
',,823,,,,,,823,,,,,,,,823,,,,,823,823,823,823,823,823,,,,823,823,,,',
',,,823,,,823,823,823,,823,823,824,824,824,,824,,,,824,824,,,,824,,824',
'824,824,824,824,824,824,,,,,,824,824,824,824,824,824,824,,,824,,,,,',
',824,,,824,824,824,824,824,824,824,824,,824,824,824,,824,824,,824,824',
'824,,,,,,,,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,,,,,824,,,,,,,,824',
',,,,824,824,824,824,824,824,,,,824,824,,,,,,,824,,,824,824,824,,824',
'824,826,826,826,,826,,,,826,826,,,,826,,826,826,826,826,826,826,826',
',,,,,826,826,826,826,826,826,826,,,826,,,,,,,826,,,826,826,826,826,826',
'826,826,826,,826,826,826,,826,826,,826,826,826,,,,,,,,,,,,,,,,,,,,826',
',,826,,,826,826,,,826,,,,,,826,,,,,,,,826,,,,,826,826,826,826,826,826',
',,,826,826,,,,,,,826,,,826,826,826,,826,826,859,859,859,,859,,,,859',
'859,,,,859,,859,859,859,859,859,859,859,,,,,,859,859,859,859,859,859',
'859,,,859,,,,,,,859,,,859,859,859,859,859,859,859,859,,859,859,859,',
'859,859,,859,859,859,,,,,,,,,,,,,,,,,,,,859,,,859,,,859,859,,,859,,',
',,,859,,,,,,,,859,,,,,859,859,859,859,859,859,,,,859,859,,,,,,,859,',
',859,859,859,,859,859,866,866,866,,866,,,,866,866,,,,866,,866,866,866',
'866,866,866,866,,,,,,866,866,866,866,866,866,866,,,866,,,,,,,866,,,866',
'866,866,866,866,866,866,866,,866,866,866,,866,866,,866,866,866,,,,,',
',,,,,,,,,,,,,,866,,,866,,,866,866,,,866,,,,,,866,,,,,,,,866,,,,,866',
'866,866,866,866,866,,,,866,866,,,,,,,866,,,866,866,866,,866,866,875',
'875,875,,875,,,,875,875,,,,875,,875,875,875,875,875,875,875,,,,,,875',
'875,875,875,875,875,875,,,875,,,,,,,875,,,875,875,875,875,875,875,875',
'875,,875,875,875,,875,875,,875,875,875,,,,,,,,,,,,,,,,,,,,875,,,875',
',,875,875,,,875,,,,,,875,,,,,,,,875,,,,,875,875,875,875,875,875,,,,875',
'875,,,,,,,875,,,875,875,875,,875,875,917,917,917,,917,,,,917,917,,,',
'917,,917,917,917,917,917,917,917,,,,,,917,917,917,917,917,917,917,,',
'917,,,,,,,917,,,917,917,917,917,917,917,917,917,917,917,917,917,,917',
'917,,917,917,917,,,,,,,,,,,,,,,,,,,,917,,,917,,,917,917,,,917,,,,917',
',917,,,,,,,,917,,,,,917,917,917,917,917,917,,,,917,917,,,,,,,917,,917',
'917,917,917,,917,917,918,918,918,,918,,,,918,918,,,,918,,918,918,918',
'918,918,918,918,,,,,,918,918,918,918,918,918,918,,,918,,,,,,,918,,,918',
'918,918,918,918,918,918,918,,918,918,918,,918,918,,918,918,918,,,,,',
',,,,,,,,,,,,,,918,,,918,,,918,918,,,918,,,,,,918,,,,,,,,918,,,,,918',
'918,918,918,918,918,,,,918,918,,,,,,,918,,,918,918,918,,918,918,930',
'930,930,,930,,,,930,930,,,,930,,930,930,930,930,930,930,930,,,,,,930',
'930,930,930,930,930,930,,,930,,,,,,,930,,,930,930,930,930,930,930,930',
'930,,930,930,930,,930,930,,,,930,,,,,,,,,,,,,,,,,,,,930,,,930,,,930',
'930,,,930,,,,,,,,,,,,,,,,,,,930,930,930,930,930,930,,,,930,930,,,,,',
',930,,,930,930,930,,930,930,939,939,939,,939,,,,939,939,,,,939,,939',
'939,939,939,939,939,939,,,,,,939,939,939,939,939,939,939,,,939,,,,,',
',939,,,939,939,939,939,939,939,939,939,,939,939,939,,939,939,,,,939',
',,,,,,,,,,,,,,,,,,,939,,,939,,,939,939,,,939,,,,,,,,,,,,,,,,,,,939,939',
'939,939,939,939,,,,939,939,,,,,,,939,,,939,939,939,,939,939,947,947',
'947,,947,,,,947,947,,,,947,,947,947,947,947,947,947,947,,,,,,947,947',
'947,947,947,947,947,,,947,,,,,,,947,,,947,947,947,947,947,947,947,947',
',947,947,947,,947,947,,947,947,947,,,,,,,,,,,,,,,,,,,,947,,,947,,,947',
'947,,,947,,947,,,,947,,,,,,,,947,,,,,947,947,947,947,947,947,,,,947',
'947,,,,,,,947,,,947,947,947,,947,947,990,990,990,,990,,,,990,990,,,',
'990,,990,990,990,990,990,990,990,,,,,,990,990,990,990,990,990,990,,',
'990,,,,,,,990,,,990,990,990,990,990,990,990,990,,990,990,990,,990,990',
',,,990,,,,,,,,,,,,,,,,,,,,990,,,990,,,990,990,,,990,,,,,,,,,,,,,,,,',
',,990,990,990,990,990,990,,,,990,990,,,,,,,990,,,990,990,990,,990,990',
'1004,1004,1004,,1004,,,,1004,1004,,,,1004,,1004,1004,1004,1004,1004',
'1004,1004,,,,,,1004,1004,1004,1004,1004,1004,1004,,,1004,,,,,,,1004',
',,1004,1004,1004,1004,1004,1004,1004,1004,,1004,1004,1004,,1004,1004',
',1004,1004,1004,,,,,,,,,,,,,,,,,,,,1004,,,1004,,,1004,1004,,,1004,,',
',,,1004,,,,,,,,1004,,,,,1004,1004,1004,1004,1004,1004,,,,1004,1004,',
',,,,,1004,,,1004,1004,1004,,1004,1004,1037,1037,1037,,1037,,,,1037,1037',
',,,1037,,1037,1037,1037,1037,1037,1037,1037,,,,,,1037,1037,1037,1037',
'1037,1037,1037,,,1037,,,,,,,1037,,,1037,1037,1037,1037,1037,1037,1037',
'1037,1037,1037,1037,1037,,1037,1037,,1037,1037,1037,,,,,,,,,,,,,,,,',
',,,1037,,,1037,,,1037,1037,,,1037,,1037,,1037,,1037,,,,,,,,1037,,,,',
'1037,1037,1037,1037,1037,1037,,,,1037,1037,,,,,,,1037,,1037,1037,1037',
'1037,,1037,1037,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11',
'11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,',
',11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,',
'11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,',
',,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12',
'12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12',
'12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75',
'75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75',
'75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75',
'75,75,75,75,75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,,,,105,105,105,105,105,105,105,105,105,105,,,,,,105,105,105',
'105,105,105,105,105,105,105,105,105,,105,,,,,,,105,105,,105,105,105',
'105,105,105,105,,,105,105,,,,105,105,105,105,,,,,,,,,,,,,,105,105,,105',
'105,105,105,105,105,105,105,105,105,105,,,105,,,,,,,,,,,,,,,,,,,,105',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,,,,422,422,422,422,422,422,422,422,422,422',
',,,,,422,422,422,422,422,422,422,422,422,,,422,,,,,,,,,422,422,,422',
'422,422,422,422,422,422,,,422,422,,,,422,422,422,422,,,,,,,,,,,,,,422',
'422,,422,422,422,422,422,422,422,422,422,422,422,,,422,422,,,,,,,,,',
'422,,,,,,,,,422,654,654,654,654,654,654,654,654,654,654,654,654,654',
'654,654,654,654,654,654,654,654,654,654,654,,,,654,654,654,654,654,654',
'654,654,654,654,,,,,,654,654,654,654,654,654,654,654,654,,,654,,,,,',
',,,654,654,,654,654,654,654,654,654,654,,,654,654,,,,654,654,654,654',
',,,,,,,,,,,,,654,654,,654,654,654,654,654,654,654,654,654,654,654,,',
'654,654,,,,,,,,,,654,,,,,,,,,654,765,765,765,765,765,765,765,765,765',
'765,765,765,765,765,765,765,765,765,765,765,765,765,765,765,,,,765,765',
'765,765,765,765,765,765,765,765,,,,,,765,765,765,765,765,765,765,765',
'765,,,765,,,,,,,,,765,765,,765,765,765,765,765,765,765,,,765,765,,,',
'765,765,765,765,,,,,,,,,,,,,,765,765,,765,765,765,765,765,765,765,765',
'765,765,765,,,765,,,,,228,228,,,228,,,,,,,,,228,228,765,228,228,228',
'228,228,228,228,,,228,228,,,,228,228,228,228,,,,,,228,,,,,,,,228,228',
',228,228,228,228,228,228,228,228,228,228,228,,,228,,,,,229,229,,,229',
',,,,,,,,229,229,228,229,229,229,229,229,229,229,,,229,229,,,,229,229',
'229,229,,,,,,229,,,,,,,,229,229,,229,229,229,229,229,229,229,229,229',
'229,229,,,229,,,,,473,473,,,473,,,,,,,,,473,473,229,473,473,473,473',
'473,473,473,,,473,473,,,,473,473,473,473,,,,,,473,,,,,,,,473,473,,473',
'473,473,473,473,473,473,473,473,473,473,,,473,,,,,474,474,,,474,,,,',
',,,,474,474,473,474,474,474,474,474,474,474,,,474,474,,,,474,474,474',
'474,,,,,,474,,,,,,,,474,474,,474,474,474,474,474,474,474,474,474,474',
'474,,,474,,,,,539,539,,,539,,,,,,,,,539,539,474,539,539,539,539,539',
'539,539,,,539,539,,,,539,539,539,539,,,,,,539,,,,,,,,539,539,,539,539',
'539,539,539,539,539,539,539,539,539,,,539,,,,,540,540,,,540,,,,,,,,',
'540,540,539,540,540,540,540,540,540,540,,,540,540,,,,540,540,540,540',
',,,,,540,,,,,,,,540,540,,540,540,540,540,540,540,540,540,540,540,540',
',,540,,,,,549,549,,,549,,,,,,,,,549,549,540,549,549,549,549,549,549',
'549,,,549,549,,,,549,549,549,549,,,,,,549,,,,,,,,549,549,,549,549,549',
'549,549,549,549,549,549,549,549,,,549,,,,,550,550,,,550,,,,,,,,,550',
'550,549,550,550,550,550,550,550,550,,,550,550,,,,550,550,550,550,,,',
',,550,,,,,,,,550,550,,550,550,550,550,550,550,550,550,550,550,550,,',
'550,,,,,578,578,,,578,,,,,,,,,578,578,550,578,578,578,578,578,578,578',
',,578,578,,,,578,578,578,578,,,,,,578,,,,,,,,578,578,,578,578,578,578',
'578,578,578,578,578,578,578,,,578,,,,,579,579,,,579,,,,,,,,,579,579',
'578,579,579,579,579,579,579,579,,,579,579,,,,579,579,579,579,,,,,,579',
',,,,,,,579,579,,579,579,579,579,579,579,579,579,579,579,579,,,579,,',
',,660,660,,,660,,,,,,,,,660,660,579,660,660,660,660,660,660,660,,,660',
'660,,,,660,660,660,660,,,,,,660,,,,,,,,660,660,,660,660,660,660,660',
'660,660,660,660,660,660,,,660,,,,,661,661,,,661,,,,,,,,,661,661,660',
'661,661,661,661,661,661,661,,,661,661,,,,661,661,661,661,,,,,,661,,',
',,,,,661,661,,661,661,661,661,661,661,661,661,661,661,661,,,661,,,,',
'754,754,,,754,,,,,,,,,754,754,661,754,754,754,754,754,754,754,,,754',
'754,,,,754,754,754,754,,,,,,754,,,,,,,,754,754,,754,754,754,754,754',
'754,754,754,754,754,754,,,754,,,,,755,755,,,755,,,,,,,,,755,755,754',
'755,755,755,755,755,755,755,,,755,755,,,,755,755,755,755,,,,,,755,,',
',,,,,755,755,,755,755,755,755,755,755,755,755,755,755,755,,981,755,981',
'981,981,981,981,984,,984,984,984,984,984,,,981,,,,,755,,984,,,,,,,,',
',,,,,,981,,,,,,,984,,981,981,981,981,,,,984,984,984,984,,,,,,,,,,,,',
',,,,,1033,1033,,,1033,,,,981,,,,,1033,1033,984,1033,1033,1033,1033,1033',
'1033,1033,,,1033,1033,,,,1033,1033,1033,1033,,,,,,1033,,,,,,,,1033,1033',
',1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,,,1033,,,,,1038',
'1038,,,1038,,,,,,,,,1038,1038,1033,1038,1038,1038,1038,1038,1038,1038',
',,1038,1038,,,,1038,1038,1038,1038,,,,,,1038,,,,,,,,1038,1038,,1038',
'1038,1038,1038,1038,1038,1038,1038,1038,1038,1038,,,1038,,,,,1039,1039',
',,1039,,,,,,,,,1039,1039,1038,1039,1039,1039,1039,1039,1039,1039,,,1039',
'1039,,,,1039,1039,1039,1039,,,,,,1039,,,,,,,,1039,1039,,1039,1039,1039',
'1039,1039,1039,1039,1039,1039,1039,1039,,1057,1039,1057,1057,1057,1057',
'1057,,,,,,,,,,1057,,,,,1039,,,,,,,,,,,,,,,,,1057,,,,,,,,,1057,1057,1057',
'1057,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1057' ]
        racc_action_check = arr = ::Array.new(26089, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    34,  2018,    60,   nil,   201,   nil,   nil,  6077,   763,
   nil, 23869, 24002,   -12,   nil,   -30,    60,   -17,   152,   279,
   112,   nil,   -60,  6216,  2298,   236,   nil,   -40,   nil,     0,
  1084,  1216,  6355,  6494,  6633,   nil,  2158,  6772,  6911,   nil,
   144,   208,   304,   268,   159,  7050,  7189,   489,  7328,   203,
   305,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1348,   nil,  7467,   nil,   nil,    73,   nil,  7606,  7745,   nil,
   nil,  7884,  8023,   270,   nil, 24135,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -65,   nil,   nil,   nil,   nil,   nil,   nil,   255,
   278,   284,   294,   nil,   nil, 24268,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   nil,   nil,   139,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  8162,   nil,
   nil,   nil,   nil,  8301,  8440,  8579,  8718,  8857,   323,   nil,
   605,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   331,
   nil,  2298,  8996,  9135,  9274,  9413,  9552,  9691, 24735, 24803,
   nil,   nil,  9830,  9969, 10108,   nil,   nil,   356,   -55,   -52,
   430,   162,   351,   434,   nil, 10247,  2438,   433, 10386, 10525,
 10664, 10803, 10942, 11081, 11220, 11359, 11498, 11637, 11776, 11915,
 12054, 12193, 12332, 12471, 12610, 12749, 12888, 13027, 13166, 13305,
   nil,   nil,   nil,   nil, 13444,   nil,   nil,   nil,  1876,   nil,
   nil,   434, 13583, 13722,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 13861,   nil,  2438,   nil,   406,   419,   nil, 14000,
   475, 14139,   nil,   nil, 14278, 14417,   nil,   nil,   460,   nil,
   nil, 14556,   925,   nil,   443,  2578,   464,   512,   477, 14695,
  2718,   371,   411,   458,   583,   510,   nil,   552,   531,   206,
   nil,   nil,   nil,   575,   254,   556, 14834,   nil,   308,   620,
   514,   nil,   646, 14973,   nil, 15112,  2858,  1166,   589, 15251,
 15390,   nil,    11,   -10,    -1, 15529,  2998,  3138,   476,   700,
   594,   -19,   -14,   589,   671,    -7,   703,   nil,   nil, 15668,
   nil, 15807,   112,   118,   120,   239,   344,   373,   377,   455,
   459,   nil,   461,   nil,   nil,   nil,   nil,   645,   nil,   -59,
   nil,   370,   nil,   538,   nil,   605,   378,   nil,   607,   397,
   nil,   609,   -37,   nil,   610,   -27,   nil,   443,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 24401,   nil,   nil,   nil,   nil,   624,   nil,   nil,
   612, 15946,   618,   nil,   nil,   618,   nil,   625,   182,   nil,
   nil,   nil,  2018,   nil,   nil,   nil,   nil,   nil,  2158,   637,
   nil,   nil,   641,   642,   430,   547,  1480,   nil,   nil,   nil,
   271,   403,   683,   nil,   nil,  1612,  1744,   nil,   nil,   nil,
   -33,   nil,   686, 24871, 24939, 16085,   187, 16224, 16363, 16502,
  3138,  3278,   364,   490,   714,   724,   726,   729,   976,  1430,
  1562,  3418,  3558,  3698,  3838,  3978,  4118,   844,  1039,  4258,
  4398,  2578,  1166,   806,   nil,  1876,   nil,   nil,   nil,   nil,
   690,   nil,   nil,   nil,   691,   nil,   nil, 16641,   nil,   nil,
 16780,   nil, 16919,   nil,   265,   nil,   nil,   nil, 17058,  1178,
   706,   698,   699,   nil,   nil,   703, 17197,   708, 17336, 25007,
 25075,   752,   745,   nil, 17475,   707,   nil, 17614, 17753, 25143,
 25211,  1298,  2718, 17892,   832,   831,   734,   nil,   nil,   -80,
   -68,   766,   749,   nil,   340,   776,  3278,   853,   nil,  3418,
    30,   859,   860,   861,   870,   nil,   nil, 18031, 25279, 25347,
     5,   nil,   311,   342,   308,   nil,   753,   nil,   792, 18170,
   nil,   811,   nil,   nil,   nil, 18309,   nil,   744,   nil,   773,
   774,   nil,   777,   780,   781,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   769,   685,   nil,   nil, 18448,   nil,   nil,
   nil,   882,   nil,   nil,   nil,   886,   nil,   nil,   895,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   198,   nil,   nil,   200,   nil,   nil,   nil,   826,   nil,   nil,
   830,   nil,  3558,   nil, 24534,   nil,   842, 18587, 18726, 18865,
 25415, 25483, 19004,   585,   882, 19143, 19282, 19421, 19560,   882,
   nil,   nil,   nil, 19699, 19838,   883,   nil,   nil,   nil,   189,
   216,   542,   681,   870,   869,   nil,   116,   972,   163,   nil,
   nil,   888,   nil,   996,   nil,   880,   nil,   922, 19977,   nil,
   nil, 20116,   nil,   nil,  -123, 20255,   882,   nil,   901,    -9,
    28,   951,    33,   773,   952,   916, 20394,   nil,   995,   156,
   221,   nil, 20533,   nil,   nil,   nil,   nil, 20672,   nil,   nil,
 20811,   nil,   nil,   nil,   610,   nil,  1052,   nil,   nil,   nil,
   nil,   nil,  1059,   nil, 20950,   944,    20,    29,   163,   165,
  3698,   nil,   763,   nil, 25551, 25619, 21089,   nil,   nil,   nil,
   595,  3838,  3978,   874,  1048, 24667,   165,    27,   947,   234,
   nil,   nil,   578,  1147,   nil,  1279,   nil,   471,   nil, 21228,
   nil,   949,   nil,   956,   957,   881,   962,   nil,   nil,   nil,
   nil,   936,  4118,   nil,   nil,   nil,   nil,   nil,   977,   nil,
   965, 21367,   969,   222,   274,   813,   945,  2858, 21506,   nil,
   978,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 21645, 21784, 21923, 22062,   317, 22201,   nil,   nil,  1411,
   nil,  4258,   nil,   nil,   995,   nil,   119,   nil,   nil,   nil,
   nil,   983,   160,   nil,   nil,   nil,   nil,   nil,   nil,  4398,
   nil,   984,  1026,   nil,   nil,   447,  1107,   nil,   nil, 22340,
   nil,  4538,  1108,   nil,   nil,   nil, 22479,    42,    41,  1109,
   550,   781,   nil,   993,  4678, 22618,   535,  1113,  1120,  1007,
   551,   nil,   nil,   nil,  4818,  4958,  1004,  1010,  1010,   nil,
   nil,   nil,  1011,  1012,   nil,  1021,  1036,   nil,  1041,   nil,
   nil,  1045,   980,   819,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1035,   nil,  1047,   320,   nil,   nil, 22757, 22896,  2998,
  1048,  1051,   nil,  1055,  1057,  1065,   nil,  1090,  1086,  1083,
 23035,   nil,   nil,   nil,   nil,  5098,  5238,   nil,     6, 23174,
   nil,   nil,   nil,    10,   nil,   nil,   nil, 23313,  5378,   nil,
   nil,  1222,   580,   nil,   nil,   nil,   nil,   nil,  1144,  1127,
  1235,  1010,   nil,   nil,  1543,   nil,  1675,   nil,  6793,   nil,
  6932,   nil,   nil,   nil,   nil,  1122,  1125,   nil,   325,   nil,
   nil, 25681,   nil,   nil, 25688,   nil,  8044,   nil,   nil,  1152,
 23452,   884,  1213,   nil,  1266,  5518,    19,    38,   898,  1221,
    69,   nil,  5658,   nil, 23591,   355,   nil,   nil,  5798,  5938,
   nil,   nil,   451,   nil,   nil,   nil,  1149,  1150,  1151,  1153,
  1077,  1184,  1168,   nil,   nil,  1169,  1173,  1174,  1176,   nil,
  1179,   nil,   913, 25756,   nil,   nil,  1302, 23730, 25824, 25892,
   106,   691,   nil,   nil,   nil,   nil,  1303,  1305,   nil,  1209,
 14716,   nil,   nil,   nil,   nil,  1187,   nil, 25954,   nil, 14855,
   nil, 15689,   nil, 15828,   nil,   nil,  1228,  1236,   nil,  1202,
   128,   131,   171,   174,   nil,   nil,   nil,   nil,  1202,  1208,
  1209,  1210,  1211,   162,   nil, 17218,   nil,   nil,   nil,   nil,
  1212,   nil ]

racc_action_default = [
    -1,  -648,  -647,  -648,    -2,  -634,    -4,    -5,  -648,    -8,
    -9,  -648,  -648,  -648,   -36,  -648,  -648,   -40,  -648,  -648,
  -291,   -51,  -636,  -648,   -56,   -61,   -62,   -63,   -67,  -268,
  -268,  -268,  -306,  -339,  -340,   -79,  -647,   -83,   -91,   -93,
  -648,  -535,  -536,  -648,  -648,  -648,  -648,  -227,  -648,  -636,
  -241,  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -289,  -290,
  -620,  -293,  -295,  -302,  -304,  -314,  -316,  -648,  -648,   -58,
   -58,  -634,  -648,  -324,  -331,  -648,  -341,  -342,  -344,  -345,
  -346,  -347,  -348,  -349,  -350,  -351,  -352,  -353,  -362,  -417,
  -465,  -466,  -467,  -468,  -469,  -647,  -472,  -647,  -647,  -647,
  -647,  -647,  -647,  -508,  -509,  -647,  -511,  -517,  -519,  -520,
  -521,  -522,  -618,  -524,  -525,  -619,  -527,  -528,  -529,  -530,
  -531,  -532,  -533,  -534,  -539,  -540,  1092,    -3,  -635,  -643,
  -644,  -645,    -7,  -648,  -648,  -648,  -648,  -648,  -648,   -24,
  -648,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -132,  -133,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,
  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,   -29,
  -129,  -647,  -648,  -648,  -648,  -648,  -648,  -647,  -648,  -648,
  -630,  -631,  -648,  -648,  -636,  -637,   -55,  -648,  -535,  -536,
  -648,  -291,  -648,  -648,  -233,  -648,  -647,  -648,  -648,  -648,
  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,
  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,
  -242,  -243,  -244,  -245,  -648,  -355,  -445,  -425,  -648,  -632,
  -633,   -68,  -647,  -648,  -313,  -354,  -429,  -438,  -440,   -74,
  -435,   -75,  -636,   -76,  -248,  -263,  -647,  -647,  -267,  -648,
  -273,  -648,  -647,  -612,  -648,  -648,   -77,   -78,  -634,   -17,
   -18,  -648,   -21,   -22,   -81,  -647,  -636,  -648,   -84,   -87,
  -647,   -99,  -100,  -648,  -648,  -107,  -306,  -309,  -636,  -648,
  -339,  -340,  -343,  -436,  -648,   -89,  -648,   -95,  -301,  -518,
  -648,  -221,  -222,  -648,  -234,  -648,  -647,  -297,  -636,  -647,
  -647,  -315,   -57,  -648,  -648,  -648,  -647,  -647,  -634,  -648,
  -635,  -535,  -536,  -648,  -648,  -291,  -648,  -372,  -373,  -648,
  -327,  -648,  -122,  -123,  -162,  -163,  -164,  -180,  -185,  -192,
  -195,  -334,  -648,  -535,  -536,  -607,  -608,  -567,  -470,  -648,
  -493,  -648,  -495,  -648,  -497,  -648,  -648,  -477,  -648,  -648,
  -483,  -648,  -648,  -489,  -648,  -648,  -491,  -648,  -510,  -512,
  -513,  -514,  -515,    -6,  -646,   -30,   -31,   -32,   -33,   -34,
   -10,   -11,  -648,   -26,   -27,   -28,  -130,  -648,   -37,   -39,
  -278,  -648,  -648,  -277,   -38,  -648,   -41,  -648,  -291,   -49,
   -50,  -203,  -253,  -273,   -52,   -53,   -42,  -204,  -253,  -636,
  -258,  -259,  -647,  -647,  -621,  -622,  -268,  -433,  -623,  -624,
  -622,  -621,  -268,  -432,  -434,  -623,  -624,   -48,  -211,   -54,
  -636,  -312,  -648,  -648,  -648,  -647,  -301,  -648,  -648,  -648,
  -212,  -213,  -214,  -215,  -216,  -217,  -218,  -219,  -223,  -224,
  -225,  -226,  -228,  -229,  -230,  -231,  -232,  -235,  -236,  -237,
  -238,  -636,  -246,  -648,  -446,  -268,  -621,  -622,   -65,   -69,
  -636,  -269,  -442,  -445,  -636,  -308,  -264,  -648,  -272,  -265,
  -648,  -270,  -648,  -274,  -648,  -615,  -617,   -16,  -635,   -20,
  -648,  -636,   -80,  -299,   -96,   -85,  -648,  -636,  -647,  -648,
  -648,  -106,  -648,  -518,  -648,   -92,   -97,  -648,  -648,  -648,
  -648,  -247,  -239,  -648,  -457,  -648,  -636,  -296,  -249,  -640,
  -640,  -648,  -648,  -610,  -640,  -648,  -647,  -363,  -364,  -647,
  -648,  -648,  -648,  -648,  -648,  -358,  -452,  -647,  -648,  -648,
  -301,   -58,  -117,  -118,  -648,  -120,  -648,  -291,  -647,  -648,
  -332,  -545,  -336,  -628,  -629,  -648,  -418,  -567,  -421,  -606,
  -606,  -550,  -552,  -552,  -552,  -566,  -568,  -569,  -570,  -571,
  -572,  -573,  -574,  -575,  -648,  -577,  -579,  -581,  -586,  -588,
  -589,  -591,  -596,  -598,  -599,  -601,  -602,  -603,  -648,  -471,
  -494,  -499,  -500,  -502,  -473,  -496,  -474,  -498,  -475,  -476,
  -648,  -479,  -481,  -648,  -482,  -485,  -486,  -648,  -487,  -488,
  -648,  -516,  -647,   -25,  -648,   -35,  -281,  -648,  -648,  -647,
  -648,  -648,  -648,  -437,  -648,  -260,  -262,  -648,  -648,   -70,
  -256,  -257,  -430,  -648,  -648,   -72,  -431,  -311,  -638,  -621,
  -622,  -621,  -622,  -636,  -648,  -424,  -647,   -64,  -426,  -442,
  -255,  -648,  -443,  -648,  -307,  -647,  -271,  -275,  -648,  -613,
  -614,  -648,   -19,   -23,   -82,  -648,   -88,   -94,  -636,  -621,
  -622,  -647,  -625,  -105,  -648,   -90,  -648,  -210,  -220,  -636,
  -647,  -356,  -647,  -294,  -361,  -298,  -250,  -642,  -641,  -252,
  -642,  -303,  -305,  -611,  -647,  -365,  -647,   -59,  -366,  -367,
  -319,  -320,  -648,  -322,  -648,  -636,  -621,  -622,  -625,  -300,
  -647,  -117,  -118,  -119,  -648,  -648,  -647,  -325,  -541,  -543,
  -328,  -647,  -647,  -567,  -567,  -648,  -636,  -648,  -636,  -648,
  -548,  -549,  -648,  -648,  -559,  -648,  -562,  -648,  -564,  -648,
  -374,  -648,  -376,  -378,  -381,  -384,  -636,  -580,  -590,  -600,
  -604,  -648,  -647,  -478,  -480,  -484,  -490,  -492,  -648,  -131,
  -279,  -648,  -636,  -621,  -622,  -622,  -621,  -254,  -648,  -639,
  -647,   -44,  -206,   -45,  -207,   -71,   -46,  -209,   -47,  -208,
   -73,  -648,  -648,  -648,  -648,  -437,  -648,  -406,  -407,  -636,
  -409,  -647,  -428,  -427,  -648,  -439,  -647,  -441,  -266,  -276,
  -616,   -86,  -437,   -98,  -310,   -13,   -15,  -357,  -359,  -647,
  -464,  -458,  -647,  -459,  -460,  -640,  -648,  -360,  -368,  -648,
  -370,  -647,  -648,   -60,  -321,  -448,  -648,  -648,  -437,  -648,
  -117,  -118,  -121,  -636,  -647,  -648,  -648,  -648,  -648,  -636,
  -648,  -337,  -609,  -419,  -647,  -647,  -411,  -636,  -606,  -587,
  -605,  -551,  -552,  -552,  -578,  -552,  -552,  -597,  -552,  -575,
  -592,  -636,  -648,  -648,  -383,  -576,  -501,  -504,  -505,  -506,
  -507,  -648,   -12,  -280,  -437,   -43,  -205,  -261,  -648,  -240,
  -606,  -606,  -388,  -647,  -647,  -647,  -405,  -648,  -636,  -575,
  -583,  -584,  -594,  -447,   -66,  -647,  -647,  -463,  -648,  -648,
  -462,  -251,  -317,  -648,  -371,  -318,  -449,  -648,  -647,  -323,
  -437,  -648,  -648,  -329,  -333,  -335,  -544,  -546,  -545,  -648,
  -648,  -648,  -420,  -547,  -648,  -555,  -648,  -557,  -648,  -560,
  -648,  -563,  -565,  -375,  -377,  -379,  -382,  -503,  -648,  -386,
  -387,  -396,  -390,  -398,  -648,  -401,  -648,  -403,  -408,  -648,
  -648,  -582,  -648,  -444,  -647,  -647,  -535,  -536,  -648,  -648,
  -291,  -461,  -647,  -450,  -648,  -647,  -326,  -542,  -647,  -647,
  -422,  -423,  -636,  -413,  -415,  -416,  -552,  -552,  -552,  -552,
  -648,  -648,  -606,  -585,  -389,  -647,  -647,  -647,  -647,  -595,
  -647,  -410,  -593,  -648,  -301,   -14,  -457,  -647,  -648,  -648,
  -301,  -647,  -451,  -453,  -454,  -455,  -648,  -648,  -412,  -648,
  -648,  -553,  -556,  -558,  -561,  -380,  -385,  -648,  -393,  -648,
  -395,  -648,  -399,  -648,  -402,  -404,  -300,  -625,  -456,  -636,
  -621,  -622,  -625,  -300,  -369,  -330,  -338,  -414,  -552,  -647,
  -647,  -647,  -647,  -437,  -554,  -648,  -391,  -394,  -397,  -400,
  -647,  -392 ]

clist = [
'6,277,318,233,295,295,295,131,144,144,228,381,286,290,449,4,574,351',
'279,509,555,699,297,297,297,456,462,519,433,434,345,332,332,139,220',
'720,317,420,353,354,545,409,358,762,147,147,356,357,566,569,598,856',
'446,9,335,613,352,352,467,9,352,897,691,846,770,771,332,696,128,510',
'696,339,144,131,503,505,862,894,281,289,291,127,389,605,663,780,786',
'753,893,887,895,924,407,390,831,392,394,397,400,403,406,974,144,390',
'415,416,417,418,1013,726,729,1029,976,347,733,132,1,293,306,307,2,1015',
'352,352,352,352,138,314,640,236,588,643,590,652,845,936,316,702,635',
'530,637,219,368,641,925,429,641,359,447,422,927,737,863,278,468,689',
'654,440,343,561,440,296,296,296,688,385,440,699,562,366,757,382,19,592',
'346,348,556,349,19,9,350,369,874,519,1029,589,876,1008,419,371,761,591',
'765,237,958,975,1077,926,928,295,1012,596,237,237,237,883,19,323,323',
'1015,387,457,767,444,445,696,696,512,513,836,974,427,469,470,867,450',
'466,686,473,1055,742,699,19,1043,744,413,852,237,237,834,706,237,363',
'1025,935,938,317,388,715,989,897,391,780,901,295,295,904,872,393,396',
'768,399,683,402,295,613,405,906,791,792,456,462,408,297,894,875,892',
'889,1023,1016,450,595,297,,471,894,,,,524,,,,605,518,518,1026,,19,1027',
'390,546,,237,237,237,237,19,,542,131,693,286,332,539,317,290,,825,,317',
',,,,708,570,,428,439,332,549,439,,,535,711,1035,439,560,564,,515,842',
'352,1044,711,558,563,,,432,432,963,578,,571,572,1074,,131,543,529,332',
'745,332,532,894,511,,,528,1079,780,780,711,,514,,,868,774,776,778,527',
'979,980,794,,,794,19,237,437,237,237,437,237,557,468,,447,437,237,237',
'941,314,815,,841,1009,314,296,820,,531,19,,699,144,537,296,,,,838,879',
'880,660,703,664,613,613,,573,877,878,914,,671,,613,,613,653,676,802',
'295,,,518,518,237,237,670,147,457,456,462,605,605,,237,,,,,696,,717',
',466,,450,,,,,559,,,19,684,,,19,,1056,671,323,19,780,780,811,813,,,929',
',816,818,546,,670,,669,323,695,950,546,295,675,,,,,19,1068,,,677,,457',
',,237,19,19,853,,332,,457,,,,450,466,332,586,838,586,719,873,,,,466',
'951,295,,,711,,687,,,,750,960,690,457,948,,694,,734,,,736,,,738,,,450',
'466,,760,,,704,,,766,,759,707,,812,814,,440,,,817,819,,,,,440,440,,',
',725,440,440,,,,,,,,,,,,,,,,,,,,,,,295,613,995,915,,,,1002,,833,,,457',
',237,,,,929,6,144,929,,,810,,450,466,,,,1045,832,664,798,,,,,546,965',
'967,,969,971,799,972,,,,843,1046,1047,827,,,147,,664,,,,518,671,,,676',
'19,332,,881,,9,1083,,323,,237,670,332,,,,323,,,855,850,,854,,,237,,929',
'664,,295,,916,,860,,860,,19,,457,19,,,440,812,814,819,817,237,,886,869',
'466,,,450,,,,,237,,,144,,439,237,,,,844,,,,439,439,,,,,439,439,,,664',
',,,,,,,,911,,,1051,1052,1053,1054,888,,,,,,,,,518,,886,,,430,443,,882',
',,,,,19,,1069,,,,437,237,943,933,,,827,711,905,437,437,29,916,,,437',
'437,29,952,,352,937,940,432,,,664,,,1084,,921,29,944,,,352,,,,,29,29',
'29,,29,,323,,,953,,,723,957,,959,,323,,,,521,,523,,930,525,526,740,741',
'29,743,,,,29,29,,,29,886,,,,,439,,,,,,19,982,982,982,332,,237,,,956',
',19,19,332,,993,994,962,,,,565,,,890,,,890,1005,,,973,,896,1007,898',
',,,,,,19,,,29,,,,,29,29,29,29,29,,,,437,,,,,,332,,,,,1038,,,850,1048',
',1036,,,,,,19,1041,860,922,,,923,1022,295,,921,,,921,,921,,,19,,457',
'656,982,982,982,982,,982,237,466,19,,,,450,466,,,860,,,,930,19,237,930',
',,930,664,930,,,19,19,,,29,29,29,29,29,29,29,,,,864,29,29,29,,,,,,982',
'982,982,982,,,29,,,,921,982,921,,921,,921,,,,,,,991,,,,,19,19,,697,998',
',565,,700,,921,,,19,29,29,,930,,930,,930,,930,29,,,,,,,,,,983,985,987',
'1017,,1018,,1019,,29,,930,,29,890,,,922,29,,922,1032,922,1028,,1030',
'19,,,,,,,19,,,,,,19,19,,,942,29,,,,,945,,,,29,29,29,949,,,,,,,,954,955',
',,237,787,,,,,,,,,,,32,,,,,,32,,,1078,,,,922,,922,1080,922,1081,922',
'1082,32,1058,1060,1062,1064,,1065,,800,32,32,32,,32,,,697,565,,,922',
',,1090,,,,,,,,,,,,,,1006,,32,,,,,32,32,,,32,839,,,840,,,1086,1087,1088',
'1089,,,,,,,,1091,,,,,,29,851,,,,,697,,,565,,,,,,,,,,,,,,865,,,,,,,,',
',32,,,,,32,32,32,32,32,,,,,,,,,,,29,,,,,900,,1075,1076,,29,,,,,,,,,',
',,,,,29,,913,,,,,,,,,,,29,,,29,,,,,,,,29,,,,,,,,,,,,29,,,,,,29,,,,,',
'32,32,32,32,32,32,32,,,,,32,32,32,,,,,,946,,,,,,32,,,,,,,,,,,,,,,,,',
',,,,,,,,29,,,,,,29,29,,,32,32,,,,29,29,,,565,32,29,29,,,,,,,,,,,,,,',
',,32,,,,32,,,,,32,1003,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,32,32,32,',
',,,,,,,,,,,29,,,,,,29,,1042,,,29,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29',
',,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,244,,,,,,,,29,294',
'294,294,,,32,,,,29,,29,,341,342,,344,,,,,,16,,29,29,,,16,,,,,,29,29',
',,,,,,,,,,,,,,,,,,,,16,,32,,,,,,,,,,32,,,,,,,,,,,,,,16,32,,29,29,,,',
',,367,,,,32,,29,32,,,,,,,,32,,,,,,,,,,,,32,,,,,,32,,,,,,,,,,,,,,,,,',
',,29,,,16,,,,29,,,,,16,29,29,,,,,,,,,,,,,,,,,,,,,,,32,,,,,29,32,32,294',
'442,,,448,294,,32,32,,448,,,32,32,,,,,,,,,244,,,480,481,482,483,484',
'485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501',
',,,16,502,435,,,435,,,,294,294,435,,,,,,,,294,,,,,,16,294,,294,,,294',
'294,,,,,,,32,,,,,,32,,,,,32,32,,,,,,,,,,,,,,,,,,,551,,552,,,,294,294',
',,,32,,,,,,,,,16,,,,16,,,32,,16,,,,,,,18,,,,,,18,,,,,,,,32,,,,,16,,',
',,,,,,,16,16,,32,,18,,,,,,,,32,,32,,,,,,,,294,,,,,32,32,,18,,,,,,,32',
'32,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,,448,448,448,,,,,,,,,,,,,,,,,,32,32',
',,,,,,18,,,,,32,,,,18,,,294,,,294,,294,,,,,,,,,,,,,,,,294,,,,,,,,,448',
'718,,,,,,,,,32,,,,,,,32,,,,,,32,32,,,,,,294,,,16,,,,,,,,,,,,,,,,,,18',
'32,18,,,18,,,,,,18,,,,,,,,294,16,,,16,,18,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,294,448,294,,,807,,,294,294,448,448,,,,,448,448,,,,,,,,,,,,,',
'18,,,,18,,,,,18,294,,,294,,,16,,,,,,435,,,,,,,,,435,435,,294,18,,435',
'435,294,,,294,,,18,18,,,,,20,,,,,294,20,,,,,,,,,,,294,,,,,,,,,,,,,,',
',,20,325,325,,,,294,,,,,,,,,,,,,,,,,,,,20,,294,16,,,,,,448,365,,,,16',
'16,,,,,,,448,448,448,448,,919,,,,,,,,,,41,,,,,,41,,16,,,,,,,,,,,,,,',
',435,,,,,20,294,,,,41,321,321,,20,,,,,,,,,16,,,,,,,,,,,,,41,,,,,16,',
',,18,361,,,383,,,,16,,,,294,448,,,,,,,,16,,,,,,,,,,16,16,,,,,,18,,,18',
'294,,,,,,,,,,,20,,438,,41,438,,,,,,438,,41,,,,,,,,,,,,20,,,,16,16,,',
'1001,,,,,,,,,16,,,,294,,42,,,,,,42,,,,,,,,,,,,,,,,,18,,,,,,18,,294,',
',42,322,322,,18,18,,16,20,,18,18,20,,16,41,325,20,,,16,16,,,,,42,,,',
',,,325,,,362,,,384,41,,,20,,,,,,,,,,20,20,,,,,,,,,,,,587,,587,,,,,,',
',,,,,,,,,,,,18,,,,,42,,,,,,18,18,,42,,,,41,,,,41,,,,321,41,,,,,,,,,',
',,,,,18,321,,,,,,,,,,41,,,,,18,,,,,41,41,,,,,,,,,,,,383,,383,,,18,,',
',,,,,,,,,,,,,,42,18,,,,,,,,,,,,18,,,,,,,,,,,,42,18,,,,,,,,,,18,18,,',
'20,,,,,,,,325,,,,,,,,325,,,,,,,,,,,,,,,,,,,,,,20,,,20,,,,,,18,18,,42',
',,,42,,,,322,42,18,,,,,,,,,,,,,,,322,,,,,,,,,,42,,,,,,,,,,42,42,41,',
',,,,,,321,,18,384,,384,,,321,18,,,,,,18,18,,,20,,,,,,438,,,,,41,,,41',
'438,438,,,,,438,438,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,325,,,,,,,,,,,325',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,20,,,,,,,,,,,20,20,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,910,20,,,42,,,,,,,321,322,,,,,438,,,322,,321,,,,,,,,,',
',,,,,,,,20,,42,,,42,,,,,,,,,,,41,,20,,,,,,,,,41,41,,20,,,,,,,,,,,,,20',
',,,,,,,,,20,20,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,41,,587',
',,,,20,20,,,1000,,,,,,,41,,20,,,,,,,,,,41,,,,,,,,,,,,,41,322,,,,,,,',
',41,41,322,,,,,,,587,,,,,20,,,,,,,20,,,,,,20,20,,,,,,,,42,,,,,,,,,,383',
'42,42,,,41,41,,,996,,,,,,,,,41,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,',
',,,,,,383,,,,,41,,,,,,42,41,,,,,,41,41,,,,,,,,,,42,,,,,,,,,,,,42,,,',
',,,,,,,,,42,,,,,,,,,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,384,,,,,42,42,,,997,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,384,,,,,42,,,,,,,42,,,,,,42,42' ]
        racc_goto_table = arr = ::Array.new(3669, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,171,63,40,46,46,46,118,71,71,38,70,85,85,36,2,113,102,38,52,12,220',
'84,84,84,50,50,87,29,29,40,78,78,22,22,15,14,10,24,24,65,70,24,121,73',
'73,42,42,106,106,170,107,33,9,64,209,31,31,33,9,31,215,53,17,153,153',
'78,88,8,36,88,76,71,118,172,50,109,210,51,51,51,5,188,204,37,146,147',
'68,159,162,159,158,188,6,160,6,6,6,6,6,6,145,71,6,24,24,24,24,164,83',
'83,216,148,9,83,7,1,58,58,58,3,165,31,31,31,31,11,59,192,27,69,192,69',
'13,16,18,60,20,193,21,193,23,26,193,159,30,193,5,75,32,162,43,45,49',
'75,55,74,25,79,81,25,82,82,82,86,98,25,220,101,115,117,122,35,123,124',
'125,126,127,35,9,128,129,130,87,216,131,132,133,9,134,135,136,137,35',
'138,149,164,150,156,46,163,166,35,35,35,167,35,35,35,165,168,85,169',
'31,31,88,88,174,175,177,145,14,31,31,178,6,71,180,38,148,113,220,35',
'181,182,7,183,35,35,53,65,35,35,158,160,184,14,187,65,162,215,189,146',
'147,46,46,146,68,190,191,170,194,36,195,46,209,196,197,198,199,50,50',
'202,84,210,203,208,212,213,159,6,219,84,,61,210,,,,188,,,,204,6,6,159',
',35,159,6,63,,35,35,35,35,35,,40,118,172,85,78,38,14,85,,37,,14,,,,',
'36,24,,27,27,78,38,27,,,64,50,17,27,84,84,,61,37,31,109,50,6,6,,,82',
'82,153,38,,14,14,107,,118,76,9,78,36,78,61,210,58,,,8,159,146,146,50',
',58,,,37,207,207,207,5,153,153,193,,,193,35,35,35,35,35,35,35,61,75',
',75,35,35,35,83,59,52,,65,121,59,82,52,,60,35,,220,71,60,82,,,,87,170',
'170,38,10,40,209,209,,5,12,12,37,,85,,209,,209,22,85,36,46,,,6,6,35',
'35,6,73,85,50,50,204,204,,35,,,,,88,,75,,71,,6,,,,,82,,,35,40,,,35,',
'153,85,35,35,146,146,33,33,,,209,,33,33,63,,6,,51,35,84,37,63,46,51',
',,,,35,15,,,61,,85,,,35,35,35,29,,78,,85,,,,6,71,78,35,87,35,31,36,',
',,71,12,46,,,50,,51,,,,42,12,61,85,106,,61,,14,,,14,,,118,,,6,71,,31',
',,61,,,31,,6,61,,75,75,,25,,,75,75,,,,,25,25,,,,61,25,25,,,,,,,,,,,',
',,,,,,,,,,,46,209,106,33,,,,106,,102,,,85,,35,,,,209,6,71,209,,,84,',
'6,71,,,,113,171,40,2,,,,,63,207,207,,207,207,22,207,,,,63,12,12,6,,',
'73,,40,,,,6,85,,,85,35,78,,70,,9,37,,35,,35,6,78,,,,35,,,84,6,,6,,,35',
',209,40,,46,,75,,6,,6,,35,,85,35,,,25,75,75,75,75,35,,40,14,71,,,6,',
',,,35,,,71,,27,35,,,,61,,,,27,27,,,,,27,27,,,40,,,,,,,,,14,,,207,207',
'207,207,152,,,,,,,,,6,,40,,,80,80,,61,,,,,,35,,36,,,,35,35,24,14,,,6',
'50,61,35,35,54,75,,,35,35,54,24,,31,14,6,82,,,40,,,207,,152,54,14,,',
'31,,,,,54,54,54,,54,,35,,,118,,,100,118,,14,,35,,,,80,,80,,211,80,80',
'100,100,54,100,,,,54,54,,,54,40,,,,,27,,,,,,35,6,6,6,78,,35,,,61,,35',
'35,78,,14,14,61,,,,80,,,154,,,154,14,,,61,,157,118,157,,,,,,,35,,,54',
',,,,54,54,54,54,54,,,,35,,,,,,78,,,,,38,,,6,40,,14,,,,,,35,14,6,154',
',,157,152,46,,152,,,152,,152,,,35,,85,80,6,6,6,6,,6,35,71,35,,,,6,71',
',,6,,,,211,35,35,211,,,211,40,211,,,35,35,,,54,54,54,54,54,54,54,,,',
'100,54,54,54,,,,,,6,6,6,6,,,54,,,,152,6,152,,152,,152,,,,,,,35,,,,,35',
'35,,80,35,,80,,80,,152,,,35,54,54,,211,,211,,211,,211,54,,,,,,,,,,155',
'155,155,157,,157,,157,,54,,211,,54,154,,,154,54,,154,35,154,157,,157',
'35,,,,,,,35,,,,,,35,35,,,100,54,,,,,100,,,,54,54,54,100,,,,,,,,100,100',
',,35,80,,,,,,,,,,,57,,,,,,57,,,157,,,,154,,154,157,154,157,154,157,57',
'155,155,155,155,,155,,80,57,57,57,,57,,,80,80,,,154,,,157,,,,,,,,,,',
',,,100,,57,,,,,57,57,,,57,80,,,80,,,155,155,155,155,,,,,,,,155,,,,,',
'54,80,,,,,80,,,80,,,,,,,,,,,,,,80,,,,,,,,,,57,,,,,57,57,57,57,57,,,',
',,,,,,,54,,,,,80,,100,100,,54,,,,,,,,,,,,,,,54,,80,,,,,,,,,,,54,,,54',
',,,,,,,54,,,,,,,,,,,,54,,,,,,54,,,,,,57,57,57,57,57,57,57,,,,,57,57',
'57,,,,,,80,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,54,,,,,,54,54,,,57,57,,',
',54,54,,,80,57,54,54,,,,,,,,,,,,,,,,,57,,,,57,,,,,57,80,,,,,,,,,,,,',
',,,,,,,,,,,,57,,,,,,,,,57,57,57,,,,,,,,,,,,,54,,,,,,54,,80,,,54,54,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,54,,,,,,,,,,,,,,,,54,,,,,,,,,,,,,,,,,,,',
',,,54,,,,,,,,,,41,,,,,,,,54,41,41,41,,,57,,,,54,,54,,41,41,,41,,,,,',
'28,,54,54,,,28,,,,,,54,54,,,,,,,,,,,,,,,,,,,,,28,,57,,,,,,,,,,57,,,',
',,,,,,,,,,28,57,,54,54,,,,,,28,,,,57,,54,57,,,,,,,,57,,,,,,,,,,,,57',
',,,,,57,,,,,,,,,,,,,,,,,,,,54,,,28,,,,54,,,,,28,54,54,,,,,,,,,,,,,,',
',,,,,,,,57,,,,,54,57,57,41,41,,,41,41,,57,57,,41,,,57,57,,,,,,,,,41',
',,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41',
',,,28,41,28,,,28,,,,41,41,28,,,,,,,,41,,,,,,28,41,,41,,,41,41,,,,,,',
'57,,,,,,57,,,,,57,57,,,,,,,,,,,,,,,,,,,41,,41,,,,41,41,,,,57,,,,,,,',
',28,,,,28,,,57,,28,,,,,,,34,,,,,,34,,,,,,,,57,,,,,28,,,,,,,,,,28,28',
',57,,34,,,,,,,,57,,57,,,,,,,,41,,,,,57,57,,34,,,,,,,57,57,,,,,,,,,,',
',,,,,,,,,,,,,,,,,41,,41,41,41,,,,,,,,,,,,,,,,,,57,57,,,,,,,34,,,,,57',
',,,34,,,41,,,41,,41,,,,,,,,,,,,,,,,41,,,,,,,,,41,41,,,,,,,,,57,,,,,',
',57,,,,,,57,57,,,,,,41,,,28,,,,,,,,,,,,,,,,,,34,57,34,,,34,,,,,,34,',
',,,,,,41,28,,,28,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,41,41,,,41',
',,41,41,41,41,,,,,41,41,,,,,,,,,,,,,,34,,,,34,,,,,34,41,,,41,,,28,,',
',,,28,,,,,,,,,28,28,,41,34,,28,28,41,,,41,,,34,34,,,,,39,,,,,41,39,',
',,,,,,,,,41,,,,,,,,,,,,,,,,,39,39,39,,,,41,,,,,,,,,,,,,,,,,,,,39,,41',
'28,,,,,,41,39,,,,28,28,,,,,,,41,41,41,41,,41,,,,,,,,,,66,,,,,,66,,28',
',,,,,,,,,,,,,,,28,,,,,39,41,,,,66,66,66,,39,,,,,,,,,28,,,,,,,,,,,,,66',
',,,,28,,,,34,66,,,66,,,,28,,,,41,41,,,,,,,,28,,,,,,,,,,28,28,,,,,,34',
',,34,41,,,,,,,,,,,39,,39,,66,39,,,,,,39,,66,,,,,,,,,,,,39,,,,28,28,',
',28,,,,,,,,,28,,,,41,,67,,,,,,67,,,,,,,,,,,,,,,,,34,,,,,,34,,41,,,67',
'67,67,,34,34,,28,39,,34,34,39,,28,66,39,39,,,28,28,,,,,67,,,,,,,39,',
',67,,,67,66,,,39,,,,,,,,,,39,39,,,,,,,,,,,,39,,39,,,,,,,,,,,,,,,,,,',
'34,,,,,67,,,,,,34,34,,67,,,,66,,,,66,,,,66,66,,,,,,,,,,,,,,,34,66,,',
',,,,,,,66,,,,,34,,,,,66,66,,,,,,,,,,,,66,,66,,,34,,,,,,,,,,,,,,,,,67',
'34,,,,,,,,,,,,34,,,,,,,,,,,,67,34,,,,,,,,,,34,34,,,39,,,,,,,,39,,,,',
',,,39,,,,,,,,,,,,,,,,,,,,,,39,,,39,,,,,,34,34,,67,,,,67,,,,67,67,34',
',,,,,,,,,,,,,,67,,,,,,,,,,67,,,,,,,,,,67,67,66,,,,,,,,66,,34,67,,67',
',,66,34,,,,,,34,34,,,39,,,,,,39,,,,,66,,,66,39,39,,,,,39,39,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,66,39,,,,,,,,,,,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,39,,,67,,,,,',
',66,67,,,,,39,,,67,,66,,,,,,,,,,,,,,,,,,39,,67,,,67,,,,,,,,,,,66,,39',
',,,,,,,,66,66,,39,,,,,,,,,,,,,39,,,,,,,,,,39,39,,,,66,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,67,,,,,,,,,66,,39,,,,,39,39,,,39,,,,,,,66,,39,,,,,,,',
',,66,,,,,,,,,,,,,66,67,,,,,,,,,66,66,67,,,,,,,39,,,,,39,,,,,,,39,,,',
',,39,39,,,,,,,,67,,,,,,,,,,66,67,67,,,66,66,,,66,,,,,,,,,66,,,,,,,,',
',,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,66,,,,,,67,66,,,,,,66,66,',
',,,,,,,,67,,,,,,,,,,,,67,,,,,,,,,,,,,67,,,,,,,,,,67,67,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,67,67,,,67,,,,,,,,,67,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,67,,,,,,,67,,,,,,67,67' ]
        racc_goto_check = arr = ::Array.new(3669, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   116,    13,   120,   nil,    76,    -2,   107,    63,    51,
  -101,   116,  -326,  -288,     0,  -519,  -586,  -657,  -710,   nil,
  -391,  -174,    22,   129,   -29,   -66,    70,   106,  1707,  -194,
   -77,   -11,    10,  -174,  2032,   170,  -213,  -365,    -9,  2392,
   -19,  1655,   -23,  -419,   nil,  -585,   -28,   nil,   nil,   126,
  -203,    49,  -262,  -450,   837,  -353,   nil,  1217,    85,    91,
   100,    50,   nil,   -35,    16,  -296,  2489,  2659,  -497,  -239,
   -64,    -3,   nil,    33,  -270,   -78,    27,   nil,    -6,   111,
   591,  -190,   129,  -450,   -10,   -17,  -341,  -270,  -450,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    90,   nil,
   326,  -182,   -48,   nil,   nil,   nil,  -305,  -683,   nil,  -660,
   nil,   nil,   nil,  -343,   nil,    97,   nil,  -418,     2,   nil,
   nil,  -548,    96,  -209,   113,   113,  -171,   114,   116,   108,
  -575,  -185,  -574,  -766,   115,  -400,  -190,  -400,  -687,   nil,
   nil,   nil,   nil,   nil,   nil,  -801,  -529,  -528,  -791,  -707,
  -632,   nil,    30,  -535,   175,   216,  -631,   178,  -738,  -685,
  -592,   nil,  -679,  -761,  -853,  -840,  -186,  -562,   121,  -384,
  -337,   -24,  -202,   nil,   -70,   -70,   nil,  -473,  -520,   nil,
  -277,  -772,  -342,  -486,  -607,   nil,   nil,   155,   -13,   154,
   160,   160,  -268,  -253,   161,   162,   164,  -524,  -364,  -364,
   nil,   nil,   167,  -483,  -304,   nil,   nil,  -221,  -497,  -332,
  -696,    65,  -492,  -700,   nil,  -714,  -873,   nil,   nil,  -105,
  -499 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   309,     7,   360,   312,
   nil,   nil,   nil,   nil,   554,   nil,   nil,   nil,   nil,   308,
   310,   nil,   nil,   nil,   nil,    14,    15,    21,   242,   nil,
   nil,    17,   nil,   436,   243,   340,   nil,   nil,   755,   241,
   472,    24,   nil,   nil,   355,   nil,    25,    26,    27,   nil,
   714,   nil,   nil,   nil,   329,   nil,    28,   326,   451,    35,
   nil,   nil,    37,    40,    39,   nil,   238,   239,   585,   nil,
   146,   459,   145,    91,   nil,   441,   107,    47,    50,   274,
   300,   nil,   452,   nil,   453,   464,   672,   516,   298,   283,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
   nil,   nil,   284,    65,    66,    67,   nil,   nil,    68,   858,
    69,    70,    71,   nil,    72,   nil,    73,   nil,   567,    74,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   288,
   276,   722,   849,   576,   859,   782,   612,   nil,   783,   784,
  1024,   920,   600,   nil,   601,   nil,   nil,   602,   nil,   604,
   nil,   828,   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   463,   nil,   nil,   692,   nil,   nil,   504,
   nil,   nil,   nil,   nil,   nil,    90,    92,    94,   nil,   nil,
   nil,   nil,   nil,   630,   nil,   nil,   nil,   nil,   nil,   nil,
   103,   104,   nil,   nil,   891,   764,   599,   nil,   603,   899,
   615,   617,   618,   931,   621,   622,   932,   625,   628,   nil,
   303 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  3, 151, :_reduce_6,
  2, 151, :_reduce_none,
  1, 154, :_reduce_none,
  0, 158, :_reduce_9,
  3, 154, :_reduce_10,
  0, 160, :_reduce_11,
  4, 157, :_reduce_12,
  0, 165, :_reduce_13,
  6, 159, :_reduce_14,
  3, 159, :_reduce_15,
  2, 161, :_reduce_16,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  3, 166, :_reduce_19,
  2, 166, :_reduce_20,
  1, 167, :_reduce_none,
  0, 168, :_reduce_22,
  3, 167, :_reduce_23,
  0, 179, :_reduce_24,
  4, 156, :_reduce_25,
  3, 156, :_reduce_26,
  3, 156, :_reduce_27,
  3, 156, :_reduce_28,
  2, 156, :_reduce_29,
  3, 156, :_reduce_30,
  3, 156, :_reduce_31,
  3, 156, :_reduce_32,
  3, 156, :_reduce_33,
  3, 156, :_reduce_34,
  4, 156, :_reduce_35,
  1, 156, :_reduce_none,
  3, 156, :_reduce_37,
  3, 156, :_reduce_38,
  3, 156, :_reduce_39,
  1, 156, :_reduce_none,
  3, 172, :_reduce_41,
  3, 172, :_reduce_42,
  6, 172, :_reduce_43,
  5, 172, :_reduce_44,
  5, 172, :_reduce_45,
  5, 172, :_reduce_46,
  5, 172, :_reduce_47,
  3, 172, :_reduce_48,
  1, 180, :_reduce_49,
  1, 180, :_reduce_none,
  1, 178, :_reduce_none,
  3, 178, :_reduce_52,
  3, 178, :_reduce_53,
  3, 178, :_reduce_54,
  2, 178, :_reduce_55,
  1, 178, :_reduce_none,
  1, 171, :_reduce_57,
  0, 191, :_reduce_58,
  0, 192, :_reduce_59,
  4, 189, :_reduce_60,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 194, :_reduce_none,
  4, 194, :_reduce_64,
  0, 202, :_reduce_65,
  4, 199, :_reduce_66,
  1, 201, :_reduce_67,
  2, 193, :_reduce_68,
  3, 193, :_reduce_69,
  4, 193, :_reduce_70,
  5, 193, :_reduce_71,
  4, 193, :_reduce_72,
  5, 193, :_reduce_73,
  2, 193, :_reduce_74,
  2, 193, :_reduce_75,
  2, 193, :_reduce_76,
  2, 193, :_reduce_77,
  2, 193, :_reduce_78,
  1, 173, :_reduce_none,
  3, 173, :_reduce_80,
  1, 207, :_reduce_none,
  3, 207, :_reduce_82,
  1, 206, :_reduce_83,
  2, 206, :_reduce_84,
  3, 206, :_reduce_85,
  5, 206, :_reduce_86,
  2, 206, :_reduce_87,
  4, 206, :_reduce_88,
  2, 206, :_reduce_89,
  4, 206, :_reduce_90,
  1, 206, :_reduce_91,
  3, 206, :_reduce_92,
  1, 210, :_reduce_none,
  3, 210, :_reduce_94,
  2, 209, :_reduce_95,
  3, 209, :_reduce_96,
  1, 212, :_reduce_97,
  3, 212, :_reduce_98,
  1, 211, :_reduce_99,
  1, 211, :_reduce_100,
  4, 211, :_reduce_101,
  3, 211, :_reduce_102,
  3, 211, :_reduce_103,
  3, 211, :_reduce_104,
  3, 211, :_reduce_105,
  2, 211, :_reduce_106,
  1, 211, :_reduce_107,
  1, 175, :_reduce_108,
  1, 175, :_reduce_109,
  4, 175, :_reduce_110,
  3, 175, :_reduce_111,
  3, 175, :_reduce_112,
  3, 175, :_reduce_113,
  3, 175, :_reduce_114,
  2, 175, :_reduce_115,
  1, 175, :_reduce_116,
  1, 215, :_reduce_117,
  1, 215, :_reduce_none,
  2, 216, :_reduce_119,
  1, 216, :_reduce_120,
  3, 216, :_reduce_121,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_125,
  1, 217, :_reduce_none,
  1, 169, :_reduce_127,
  1, 169, :_reduce_none,
  1, 170, :_reduce_129,
  0, 221, :_reduce_130,
  4, 170, :_reduce_131,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 188, :_reduce_203,
  3, 188, :_reduce_204,
  6, 188, :_reduce_205,
  5, 188, :_reduce_206,
  5, 188, :_reduce_207,
  5, 188, :_reduce_208,
  5, 188, :_reduce_209,
  4, 188, :_reduce_210,
  3, 188, :_reduce_211,
  3, 188, :_reduce_212,
  3, 188, :_reduce_213,
  3, 188, :_reduce_214,
  3, 188, :_reduce_215,
  3, 188, :_reduce_216,
  3, 188, :_reduce_217,
  3, 188, :_reduce_218,
  3, 188, :_reduce_219,
  4, 188, :_reduce_220,
  2, 188, :_reduce_221,
  2, 188, :_reduce_222,
  3, 188, :_reduce_223,
  3, 188, :_reduce_224,
  3, 188, :_reduce_225,
  3, 188, :_reduce_226,
  1, 188, :_reduce_none,
  3, 188, :_reduce_228,
  3, 188, :_reduce_229,
  3, 188, :_reduce_230,
  3, 188, :_reduce_231,
  3, 188, :_reduce_232,
  2, 188, :_reduce_233,
  2, 188, :_reduce_234,
  3, 188, :_reduce_235,
  3, 188, :_reduce_236,
  3, 188, :_reduce_237,
  3, 188, :_reduce_238,
  3, 188, :_reduce_239,
  6, 188, :_reduce_240,
  1, 188, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  3, 224, :_reduce_246,
  3, 224, :_reduce_247,
  1, 227, :_reduce_248,
  1, 228, :_reduce_none,
  2, 228, :_reduce_250,
  4, 228, :_reduce_251,
  2, 228, :_reduce_252,
  1, 222, :_reduce_none,
  3, 222, :_reduce_254,
  3, 232, :_reduce_255,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_260,
  4, 183, :_reduce_261,
  2, 183, :_reduce_262,
  1, 205, :_reduce_263,
  2, 205, :_reduce_264,
  2, 205, :_reduce_265,
  4, 205, :_reduce_266,
  1, 205, :_reduce_267,
  0, 236, :_reduce_268,
  2, 198, :_reduce_269,
  2, 235, :_reduce_270,
  2, 234, :_reduce_271,
  1, 234, :_reduce_none,
  1, 229, :_reduce_273,
  2, 229, :_reduce_274,
  3, 229, :_reduce_275,
  4, 229, :_reduce_276,
  1, 177, :_reduce_277,
  1, 177, :_reduce_278,
  3, 176, :_reduce_279,
  4, 176, :_reduce_280,
  2, 176, :_reduce_281,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_292,
  0, 271, :_reduce_293,
  4, 225, :_reduce_294,
  0, 272, :_reduce_295,
  3, 225, :_reduce_296,
  0, 273, :_reduce_297,
  4, 225, :_reduce_298,
  3, 225, :_reduce_299,
  3, 225, :_reduce_300,
  2, 225, :_reduce_301,
  0, 274, :_reduce_302,
  4, 225, :_reduce_303,
  0, 275, :_reduce_304,
  4, 225, :_reduce_305,
  1, 225, :_reduce_306,
  4, 225, :_reduce_307,
  3, 225, :_reduce_308,
  1, 225, :_reduce_309,
  5, 225, :_reduce_310,
  4, 225, :_reduce_311,
  3, 225, :_reduce_312,
  2, 225, :_reduce_313,
  1, 225, :_reduce_none,
  2, 225, :_reduce_315,
  1, 225, :_reduce_316,
  6, 225, :_reduce_317,
  6, 225, :_reduce_318,
  4, 225, :_reduce_319,
  4, 225, :_reduce_320,
  5, 225, :_reduce_321,
  4, 225, :_reduce_322,
  6, 225, :_reduce_323,
  0, 276, :_reduce_324,
  0, 277, :_reduce_325,
  7, 225, :_reduce_326,
  0, 278, :_reduce_327,
  0, 279, :_reduce_328,
  0, 280, :_reduce_329,
  9, 225, :_reduce_330,
  0, 281, :_reduce_331,
  0, 282, :_reduce_332,
  6, 225, :_reduce_333,
  0, 283, :_reduce_334,
  6, 225, :_reduce_335,
  0, 284, :_reduce_336,
  0, 285, :_reduce_337,
  9, 225, :_reduce_338,
  1, 225, :_reduce_339,
  1, 225, :_reduce_340,
  1, 225, :_reduce_341,
  1, 225, :_reduce_342,
  1, 182, :_reduce_343,
  1, 246, :_reduce_none,
  1, 252, :_reduce_none,
  1, 255, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 261, :_reduce_none,
  1, 263, :_reduce_351,
  1, 266, :_reduce_352,
  1, 267, :_reduce_353,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 163, :_reduce_none,
  1, 291, :_reduce_none,
  1, 247, :_reduce_none,
  1, 204, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 253, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 254, :_reduce_none,
  5, 254, :_reduce_369,
  1, 256, :_reduce_none,
  2, 256, :_reduce_371,
  1, 262, :_reduce_none,
  1, 262, :_reduce_373,
  1, 292, :_reduce_none,
  3, 292, :_reduce_375,
  1, 295, :_reduce_376,
  3, 295, :_reduce_377,
  1, 294, :_reduce_378,
  3, 294, :_reduce_379,
  5, 294, :_reduce_380,
  1, 294, :_reduce_381,
  3, 294, :_reduce_382,
  2, 296, :_reduce_383,
  1, 296, :_reduce_384,
  4, 297, :_reduce_385,
  2, 297, :_reduce_386,
  2, 297, :_reduce_387,
  1, 297, :_reduce_388,
  2, 302, :_reduce_389,
  1, 302, :_reduce_none,
  6, 303, :_reduce_391,
  8, 303, :_reduce_392,
  4, 303, :_reduce_393,
  6, 303, :_reduce_394,
  4, 303, :_reduce_395,
  2, 303, :_reduce_396,
  6, 303, :_reduce_397,
  2, 303, :_reduce_398,
  4, 303, :_reduce_399,
  6, 303, :_reduce_400,
  2, 303, :_reduce_401,
  4, 303, :_reduce_402,
  2, 303, :_reduce_403,
  4, 303, :_reduce_404,
  1, 303, :_reduce_405,
  1, 307, :_reduce_406,
  1, 307, :_reduce_407,
  3, 308, :_reduce_408,
  1, 308, :_reduce_409,
  4, 308, :_reduce_410,
  1, 309, :_reduce_none,
  4, 309, :_reduce_412,
  1, 310, :_reduce_413,
  3, 310, :_reduce_414,
  1, 311, :_reduce_415,
  1, 311, :_reduce_none,
  0, 315, :_reduce_417,
  0, 316, :_reduce_418,
  5, 251, :_reduce_419,
  4, 313, :_reduce_420,
  1, 313, :_reduce_421,
  3, 314, :_reduce_422,
  3, 314, :_reduce_423,
  3, 318, :_reduce_424,
  2, 195, :_reduce_425,
  4, 195, :_reduce_426,
  5, 195, :_reduce_427,
  5, 195, :_reduce_428,
  2, 250, :_reduce_429,
  4, 250, :_reduce_430,
  4, 250, :_reduce_431,
  3, 250, :_reduce_432,
  3, 250, :_reduce_433,
  3, 250, :_reduce_434,
  2, 250, :_reduce_435,
  1, 250, :_reduce_436,
  4, 250, :_reduce_437,
  0, 321, :_reduce_438,
  4, 249, :_reduce_439,
  0, 322, :_reduce_440,
  4, 249, :_reduce_441,
  0, 323, :_reduce_442,
  0, 324, :_reduce_443,
  4, 200, :_reduce_444,
  0, 326, :_reduce_445,
  0, 327, :_reduce_446,
  4, 319, :_reduce_447,
  1, 325, :_reduce_448,
  2, 325, :_reduce_449,
  3, 325, :_reduce_450,
  4, 325, :_reduce_451,
  0, 329, :_reduce_452,
  6, 260, :_reduce_453,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  6, 162, :_reduce_456,
  0, 162, :_reduce_457,
  1, 330, :_reduce_458,
  1, 330, :_reduce_none,
  1, 330, :_reduce_none,
  2, 331, :_reduce_461,
  1, 331, :_reduce_none,
  2, 164, :_reduce_463,
  1, 164, :_reduce_none,
  1, 237, :_reduce_465,
  1, 237, :_reduce_none,
  1, 238, :_reduce_467,
  1, 333, :_reduce_468,
  1, 333, :_reduce_none,
  2, 333, :_reduce_470,
  3, 334, :_reduce_471,
  1, 334, :_reduce_472,
  3, 239, :_reduce_473,
  3, 240, :_reduce_474,
  3, 241, :_reduce_475,
  3, 241, :_reduce_476,
  1, 338, :_reduce_477,
  3, 338, :_reduce_478,
  1, 339, :_reduce_none,
  2, 339, :_reduce_480,
  3, 243, :_reduce_481,
  3, 243, :_reduce_482,
  1, 341, :_reduce_483,
  3, 341, :_reduce_484,
  3, 242, :_reduce_485,
  3, 242, :_reduce_486,
  3, 244, :_reduce_487,
  3, 244, :_reduce_488,
  1, 342, :_reduce_489,
  3, 342, :_reduce_490,
  1, 343, :_reduce_491,
  3, 343, :_reduce_492,
  1, 335, :_reduce_493,
  2, 335, :_reduce_494,
  1, 336, :_reduce_495,
  2, 336, :_reduce_496,
  1, 337, :_reduce_497,
  2, 337, :_reduce_498,
  1, 340, :_reduce_499,
  0, 345, :_reduce_500,
  3, 340, :_reduce_501,
  0, 346, :_reduce_502,
  4, 340, :_reduce_503,
  1, 344, :_reduce_504,
  1, 344, :_reduce_505,
  1, 344, :_reduce_506,
  1, 344, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 347, :_reduce_510,
  1, 347, :_reduce_511,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  3, 348, :_reduce_516,
  1, 332, :_reduce_none,
  2, 332, :_reduce_518,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_528,
  1, 214, :_reduce_529,
  1, 214, :_reduce_530,
  1, 214, :_reduce_531,
  1, 214, :_reduce_532,
  1, 214, :_reduce_533,
  1, 214, :_reduce_534,
  1, 245, :_reduce_535,
  1, 245, :_reduce_536,
  1, 181, :_reduce_537,
  1, 181, :_reduce_538,
  1, 186, :_reduce_539,
  1, 186, :_reduce_540,
  0, 350, :_reduce_541,
  4, 264, :_reduce_542,
  1, 264, :_reduce_543,
  3, 268, :_reduce_544,
  0, 352, :_reduce_545,
  3, 268, :_reduce_546,
  4, 351, :_reduce_547,
  2, 351, :_reduce_548,
  2, 351, :_reduce_549,
  1, 351, :_reduce_none,
  2, 354, :_reduce_551,
  0, 354, :_reduce_552,
  6, 317, :_reduce_553,
  8, 317, :_reduce_554,
  4, 317, :_reduce_555,
  6, 317, :_reduce_556,
  4, 317, :_reduce_557,
  6, 317, :_reduce_558,
  2, 317, :_reduce_559,
  4, 317, :_reduce_560,
  6, 317, :_reduce_561,
  2, 317, :_reduce_562,
  4, 317, :_reduce_563,
  2, 317, :_reduce_564,
  4, 317, :_reduce_565,
  1, 317, :_reduce_566,
  0, 317, :_reduce_567,
  1, 312, :_reduce_568,
  1, 312, :_reduce_569,
  1, 312, :_reduce_570,
  1, 312, :_reduce_571,
  1, 293, :_reduce_none,
  1, 293, :_reduce_573,
  1, 356, :_reduce_none,
  1, 357, :_reduce_none,
  3, 357, :_reduce_576,
  1, 304, :_reduce_577,
  3, 304, :_reduce_578,
  1, 358, :_reduce_none,
  2, 359, :_reduce_580,
  1, 359, :_reduce_581,
  2, 360, :_reduce_582,
  1, 360, :_reduce_583,
  1, 298, :_reduce_none,
  3, 298, :_reduce_585,
  1, 353, :_reduce_none,
  3, 353, :_reduce_587,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 299, :_reduce_590,
  1, 299, :_reduce_591,
  3, 362, :_reduce_592,
  3, 363, :_reduce_593,
  1, 305, :_reduce_594,
  3, 305, :_reduce_595,
  1, 355, :_reduce_596,
  3, 355, :_reduce_597,
  1, 364, :_reduce_none,
  1, 364, :_reduce_none,
  2, 306, :_reduce_600,
  1, 306, :_reduce_601,
  1, 365, :_reduce_none,
  1, 365, :_reduce_none,
  2, 301, :_reduce_604,
  2, 300, :_reduce_605,
  0, 300, :_reduce_606,
  1, 269, :_reduce_none,
  0, 366, :_reduce_608,
  4, 269, :_reduce_609,
  1, 248, :_reduce_610,
  2, 248, :_reduce_none,
  1, 231, :_reduce_none,
  3, 231, :_reduce_613,
  3, 367, :_reduce_614,
  2, 367, :_reduce_615,
  4, 367, :_reduce_616,
  2, 367, :_reduce_617,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 208, :_reduce_none,
  2, 184, :_reduce_none,
  0, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 265, :_reduce_643,
  1, 265, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_646,
  0, 153, :_reduce_647 ]

racc_reduce_n = 648

racc_shift_n = 1092

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tLONELY => 142,
  :tLOWEST => 143,
  :tEQL => 144,
  :tBDOT2 => 145,
  :tBDOT3 => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tLOWEST",
  "tEQL",
  "tBDOT2",
  "tBDOT3",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "@5",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@6",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@7",
  "@8",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@9",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@10",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "@28",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "case_args",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "ssym",
  "dsym",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 11
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      # TODO: move down to main match so I can just use val

                      warn "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug 12

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      result = val[2] # wtf?

    result
end

def _reduce_24(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_27(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_28(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_29(val, _values, result)
                      result = val[1]

    result
end

def _reduce_30(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_31(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_33(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_34(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_35(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug 13
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_38(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_43(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_44(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_45(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_47(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_48(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_49(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_55(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      blk, _, (msg, _line), args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      # self.env.unextend

    result
end

def _reduce_67(val, _values, result)
                      (msg, line), = val
                      result = new_call(nil, msg.to_sym).line line

    result
end

def _reduce_68(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_69(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_70(val, _values, result)
                      lhs, callop, (op, _), args = val

                      result = new_call lhs, op.to_sym, args, callop
                      result.line lhs.line

    result
end

def _reduce_71(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_72(val, _values, result)
                      lhs, _, (id, line), args = val

                      result = new_call lhs, id.to_sym, args
                      result.line line

    result
end

def _reduce_73(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_75(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_77(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]

    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_83(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_84(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_85(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_87(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_88(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_89(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_90(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_91(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_92(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]

    result
end

def _reduce_95(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_97(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_102(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_103(val, _values, result)
                      recv, _, (id, _line) = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_104(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 14
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, (id, _line) = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 15
                        yyerror "dynamic constant assignment"
                      end

                      _, (id, l) = val

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_107(val, _values, result)
                      ref, = val

                      self.backref_assign_error ref

    result
end

def _reduce_108(val, _values, result)
                      var, = val

                      result = self.assignable var

    result
end

def _reduce_109(val, _values, result)
                      var, = val

                      result = self.assignable var

                      debug 16

    result
end

def _reduce_110(val, _values, result)
                      lhs, _, args, _ = val

                      result = self.aryset lhs, args

    result
end

def _reduce_111(val, _values, result)
                      lhs, op, (id, _line) = val

                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_112(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_attrasgn lhs, id

    result
end

def _reduce_113(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_114(val, _values, result)
                      expr, _, (id, _line) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 17
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      _, (id, l) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 18
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      _, (name, line) = val
                      result = s(:colon3, name.to_sym).line line

    result
end

def _reduce_120(val, _values, result)
                      (id, line), = val
                      result = [id.to_sym, line] # TODO: sexp?

    result
end

def _reduce_121(val, _values, result)
                      pval, _, (name, _line) = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END

    result
end

# reduce 126 omitted

def _reduce_127(val, _values, result)
                      (id, line), = val

                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_130(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_131(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

def _reduce_203(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_204(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_205(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_208(val, _values, result)
                      lhs, _, (id, _line), (op, _), rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_209(val, _values, result)
                      lhs1, _, (lhs2, _line), op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_210(val, _values, result)
                      _, (lhs, line), op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_211(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_212(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_213(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      _, (num, line), _, arg = val
                      lit = s(:lit, num).line line
                      result = new_call(new_call(lit, :"**", argl(arg)), :"-@")


    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 227 omitted

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_231(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_232(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_233(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_234(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_235(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_237(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_238(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_239(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_240(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      lhs, (op, _), rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_247(val, _values, result)
                      lhs, (op, _), rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_248(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_251(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_252(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_255(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      result = args val

    result
end

def _reduce_261(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_262(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_263(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_264(val, _values, result)
                      result = call_args val

    result
end

def _reduce_265(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_266(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_267(val, _values, result)
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_269(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_270(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_271(val, _values, result)
                      result = val[1]

    result
end

# reduce 272 omitted

def _reduce_273(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_274(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_275(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_276(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_277(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_278(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_279(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_280(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_281(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      (msg, line), = val
                      result = new_call nil, msg.to_sym
                      result.line line

    result
end

def _reduce_293(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_294(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_295(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_296(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_297(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_298(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_299(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_300(val, _values, result)
                      expr, _, (id, _line) = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_301(val, _values, result)
                      _, (id, line) = val

                      result = s(:colon3, id.to_sym).line line

    result
end

def _reduce_302(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_303(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_304(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_305(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_306(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_307(val, _values, result)
                      (_, line), _, args, _ = val

                      result = new_yield(args).line line

    result
end

def _reduce_308(val, _values, result)
                      (_, line), _, _ = val

                      result = new_yield.line line

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val

                      result = new_yield.line line

    result
end

def _reduce_310(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_311(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_312(val, _values, result)
                      debug 20

    result
end

def _reduce_313(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 314 omitted

def _reduce_315(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_316(val, _values, result)
                      expr, = val
                      result = expr

    result
end

def _reduce_317(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_318(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_319(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_320(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_321(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_322(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_323(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_325(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_326(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_329(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_330(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_331(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_332(val, _values, result)
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_334(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

    result
end

def _reduce_335(val, _values, result)
                      result, in_def = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.ignore_body_comments

    result
end

def _reduce_336(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL

    result
end

def _reduce_338(val, _values, result)
                      # [kdef, recv, _, _, (name, line), in_def, args, body, kend]
                      # =>
                      # [kdef, recv, (name, line), in_def, args, body, kend]

                      val.delete_at 3
                      val.delete_at 2

                      result, in_def = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.ignore_body_comments

    result
end

def _reduce_339(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_340(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_341(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_342(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_343(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_352(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_353(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = val[1]

    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

def _reduce_376(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_377(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_378(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_379(val, _values, result)
                      args, _, rest = val

                      result = block_var args, rest

    result
end

def _reduce_380(val, _values, result)
                      lhs, _, splat, _, rhs = val

                      result = block_var lhs, splat, rhs

    result
end

def _reduce_381(val, _values, result)
                      rest, = val

                      result = block_var rest

    result
end

def _reduce_382(val, _values, result)
                      splat, _, rest = val

                      result = block_var splat, rest

    result
end

def _reduce_383(val, _values, result)
                      _, (id, line) = val

                      result = args ["*#{id}".to_sym]
                      result.line line

    result
end

def _reduce_384(val, _values, result)
                      result = args [:*]
                      result.line lexer.lineno # FIX: tSTAR -> line

    result
end

def _reduce_385(val, _values, result)
                      result = call_args val

    result
end

def _reduce_386(val, _values, result)
                      result = call_args val

    result
end

def _reduce_387(val, _values, result)
                      result = call_args val

    result
end

def _reduce_388(val, _values, result)
                      (id, line), = val
                      result = call_args [id]
                      result.line line

    result
end

def _reduce_389(val, _values, result)
                      result = args val

    result
end

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      result = args val

    result
end

def _reduce_392(val, _values, result)
                      result = args val

    result
end

def _reduce_393(val, _values, result)
                      result = args val

    result
end

def _reduce_394(val, _values, result)
                      result = args val

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

def _reduce_396(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args val

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
 result = 0
    result
end

def _reduce_407(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_408(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_410(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      result = args val

    result
end

def _reduce_413(val, _values, result)
                      result = args val

    result
end

def _reduce_414(val, _values, result)
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      (id, line), = val
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 416 omitted

def _reduce_417(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_418(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_419(val, _values, result)
                      _, (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_422(val, _values, result)
                      result = val[1]

    result
end

def _reduce_423(val, _values, result)
                      result = val[1]

    result
end

def _reduce_424(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_425(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      cmd, blk = val

                      syntax_error "Both block arg and actual block given." if
                        cmd.block_pass?

                      if inverted? val then
                        val = invert_block_call val
                        cmd, blk = val
                      end

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_426(val, _values, result)
                      lhs, _, (id, _line), args = val

                      result = new_call lhs, id.to_sym, args

    result
end

def _reduce_427(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_428(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_429(val, _values, result)
                      call, args = val

                      result = call.concat args.sexp_body if args

    result
end

def _reduce_430(val, _values, result)
                      recv, call_op, (op, _line), args = val

                      result = new_call recv, op.to_sym, args, call_op

    result
end

def _reduce_431(val, _values, result)
                      recv, _, (op, _line), args = val

                      result = new_call recv, op.to_sym, args

    result
end

def _reduce_432(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_call lhs, id.to_sym

    result
end

def _reduce_433(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_434(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_435(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_436(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_438(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_439(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_440(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_441(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_442(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_443(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_444(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_445(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_446(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_447(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_448(val, _values, result)
                      arg, = val

                      result = s(:array, arg).line arg.line

    result
end

def _reduce_449(val, _values, result)
                      _, arg = val

                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_450(val, _values, result)
                      args, _, id = val

                      result = self.list_append args, id

    result
end

def _reduce_451(val, _values, result)
                      args, _, _, id = val

                      result = self.list_append args, s(:splat, id).line(id.line)

    result
end

def _reduce_452(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_453(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line val[1]
                      result << val[5] if val[5]

    result
end

# reduce 454 omitted

# reduce 455 omitted

def _reduce_456(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_457(val, _values, result)
                      result = nil

    result
end

def _reduce_458(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 459 omitted

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = val[1]

    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 464 omitted

def _reduce_465(val, _values, result)
                      (lit, line), = val
                      result = s(:lit, lit).line line

    result
end

# reduce 466 omitted

def _reduce_467(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_468(val, _values, result)
                      debug 37

    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_471(val, _values, result)
                      (_, line), str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_DEDENT

                      result = str.line line

    result
end

def _reduce_472(val, _values, result)
                      result = new_string val

    result
end

def _reduce_473(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_474(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_475(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_476(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_477(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_478(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_481(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_482(val, _values, result)
                      (_, line), list, _, = val
                      list.line line
                      result = list

    result
end

def _reduce_483(val, _values, result)
                      result = new_symbol_list

    result
end

def _reduce_484(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_485(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_486(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_487(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_488(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_489(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_490(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_491(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_493(val, _values, result)
                      line = prev_value_to_lineno _values.last
                      result = s(:str, +"").line line

    result
end

def _reduce_494(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_495(val, _values, result)
                      result = nil

    result
end

def _reduce_496(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_497(val, _values, result)
                      result = nil

    result
end

def _reduce_498(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_499(val, _values, result)
                      result = new_string val

    result
end

def _reduce_500(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_501(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_502(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_503(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.pop
                      lexer.cmdarg.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug 38
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_504(val, _values, result)
                      (id, line), = val
                      result = s(:gvar, id.to_sym).line line

    result
end

def _reduce_505(val, _values, result)
                      (id, line), = val
                      result = s(:ivar, id.to_sym).line line

    result
end

def _reduce_506(val, _values, result)
                      (id, line), = val
                      result = s(:cvar, id.to_sym).line line

    result
end

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      _, (id, line) = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

def _reduce_511(val, _values, result)
                      (id, line), = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug 39
                      end

    result
end

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      _, (num, line) = val
                      result = [-num, line]

    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_529(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_530(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_531(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_535(val, _values, result)
                      raise "NO: #{val.inspect}" if Sexp === val.first
                      (var, line), = val
                      result = Sexp === var ? var : self.gettable(var)
                      result.line line

    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_537(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]
                      debug 40

    result
end

def _reduce_539(val, _values, result)
                      (ref, line), = val
                      result = s(:nth_ref, ref).line line

    result
end

def _reduce_540(val, _values, result)
                      (ref, line), = val
                      result = s(:back_ref, ref).line line

    result
end

def _reduce_541(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_542(val, _values, result)
                      result = val[2]

    result
end

def _reduce_543(val, _values, result)
                      result = nil

    result
end

def _reduce_544(val, _values, result)
                      result = end_args val

    result
end

def _reduce_545(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_546(val, _values, result)
                      result = end_args val

    result
end

def _reduce_547(val, _values, result)
                      result = args val

    result
end

def _reduce_548(val, _values, result)
                      result = args val

    result
end

def _reduce_549(val, _values, result)
                      result = args val

    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = val[1]

    result
end

def _reduce_552(val, _values, result)
                      result = nil

    result
end

def _reduce_553(val, _values, result)
                      result = args val

    result
end

def _reduce_554(val, _values, result)
                      result = args val

    result
end

def _reduce_555(val, _values, result)
                      result = args val

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val
                      # result.line lexer.lineno

    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      (id, line), = val
                      identifier = id.to_sym
                      self.env[identifier] = :lvar

                      result = [identifier, line]

    result
end

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      _, margs, _ = val

                      result = margs

    result
end

def _reduce_577(val, _values, result)
                      result = new_arg val

    result
end

def _reduce_578(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << (Sexp === item ? item : item.first)

    result
end

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_581(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_582(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_583(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      result = args val

    result
end

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      _, (id, line) = val

                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"**#{name}", line]

    result
end

def _reduce_591(val, _values, result)
                      id = :"**"
                      self.env[id] = :lvar # TODO: needed?!?
                      result = [id, lexer.lineno] # TODO: tPOW/tDSTAR include lineno

    result
end

def _reduce_592(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs
                      # TODO: detect duplicate names

    result
end

def _reduce_593(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs

    result
end

def _reduce_594(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_595(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_596(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_597(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 598 omitted

# reduce 599 omitted

def _reduce_600(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      _, (id, line) = val
                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"*#{name}", line]

    result
end

def _reduce_601(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = [name, lexer.lineno] # FIX: tSTAR to include lineno

    result
end

# reduce 602 omitted

# reduce 603 omitted

def _reduce_604(val, _values, result)
                      _, (id, line) = val
                      identifier = id.to_sym

                      self.env[identifier] = :lvar
                      result = ["&#{identifier}".to_sym, line]

    result
end

def _reduce_605(val, _values, result)
                      _, arg = val
                      result = arg

    result
end

def _reduce_606(val, _values, result)
                      result = nil

    result
end

# reduce 607 omitted

def _reduce_608(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_609(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_610(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 611 omitted

# reduce 612 omitted

def _reduce_613(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_614(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_615(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_616(val, _values, result)
                      (_, line), sym, _, value = val

                      sym.sexp_type = :dsym

                      result = s(:array, sym, value).line line

    result
end

def _reduce_617(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

def _reduce_643(val, _values, result)
 yyerrok
    result
end

# reduce 644 omitted

# reduce 645 omitted

def _reduce_646(val, _values, result)
 yyerrok
    result
end

def _reduce_647(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby23Parser
