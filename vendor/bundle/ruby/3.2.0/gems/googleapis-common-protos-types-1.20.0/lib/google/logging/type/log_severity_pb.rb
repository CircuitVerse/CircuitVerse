# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/logging/type/log_severity.proto

require 'google/protobuf'


descriptor_data = "\n&google/logging/type/log_severity.proto\x12\x13google.logging.type*\x82\x01\n\x0bLogSeverity\x12\x0b\n\x07\x44\x45\x46\x41ULT\x10\x00\x12\t\n\x05\x44\x45\x42UG\x10\x64\x12\t\n\x04INFO\x10\xc8\x01\x12\x0b\n\x06NOTICE\x10\xac\x02\x12\x0c\n\x07WARNING\x10\x90\x03\x12\n\n\x05\x45RROR\x10\xf4\x03\x12\r\n\x08\x43RITICAL\x10\xd8\x04\x12\n\n\x05\x41LERT\x10\xbc\x05\x12\x0e\n\tEMERGENCY\x10\xa0\x06\x42\xc5\x01\n\x17\x63om.google.logging.typeB\x10LogSeverityProtoP\x01Z8google.golang.org/genproto/googleapis/logging/type;ltype\xa2\x02\x04GLOG\xaa\x02\x19Google.Cloud.Logging.Type\xca\x02\x19Google\\Cloud\\Logging\\Type\xea\x02\x1cGoogle::Cloud::Logging::Typeb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Cloud
    module Logging
      module Type
        LogSeverity = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.logging.type.LogSeverity").enummodule
      end
    end
  end
end

module Google
  module Logging
    module Type
      LogSeverity = ::Google::Cloud::Logging::Type::LogSeverity
    end
  end
end

#### Source proto file: google/logging/type/log_severity.proto ####
#
# // Copyright 2025 Google LLC
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //     http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
#
# syntax = "proto3";
#
# package google.logging.type;
#
# option csharp_namespace = "Google.Cloud.Logging.Type";
# option go_package = "google.golang.org/genproto/googleapis/logging/type;ltype";
# option java_multiple_files = true;
# option java_outer_classname = "LogSeverityProto";
# option java_package = "com.google.logging.type";
# option objc_class_prefix = "GLOG";
# option php_namespace = "Google\\Cloud\\Logging\\Type";
# option ruby_package = "Google::Cloud::Logging::Type";
#
# // The severity of the event described in a log entry, expressed as one of the
# // standard severity levels listed below.  For your reference, the levels are
# // assigned the listed numeric values. The effect of using numeric values other
# // than those listed is undefined.
# //
# // You can filter for log entries by severity.  For example, the following
# // filter expression will match log entries with severities `INFO`, `NOTICE`,
# // and `WARNING`:
# //
# //     severity > DEBUG AND severity <= WARNING
# //
# // If you are writing log entries, you should map other severity encodings to
# // one of these standard levels. For example, you might map all of Java's FINE,
# // FINER, and FINEST levels to `LogSeverity.DEBUG`. You can preserve the
# // original severity level in the log entry payload if you wish.
# enum LogSeverity {
#   // (0) The log entry has no assigned severity level.
#   DEFAULT = 0;
#
#   // (100) Debug or trace information.
#   DEBUG = 100;
#
#   // (200) Routine information, such as ongoing status or performance.
#   INFO = 200;
#
#   // (300) Normal but significant events, such as start up, shut down, or
#   // a configuration change.
#   NOTICE = 300;
#
#   // (400) Warning events might cause problems.
#   WARNING = 400;
#
#   // (500) Error events are likely to cause problems.
#   ERROR = 500;
#
#   // (600) Critical events cause more severe problems or outages.
#   CRITICAL = 600;
#
#   // (700) A person must take an action immediately.
#   ALERT = 700;
#
#   // (800) One or more systems are unusable.
#   EMERGENCY = 800;
# }
