# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/api/usage.proto

require 'google/protobuf'


descriptor_data = "\n\x16google/api/usage.proto\x12\ngoogle.api\"j\n\x05Usage\x12\x14\n\x0crequirements\x18\x01 \x03(\t\x12$\n\x05rules\x18\x06 \x03(\x0b\x32\x15.google.api.UsageRule\x12%\n\x1dproducer_notification_channel\x18\x07 \x01(\t\"]\n\tUsageRule\x12\x10\n\x08selector\x18\x01 \x01(\t\x12 \n\x18\x61llow_unregistered_calls\x18\x02 \x01(\x08\x12\x1c\n\x14skip_service_control\x18\x03 \x01(\x08\x42l\n\x0e\x63om.google.apiB\nUsageProtoP\x01ZEgoogle.golang.org/genproto/googleapis/api/serviceconfig;serviceconfig\xa2\x02\x04GAPIb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Api
    Usage = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.api.Usage").msgclass
    UsageRule = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.api.UsageRule").msgclass
  end
end

#### Source proto file: google/api/usage.proto ####
#
# // Copyright 2025 Google LLC
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //     http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
#
# syntax = "proto3";
#
# package google.api;
#
# option go_package = "google.golang.org/genproto/googleapis/api/serviceconfig;serviceconfig";
# option java_multiple_files = true;
# option java_outer_classname = "UsageProto";
# option java_package = "com.google.api";
# option objc_class_prefix = "GAPI";
#
# // Configuration controlling usage of a service.
# message Usage {
#   // Requirements that must be satisfied before a consumer project can use the
#   // service. Each requirement is of the form <service.name>/<requirement-id>;
#   // for example 'serviceusage.googleapis.com/billing-enabled'.
#   //
#   // For Google APIs, a Terms of Service requirement must be included here.
#   // Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud".
#   // Other Google APIs should include
#   // "serviceusage.googleapis.com/tos/universal". Additional ToS can be
#   // included based on the business needs.
#   repeated string requirements = 1;
#
#   // A list of usage rules that apply to individual API methods.
#   //
#   // **NOTE:** All service configuration rules follow "last one wins" order.
#   repeated UsageRule rules = 6;
#
#   // The full resource name of a channel used for sending notifications to the
#   // service producer.
#   //
#   // Google Service Management currently only supports
#   // [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification
#   // channel. To use Google Cloud Pub/Sub as the channel, this must be the name
#   // of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format
#   // documented in https://cloud.google.com/pubsub/docs/overview.
#   string producer_notification_channel = 7;
# }
#
# // Usage configuration rules for the service.
# //
# // NOTE: Under development.
# //
# //
# // Use this rule to configure unregistered calls for the service. Unregistered
# // calls are calls that do not contain consumer project identity.
# // (Example: calls that do not contain an API key).
# // By default, API methods do not allow unregistered calls, and each method call
# // must be identified by a consumer project identity. Use this rule to
# // allow/disallow unregistered calls.
# //
# // Example of an API that wants to allow unregistered calls for entire service.
# //
# //     usage:
# //       rules:
# //       - selector: "*"
# //         allow_unregistered_calls: true
# //
# // Example of a method that wants to allow unregistered calls.
# //
# //     usage:
# //       rules:
# //       - selector: "google.example.library.v1.LibraryService.CreateBook"
# //         allow_unregistered_calls: true
# message UsageRule {
#   // Selects the methods to which this rule applies. Use '*' to indicate all
#   // methods in all APIs.
#   //
#   // Refer to [selector][google.api.DocumentationRule.selector] for syntax
#   // details.
#   string selector = 1;
#
#   // If true, the selected method allows unregistered calls, e.g. calls
#   // that don't identify any user or application.
#   bool allow_unregistered_calls = 2;
#
#   // If true, the selected method should skip service control and the control
#   // plane features, such as quota and billing, will not be available.
#   // This flag is used by Google Cloud Endpoints to bypass checks for internal
#   // methods, such as service health check methods.
#   bool skip_service_control = 3;
# }
