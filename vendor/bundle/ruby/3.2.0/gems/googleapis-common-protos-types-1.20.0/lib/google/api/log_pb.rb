# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/api/log.proto

require 'google/protobuf'

require 'google/api/label_pb'


descriptor_data = "\n\x14google/api/log.proto\x12\ngoogle.api\x1a\x16google/api/label.proto\"u\n\rLogDescriptor\x12\x0c\n\x04name\x18\x01 \x01(\t\x12+\n\x06labels\x18\x02 \x03(\x0b\x32\x1b.google.api.LabelDescriptor\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t\x12\x14\n\x0c\x64isplay_name\x18\x04 \x01(\tBj\n\x0e\x63om.google.apiB\x08LogProtoP\x01ZEgoogle.golang.org/genproto/googleapis/api/serviceconfig;serviceconfig\xa2\x02\x04GAPIb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["google.api.LabelDescriptor", "google/api/label.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Api
    LogDescriptor = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.api.LogDescriptor").msgclass
  end
end

#### Source proto file: google/api/log.proto ####
#
# // Copyright 2025 Google LLC
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //     http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
#
# syntax = "proto3";
#
# package google.api;
#
# import "google/api/label.proto";
#
# option go_package = "google.golang.org/genproto/googleapis/api/serviceconfig;serviceconfig";
# option java_multiple_files = true;
# option java_outer_classname = "LogProto";
# option java_package = "com.google.api";
# option objc_class_prefix = "GAPI";
#
# // A description of a log type. Example in YAML format:
# //
# //     - name: library.googleapis.com/activity_history
# //       description: The history of borrowing and returning library items.
# //       display_name: Activity
# //       labels:
# //       - key: /customer_id
# //         description: Identifier of a library customer
# message LogDescriptor {
#   // The name of the log. It must be less than 512 characters long and can
#   // include the following characters: upper- and lower-case alphanumeric
#   // characters [A-Za-z0-9], and punctuation characters including
#   // slash, underscore, hyphen, period [/_-.].
#   string name = 1;
#
#   // The set of labels that are available to describe a specific log entry.
#   // Runtime requests that contain labels not specified here are
#   // considered invalid.
#   repeated LabelDescriptor labels = 2;
#
#   // A human-readable description of this log. This information appears in
#   // the documentation and can contain details.
#   string description = 3;
#
#   // The human-readable name for this log. This information appears on
#   // the user interface and should be concise.
#   string display_name = 4;
# }
