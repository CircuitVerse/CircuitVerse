# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/rpc/http.proto

require 'google/protobuf'


descriptor_data = "\n\x15google/rpc/http.proto\x12\ngoogle.rpc\"a\n\x0bHttpRequest\x12\x0e\n\x06method\x18\x01 \x01(\t\x12\x0b\n\x03uri\x18\x02 \x01(\t\x12\'\n\x07headers\x18\x03 \x03(\x0b\x32\x16.google.rpc.HttpHeader\x12\x0c\n\x04\x62ody\x18\x04 \x01(\x0c\"e\n\x0cHttpResponse\x12\x0e\n\x06status\x18\x01 \x01(\x05\x12\x0e\n\x06reason\x18\x02 \x01(\t\x12\'\n\x07headers\x18\x03 \x03(\x0b\x32\x16.google.rpc.HttpHeader\x12\x0c\n\x04\x62ody\x18\x04 \x01(\x0c\"(\n\nHttpHeader\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\tBX\n\x0e\x63om.google.rpcB\tHttpProtoP\x01Z3google.golang.org/genproto/googleapis/rpc/http;http\xa2\x02\x03RPCb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Rpc
    HttpRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.rpc.HttpRequest").msgclass
    HttpResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.rpc.HttpResponse").msgclass
    HttpHeader = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.rpc.HttpHeader").msgclass
  end
end

#### Source proto file: google/rpc/http.proto ####
#
# // Copyright 2025 Google LLC
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //     http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
#
# syntax = "proto3";
#
# package google.rpc;
#
# option go_package = "google.golang.org/genproto/googleapis/rpc/http;http";
# option java_multiple_files = true;
# option java_outer_classname = "HttpProto";
# option java_package = "com.google.rpc";
# option objc_class_prefix = "RPC";
#
# // Represents an HTTP request.
# message HttpRequest {
#   // The HTTP request method.
#   string method = 1;
#
#   // The HTTP request URI.
#   string uri = 2;
#
#   // The HTTP request headers. The ordering of the headers is significant.
#   // Multiple headers with the same key may present for the request.
#   repeated HttpHeader headers = 3;
#
#   // The HTTP request body. If the body is not expected, it should be empty.
#   bytes body = 4;
# }
#
# // Represents an HTTP response.
# message HttpResponse {
#   // The HTTP status code, such as 200 or 404.
#   int32 status = 1;
#
#   // The HTTP reason phrase, such as "OK" or "Not Found".
#   string reason = 2;
#
#   // The HTTP response headers. The ordering of the headers is significant.
#   // Multiple headers with the same key may present for the response.
#   repeated HttpHeader headers = 3;
#
#   // The HTTP response body. If the body is not expected, it should be empty.
#   bytes body = 4;
# }
#
# // Represents an HTTP header.
# message HttpHeader {
#   // The HTTP header key. It is case insensitive.
#   string key = 1;
#
#   // The HTTP header value.
#   string value = 2;
# }
