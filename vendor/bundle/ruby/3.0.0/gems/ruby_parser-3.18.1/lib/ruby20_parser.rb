#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby20Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-521,8,85,86,87,12,78,-521,-521,-521,79,80,-521,-521,-521,83,-521,81',
'82,84,33,34,76,77,-521,564,-521,-521,-521,88,31,30,115,114,116,117,-521',
'-521,22,-521,-521,-521,-521,-521,11,49,10,13,119,118,120,109,60,111',
'110,112,825,113,121,122,-109,107,108,-110,45,46,44,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,564,-103,-521,-521',
'-521,43,-521,-521,36,824,-521,62,63,-521,-521,64,-521,38,-521,3,-521',
'48,-521,-521,-521,-521,-521,-521,-521,23,-521,281,-521,123,105,95,97',
'98,99,101,-117,-116,641,96,106,-521,-521,-521,-521,564,-521,89,-521',
'-524,93,100,102,-521,127,-521,-524,-524,-524,126,564,-524,-524,-524',
'-103,-524,733,564,-112,221,222,221,222,-524,-112,-524,-524,-524,221',
'222,-100,-114,281,-101,-111,-524,-524,-113,-524,-524,-524,-524,-524',
'334,335,221,222,-95,-535,-103,-105,640,-103,-114,-113,879,-115,-111',
'-81,230,127,537,538,-103,283,126,-524,-524,-524,-524,-524,-524,-524',
'-524,-524,-524,-524,-524,-524,-524,281,644,-524,-524,-524,745,-524,-524',
'218,746,-524,-108,-107,-524,-524,231,-524,278,-524,281,-524,-109,-524',
'-524,-524,-524,-524,-524,-524,127,-524,231,-524,219,126,-614,127,-105',
'231,283,-614,126,-615,-103,127,-524,-524,-524,-524,126,-524,127,-524',
'-300,940,231,126,-524,-112,-524,-300,-300,-300,-112,643,-114,-300,-300',
'-111,-300,-114,-113,-105,-111,825,-105,-113,95,-105,-104,878,-106,-102',
'220,278,96,-105,283,-536,-300,-300,227,-300,-300,-300,-300,-300,227',
'276,841,228,855,472,571,226,842,283,625,824,-521,228,625,542,224,816',
'223,-521,271,-611,332,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300',
'-300,-300,-300,-300,221,222,-300,-300,-300,-612,667,-110,-108,-535,-300',
'851,855,-300,817,661,-618,625,-300,-117,-300,-117,-300,-300,-300,-300',
'-300,-300,-300,-117,-300,-116,-300,-112,627,626,625,-521,627,626,623',
'-437,-618,788,-521,-300,-300,-618,-106,-611,-300,-100,662,-521,-618',
'-618,-618,-300,-524,-115,-618,-618,-109,-618,611,-524,-524,-114,-112',
'-618,-612,-611,-618,-524,-524,613,-618,333,627,626,628,-614,625,-618',
'-618,-618,-618,-618,-618,-618,-618,231,-612,-531,-437,-618,911,627,626',
'366,-531,-437,-618,-618,803,-114,790,-614,621,620,-437,-618,221,222',
'-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618',
'-437,-618,-618,-618,-618,-530,668,268,269,625,-618,391,-530,-618,614',
'627,626,633,-618,394,-618,-111,-618,-618,-618,-618,-618,-618,-618,-111',
'-618,-618,-618,397,-536,607,625,604,603,602,611,605,267,266,625,-618',
'-618,630,-104,542,-618,613,722,-618,400,721,-532,-618,661,-113,-618',
'-618,-618,-532,923,-618,-618,-618,417,-618,627,626,638,609,593,613,-101',
'422,-618,-618,-618,-618,618,617,621,620,471,-110,473,-618,-618,-107',
'-618,-618,-618,-618,-618,627,626,645,-103,722,-116,-529,724,627,626',
'-526,621,620,-529,-112,474,780,-526,604,603,602,614,605,-618,-618,-618',
'-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,230,662,-618',
'-618,-618,-527,818,-618,614,503,-618,512,-527,-618,-618,515,-618,775',
'-618,517,-618,803,-618,-618,-618,-618,-618,-618,-618,-528,-618,-618',
'-618,621,620,607,-528,604,603,602,611,605,-343,-105,-80,-618,-618,-618',
'-618,-343,-618,613,-618,-300,-114,851,855,-618,-343,-113,-300,-300,-300',
'-102,231,-300,-300,-300,589,-300,527,227,528,609,-111,590,535,251,469',
'-300,-300,-300,618,617,621,620,127,470,288,-300,-300,126,-300,-300,-300',
'-300,-300,780,231,604,603,602,722,605,780,724,604,603,602,248,605,278',
'127,250,249,246,247,126,614,539,-300,-300,-300,-300,-300,-300,-300,-300',
'-300,-300,-300,-300,-300,-300,543,775,-300,-300,-300,-533,819,-300,775',
'544,-300,251,-533,-300,-300,231,-300,779,-300,251,-300,-533,-300,-300',
'-300,-300,-300,-300,-300,127,-300,571,-300,607,126,604,603,602,611,605',
'130,131,132,133,134,-300,-300,-300,-300,613,-300,248,-300,-300,410,250',
'249,-300,419,-115,-300,-300,-300,421,420,576,-300,-300,-534,-300,780',
'609,604,603,602,-534,605,251,577,632,618,617,621,620,-534,722,127,636',
'724,-300,-300,126,-300,-300,-300,-300,-300,127,639,227,642,780,126,604',
'603,602,534,605,775,248,649,-275,651,250,249,532,614,779,652,231,-300',
'-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-291',
'251,-300,-300,-300,775,667,-291,231,659,-300,1042,127,-300,779,660,-291',
'126,-300,278,-300,672,-300,-300,-300,-300,-300,-300,-300,251,-300,251',
'-300,248,251,227,227,250,249,246,247,251,546,575,679,-300,-300,-618',
'-300,231,-300,470,573,231,-618,-618,-618,-300,417,-115,-618,-618,607',
'-618,604,603,602,611,605,227,231,780,-618,604,603,602,655,605,613,-95',
'698,231,549,-618,-618,653,-618,-618,-618,-618,-618,780,-301,604,603',
'602,709,605,715,-301,609,900,901,718,231,902,121,122,-301,618,617,621',
'620,725,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618',
'-618,-618,227,775,-618,-618,-618,-301,668,748,726,517,-618,729,-301',
'-618,718,718,750,614,-618,571,-618,-301,-618,-618,-618,-618,-618,-618',
'-618,718,-618,-618,-618,752,757,607,227,604,603,602,611,605,-300,1026',
'763,-618,-618,766,-618,-300,-618,613,750,-436,-615,767,-300,-618,-300',
'-113,-436,-436,-436,-300,769,-436,-436,-436,-615,-436,251,771,-300,609',
'773,783,784,785,-436,-436,-436,-533,618,617,621,620,261,262,-533,-436',
'-436,791,-436,-436,-436,-436,-436,-533,792,-276,804,503,248,-534,254',
'503,250,249,246,247,-534,231,252,821,253,271,830,832,614,-534,-436,-436',
'-436,-436,-436,-436,-436,-436,-436,-436,-436,-436,-436,-436,515,227',
'-436,-436,-436,-291,517,-436,1032,278,-436,709,-291,-436,-436,231,-436',
'1030,-436,278,-436,-291,-436,-436,-436,-436,-436,-436,-436,278,-436',
'-436,-436,227,709,-301,251,251,855,718,1026,231,-301,231,895,-436,-436',
'-309,-436,750,-436,-301,896,231,-309,-309,-309,-436,905,-309,-309,-309',
'607,-309,604,603,602,611,605,-300,-277,231,910,-309,-309,927,-300,709',
'613,-275,932,-615,718,-309,-309,-300,-309,-309,-309,-309,-309,1007,718',
'604,603,602,718,605,231,1007,609,604,603,602,718,605,718,231,954,618',
'617,621,620,231,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309,-309',
'-309,-309,-309,766,957,-309,-309,-309,959,961,-309,963,288,-309,963',
'231,-309,-309,970,-309,614,-309,-278,-309,971,-309,-309,-309,-309,-309',
'-309,-309,766,-309,974,-309,130,131,132,133,134,130,131,132,133,134',
'977,979,-309,-309,-292,-309,981,-309,231,983,718,-292,-292,-292,-309',
'757,-292,-292,-292,780,-292,604,603,602,611,605,1003,1004,1013,1014',
'-292,-292,-292,1024,1027,613,841,1033,1043,963,-292,-292,963,-292,-292',
'-292,-292,-292,130,131,132,133,134,963,766,1050,1052,609,1054,1056,1056',
'715,718,718,1014,-615,-614,231,621,620,963,-292,-292,-292,-292,-292',
'-292,-292,-292,-292,-292,-292,-292,-292,-292,1078,1056,-292,-292,-292',
'1056,1056,-292,1056,,-292,,,-292,-292,,-292,614,-292,,-292,,-292,-292',
'-292,-292,-292,-292,-292,,-292,,-292,922,,604,603,602,923,605,,,,,,-292',
'-292,-292,-292,613,-292,-639,-292,,,,,-292,-639,-639,-639,,,-639,-639',
'-639,,-639,251,,,609,,,,,-639,-639,-639,,618,617,621,620,261,262,,-639',
'-639,,-639,-639,-639,-639,-639,,,,,,248,,254,,250,249,246,247,231,,252',
',253,,,,614,,-639,-639,-639,-639,-639,-639,-639,-639,-639,-639,-639',
'-639,-639,-639,,,-639,-639,-639,,,-639,,278,-639,,,-639,-639,,-639,',
'-639,,-639,,-639,-639,-639,-639,-639,-639,-639,,-639,-639,-639,,,,,',
',,,,,,,-639,-639,-619,-639,,-639,,,,-619,-619,-619,-639,,-619,-619,-619',
'607,-619,604,603,602,611,605,,,,-619,-619,-619,-619,,,613,,,,,-619,-619',
',-619,-619,-619,-619,-619,,,,,,,,,,609,,,,,,,,,618,617,621,620,,-619',
'-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,,,-619',
'-619,-619,,,-619,,,-619,,,-619,-619,,-619,614,-619,,-619,,-619,-619',
'-619,-619,-619,-619,-619,,-619,-619,-619,780,,604,603,602,611,605,,',
',,,-619,-619,-619,-619,613,-619,-620,-619,,,,,-619,-620,-620,-620,,',
'-620,-620,-620,,-620,251,,,609,,,,,-620,-620,-620,-620,,,621,620,261',
'262,,-620,-620,,-620,-620,-620,-620,-620,,,,,,248,,254,,250,249,246',
'247,,,,,,,,,614,,-620,-620,-620,-620,-620,-620,-620,-620,-620,-620,-620',
'-620,-620,-620,,,-620,-620,-620,,,-620,,,-620,,,-620,-620,,-620,,-620',
',-620,,-620,-620,-620,-620,-620,-620,-620,,-620,-620,-620,780,,604,603',
'602,611,605,,,,,,-620,-620,-620,-620,613,-620,-639,-620,,,,,-620,-639',
'-639,-639,,,-639,-639,-639,,-639,,,,609,,,,,-639,-639,,,,,621,620,,',
',-639,-639,,-639,-639,-639,-639,-639,780,,604,603,602,611,605,,,,,,',
',,,613,,,,,614,,251,255,256,257,258,268,269,263,264,259,260,-639,-640',
'-640,,609,261,262,-639,,,,,278,-639,,621,620,,,,,248,,254,,250,249,246',
'247,267,266,252,,253,-639,-639,,,,,,,,,,,,,-639,614,,,,-639,306,85,86',
'87,12,78,-639,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115',
'114,116,117,,,22,,,,,656,11,49,308,13,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,45,46,44,251,255,256,257,258,268,269,263,264',
'259,260,,244,245,,,261,262,,43,,,310,,,62,63,,,64,,38,248,,254,48,250',
'249,246,247,267,266,252,23,253,,,,105,95,97,98,99,101,,,,96,106,,265',
',-250,,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,656,11,49,308,13',
'119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,251,255',
'256,257,258,268,269,263,264,259,260,,244,245,,,261,262,,43,,,36,,,62',
'63,,,64,,38,248,,254,48,250,249,246,247,267,266,252,23,253,,,,105,95',
'97,98,99,101,,,,96,106,,265,,,,,89,,,93,100,102,306,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,',
'22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,251,255,256,257,258,268,269,263,264,259,260,,244,245,',
',261,262,,43,,,36,,,62,63,,,64,,38,248,,254,48,250,249,246,247,267,266',
'252,23,253,,,,105,95,97,98,99,101,,,,96,106,,265,,,,,89,,,93,100,102',
'306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'115,114,116,117,,,22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,45,46,44,251,255,256,257,258,268,269,263,264',
'259,260,,244,245,,,261,262,,43,,,310,,,62,63,,,64,,38,248,,254,48,250',
'249,246,247,267,266,252,23,253,,,,105,95,97,98,99,101,,,,96,106,,265',
',,,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11,49,308,13,119,118,120',
'109,60,111,110,112,,113,121,122,,107,108,,45,46,44,251,255,256,257,258',
'268,269,263,264,259,260,,244,245,,,261,262,,43,,,310,,,62,63,,,64,,38',
'248,,254,48,250,249,246,247,267,266,252,23,253,,,,105,95,97,98,99,101',
',,,96,106,231,265,,,,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11',
'49,308,13,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46',
'44,251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261,262,,43',
',,36,,,62,63,,,64,,38,248,,254,48,250,249,246,247,267,266,252,23,253',
',,,105,95,97,98,99,101,,,,96,106,,265,,,,,89,,,93,100,102,306,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114',
'116,117,,,22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112,,113,121',
'122,,107,108,,45,46,44,251,255,256,257,258,268,269,263,264,259,260,',
'244,245,,,261,262,,43,,,36,,,62,63,,,64,,38,248,,254,48,250,249,246',
'247,267,266,252,23,253,,,,105,95,97,98,99,101,,,,96,106,,265,,,,,89',
',,93,100,102,306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,115,114,116,117,,,22,,,,,,11,49,308,13,119,118,120,109',
'60,111,110,112,,113,121,122,,107,108,,45,46,44,251,255,256,257,258,268',
'269,263,264,259,260,,244,245,,,261,262,,43,,,36,,,62,63,,,64,,38,248',
',254,48,250,249,246,247,267,266,252,23,253,,,,105,95,97,98,99,101,,',
',96,106,,265,,,,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11,49,308',
'13,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,251',
'255,256,257,258,268,269,263,264,259,260,,-640,-640,,,261,262,,43,,,36',
',,62,63,,,64,,38,248,,254,48,250,249,246,247,267,266,252,23,253,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,306,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,',
'22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,251,-640,-640,-640,-640,268,269,,,-640,-640,,,,,,261,262',
',43,,,36,,,62,63,,,64,,38,248,,254,48,250,249,246,247,267,266,252,23',
'253,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,8,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116',
'117,,,22,,,,,,11,49,10,13,119,118,120,109,60,111,110,112,,113,121,122',
',107,108,,45,46,44,251,-640,-640,-640,-640,268,269,,,-640,-640,,,,,',
'261,262,,43,,,36,,,62,63,,,64,,38,248,,254,48,250,249,246,247,267,266',
'252,23,253,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,306',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115',
'114,116,117,,,22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112,,113',
'121,122,,107,108,,45,46,44,251,-640,-640,-640,-640,268,269,,,-640,-640',
',,,,,261,262,,43,,,36,,,62,63,,,64,,38,248,,254,48,250,249,246,247,267',
'266,252,23,253,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
'306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'115,114,116,117,,,22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,45,46,44,251,-640,-640,-640,-640,268,269,,,-640',
'-640,,,,,,261,262,,43,,,36,,,62,63,,,64,,38,248,,254,48,250,249,246',
'247,267,266,252,23,253,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,115,114,116,117,,,22,,,,,,11,49,308,13,119,118,120,109,60',
'111,110,112,,113,121,122,,107,108,,45,46,44,251,-640,-640,-640,-640',
'268,269,,,-640,-640,,,,,,261,262,,43,,,36,,,62,63,,,64,,38,248,,254',
'48,250,249,246,247,267,266,252,23,253,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11,49,308,13,119,118',
'120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,251,-640,-640',
'-640,-640,268,269,,,-640,-640,,,,,,261,262,,43,,,36,,,62,63,,,64,,38',
'248,,254,48,250,249,246,247,267,266,252,23,253,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11,49,308',
'13,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,251',
'255,256,257,258,268,269,,,259,260,,,,,,261,262,,43,,,36,,,62,63,,,64',
',38,248,,254,48,250,249,246,247,267,266,252,23,253,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11,49',
'308,13,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44',
'251,255,256,257,258,268,269,263,,259,260,,,,,,261,262,,43,,,36,,,62',
'63,,,64,,38,248,,254,48,250,249,246,247,267,266,252,23,253,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,306,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,',
',,,11,49,308,13,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,251,,,,,,,,,,,,,,,,261,262,,43,,,36,,251,62,63,,,64,,38,248',
',254,48,250,249,246,247,261,262,,23,,,,,105,95,97,98,99,101,,,248,96',
'106,,250,249,246,247,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11',
'49,308,13,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,306,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,',
'22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,306,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114',
'116,117,,,22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112,,113,121',
'122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
'306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'115,114,116,117,,,22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,115,114,116,117,,,22,,,,,,11,49,308,13,119,118,120,109',
'60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11,49,308,13,119',
'118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,306,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11',
'49,308,13,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,306,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,',
'22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,306,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114',
'116,117,,,22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112,,113,121',
'122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
'306,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'115,114,116,117,,,22,,,,,,11,49,308,13,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,115,114,116,117,,,22,,,,,,11,49,10,13,119,118,120,109,60,111',
'110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111',
'110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242',
',,62,63,,780,64,604,603,602,923,605,48,,,,,,,,241,613,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,609,,93,100,102,85,86,87,,78,,621,620,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,243,,,,614',
',,49,,,119,118,120,109,60,111,110,112,299,113,121,122,,107,108,,45,46',
'44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,297,,295,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,300,93,100,102,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,299,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,297,,295,,48',
',,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,300,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115',
'114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,299,113',
'121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64',
',297,,295,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',300,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77',
',,,,,88,322,328,115,114,116,117,,,243,,,,,,,323,,,119,118,120,109,60',
'111,110,112,,113,121,122,,107,108,,,,329,,,,,,,,,,,,,,,,,,,,319,,,315',
',,62,63,,,64,,314,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,',
',,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77',
',,,,,88,322,328,115,114,116,117,,,243,,,,,,,323,,,119,118,120,109,60',
'111,110,112,,113,121,122,,107,108,,,,329,,,,,,,,,,,,,,,,,,,,319,,,242',
',,62,63,,780,64,604,603,602,611,605,,,,,,,,,,613,,,,105,95,97,98,99',
'101,,,,96,106,,,,331,,,89,609,,93,100,102,85,86,87,,78,,621,620,79,80',
',,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243',
',,,614,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,',
'45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,780,64,604,603,602,923',
'605,48,,,,,,,,241,613,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,609',
',93,100,102,85,86,87,,78,,621,620,79,80,,,,83,,81,82,84,325,326,76,77',
',,,,,88,322,328,115,114,116,117,,,243,,,,614,,,49,,,119,118,120,109',
'60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236',
',,242,,,62,63,,780,64,604,603,602,923,605,48,,,,,,,,241,613,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,609,,93,100,102,85,86,87,,78,,621,620',
'79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,614,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,780,64,604,603,602',
'923,605,48,,,,,,,,241,613,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
'609,,93,100,102,85,86,87,12,78,,621,620,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,614,,11,49,,13,119,118,120',
'109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,,49,,,119,118,120',
'109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,',
',,236,,,242,,,62,63,,780,64,604,603,602,923,605,48,,,,,,,,23,613,,,',
'105,95,97,98,99,101,,,,96,106,,,,,,,89,609,,93,100,102,85,86,87,,78',
',621,620,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116',
'117,,,22,,,,614,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,',
'107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114',
'116,117,,,22,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122',
',107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,127,,,,,126,89,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322',
'328,115,114,116,117,,,243,,,,,,,323,,,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,,,329,,,,,,,,,,,,,,,,,,,,360,,,36,,,62,63,,,64',
',38,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'115,114,116,117,,,22,,,,,,11,49,10,13,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,410,89',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,115,114,116,117,,,22,,,,,,,49,,,119,118,120,109,60,111,110',
'112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,115,114,116,117,,,22,,,,,,,49,,,119,118,120,109,60,111,110',
'112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,115,114,116,117,,,22,,,,,,,49,,,119,118,120,109,60,111,110',
'112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,115,114,116,117,,,22,,,,,,,49,,,119,118,120,109,60,111,110',
'112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,115,114,116,117,,,22,,,,,,11,49,,13,119,118,120,109,60,111',
'110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111',
'110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242',
',,62,63,,,64,,427,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60',
'111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,',
',242,,,62,63,,,64,,427,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,,49,,,119,118,120,109',
'60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236',
',,242,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,,49,,,119,118,120,109,60',
'111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,',
',242,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60',
'111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,',
',242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60',
'111,110,112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236',
',,242,,,62,63,,,64,,297,,295,,48,,,,,,,,241,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,300,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118',
'120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,',
',,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,,49,,,119',
'118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,',
',,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,,49,,,119',
'118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,',
',,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98',
'99,101,,,,96,106,231,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,',
'49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44',
',,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243',
',,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45',
'46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,',
',243,,,,,,,49,,,119,118,120,109,60,111,110,112,299,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,297,,295,,48',
',,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,300,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115',
'114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,299,113',
'121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64',
',297,,295,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',300,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111',
'110,112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,',
'242,,,62,63,,,64,,297,,295,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,',
',96,106,231,,,,,,89,,300,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,,49,',
',119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,',
',,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,',
',,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46',
'44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,',
'105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117',
',,22,,,,,,11,49,,13,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114',
'116,117,,,243,,,,,,,323,,,119,118,120,109,60,111,110,112,,113,121,122',
',107,108,,,,329,,,,,,,,,,,,,,,,,,,,319,,,242,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,105,95,97,98,99,101,,,,96,106,,,,530,,,89,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114',
'116,117,,,243,,,,,,,323,,,119,118,120,109,60,111,110,112,,113,121,122',
',107,108,,,,329,,,,,,,,,,,,,,,,,,,,319,,,315,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116',
'117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,',
',,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114',
'116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122',
',107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,549,,62,63,,,64,,,,',
',48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328',
'115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,299',
'113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63',
',,64,,297,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',300,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77',
',,,,,88,322,328,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60',
'111,110,112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236',
',,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,300,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,,49,,,119,118,120,109',
'60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236',
',,242,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326',
'76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,,323,,,119,118,120',
'578,60,111,110,579,,113,121,122,,107,108,,,,329,,,,,,,,,,,,,,,,,,,,580',
',,242,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,',
',,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76',
'77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,,323,,,119,118,120,578',
'60,111,110,579,,113,121,122,,107,108,,,,329,,,,,,,,,,,,,,,,,,,,580,',
',242,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76',
'77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109',
'60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236',
',,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109',
'60,111,110,112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,',
',236,,,242,,,62,63,,,64,,297,,295,,48,,,,,,,,241,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,300,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,,49',
',,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,',
',,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,',
',,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46',
'44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,',
'105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,299,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,692,,295,,48',
',,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,300,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328',
'115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,299',
'113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63',
',,64,,,,295,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',300,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77',
',,,,,88,322,328,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60',
'111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,',
',242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,115,114,116,117,,,22,,,,,,11,49,308,13,119,118,120',
'109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,410,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,,323,,,119',
'118,120,109,60,111,110,112,,113,121,122,,107,108,,,,329,,,,,,,,,,,,',
',,,,,,,319,,,315,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120',
'109,60,111,110,112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,',
',,,,,236,,,242,,,62,63,,,64,,297,,295,,48,,,,,,,,241,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,300,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,',
'323,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,,,329,,',
',,,,,,,,,,,,,,,,,319,,,315,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,',
'49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44',
',,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243',
',,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45',
'46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,',
',22,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,',
',243,,,,,,,49,,,119,118,120,109,60,111,110,112,299,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,297,,295,,48',
',,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,300,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115',
'114,116,117,,,22,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121',
'122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115',
'114,116,117,,,22,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121',
'122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328',
'115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113',
'121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64',
',,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322',
'328,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63',
',,64,,796,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110',
'112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62',
'63,,,64,,,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110',
'112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242',
',,62,63,,,64,,297,,295,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,300,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325',
'326,76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,,49,,,119,118,120',
'109,60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,',
',,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,,49,,,119,118',
'120,109,60,111,110,112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,',
',,,,,,,,,236,,,242,,,62,63,,,64,,692,,295,,48,,,,,,,,241,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,300,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243',
',,,,,,49,,,119,118,120,109,60,111,110,112,299,113,121,122,,107,108,',
'45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,295,,48,,,,,,',
',241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,300,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116',
'117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,',
',,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116',
'117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,',
',,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116',
'117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,',
',,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116',
'117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,',
',,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114',
'116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122',
',107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48',
',,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115',
'114,116,117,,,243,,,,,,,323,,,119,118,120,109,60,111,110,112,,113,121',
'122,,107,108,,,,329,,,,,,,,,,,,,,,,,,,,319,,,315,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114',
'116,117,,,243,,,,,,,323,,,119,118,120,109,60,111,110,112,,113,121,122',
',107,108,,,,329,,,,,,,,,,,,,,,,,,,,319,,,315,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116',
'117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,427,,,,48,',
',,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115',
'114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,299,113',
'121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64',
',692,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,300',
'93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,',
'88,322,328,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110',
'112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242',
',,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,300,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326',
'76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109',
'60,111,110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236',
',,242,,,62,63,,,64,,860,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,',
'96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120',
'109,60,111,110,112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,',
',,,,,236,,,242,,,62,63,,,64,,297,,295,,48,,,,,,,,241,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,300,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243,,,,,,',
'49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45,46,44',
',,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117,,,243',
',,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108,,45',
'46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,',
',243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,',
',22,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,241',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,115,114,116,117,',
',22,,,,,,,49,,,119,118,120,109,60,111,110,112,,113,121,122,,107,108',
',45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328,115,114,116,117',
',,243,,,,,,,49,,,119,118,120,109,60,111,110,112,299,113,121,122,,107',
'108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64,,,,295,,48,',
',,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,300,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322,328',
'115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112,,113',
'121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63,,,64',
',,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322',
'328,115,114,116,117,,,243,,,,,,,323,,,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,,,329,,,,,,,,,,,,,,,,,,,,985,,,242,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322',
'328,115,114,116,117,,,243,,,,,,,323,,,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,,,329,,,,,,,,,,,,,,,,,,,,992,,,242,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,,,,88,322',
'328,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111,110,112',
',113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242,,,62,63',
',,64,,997,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,',
',,88,322,328,115,114,116,117,,,243,,,,,,,323,,,119,118,120,109,60,111',
'110,112,,113,121,122,,107,108,,,,329,,,,,,,,,,,,,,,,,,,,985,,,242,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,325,326,76,77,,,',
',,88,322,328,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111',
'110,112,,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,,242',
',,62,63,,,64,,,,,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,115,114,116,117,,,243,,,,,,,49,,,119,118,120,109,60,111',
'110,112,299,113,121,122,,107,108,,45,46,44,,,,,,,,,,,,,,,,,,,,236,,',
'242,,,62,63,,,64,,297,,295,,48,,,,,,,,241,,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,300,93,100,102,185,196,186,209,182,202,192,191,212',
'213,207,190,189,184,210,214,215,194,183,197,201,203,195,188,,,,204,211',
'206,205,198,208,193,181,200,199,,,,,,180,187,178,179,175,176,177,138',
'140,137,,139,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152',
',,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155',
'153,145,168,146,,,174,105,,,,,,,,,,106,,,,,,,,,167,185,196,186,209,182',
'202,192,191,212,213,207,190,189,184,210,214,215,194,183,197,201,203',
'195,188,,,,204,211,206,205,198,208,193,181,200,199,,,,,,180,187,178',
'179,175,176,177,138,140,,,139,,,,,,,,,170,171,,166,148,149,150,157,154',
'156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,105,,,,,,,,,,106,,,,,,,,,167,185,196',
'186,209,182,202,192,191,212,213,207,190,189,184,210,214,215,194,183',
'197,201,203,195,188,,,,204,211,206,375,374,376,373,181,200,199,,,,,',
'180,187,178,179,370,371,372,368,140,111,110,369,,113,,,,,,,170,171,',
'166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,382,,',
',,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,',
',,,,,,,,,,,,,,,167,185,196,186,209,182,202,192,191,212,213,207,190,189',
'184,210,214,215,194,183,197,201,203,195,188,,,,204,211,206,205,198,208',
'193,181,200,199,,,,,,180,187,178,179,175,176,177,138,140,407,406,139',
',408,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172,173',
'158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168',
'146,,,174,,,,,,,,,,,,,,,,,,,,167,185,196,186,209,182,202,192,191,212',
'213,207,190,189,184,210,214,215,194,183,197,201,203,195,188,,,,204,211',
'206,205,198,208,193,181,200,199,,,,,,180,187,178,179,175,176,177,138',
'140,,,139,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,',
'172,173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,105,,,,,,,,,,106,,,,,,,,,167,185,196,186,209,182,202',
'192,191,212,213,207,190,189,184,210,214,215,194,183,197,201,203,195',
'188,,,,204,211,206,205,198,208,193,181,200,199,,,,,,180,187,178,179',
'175,176,177,138,140,,,139,,,,,,,,,170,171,,166,148,149,150,157,154,156',
',,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160',
'161,155,153,145,168,146,,,174,105,,,,,,,,,,106,,,,,,,,,167,185,196,186',
'209,182,202,192,191,212,213,207,190,189,184,210,214,215,194,183,197',
'201,203,195,188,,,,204,211,206,205,198,208,193,181,200,199,,,,,,180',
'187,178,179,175,176,177,138,140,,,139,,,,,,,,,170,171,,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169',
'165,164,160,161,155,153,145,168,146,,,174,,,,,449,453,,,450,,,,,,,,',
'170,171,167,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,278,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,456,460,,,455,,,,,,,,,170,171,167,166,148,149,150,157,154',
'156,,,151,152,,,,172,173,158,159,,,,,,278,,,,,,,,163,162,,147,169,165',
'164,160,161,155,153,145,168,146,,,174,,,,,501,453,,,502,,,,,,,,,170',
'171,167,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,',
',,,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174',
',,,,673,453,,,674,,,,,,,,,170,171,167,166,148,149,150,157,154,156,,',
'151,152,,,,172,173,158,159,,,,,,278,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,675,460,,,676,,,,,,,,,170,171',
'167,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,278',
',,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,',
',,702,453,,,703,,,,,,,,,170,171,167,166,148,149,150,157,154,156,,,151',
'152,,,,172,173,158,159,,,,,,278,,,,,,,,163,162,,147,169,165,164,160',
'161,155,153,145,168,146,,,174,,,,,705,460,,,706,,,,,,,,,170,171,167',
'166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,278,,',
',,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,',
'673,453,,,674,,,,,,,,,170,171,167,166,148,149,150,157,154,156,,,151',
'152,,,,172,173,158,159,,,,,,278,,,,,,,,163,162,,147,169,165,164,160',
'161,155,153,145,168,146,,,174,,,,,675,460,,,676,,,,,,,,,170,171,167',
'166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,278,,',
',,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,',
'740,453,,,741,,,,,,,,,170,171,167,166,148,149,150,157,154,156,,,151',
'152,,,,172,173,158,159,,,,,,278,,,,,,,,163,162,,147,169,165,164,160',
'161,155,153,145,168,146,,,174,,,,,742,460,,,743,,,,,,,,,170,171,167',
'166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,278,,',
',,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,',
'798,453,,,799,,,,,,,,,170,171,167,166,148,149,150,157,154,156,,,151',
'152,,,,172,173,158,159,,,,,,278,,,,,,,,163,162,,147,169,165,164,160',
'161,155,153,145,168,146,,,174,,,,,801,460,,,800,,,,,,,,,170,171,167',
'166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,278,,',
',,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,',
'864,460,,,865,,,,,,,,,170,171,167,166,148,149,150,157,154,156,,,151',
'152,,,,172,173,158,159,,,,,,278,,,,,,,,163,162,,147,169,165,164,160',
'161,155,153,145,168,146,,,174,,,,,501,453,,,502,,,,,,,,,170,171,167',
'166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,278,,',
',,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,922,174,604',
'603,602,923,605,922,,604,603,602,923,605,,,613,,,,,167,,613,,,,,,,,',
',,,,,,609,,,,,,,609,,618,617,621,620,,,,618,617,621,620,,,,,,,,,,,,',
',,,,,1060,460,,,1059,,,,614,,,,,170,171,614,166,148,149,150,157,154',
'156,,,151,152,,,,172,173,158,159,,,,,,278,,,,,,,,163,162,,147,169,165',
'164,160,161,155,153,145,168,146,,,174,,,,,1063,453,,,1064,,,,,,,,,170',
'171,167,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,',
',,278,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,',
'174,,,,,1065,460,,,1066,,,,,,,,,170,171,167,166,148,149,150,157,154',
'156,,,151,152,,,,172,173,158,159,,,,,,278,,,,,,,,163,162,,147,169,165',
'164,160,161,155,153,145,168,146,,922,174,604,603,602,923,605,,,,,,,',
',,613,,,,,167,,,,,,,,,,,,,,,,,609,,,,,,,,,618,617,621,620,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,614' ]
        racc_action_table = arr = ::Array.new(25502, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'109,2,2,2,2,2,2,109,109,109,2,2,109,109,109,2,109,2,2,2,2,2,2,2,109',
'349,109,109,109,2,2,2,2,2,2,2,109,109,2,109,109,109,109,109,2,2,2,2',
'2,2,2,2,2,2,2,2,680,2,2,2,357,2,2,358,2,2,2,109,109,109,109,109,109',
'109,109,109,109,109,109,109,109,350,702,109,109,109,2,109,109,2,680',
'109,2,2,109,109,2,109,2,109,1,109,2,109,109,109,109,109,109,109,2,109',
'65,109,3,2,2,2,2,2,2,361,576,398,2,2,109,109,109,109,931,109,2,109,112',
'2,2,2,109,349,109,112,112,112,349,936,112,112,112,702,112,566,861,740',
'17,17,465,465,112,1063,112,112,112,713,713,357,1064,29,358,1076,112',
'112,1065,112,112,112,112,112,44,44,760,760,697,234,702,703,398,702,741',
'742,761,743,862,697,22,350,329,329,702,65,350,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,682,401,112,112,112,580,112,112,13,580',
'112,361,576,112,112,22,112,29,112,324,112,234,112,112,112,112,112,112',
'112,931,112,465,112,15,931,1065,566,703,713,29,742,566,743,740,936,112',
'112,112,112,936,112,861,112,455,861,760,861,112,1063,112,455,455,455',
'1063,401,1064,455,455,1076,455,1064,1065,703,1076,831,703,1065,92,741',
'742,761,743,862,16,324,92,703,682,235,455,455,27,455,455,455,455,455',
'19,27,714,20,998,237,998,19,714,324,634,831,368,433,385,471,19,673,18',
'368,25,578,40,455,455,455,455,455,455,455,455,455,455,455,455,455,455',
'348,348,455,455,455,579,455,235,20,41,455,728,728,455,674,798,705,387',
'455,20,455,237,455,455,455,455,455,455,455,433,455,471,455,673,634,634',
'637,578,385,385,385,836,864,634,578,455,455,456,455,578,455,41,799,578',
'456,456,456,455,579,455,456,456,41,456,763,579,369,674,798,705,579,578',
'456,369,579,763,705,43,387,387,387,705,392,456,456,705,456,456,456,456',
'456,49,579,370,836,864,820,637,637,73,370,836,864,705,907,799,637,864',
'763,763,836,864,754,754,456,456,456,456,456,456,456,456,456,456,456',
'456,456,456,836,864,456,456,456,371,456,47,47,395,456,99,371,456,763',
'392,392,392,456,100,456,820,456,456,456,456,456,456,456,907,456,456',
'456,101,42,383,403,383,383,383,383,383,47,47,389,456,456,389,456,333',
'456,383,555,675,102,555,372,456,449,456,675,675,675,372,971,675,675',
'675,135,675,395,395,395,383,383,971,42,216,675,675,675,675,383,383,383',
'383,236,42,238,675,675,333,675,675,675,675,675,403,403,403,449,556,333',
'373,556,389,389,374,971,971,373,449,239,896,374,896,896,896,383,896',
'675,675,675,675,675,675,675,675,675,675,675,675,675,675,243,450,675',
'675,675,375,675,675,971,277,675,292,375,675,675,293,675,896,675,296',
'675,657,675,675,675,675,675,675,675,376,675,675,675,766,766,593,376',
'593,593,593,593,593,50,450,309,675,675,675,675,50,675,593,675,676,450',
'1034,1034,675,50,675,676,676,676,657,311,676,676,676,378,676,312,233',
'313,593,657,378,319,492,233,676,676,676,593,593,593,593,5,233,322,676',
'676,5,676,676,676,676,676,1013,323,1013,1013,1013,560,1013,609,560,609',
'609,609,492,609,328,303,492,492,492,492,303,593,330,676,676,676,676',
'676,676,676,676,676,676,676,676,676,676,334,1013,676,676,676,316,676',
'676,609,335,676,338,316,676,676,344,676,609,676,477,676,316,676,676',
'676,676,676,676,676,354,676,355,676,757,354,757,757,757,757,757,9,9',
'9,9,9,676,676,676,676,757,676,477,676,800,356,477,477,676,137,676,800',
'800,800,137,137,360,800,800,317,800,775,757,775,775,775,317,775,478',
'362,391,757,757,757,757,317,849,870,394,849,800,800,870,800,800,800',
'800,800,874,397,318,400,895,874,895,895,895,318,895,775,478,423,425',
'428,478,478,318,757,775,430,444,800,800,800,800,800,800,800,800,800',
'800,800,800,800,800,320,493,800,800,800,895,800,320,1005,447,800,1005',
'945,800,895,448,320,945,800,457,800,467,800,800,800,800,800,800,800',
'479,800,480,800,493,481,336,359,493,493,493,493,482,336,359,498,800',
'800,801,800,505,800,336,359,509,801,801,801,800,524,800,801,801,758',
'801,758,758,758,758,758,432,525,779,801,779,779,779,432,779,758,526',
'529,531,536,801,801,432,801,801,801,801,801,1014,535,1014,1014,1014',
'540,1014,550,535,758,786,786,551,552,786,786,786,535,758,758,758,758',
'557,801,801,801,801,801,801,801,801,801,801,801,801,801,801,582,1014',
'801,801,801,746,801,582,558,561,801,563,746,801,567,568,582,758,801',
'569,801,746,801,801,801,801,801,801,801,570,801,801,801,584,587,767',
'984,767,767,767,767,767,706,984,595,801,801,596,801,706,801,767,984',
'30,706,598,865,801,706,801,30,30,30,865,599,30,30,30,865,30,497,600',
'865,767,607,615,619,622,30,30,30,989,767,767,767,767,497,497,989,30',
'30,641,30,30,30,30,30,989,644,650,658,663,497,990,497,669,497,497,497',
'497,990,677,497,678,497,681,685,687,767,990,30,30,30,30,30,30,30,30',
'30,30,30,30,30,30,689,991,30,30,30,993,691,30,991,30,30,699,993,30,30',
'701,30,991,30,704,30,993,30,30,30,30,30,30,30,707,30,30,30,1025,708',
'1033,711,712,730,736,1025,739,1033,762,777,30,30,31,30,1025,30,1033',
'778,781,31,31,31,30,793,31,31,31,769,31,769,769,769,769,769,1066,795',
'797,805,31,31,829,1066,835,769,845,846,1066,850,31,31,1066,31,31,31',
'31,31,954,856,954,954,954,863,954,867,1042,769,1042,1042,1042,871,1042',
'872,873,880,769,769,769,769,881,31,31,31,31,31,31,31,31,31,31,31,31',
'31,31,882,886,31,31,31,887,889,31,890,31,31,892,894,31,31,904,31,769',
'31,906,31,913,31,31,31,31,31,31,31,914,31,916,31,307,307,307,307,307',
'343,343,343,343,343,917,918,31,31,60,31,920,31,921,922,944,60,60,60',
'31,951,60,60,60,771,60,771,771,771,771,771,952,953,968,969,60,60,60',
'982,985,771,987,992,1009,1010,60,60,1011,60,60,60,60,60,523,523,523',
'523,523,1012,1015,1018,1019,771,1020,1021,1023,1029,1039,1040,1048,1059',
'1060,1062,771,771,1071,60,60,60,60,60,60,60,60,60,60,60,60,60,60,1072',
'1073,60,60,60,1074,1075,60,1083,,60,,,60,60,,60,771,60,,60,,60,60,60',
'60,60,60,60,,60,,60,824,,824,824,824,824,824,,,,,,60,60,60,60,824,60',
'451,60,,,,,60,451,451,451,,,451,451,451,,451,547,,,824,,,,,451,451,451',
',824,824,824,824,547,547,,451,451,,451,451,451,451,451,,,,,,547,,547',
',547,547,547,547,824,,547,,547,,,,824,,451,451,451,451,451,451,451,451',
'451,451,451,451,451,451,,,451,451,451,,,451,,451,451,,,451,451,,451',
',451,,451,,451,451,451,451,451,451,451,,451,451,451,,,,,,,,,,,,,451',
'451,460,451,,451,,,,460,460,460,451,,460,460,460,957,460,957,957,957',
'957,957,,,,460,460,460,460,,,957,,,,,460,460,,460,460,460,460,460,,',
',,,,,,,957,,,,,,,,,957,957,957,957,,460,460,460,460,460,460,460,460',
'460,460,460,460,460,460,,,460,460,460,,,460,,,460,,,460,460,,460,957',
'460,,460,,460,460,460,460,460,460,460,,460,460,460,959,,959,959,959',
'959,959,,,,,,460,460,460,460,959,460,461,460,,,,,460,461,461,461,,,461',
'461,461,,461,483,,,959,,,,,461,461,461,461,,,959,959,483,483,,461,461',
',461,461,461,461,461,,,,,,483,,483,,483,483,483,483,,,,,,,,,959,,461',
'461,461,461,461,461,461,461,461,461,461,461,461,461,,,461,461,461,,',
'461,,,461,,,461,461,,461,,461,,461,,461,461,461,461,461,461,461,,461',
'461,461,961,,961,961,961,961,961,,,,,,461,461,461,461,961,461,500,461',
',,,,461,500,500,500,,,500,500,500,,500,,,,961,,,,,500,500,,,,,961,961',
',,,500,500,,500,500,500,500,500,963,,963,963,963,963,963,,,,,,,,,,963',
',,,,961,,475,475,475,475,475,475,475,475,475,475,475,500,475,475,,963',
'475,475,500,,,,,500,500,,963,963,,,,,475,,475,,475,475,475,475,475,475',
'475,,475,500,500,,,,,,,,,,,,,500,963,,,,500,36,36,36,36,36,36,500,,',
'36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,',
',437,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36',
'437,437,437,437,437,437,437,437,437,437,437,,437,437,,,437,437,,36,',
',36,,,36,36,,,36,,36,437,,437,36,437,437,437,437,437,437,437,36,437',
',,,36,36,36,36,36,36,,,,36,36,,437,,437,,,36,,,36,36,36,218,218,218',
'218,218,218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218',
'218,218,218,218,218,218,,,218,,,,,443,218,218,218,218,218,218,218,218',
'218,218,218,218,,218,218,218,,218,218,,218,218,218,443,443,443,443,443',
'443,443,443,443,443,443,,443,443,,,443,443,,218,,,218,,,218,218,,,218',
',218,443,,443,218,443,443,443,443,443,443,443,218,443,,,,218,218,218',
'218,218,218,,,,218,218,,443,,,,,218,,,218,218,218,242,242,242,242,242',
'242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242',
'242,242,242,242,,,242,,,,,,242,242,242,242,242,242,242,242,242,242,242',
'242,,242,242,242,,242,242,,242,242,242,24,24,24,24,24,24,24,24,24,24',
'24,,24,24,,,24,24,,242,,,242,,,242,242,,,242,,242,24,,24,242,24,24,24',
'24,24,24,24,242,24,,,,242,242,242,242,242,242,,,,242,242,,24,,,,,242',
',,242,242,242,310,310,310,310,310,310,,,,310,310,,,,310,,310,310,310',
'310,310,310,310,,,,,,310,310,310,310,310,310,310,,,310,,,,,,310,310',
'310,310,310,310,310,310,310,310,310,310,,310,310,310,,310,310,,310,310',
'310,290,290,290,290,290,290,290,290,290,290,290,,290,290,,,290,290,',
'310,,,310,,,310,310,,,310,,310,290,,290,310,290,290,290,290,290,290',
'290,310,290,,,,310,310,310,310,310,310,,,,310,310,,290,,,,,310,,,310',
'310,310,315,315,315,315,315,315,,,,315,315,,,,315,,315,315,315,315,315',
'315,315,,,,,,315,315,315,315,315,315,315,,,315,,,,,,315,315,315,315',
'315,315,315,315,315,315,315,315,,315,315,315,,315,315,,315,315,315,496',
'496,496,496,496,496,496,496,496,496,496,,496,496,,,496,496,,315,,,315',
',,315,315,,,315,,315,496,,496,315,496,496,496,496,496,496,496,315,496',
',,,315,315,315,315,315,315,,,,315,315,496,496,,,,,315,,,315,315,315',
'342,342,342,342,342,342,,,,342,342,,,,342,,342,342,342,342,342,342,342',
',,,,,342,342,342,342,342,342,342,,,342,,,,,,342,342,342,342,342,342',
'342,342,342,342,342,342,,342,342,342,,342,342,,342,342,342,548,548,548',
'548,548,548,548,548,548,548,548,,548,548,,,548,548,,342,,,342,,,342',
'342,,,342,,342,548,,548,342,548,548,548,548,548,548,548,342,548,,,,342',
'342,342,342,342,342,,,,342,342,,548,,,,,342,,,342,342,342,352,352,352',
'352,352,352,,,,352,352,,,,352,,352,352,352,352,352,352,352,,,,,,352',
'352,352,352,352,352,352,,,352,,,,,,352,352,352,352,352,352,352,352,352',
'352,352,352,,352,352,352,,352,352,,352,352,352,802,802,802,802,802,802',
'802,802,802,802,802,,802,802,,,802,802,,352,,,352,,,352,352,,,352,,352',
'802,,802,352,802,802,802,802,802,802,802,352,802,,,,352,352,352,352',
'352,352,,,,352,352,,802,,,,,352,,,352,352,352,353,353,353,353,353,353',
',,,353,353,,,,353,,353,353,353,353,353,353,353,,,,,,353,353,353,353',
'353,353,353,,,353,,,,,,353,353,353,353,353,353,353,353,353,353,353,353',
',353,353,353,,353,353,,353,353,353,912,912,912,912,912,912,912,912,912',
'912,912,,912,912,,,912,912,,353,,,353,,,353,353,,,353,,353,912,,912',
'353,912,912,912,912,912,912,912,353,912,,,,353,353,353,353,353,353,',
',,353,353,,912,,,,,353,,,353,353,353,562,562,562,562,562,562,,,,562',
'562,,,,562,,562,562,562,562,562,562,562,,,,,,562,562,562,562,562,562',
'562,,,562,,,,,,562,562,562,562,562,562,562,562,562,562,562,562,,562',
'562,562,,562,562,,562,562,562,476,476,476,476,476,476,476,476,476,476',
'476,,476,476,,,476,476,,562,,,562,,,562,562,,,562,,562,476,,476,562',
'476,476,476,476,476,476,476,562,476,,,,562,562,562,562,562,562,,,,562',
'562,,,,,,,562,,,562,562,562,565,565,565,565,565,565,,,,565,565,,,,565',
',565,565,565,565,565,565,565,,,,,,565,565,565,565,565,565,565,,,565',
',,,,,565,565,565,565,565,565,565,565,565,565,565,565,,565,565,565,,565',
'565,,565,565,565,486,486,486,486,486,486,486,,,486,486,,,,,,486,486',
',565,,,565,,,565,565,,,565,,565,486,,486,565,486,486,486,486,486,486',
'486,565,486,,,,565,565,565,565,565,565,,,,565,565,,,,,,,565,,,565,565',
'565,646,646,646,646,646,646,,,,646,646,,,,646,,646,646,646,646,646,646',
'646,,,,,,646,646,646,646,646,646,646,,,646,,,,,,646,646,646,646,646',
'646,646,646,646,646,646,646,,646,646,646,,646,646,,646,646,646,487,487',
'487,487,487,487,487,,,487,487,,,,,,487,487,,646,,,646,,,646,646,,,646',
',646,487,,487,646,487,487,487,487,487,487,487,646,487,,,,646,646,646',
'646,646,646,,,,646,646,,,,,,,646,,,646,646,646,744,744,744,744,744,744',
',,,744,744,,,,744,,744,744,744,744,744,744,744,,,,,,744,744,744,744',
'744,744,744,,,744,,,,,,744,744,744,744,744,744,744,744,744,744,744,744',
',744,744,744,,744,744,,744,744,744,488,488,488,488,488,488,488,,,488',
'488,,,,,,488,488,,744,,,744,,,744,744,,,744,,744,488,,488,744,488,488',
'488,488,488,488,488,744,488,,,,744,744,744,744,744,744,,,,744,744,,',
',,,,744,,,744,744,744,755,755,755,755,755,755,,,,755,755,,,,755,,755',
'755,755,755,755,755,755,,,,,,755,755,755,755,755,755,755,,,755,,,,,',
'755,755,755,755,755,755,755,755,755,755,755,755,,755,755,755,,755,755',
',755,755,755,489,489,489,489,489,489,489,,,489,489,,,,,,489,489,,755',
',,755,,,755,755,,,755,,755,489,,489,755,489,489,489,489,489,489,489',
'755,489,,,,755,755,755,755,755,755,,,,755,755,,,,,,,755,,,755,755,755',
'756,756,756,756,756,756,,,,756,756,,,,756,,756,756,756,756,756,756,756',
',,,,,756,756,756,756,756,756,756,,,756,,,,,,756,756,756,756,756,756',
'756,756,756,756,756,756,,756,756,756,,756,756,,756,756,756,490,490,490',
'490,490,490,490,,,490,490,,,,,,490,490,,756,,,756,,,756,756,,,756,,756',
'490,,490,756,490,490,490,490,490,490,490,756,490,,,,756,756,756,756',
'756,756,,,,756,756,,,,,,,756,,,756,756,756,787,787,787,787,787,787,',
',,787,787,,,,787,,787,787,787,787,787,787,787,,,,,,787,787,787,787,787',
'787,787,,,787,,,,,,787,787,787,787,787,787,787,787,787,787,787,787,',
'787,787,787,,787,787,,787,787,787,491,491,491,491,491,491,491,,,491',
'491,,,,,,491,491,,787,,,787,,,787,787,,,787,,787,491,,491,787,491,491',
'491,491,491,491,491,787,491,,,,787,787,787,787,787,787,,,,787,787,,',
',,,,787,,,787,787,787,826,826,826,826,826,826,,,,826,826,,,,826,,826',
'826,826,826,826,826,826,,,,,,826,826,826,826,826,826,826,,,826,,,,,',
'826,826,826,826,826,826,826,826,826,826,826,826,,826,826,826,,826,826',
',826,826,826,494,494,494,494,494,494,494,,,494,494,,,,,,494,494,,826',
',,826,,,826,826,,,826,,826,494,,494,826,494,494,494,494,494,494,494',
'826,494,,,,826,826,826,826,826,826,,,,826,826,,,,,,,826,,,826,826,826',
'843,843,843,843,843,843,,,,843,843,,,,843,,843,843,843,843,843,843,843',
',,,,,843,843,843,843,843,843,843,,,843,,,,,,843,843,843,843,843,843',
'843,843,843,843,843,843,,843,843,843,,843,843,,843,843,843,495,495,495',
'495,495,495,495,495,,495,495,,,,,,495,495,,843,,,843,,,843,843,,,843',
',843,495,,495,843,495,495,495,495,495,495,495,843,495,,,,843,843,843',
'843,843,843,,,,843,843,,,,,,,843,,,843,843,843,855,855,855,855,855,855',
',,,855,855,,,,855,,855,855,855,855,855,855,855,,,,,,855,855,855,855',
'855,855,855,,,855,,,,,,855,855,855,855,855,855,855,855,855,855,855,855',
',855,855,855,,855,855,,855,855,855,484,,,,,,,,,,,,,,,,484,484,,855,',
',855,,485,855,855,,,855,,855,484,,484,855,484,484,484,484,485,485,,855',
',,,,855,855,855,855,855,855,,,485,855,855,,485,485,485,485,,855,,,855',
'855,855,868,868,868,868,868,868,,,,868,868,,,,868,,868,868,868,868,868',
'868,868,,,,,,868,868,868,868,868,868,868,,,868,,,,,,868,868,868,868',
'868,868,868,868,868,868,868,868,,868,868,868,,868,868,,868,868,868,',
',,,,,,,,,,,,,,,,,,868,,,868,,,868,868,,,868,,868,,,,868,,,,,,,,868,',
',,,868,868,868,868,868,868,,,,868,868,,,,,,,868,,,868,868,868,878,878',
'878,878,878,878,,,,878,878,,,,878,,878,878,878,878,878,878,878,,,,,',
'878,878,878,878,878,878,878,,,878,,,,,,878,878,878,878,878,878,878,878',
'878,878,878,878,,878,878,878,,878,878,,878,878,878,,,,,,,,,,,,,,,,,',
',,878,,,878,,,878,878,,,878,,878,,,,878,,,,,,,,878,,,,,878,878,878,878',
'878,878,,,,878,878,,,,,,,878,,,878,878,878,879,879,879,879,879,879,',
',,879,879,,,,879,,879,879,879,879,879,879,879,,,,,,879,879,879,879,879',
'879,879,,,879,,,,,,879,879,879,879,879,879,879,879,879,879,879,879,',
'879,879,879,,879,879,,879,879,879,,,,,,,,,,,,,,,,,,,,879,,,879,,,879',
'879,,,879,,879,,,,879,,,,,,,,879,,,,,879,879,879,879,879,879,,,,879',
'879,,,,,,,879,,,879,879,879,928,928,928,928,928,928,,,,928,928,,,,928',
',928,928,928,928,928,928,928,,,,,,928,928,928,928,928,928,928,,,928',
',,,,,928,928,928,928,928,928,928,928,928,928,928,928,,928,928,928,,928',
'928,,928,928,928,,,,,,,,,,,,,,,,,,,,928,,,928,,,928,928,,,928,,928,',
',,928,,,,,,,,928,,,,,928,928,928,928,928,928,,,,928,928,,,,,,,928,,',
'928,928,928,929,929,929,929,929,929,,,,929,929,,,,929,,929,929,929,929',
'929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,929,929,929',
'929,929,929,929,929,929,929,929,929,,929,929,929,,929,929,,929,929,929',
',,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,929,,,,929,,,,,,,,929',
',,,,929,929,929,929,929,929,,,,929,929,,,,,,,929,,,929,929,929,941,941',
'941,941,941,941,,,,941,941,,,,941,,941,941,941,941,941,941,941,,,,,',
'941,941,941,941,941,941,941,,,941,,,,,,941,941,941,941,941,941,941,941',
'941,941,941,941,,941,941,941,,941,941,,941,941,941,,,,,,,,,,,,,,,,,',
',,941,,,941,,,941,941,,,941,,941,,,,941,,,,,,,,941,,,,,941,941,941,941',
'941,941,,,,941,941,,,,,,,941,,,941,941,941,988,988,988,988,988,988,',
',,988,988,,,,988,,988,988,988,988,988,988,988,,,,,,988,988,988,988,988',
'988,988,,,988,,,,,,988,988,988,988,988,988,988,988,988,988,988,988,',
'988,988,988,,988,988,,988,988,988,,,,,,,,,,,,,,,,,,,,988,,,988,,,988',
'988,,,988,,988,,,,988,,,,,,,,988,,,,,988,988,988,988,988,988,,,,988',
'988,,,,,,,988,,,988,988,988,995,995,995,995,995,995,,,,995,995,,,,995',
',995,995,995,995,995,995,995,,,,,,995,995,995,995,995,995,995,,,995',
',,,,,995,995,995,995,995,995,995,995,995,995,995,995,,995,995,995,,995',
'995,,995,995,995,,,,,,,,,,,,,,,,,,,,995,,,995,,,995,995,,,995,,995,',
',,995,,,,,,,,995,,,,,995,995,995,995,995,995,,,,995,995,,,,,,,995,,',
'995,995,995,1001,1001,1001,1001,1001,1001,,,,1001,1001,,,,1001,,1001',
'1001,1001,1001,1001,1001,1001,,,,,,1001,1001,1001,1001,1001,1001,1001',
',,1001,,,,,,1001,1001,1001,1001,1001,1001,1001,1001,1001,1001,1001,1001',
',1001,1001,1001,,1001,1001,,1001,1001,1001,,,,,,,,,,,,,,,,,,,,1001,',
',1001,,,1001,1001,,,1001,,1001,,,,1001,,,,,,,,1001,,,,,1001,1001,1001',
'1001,1001,1001,,,,1001,1001,,,,,,,1001,,,1001,1001,1001,1002,1002,1002',
'1002,1002,1002,,,,1002,1002,,,,1002,,1002,1002,1002,1002,1002,1002,1002',
',,,,,1002,1002,1002,1002,1002,1002,1002,,,1002,,,,,,1002,1002,1002,1002',
'1002,1002,1002,1002,1002,1002,1002,1002,,1002,1002,1002,,1002,1002,',
'1002,1002,1002,,,,,,,,,,,,,,,,,,,,1002,,,1002,,,1002,1002,,,1002,,1002',
',,,1002,,,,,,,,1002,,,,,1002,1002,1002,1002,1002,1002,,,,1002,1002,',
',,,,,1002,,,1002,1002,1002,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,',
',8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,',
',,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,',
',,8,8,,,,,,,8,,,8,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23',
'23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23',
',23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,979,23',
'979,979,979,979,979,23,,,,,,,,23,979,,,,23,23,23,23,23,23,,,,23,23,',
',,,,,23,979,,23,23,23,32,32,32,,32,,979,979,32,32,,,,32,,32,32,32,32',
'32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,979,,,32,,,32,32,32,32,32',
'32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32',
'32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32',
',32,32,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,',
'33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33',
'33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33',
',33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,37,37,37,,37,,,,37',
'37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,',
'37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,',
',,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37',
'37,,,,,,,37,,,37,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38',
'38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38',
',38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,1043,38,1043',
'1043,1043,1043,1043,,,,,,,,,,1043,,,,38,38,38,38,38,38,,,,38,38,,,,38',
',,38,1043,,38,38,38,45,45,45,,45,,1043,1043,45,45,,,,45,,45,45,45,45',
'45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,1043,,,45,,,45,45,45,45,45',
'45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45',
'45,,1052,45,1052,1052,1052,1052,1052,45,,,,,,,,45,1052,,,,45,45,45,45',
'45,45,,,,45,45,,,,,,,45,1052,,45,45,45,46,46,46,,46,,1052,1052,46,46',
',,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,1052,',
',46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,',
',,,,,,,,46,,,46,,,46,46,,1054,46,1054,1054,1054,1054,1054,46,,,,,,,',
'46,1054,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,1054,,46,46,46,48,48',
'48,,48,,1054,1054,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48',
'48,48,48,,,48,,,,1054,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48',
',48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,1056,48,1056,1056,1056',
'1056,1056,48,,,,,,,,48,1056,,,,48,48,48,48,48,48,,,,48,48,,,,,,,48,1056',
',48,48,48,62,62,62,62,62,,1056,1056,62,62,,,,62,,62,62,62,62,62,62,62',
',,,,,62,62,62,62,62,62,62,,,62,,,,1056,,62,62,,62,62,62,62,62,62,62',
'62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62',
',,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,,62',
'62,62,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67',
'67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67',
',67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,1078,67,1078,1078,1078',
'1078,1078,67,,,,,,,,67,1078,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,1078',
',67,67,67,68,68,68,,68,,1078,1078,68,68,,,,68,,68,68,68,68,68,68,68',
',,,,,68,68,68,68,68,68,68,,,68,,,,1078,,,68,,,68,68,68,68,68,68,68,68',
',68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,',
',,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68',
'71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71',
'71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71',
'71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71',
'71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,72,72,72,,72,,,,72,72',
',,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72',
',,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,,,,,,,,,,,,,,',
'72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72,72,72,,,,72,72',
',,,,,,72,,,72,72,72,125,125,125,125,125,,,,125,125,,,,125,,125,125,125',
'125,125,125,125,,,,,,125,125,125,125,125,125,125,,,125,,,,,,125,125',
'125,125,125,125,125,125,125,125,125,125,,125,125,125,,125,125,,125,125',
'125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,,125,,125,,,,125,,,,,,,',
'125,,,,,125,125,125,125,125,125,,,,125,125,,,,,,125,125,,,125,125,125',
'130,130,130,,130,,,,130,130,,,,130,,130,130,130,130,130,130,130,,,,',
',130,130,130,130,130,130,130,,,130,,,,,,,130,,,130,130,130,130,130,130',
'130,130,,130,130,130,,130,130,,130,130,130,,,,,,,,,,,,,,,,,,,,130,,',
'130,,,130,130,,,130,,,,,,130,,,,,,,,130,,,,,130,130,130,130,130,130',
',,,130,130,,,,,,,130,,,130,130,130,131,131,131,,131,,,,131,131,,,,131',
',131,131,131,131,131,131,131,,,,,,131,131,131,131,131,131,131,,,131',
',,,,,,131,,,131,131,131,131,131,131,131,131,,131,131,131,,131,131,,131',
'131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,,,,,,131,,,,,,',
',131,,,,,131,131,131,131,131,131,,,,131,131,,,,,,,131,,,131,131,131',
'132,132,132,,132,,,,132,132,,,,132,,132,132,132,132,132,132,132,,,,',
',132,132,132,132,132,132,132,,,132,,,,,,,132,,,132,132,132,132,132,132',
'132,132,,132,132,132,,132,132,,132,132,132,,,,,,,,,,,,,,,,,,,,132,,',
'132,,,132,132,,,132,,,,,,132,,,,,,,,132,,,,,132,132,132,132,132,132',
',,,132,132,,,,,,,132,,,132,132,132,133,133,133,,133,,,,133,133,,,,133',
',133,133,133,133,133,133,133,,,,,,133,133,133,133,133,133,133,,,133',
',,,,,,133,,,133,133,133,133,133,133,133,133,,133,133,133,,133,133,,133',
'133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,,,,,133,,,,,,',
',133,,,,,133,133,133,133,133,133,,,,133,133,,,,,,,133,,,133,133,133',
'134,134,134,134,134,,,,134,134,,,,134,,134,134,134,134,134,134,134,',
',,,,134,134,134,134,134,134,134,,,134,,,,,,134,134,,134,134,134,134',
'134,134,134,134,134,,134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,',
',,,,,,134,,,134,,,134,134,,,134,,134,,,,134,,,,,,,,134,,,,,134,134,134',
'134,134,134,,,,134,134,,,,,,,134,,,134,134,134,219,219,219,,219,,,,219',
'219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219,219,219',
'219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219,219,',
'219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,219',
',,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,',
',219,219,219,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220',
'220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220',
'220,220,220,220,220,,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,',
',,,,,,220,,,220,,,220,220,,,220,,220,,,,220,,,,,,,,220,,,,,220,220,220',
'220,220,220,,,,220,220,,,,,,,220,,,220,220,220,221,221,221,,221,,,,221',
'221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221,221,221',
'221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221,,221,221,221,',
'221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,',
',,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,,,,,,,221,',
',221,221,221,222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222',
'222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222',
'222,222,222,222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,',
',,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222',
'222,222,222,,,,222,222,,,,,,,222,,,222,222,222,223,223,223,,223,,,,223',
'223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223',
'223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,',
'223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,',
',,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,',
',223,223,223,224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224',
'224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224',
'224,224,224,224,224,224,224,224,224,,224,224,,224,224,224,,,,,,,,,,',
',,,,,,,,,224,,,224,,,224,224,,,224,,224,,224,,224,,,,,,,,224,,,,,224',
'224,224,224,224,224,,,,224,224,,,,,,,224,,224,224,224,224,228,228,228',
',228,,,,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228',
'228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228,,228',
'228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228',
',,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,,,',
',,,228,,,228,228,228,229,229,229,,229,,,,229,229,,,,229,,229,229,229',
'229,229,229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229',
'229,229,229,229,229,229,229,,229,229,229,,229,229,,229,229,229,,,,,',
',,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229',
'229,229,229,229,229,,,,229,229,,,,,,,229,,,229,229,229,230,230,230,',
'230,,,,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230',
'230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230',
'230,230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230',
',,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,230',
',,,,,230,,,230,230,230,241,241,241,,241,,,,241,241,,,,241,,241,241,241',
'241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241',
'241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,',
',,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241',
'241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241,244,244,244,',
'244,,,,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244',
'244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244',
'244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244',
',,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,',
',,,244,,,244,244,244,245,245,245,,245,,,,245,245,,,,245,,245,245,245',
'245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245',
'245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245,245,,,,,',
',,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245',
'245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245,245,246,246,246,',
'246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246',
'246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246',
'246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246',
',,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,',
',,,246,,,246,246,246,247,247,247,,247,,,,247,247,,,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,',
',,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247',
'247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,248,248,248,',
'248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248',
'248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248',
'248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248',
',,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,',
',,,248,,,248,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,',
',,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249',
'249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,250,250,250,',
'250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250',
'250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250',
',,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,',
',,,250,,,250,250,250,251,251,251,,251,,,,251,251,,,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,',
',,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251',
'251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,252,252,252,',
'252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252',
'252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252',
'252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252',
',,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,',
',,,252,,,252,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253',
'253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253',
'253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,',
',,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253',
'253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,254,254,254,',
'254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254',
'254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254',
'254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254',
',,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,',
',,,254,,,254,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,',
',,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,256,256,256,',
'256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256',
'256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,',
',,,256,,,256,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257',
'257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257',
'257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,',
',,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257',
'257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,258,258,258,',
'258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258',
'258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258',
'258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258',
',,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,',
',,,258,,,258,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,',
',,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259',
'259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,260,260,260,',
'260,,,,260,260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260',
'260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260',
'260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260',
',,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,',
',,,260,,,260,260,260,261,261,261,,261,,,,261,261,,,,261,,261,261,261',
'261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261',
'261,261,261,261,261,261,261,,261,261,261,,261,261,,261,261,261,,,,,',
',,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261',
'261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261,261,262,262,262,',
'262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262,262,262',
'262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262',
'262,262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262',
',,262,,,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,',
',,,262,,,262,262,262,263,263,263,,263,,,,263,263,,,,263,,263,263,263',
'263,263,263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263',
'263,263,263,263,263,263,263,,263,263,263,,263,263,,263,263,263,,,,,',
',,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263',
'263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263,263,264,264,264,',
'264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264',
'264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264',
'264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264',
',,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,',
',,,264,,,264,264,264,265,265,265,,265,,,,265,265,,,,265,,265,265,265',
'265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265',
'265,265,265,265,265,265,265,,265,265,265,,265,265,,265,265,265,,,,,',
',,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265',
'265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265,270,270,270,',
'270,,,,270,270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270,270',
'270,270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270,,270',
'270,270,,270,270,,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270',
',,270,,,,,,270,,,,,,,,270,,,,,270,270,270,270,270,270,,,,270,270,,,',
',,,270,,,270,270,270,278,278,278,,278,,,,278,278,,,,278,,278,278,278',
'278,278,278,278,,,,,,278,278,278,278,278,278,278,,,278,,,,,,,278,,,278',
'278,278,278,278,278,278,278,278,278,278,278,,278,278,,278,278,278,,',
',,,,,,,,,,,,,,,,,278,,,278,,,278,278,,,278,,278,,278,,278,,,,,,,,278',
',,,,278,278,278,278,278,278,,,,278,278,,,,,,,278,,278,278,278,278,279',
'279,279,,279,,,,279,279,,,,279,,279,279,279,279,279,279,279,,,,,,279',
'279,279,279,279,279,279,,,279,,,,,,,279,,,279,279,279,279,279,279,279',
'279,279,279,279,279,,279,279,,279,279,279,,,,,,,,,,,,,,,,,,,,279,,,279',
',,279,279,,,279,,279,,279,,279,,,,,,,,279,,,,,279,279,279,279,279,279',
',,,279,279,,,,,,,279,,279,279,279,279,288,288,288,,288,,,,288,288,,',
',288,,288,288,288,288,288,288,288,,,,,,288,288,288,288,288,288,288,',
',288,,,,,,,288,,,288,288,288,288,288,288,288,288,288,288,288,288,,288',
'288,,288,288,288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,288,',
'288,,288,,,,,,,,288,,,,,288,288,288,288,288,288,,,,288,288,288,,,,,',
'288,,288,288,288,288,295,295,295,,295,,,,295,295,,,,295,,295,295,295',
'295,295,295,295,,,,,,295,295,295,295,295,295,295,,,295,,,,,,,295,,,295',
'295,295,295,295,295,295,295,,295,295,295,,295,295,,295,295,295,,,,,',
',,,,,,,,,,,,,,295,,,295,,,295,295,,,295,,,,,,295,,,,,,,,295,,,,,295',
'295,295,295,295,295,,,,295,295,,,,,,,295,,,295,295,295,297,297,297,',
'297,,,,297,297,,,,297,,297,297,297,297,297,297,297,,,,,,297,297,297',
'297,297,297,297,,,297,,,,,,,297,,,297,297,297,297,297,297,297,297,,297',
'297,297,,297,297,,297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297',
',,297,,,,,,297,,,,,,,,297,,,,,297,297,297,297,297,297,,,,297,297,,,',
',,,297,,,297,297,297,299,299,299,,299,,,,299,299,,,,299,,299,299,299',
'299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,,,299,,,299',
'299,299,299,299,299,299,299,,299,299,299,,299,299,,299,299,299,,,,,',
',,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,299,,,,,,,,299,,,,,299',
'299,299,299,299,299,,,,299,299,,,,,,,299,,,299,299,299,300,300,300,',
'300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300',
'300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300',
'300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300',
',,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300,300,,,',
',,,300,,,300,300,300,306,306,306,306,306,,,,306,306,,,,306,,306,306',
'306,306,306,306,306,,,,,,306,306,306,306,306,306,306,,,306,,,,,,306',
'306,,306,306,306,306,306,306,306,306,306,,306,306,306,,306,306,,306',
'306,306,,,,,,,,,,,,,,,,,,,,306,,,306,,,306,306,,,306,,306,,,,306,,,',
',,,,306,,,,,306,306,306,306,306,306,,,,306,306,,,,,,,306,,,306,306,306',
'314,314,314,,314,,,,314,314,,,,314,,314,314,314,314,314,314,314,,,,',
',314,314,314,314,314,314,314,,,314,,,,,,,314,,,314,314,314,314,314,314',
'314,314,,314,314,314,,314,314,,,,314,,,,,,,,,,,,,,,,,,,,314,,,314,,',
'314,314,,,314,,,,,,,,,,,,,,,,,,,314,314,314,314,314,314,,,,314,314,',
',,314,,,314,,,314,314,314,331,331,331,,331,,,,331,331,,,,331,,331,331',
'331,331,331,331,331,,,,,,331,331,331,331,331,331,331,,,331,,,,,,,331',
',,331,331,331,331,331,331,331,331,,331,331,331,,331,331,,,,331,,,,,',
',,,,,,,,,,,,,,331,,,331,,,331,331,,,331,,,,,,,,,,,,,,,,,,,331,331,331',
'331,331,331,,,,331,331,,,,,,,331,,,331,331,331,339,339,339,,339,,,,339',
'339,,,,339,,339,339,339,339,339,339,339,,,,,,339,339,339,339,339,339',
'339,,,339,,,,,,,339,,,339,339,339,339,339,339,339,339,,339,339,339,',
'339,339,,339,339,339,,,,,,,,,,,,,,,,,,,,339,,,339,,,339,339,,,339,,',
',,,339,,,,,,,,339,,,,,339,339,339,339,339,339,,,,339,339,,,,,,,339,',
',339,339,339,341,341,341,,341,,,,341,341,,,,341,,341,341,341,341,341',
'341,341,,,,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341,341,341',
'341,341,341,341,341,,341,341,341,,341,341,,341,341,341,,,,,,,,,,,,,',
',,,,,,341,,,341,341,,341,341,,,341,,,,,,341,,,,,,,,341,,,,,341,341,341',
'341,341,341,,,,341,341,,,,,,,341,,,341,341,341,345,345,345,,345,,,,345',
'345,,,,345,,345,345,345,345,345,345,345,,,,,,345,345,345,345,345,345',
'345,,,345,,,,,,,345,,,345,345,345,345,345,345,345,345,345,345,345,345',
',345,345,,345,345,345,,,,,,,,,,,,,,,,,,,,345,,,345,,,345,345,,,345,',
'345,,,,345,,,,,,,,345,,,,,345,345,345,345,345,345,,,,345,345,,,,,,,345',
',345,345,345,345,346,346,346,,346,,,,346,346,,,,346,,346,346,346,346',
'346,346,346,,,,,,346,346,346,346,346,346,346,,,346,,,,,,,346,,,346,346',
'346,346,346,346,346,346,346,346,346,346,,346,346,,346,346,346,,,,,,',
',,,,,,,,,,,,,346,,,346,,,346,346,,,346,,,,,,346,,,,,,,,346,,,,,346,346',
'346,346,346,346,,,,346,346,,,,,,,346,,346,346,346,346,351,351,351,,351',
',,,351,351,,,,351,,351,351,351,351,351,351,351,,,,,,351,351,351,351',
'351,351,351,,,351,,,,,,,351,,,351,351,351,351,351,351,351,351,,351,351',
'351,,351,351,,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351,,,351,351,,,351',
',,,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351,351,,,,,,,351',
',,351,351,351,365,365,365,,365,,,,365,365,,,,365,,365,365,365,365,365',
'365,365,,,,,,365,365,365,365,365,365,365,,,365,,,,,,,365,,,365,365,365',
'365,365,365,365,365,,365,365,365,,365,365,,,,365,,,,,,,,,,,,,,,,,,,',
'365,,,365,,,365,365,,,365,,,,,,,,,,,,,,,,,,,365,365,365,365,365,365',
',,,365,365,,,,,,,365,,,365,365,365,367,367,367,,367,,,,367,367,,,,367',
',367,367,367,367,367,367,367,,,,,,367,367,367,367,367,367,367,,,367',
',,,,,,367,,,367,367,367,367,367,367,367,367,,367,367,367,,367,367,,',
',367,,,,,,,,,,,,,,,,,,,,367,,,367,,,367,367,,,367,,,,,,,,,,,,,,,,,,',
'367,367,367,367,367,367,,,,367,367,,,,,,,367,,,367,367,367,427,427,427',
',427,,,,427,427,,,,427,,427,427,427,427,427,427,427,,,,,,427,427,427',
'427,427,427,427,,,427,,,,,,,427,,,427,427,427,427,427,427,427,427,,427',
'427,427,,427,427,,427,427,427,,,,,,,,,,,,,,,,,,,,427,,,427,,,427,427',
',,427,,,,,,427,,,,,,,,427,,,,,427,427,427,427,427,427,,,,427,427,,,',
',,,427,,,427,427,427,470,470,470,,470,,,,470,470,,,,470,,470,470,470',
'470,470,470,470,,,,,,470,470,470,470,470,470,470,,,470,,,,,,,470,,,470',
'470,470,470,470,470,470,470,470,470,470,470,,470,470,,470,470,470,,',
',,,,,,,,,,,,,,,,,470,,,470,,,470,470,,,470,,470,,470,,470,,,,,,,,470',
',,,,470,470,470,470,470,470,,,,470,470,,,,,,,470,,470,470,470,470,472',
'472,472,,472,,,,472,472,,,,472,,472,472,472,472,472,472,472,,,,,,472',
'472,472,472,472,472,472,,,472,,,,,,,472,,,472,472,472,472,472,472,472',
'472,,472,472,472,,472,472,,472,472,472,,,,,,,,,,,,,,,,,,,,472,,,472',
',,472,472,,,472,,,,,,472,,,,,,,,472,,,,,472,472,472,472,472,472,,,,472',
'472,,,,,,,472,,,472,472,472,473,473,473,,473,,,,473,473,,,,473,,473',
'473,473,473,473,473,473,,,,,,473,473,473,473,473,473,473,,,473,,,,,',
',473,,,473,473,473,473,473,473,473,473,,473,473,473,,473,473,,473,473',
'473,,,,,,,,,,,,,,,,,,,,473,,,473,,,473,473,,,473,,,,,,473,,,,,,,,473',
',,,,473,473,473,473,473,473,,,,473,473,,,,,,,473,,,473,473,473,474,474',
'474,,474,,,,474,474,,,,474,,474,474,474,474,474,474,474,,,,,,474,474',
'474,474,474,474,474,,,474,,,,,,,474,,,474,474,474,474,474,474,474,474',
',474,474,474,,474,474,,474,474,474,,,,,,,,,,,,,,,,,,,,474,,,474,,,474',
'474,,,474,,,,,,474,,,,,,,,474,,,,,474,474,474,474,474,474,,,,474,474',
',,,,,,474,,,474,474,474,512,512,512,,512,,,,512,512,,,,512,,512,512',
'512,512,512,512,512,,,,,,512,512,512,512,512,512,512,,,512,,,,,,,512',
',,512,512,512,512,512,512,512,512,512,512,512,512,,512,512,,512,512',
'512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,512,,512,,512,,,,',
',,,512,,,,,512,512,512,512,512,512,,,,512,512,,,,,,,512,,512,512,512',
'512,515,515,515,,515,,,,515,515,,,,515,,515,515,515,515,515,515,515',
',,,,,515,515,515,515,515,515,515,,,515,,,,,,,515,,,515,515,515,515,515',
'515,515,515,515,515,515,515,,515,515,,515,515,515,,,,,,,,,,,,,,,,,,',
',515,,,515,,,515,515,,,515,,,,515,,515,,,,,,,,515,,,,,515,515,515,515',
'515,515,,,,515,515,,,,,,,515,,515,515,515,515,517,517,517,,517,,,,517',
'517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517,517,517,517,517',
'517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517,,517,517,517,',
'517,517,,517,517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517,,',
',,,517,,,,,,,,517,,,,,517,517,517,517,517,517,,,,517,517,,,,,,,517,',
',517,517,517,522,522,522,522,522,,,,522,522,,,,522,,522,522,522,522',
'522,522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,522,522,522',
'522,522,522,522,522,522,522,522,522,,522,522,522,,522,522,,522,522,522',
',,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522,,522,,,,522,,,,,,,,522',
',,,,522,522,522,522,522,522,,,,522,522,,,,,,522,522,,,522,522,522,530',
'530,530,,530,,,,530,530,,,,530,,530,530,530,530,530,530,530,,,,,,530',
'530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530,530,530,530,530',
'530,,530,530,530,,530,530,,,,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530',
'530,,,530,,,,,,,,,,,,,,,,,,,530,530,530,530,530,530,,,,530,530,,,,,',
',530,,,530,530,530,532,532,532,,532,,,,532,532,,,,532,,532,532,532,532',
'532,532,532,,,,,,532,532,532,532,532,532,532,,,532,,,,,,,532,,,532,532',
'532,532,532,532,532,532,532,532,532,532,,532,532,,532,532,532,,,,,,',
',,,,,,,,,,,,,532,,,532,,,532,532,,,532,,532,,532,,532,,,,,,,,532,,,',
',532,532,532,532,532,532,,,,532,532,,,,,,,532,,532,532,532,532,539,539',
'539,,539,,,,539,539,,,,539,,539,539,539,539,539,539,539,,,,,,539,539',
'539,539,539,539,539,,,539,,,,,,,539,,,539,539,539,539,539,539,539,539',
',539,539,539,,539,539,,,,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539',
',,539,,,,,,,,,,,,,,,,,,,539,539,539,539,539,539,,,,539,539,,,,,,,539',
',,539,539,539,542,542,542,,542,,,,542,542,,,,542,,542,542,542,542,542',
'542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542,542,542',
'542,542,542,542,542,,542,542,542,,542,542,,542,542,542,,,,,,,,,,,,,',
',,,,,,542,,,542,,,542,542,,,542,,,,,,542,,,,,,,,542,,,,,542,542,542',
'542,542,542,,,,542,542,,,,,,,542,,,542,542,542,543,543,543,,543,,,,543',
'543,,,,543,,543,543,543,543,543,543,543,,,,,,543,543,543,543,543,543',
'543,,,543,,,,,,,543,,,543,543,543,543,543,543,543,543,,543,543,543,',
'543,543,,543,543,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543,543,,,543,,',
',,,543,,,,,,,,543,,,,,543,543,543,543,543,543,,,,543,543,,,,,,,543,',
',543,543,543,544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544',
'544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544',
'544,544,544,544,544,,544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,',
',,,,,,544,,,544,,,544,544,,,544,,,,,,544,,,,,,,,544,,,,,544,544,544',
'544,544,544,,,,544,544,,,,,,,544,,,544,544,544,549,549,549,,549,,,,549',
'549,,,,549,,549,549,549,549,549,549,549,,,,,,549,549,549,549,549,549',
'549,,,549,,,,,,,549,,,549,549,549,549,549,549,549,549,,549,549,549,',
'549,549,,549,549,549,,,,,,,,,,,,,,,,,,,,549,,,549,,,549,549,,,549,,',
',,,549,,,,,,,,549,,,,,549,549,549,549,549,549,,,,549,549,,,,,,,549,',
',549,549,549,573,573,573,,573,,,,573,573,,,,573,,573,573,573,573,573',
'573,573,,,,,,573,573,573,573,573,573,573,,,573,,,,,,,573,,,573,573,573',
'573,573,573,573,573,573,573,573,573,,573,573,,573,573,573,,,,,,,,,,',
',,,,,,,,,573,,,573,,,573,573,,,573,,573,,573,,573,,,,,,,,573,,,,,573',
'573,573,573,573,573,,,,573,573,,,,,,,573,,573,573,573,573,585,585,585',
',585,,,,585,585,,,,585,,585,585,585,585,585,585,585,,,,,,585,585,585',
'585,585,585,585,,,585,,,,,,,585,,,585,585,585,585,585,585,585,585,,585',
'585,585,,585,585,,585,585,585,,,,,,,,,,,,,,,,,,,,585,,,585,,,585,585',
',,585,,,,,,585,,,,,,,,585,,,,,585,585,585,585,585,585,,,,585,585,,,',
',,,585,,,585,585,585,591,591,591,,591,,,,591,591,,,,591,,591,591,591',
'591,591,591,591,,,,,,591,591,591,591,591,591,591,,,591,,,,,,,591,,,591',
'591,591,591,591,591,591,591,,591,591,591,,591,591,,591,591,591,,,,,',
',,,,,,,,,,,,,,591,,,591,,,591,591,,,591,,,,,,591,,,,,,,,591,,,,,591',
'591,591,591,591,591,,,,591,591,,,,,,,591,,,591,591,591,611,611,611,',
'611,,,,611,611,,,,611,,611,611,611,611,611,611,611,,,,,,611,611,611',
'611,611,611,611,,,611,,,,,,,611,,,611,611,611,611,611,611,611,611,,611',
'611,611,,611,611,,611,611,611,,,,,,,,,,,,,,,,,,,,611,,,611,,,611,611',
',,611,,,,,,611,,,,,,,,611,,,,,611,611,611,611,611,611,,,,611,611,,,',
',,,611,,,611,611,611,651,651,651,,651,,,,651,651,,,,651,,651,651,651',
'651,651,651,651,,,,,,651,651,651,651,651,651,651,,,651,,,,,,,651,,,651',
'651,651,651,651,651,651,651,,651,651,651,,651,651,,651,651,651,,,,,',
',,,,,,,,,,,,,,651,,,651,,,651,651,,,651,,651,,,,651,,,,,,,,651,,,,,651',
'651,651,651,651,651,,,,651,651,,,,,,,651,,,651,651,651,652,652,652,',
'652,,,,652,652,,,,652,,652,652,652,652,652,652,652,,,,,,652,652,652',
'652,652,652,652,,,652,,,,,,,652,,,652,652,652,652,652,652,652,652,,652',
'652,652,,652,652,,652,652,652,,,,,,,,,,,,,,,,,,,,652,,,652,,,652,652',
',,652,,,,,,652,,,,,,,,652,,,,,652,652,652,652,652,652,,,,652,652,,,',
',,,652,,,652,652,652,653,653,653,,653,,,,653,653,,,,653,,653,653,653',
'653,653,653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,,,653,,,653',
'653,653,653,653,653,653,653,653,653,653,653,,653,653,,653,653,653,,',
',,,,,,,,,,,,,,,,,653,,,653,,,653,653,,,653,,653,,653,,653,,,,,,,,653',
',,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,,653,653,653,653,656',
'656,656,,656,,,,656,656,,,,656,,656,656,656,656,656,656,656,,,,,,656',
'656,656,656,656,656,656,,,656,,,,,,,656,,,656,656,656,656,656,656,656',
'656,,656,656,656,,656,656,,656,656,656,,,,,,,,,,,,,,,,,,,,656,,,656',
',,656,656,,,656,,,,,,656,,,,,,,,656,,,,,656,656,656,656,656,656,,,,656',
'656,,,,,,,656,,,656,656,656,659,659,659,,659,,,,659,659,,,,659,,659',
'659,659,659,659,659,659,,,,,,659,659,659,659,659,659,659,,,659,,,,,',
',659,,,659,659,659,659,659,659,659,659,659,659,659,659,,659,659,,659',
'659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,659,,659,,659',
',,,,,,,659,,,,,659,659,659,659,659,659,,,,659,659,,,,,,,659,,659,659',
'659,659,660,660,660,,660,,,,660,660,,,,660,,660,660,660,660,660,660',
'660,,,,,,660,660,660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660',
'660,660,660,660,660,660,660,660,,660,660,,660,660,660,,,,,,,,,,,,,,',
',,,,,660,,,660,,,660,660,,,660,,,,660,,660,,,,,,,,660,,,,,660,660,660',
'660,660,660,,,,660,660,,,,,,,660,,660,660,660,660,661,661,661,,661,',
',,661,661,,,,661,,661,661,661,661,661,661,661,,,,,,661,661,661,661,661',
'661,661,,,661,,,,,,,661,,,661,661,661,661,661,661,661,661,,661,661,661',
',661,661,,661,661,661,,,,,,,,,,,,,,,,,,,,661,,,661,,,661,661,,,661,',
',,,,661,,,,,,,,661,,,,,661,661,661,661,661,661,,,,661,661,,,,,,,661',
',,661,661,661,662,662,662,,662,,,,662,662,,,,662,,662,662,662,662,662',
'662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662,,,662,662,662',
'662,662,662,662,662,,662,662,662,,662,662,,662,662,662,,,,,,,,,,,,,',
',,,,,,662,,,662,,,662,662,,,662,,,,,,662,,,,,,,,662,,,,,662,662,662',
'662,662,662,,,,662,662,,,,,,,662,,,662,662,662,667,667,667,,667,,,,667',
'667,,,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667',
'667,,,667,,,,,,,667,,,667,667,667,667,667,667,667,667,,667,667,667,',
'667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,',
',,,667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667,',
',667,667,667,668,668,668,,668,,,,668,668,,,,668,,668,668,668,668,668',
'668,668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668,,,668,668,668',
'668,668,668,668,668,,668,668,668,,668,668,,668,668,668,,,,,,,,,,,,,',
',,,,,,668,,,668,,,668,668,,,668,,,,,,668,,,,,,,,668,,,,,668,668,668',
'668,668,668,,,,668,668,,,,,,,668,,,668,668,668,692,692,692,,692,,,,692',
'692,,,,692,,692,692,692,692,692,692,692,,,,,,692,692,692,692,692,692',
'692,,,692,,,,,,,692,,,692,692,692,692,692,692,692,692,,692,692,692,',
'692,692,,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692,692,,,692,,',
',,,692,,,,,,,,692,,,,,692,692,692,692,692,692,,,,692,692,,,,,,,692,',
',692,692,692,698,698,698,,698,,,,698,698,,,,698,,698,698,698,698,698',
'698,698,,,,,,698,698,698,698,698,698,698,,,698,,,,,,,698,,,698,698,698',
'698,698,698,698,698,,698,698,698,,698,698,,,,698,,,,,,,,,,,,,,,,,,,',
'698,,,698,,,698,698,,,698,,,,,,,,,,,,,,,,,,,698,698,698,698,698,698',
',,,698,698,,,,,,,698,,,698,698,698,709,709,709,,709,,,,709,709,,,,709',
',709,709,709,709,709,709,709,,,,,,709,709,709,709,709,709,709,,,709',
',,,,,,709,,,709,709,709,709,709,709,709,709,,709,709,709,,709,709,,',
',709,,,,,,,,,,,,,,,,,,,,709,,,709,,,709,709,,,709,,,,,,,,,,,,,,,,,,',
'709,709,709,709,709,709,,,,709,709,,,,,,,709,,,709,709,709,716,716,716',
',716,,,,716,716,,,,716,,716,716,716,716,716,716,716,,,,,,716,716,716',
'716,716,716,716,,,716,,,,,,,716,,,716,716,716,716,716,716,716,716,,716',
'716,716,,716,716,,716,716,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716',
',,716,,716,,,,716,,,,,,,,716,,,,,716,716,716,716,716,716,,,,716,716',
',,,,,,716,,,716,716,716,721,721,721,,721,,,,721,721,,,,721,,721,721',
'721,721,721,721,721,,,,,,721,721,721,721,721,721,721,,,721,,,,,,,721',
',,721,721,721,721,721,721,721,721,721,721,721,721,,721,721,,721,721',
'721,,,,,,,,,,,,,,,,,,,,721,,,721,,,721,721,,,721,,721,,,,721,,,,,,,',
'721,,,,,721,721,721,721,721,721,,,,721,721,,,,,,,721,,721,721,721,721',
'724,724,724,,724,,,,724,724,,,,724,,724,724,724,724,724,724,724,,,,',
',724,724,724,724,724,724,724,,,724,,,,,,,724,,,724,724,724,724,724,724',
'724,724,724,724,724,724,,724,724,,724,724,724,,,,,,,,,,,,,,,,,,,,724',
',,724,,,724,724,,,724,,,,,,724,,,,,,,,724,,,,,724,724,724,724,724,724',
',,,724,724,,,,,,,724,,724,724,724,724,738,738,738,,738,,,,738,738,,',
',738,,738,738,738,738,738,738,738,,,,,,738,738,738,738,738,738,738,',
',738,,,,,,,738,,,738,738,738,738,738,738,738,738,,738,738,738,,738,738',
',738,738,738,,,,,,,,,,,,,,,,,,,,738,,,738,,,738,738,,,738,,738,,,,738',
',,,,,,,738,,,,,738,738,738,738,738,738,,,,738,738,,,,,,,738,,,738,738',
'738,750,750,750,,750,,,,750,750,,,,750,,750,750,750,750,750,750,750',
',,,,,750,750,750,750,750,750,750,,,750,,,,,,,750,,,750,750,750,750,750',
'750,750,750,750,750,750,750,,750,750,,750,750,750,,,,,,,,,,,,,,,,,,',
',750,,,750,,,750,750,,,750,,750,,750,,750,,,,,,,,750,,,,,750,750,750',
'750,750,750,,,,750,750,,,,,,,750,,750,750,750,750,773,773,773,,773,',
',,773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773,773,773,773,773',
'773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773,773,,773,773,773',
',773,773,,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773,,,773,',
',,,,773,,,,,,,,773,,,,,773,773,773,773,773,773,,,,773,773,,,,,,,773',
',,773,773,773,796,796,796,,796,,,,796,796,,,,796,,796,796,796,796,796',
'796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796,,,796,796,796',
'796,796,796,796,796,,796,796,796,,796,796,,796,796,796,,,,,,,,,,,,,',
',,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796,,,,,796,796,796',
'796,796,796,,,,796,796,,,,,,,796,,,796,796,796,803,803,803,,803,,,,803',
'803,,,,803,,803,803,803,803,803,803,803,,,,,,803,803,803,803,803,803',
'803,,,803,,,,,,,803,,,803,803,803,803,803,803,803,803,,803,803,803,',
'803,803,,803,803,803,,,,,,,,,,,,,,,,,,,,803,,,803,,,803,803,,,803,,',
',,,803,,,,,,,,803,,,,,803,803,803,803,803,803,,,,803,803,,,,,,,803,',
',803,803,803,816,816,816,,816,,,,816,816,,,,816,,816,816,816,816,816',
'816,816,,,,,,816,816,816,816,816,816,816,,,816,,,,,,,816,,,816,816,816',
'816,816,816,816,816,,816,816,816,,816,816,,816,816,816,,,,,,,,,,,,,',
',,,,,,816,,,816,,,816,816,,,816,,,,,,816,,,,,,,,816,,,,,816,816,816',
'816,816,816,,,,816,816,,,,,,,816,,,816,816,816,817,817,817,,817,,,,817',
'817,,,,817,,817,817,817,817,817,817,817,,,,,,817,817,817,817,817,817',
'817,,,817,,,,,,,817,,,817,817,817,817,817,817,817,817,,817,817,817,',
'817,817,,817,817,817,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817,,',
',,,817,,,,,,,,817,,,,,817,817,817,817,817,817,,,,817,817,,,,,,,817,',
',817,817,817,818,818,818,,818,,,,818,818,,,,818,,818,818,818,818,818',
'818,818,,,,,,818,818,818,818,818,818,818,,,818,,,,,,,818,,,818,818,818',
'818,818,818,818,818,,818,818,818,,818,818,,818,818,818,,,,,,,,,,,,,',
',,,,,,818,,,818,,,818,818,,,818,,,,,,818,,,,,,,,818,,,,,818,818,818',
'818,818,818,,,,818,818,,,,,,,818,,,818,818,818,819,819,819,,819,,,,819',
'819,,,,819,,819,819,819,819,819,819,819,,,,,,819,819,819,819,819,819',
'819,,,819,,,,,,,819,,,819,819,819,819,819,819,819,819,,819,819,819,',
'819,819,,819,819,819,,,,,,,,,,,,,,,,,,,,819,,,819,,,819,819,,,819,,',
',,,819,,,,,,,,819,,,,,819,819,819,819,819,819,,,,819,819,,,,,,,819,',
',819,819,819,821,821,821,,821,,,,821,821,,,,821,,821,821,821,821,821',
'821,821,,,,,,821,821,821,821,821,821,821,,,821,,,,,,,821,,,821,821,821',
'821,821,821,821,821,,821,821,821,,821,821,,821,821,821,,,,,,,,,,,,,',
',,,,,,821,,,821,,,821,821,,,821,,,,,,821,,,,,,,,821,,,,,821,821,821',
'821,821,821,,,,821,821,,,,,,,821,,,821,821,821,853,853,853,,853,,,,853',
'853,,,,853,,853,853,853,853,853,853,853,,,,,,853,853,853,853,853,853',
'853,,,853,,,,,,,853,,,853,853,853,853,853,853,853,853,,853,853,853,',
'853,853,,853,853,853,,,,,,,,,,,,,,,,,,,,853,,,853,,,853,853,,,853,,',
',,,853,,,,,,,,853,,,,,853,853,853,853,853,853,,,,853,853,,,,,,,853,',
',853,853,853,860,860,860,,860,,,,860,860,,,,860,,860,860,860,860,860',
'860,860,,,,,,860,860,860,860,860,860,860,,,860,,,,,,,860,,,860,860,860',
'860,860,860,860,860,,860,860,860,,860,860,,860,860,860,,,,,,,,,,,,,',
',,,,,,860,,,860,,,860,860,,,860,,,,,,860,,,,,,,,860,,,,,860,860,860',
'860,860,860,,,,860,860,,,,,,,860,,,860,860,860,869,869,869,,869,,,,869',
'869,,,,869,,869,869,869,869,869,869,869,,,,,,869,869,869,869,869,869',
'869,,,869,,,,,,,869,,,869,869,869,869,869,869,869,869,,869,869,869,',
'869,869,,869,869,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869,,,869,,',
',,,869,,,,,,,,869,,,,,869,869,869,869,869,869,,,,869,869,,,,,,,869,',
',869,869,869,910,910,910,,910,,,,910,910,,,,910,,910,910,910,910,910',
'910,910,,,,,,910,910,910,910,910,910,910,,,910,,,,,,,910,,,910,910,910',
'910,910,910,910,910,910,910,910,910,,910,910,,910,910,910,,,,,,,,,,',
',,,,,,,,,910,,,910,,,910,910,,,910,,,,910,,910,,,,,,,,910,,,,,910,910',
'910,910,910,910,,,,910,910,,,,,,,910,,910,910,910,910,911,911,911,,911',
',,,911,911,,,,911,,911,911,911,911,911,911,911,,,,,,911,911,911,911',
'911,911,911,,,911,,,,,,,911,,,911,911,911,911,911,911,911,911,,911,911',
'911,,911,911,,911,911,911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911',
',,,,,911,,,,,,,,911,,,,,911,911,911,911,911,911,,,,911,911,,,,,,,911',
',,911,911,911,923,923,923,,923,,,,923,923,,,,923,,923,923,923,923,923',
'923,923,,,,,,923,923,923,923,923,923,923,,,923,,,,,,,923,,,923,923,923',
'923,923,923,923,923,,923,923,923,,923,923,,,,923,,,,,,,,,,,,,,,,,,,',
'923,,,923,,,923,923,,,923,,,,,,,,,,,,,,,,,,,923,923,923,923,923,923',
',,,923,923,,,,,,,923,,,923,923,923,932,932,932,,932,,,,932,932,,,,932',
',932,932,932,932,932,932,932,,,,,,932,932,932,932,932,932,932,,,932',
',,,,,,932,,,932,932,932,932,932,932,932,932,,932,932,932,,932,932,,',
',932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932,932,,,932,,,,,,,,,,,,,,,,,,',
'932,932,932,932,932,932,,,,932,932,,,,,,,932,,,932,932,932,940,940,940',
',940,,,,940,940,,,,940,,940,940,940,940,940,940,940,,,,,,940,940,940',
'940,940,940,940,,,940,,,,,,,940,,,940,940,940,940,940,940,940,940,,940',
'940,940,,940,940,,940,940,940,,,,,,,,,,,,,,,,,,,,940,,,940,,,940,940',
',,940,,940,,,,940,,,,,,,,940,,,,,940,940,940,940,940,940,,,,940,940',
',,,,,,940,,,940,940,940,983,983,983,,983,,,,983,983,,,,983,,983,983',
'983,983,983,983,983,,,,,,983,983,983,983,983,983,983,,,983,,,,,,,983',
',,983,983,983,983,983,983,983,983,,983,983,983,,983,983,,,,983,,,,,',
',,,,,,,,,,,,,,983,,,983,,,983,983,,,983,,,,,,,,,,,,,,,,,,,983,983,983',
'983,983,983,,,,983,983,,,,,,,983,,,983,983,983,997,997,997,,997,,,,997',
'997,,,,997,,997,997,997,997,997,997,997,,,,,,997,997,997,997,997,997',
'997,,,997,,,,,,,997,,,997,997,997,997,997,997,997,997,,997,997,997,',
'997,997,,997,997,997,,,,,,,,,,,,,,,,,,,,997,,,997,,,997,997,,,997,,',
',,,997,,,,,,,,997,,,,,997,997,997,997,997,997,,,,997,997,,,,,,,997,',
',997,997,997,1030,1030,1030,,1030,,,,1030,1030,,,,1030,,1030,1030,1030',
'1030,1030,1030,1030,,,,,,1030,1030,1030,1030,1030,1030,1030,,,1030,',
',,,,,1030,,,1030,1030,1030,1030,1030,1030,1030,1030,1030,1030,1030,1030',
',1030,1030,,1030,1030,1030,,,,,,,,,,,,,,,,,,,,1030,,,1030,,,1030,1030',
',,1030,,1030,,1030,,1030,,,,,,,,1030,,,,,1030,1030,1030,1030,1030,1030',
',,,1030,1030,,,,,,,1030,,1030,1030,1030,1030,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11',
'11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11',
'11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12',
'12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12',
'12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,',
'12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,',
',75,75,75,75,75,75,75,75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75',
'75,,75,,,,,,,75,75,,75,75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,',
',75,,,,,,,,75,75,,75,75,75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,,,',
',,,,,,,75,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,,,,105,105,105,105,105,105,105,105',
'105,105,,,,,,105,105,105,105,105,105,105,105,105,105,105,105,,105,,',
',,,,105,105,,105,105,105,105,105,105,105,,,105,105,,,,105,105,105,105',
',,,,,,,,,,,,,105,105,,105,105,105,105,105,105,105,105,105,105,105,,',
'105,,,,,,,,,,,,,,,,,,,,105,418,418,418,418,418,418,418,418,418,418,418',
'418,418,418,418,418,418,418,418,418,418,418,418,418,,,,418,418,418,418',
'418,418,418,418,418,418,,,,,,418,418,418,418,418,418,418,418,418,,,418',
',,,,,,,,418,418,,418,418,418,418,418,418,418,,,418,418,,,,418,418,418',
'418,,,,,,,,,,,,,,418,418,,418,418,418,418,418,418,418,418,418,418,418',
',,418,418,,,,,,,,,,418,,,,,,,,,418,648,648,648,648,648,648,648,648,648',
'648,648,648,648,648,648,648,648,648,648,648,648,648,648,648,,,,648,648',
'648,648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648,648,648',
'648,,,648,,,,,,,,,648,648,,648,648,648,648,648,648,648,,,648,648,,,',
'648,648,648,648,,,,,,,,,,,,,,648,648,,648,648,648,648,648,648,648,648',
'648,648,648,,,648,648,,,,,,,,,,648,,,,,,,,,648,759,759,759,759,759,759',
'759,759,759,759,759,759,759,759,759,759,759,759,759,759,759,759,759',
'759,,,,759,759,759,759,759,759,759,759,759,759,,,,,,759,759,759,759',
'759,759,759,759,759,,,759,,,,,,,,,759,759,,759,759,759,759,759,759,759',
',,759,759,,,,759,759,759,759,,,,,,,,,,,,,,759,759,,759,759,759,759,759',
'759,759,759,759,759,759,,,759,,,,,225,225,,,225,,,,,,,,,225,225,759',
'225,225,225,225,225,225,225,,,225,225,,,,225,225,225,225,,,,,,225,,',
',,,,,225,225,,225,225,225,225,225,225,225,225,225,225,225,,,225,,,,',
'226,226,,,226,,,,,,,,,226,226,225,226,226,226,226,226,226,226,,,226',
'226,,,,226,226,226,226,,,,,,226,,,,,,,,226,226,,226,226,226,226,226',
'226,226,226,226,226,226,,,226,,,,,274,274,,,274,,,,,,,,,274,274,226',
'274,274,274,274,274,274,274,,,274,274,,,,274,274,274,274,,,,,,,,,,,',
',,274,274,,274,274,274,274,274,274,274,274,274,274,274,,,274,,,,,468',
'468,,,468,,,,,,,,,468,468,274,468,468,468,468,468,468,468,,,468,468',
',,,468,468,468,468,,,,,,468,,,,,,,,468,468,,468,468,468,468,468,468',
'468,468,468,468,468,,,468,,,,,469,469,,,469,,,,,,,,,469,469,468,469',
'469,469,469,469,469,469,,,469,469,,,,469,469,469,469,,,,,,469,,,,,,',
',469,469,,469,469,469,469,469,469,469,469,469,469,469,,,469,,,,,533',
'533,,,533,,,,,,,,,533,533,469,533,533,533,533,533,533,533,,,533,533',
',,,533,533,533,533,,,,,,533,,,,,,,,533,533,,533,533,533,533,533,533',
'533,533,533,533,533,,,533,,,,,534,534,,,534,,,,,,,,,534,534,533,534',
'534,534,534,534,534,534,,,534,534,,,,534,534,534,534,,,,,,534,,,,,,',
',534,534,,534,534,534,534,534,534,534,534,534,534,534,,,534,,,,,545',
'545,,,545,,,,,,,,,545,545,534,545,545,545,545,545,545,545,,,545,545',
',,,545,545,545,545,,,,,,545,,,,,,,,545,545,,545,545,545,545,545,545',
'545,545,545,545,545,,,545,,,,,546,546,,,546,,,,,,,,,546,546,545,546',
'546,546,546,546,546,546,,,546,546,,,,546,546,546,546,,,,,,546,,,,,,',
',546,546,,546,546,546,546,546,546,546,546,546,546,546,,,546,,,,,574',
'574,,,574,,,,,,,,,574,574,546,574,574,574,574,574,574,574,,,574,574',
',,,574,574,574,574,,,,,,574,,,,,,,,574,574,,574,574,574,574,574,574',
'574,574,574,574,574,,,574,,,,,575,575,,,575,,,,,,,,,575,575,574,575',
'575,575,575,575,575,575,,,575,575,,,,575,575,575,575,,,,,,575,,,,,,',
',575,575,,575,575,575,575,575,575,575,575,575,575,575,,,575,,,,,654',
'654,,,654,,,,,,,,,654,654,575,654,654,654,654,654,654,654,,,654,654',
',,,654,654,654,654,,,,,,654,,,,,,,,654,654,,654,654,654,654,654,654',
'654,654,654,654,654,,,654,,,,,655,655,,,655,,,,,,,,,655,655,654,655',
'655,655,655,655,655,655,,,655,655,,,,655,655,655,655,,,,,,655,,,,,,',
',655,655,,655,655,655,655,655,655,655,655,655,655,655,,,655,,,,,748',
'748,,,748,,,,,,,,,748,748,655,748,748,748,748,748,748,748,,,748,748',
',,,748,748,748,748,,,,,,748,,,,,,,,748,748,,748,748,748,748,748,748',
'748,748,748,748,748,,,748,,,,,749,749,,,749,,,,,,,,,749,749,748,749',
'749,749,749,749,749,749,,,749,749,,,,749,749,749,749,,,,,,749,,,,,,',
',749,749,,749,749,749,749,749,749,749,749,749,749,749,,974,749,974,974',
'974,974,974,977,,977,977,977,977,977,,,974,,,,,749,,977,,,,,,,,,,,,',
',,974,,,,,,,977,,974,974,974,974,,,,977,977,977,977,,,,,,,,,,,,,,,,',
',1026,1026,,,1026,,,,974,,,,,1026,1026,977,1026,1026,1026,1026,1026',
'1026,1026,,,1026,1026,,,,1026,1026,1026,1026,,,,,,1026,,,,,,,,1026,1026',
',1026,1026,1026,1026,1026,1026,1026,1026,1026,1026,1026,,,1026,,,,,1031',
'1031,,,1031,,,,,,,,,1031,1031,1026,1031,1031,1031,1031,1031,1031,1031',
',,1031,1031,,,,1031,1031,1031,1031,,,,,,1031,,,,,,,,1031,1031,,1031',
'1031,1031,1031,1031,1031,1031,1031,1031,1031,1031,,,1031,,,,,1032,1032',
',,1032,,,,,,,,,1032,1032,1031,1032,1032,1032,1032,1032,1032,1032,,,1032',
'1032,,,,1032,1032,1032,1032,,,,,,1032,,,,,,,,1032,1032,,1032,1032,1032',
'1032,1032,1032,1032,1032,1032,1032,1032,,1050,1032,1050,1050,1050,1050',
'1050,,,,,,,,,,1050,,,,,1032,,,,,,,,,,,,,,,,,1050,,,,,,,,,1050,1050,1050',
'1050,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1050' ]
        racc_action_check = arr = ::Array.new(25502, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   100,     0,   114,   nil,   571,   nil,   nil,  5806,   746,
   nil, 23214, 23347,   111,   nil,   108,   158,   118,   243,   234,
   228,   nil,   104,  5942,  2245,   305,   nil,   228,   nil,   142,
  1060,  1188,  6078,  6214,  6350,   nil,  1971,  6486,  6622,   nil,
   205,   271,   424,   371,   117,  6758,  6894,   412,  7030,   314,
   575,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1316,   nil,  7166,   nil,   nil,    87,   nil,  7302,  7438,   nil,
   nil,  7574,  7710,   365,   nil, 23480,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   176,   nil,   nil,   nil,   nil,   nil,   nil,   358,
   366,   380,   401,   nil,   nil, 23613,   nil,   nil,   nil,     0,
   nil,   nil,   134,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  7846,   nil,   nil,   nil,   nil,
  7982,  8118,  8254,  8390,  8526,   433,   nil,   750,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   425,   nil,  2108,  8662,
  8798,  8934,  9070,  9206,  9342, 24080, 24148,   nil,  9478,  9614,
  9750,   nil,   nil,   604,    96,   216,   508,   230,   425,   502,
   nil,  9886,  2245,   521, 10022, 10158, 10294, 10430, 10566, 10702,
 10838, 10974, 11110, 11246, 11382, 11518, 11654, 11790, 11926, 12062,
 12198, 12334, 12470, 12606, 12742, 12878,   nil,   nil,   nil,   nil,
 13014,   nil,   nil,   nil, 24216,   nil,   nil,   523, 13150, 13286,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 13422,   nil,
  2382,   nil,   493,   497,   nil, 13558,   542, 13694,   nil, 13830,
 13966,   nil,   nil,   597,   nil,   nil, 14102,  1263,   nil,   515,
  2382,   549,   590,   554, 14238,  2519,   672,   735,   766,   632,
   801,   nil,   609,   583,   209,   nil,   nil,   nil,   632,   135,
   601, 14374,   nil,   439,   678,   687,   836,   nil,   689, 14510,
   nil, 14646,  2656,  1268,   634, 14782, 14918,   nil,   313,    13,
    69, 15054,  2793,  2930,   648,   760,   668,    36,    39,   837,
   755,    97,   799,   nil,   nil, 15190,   nil, 15326,   246,   337,
   364,   404,   455,   502,   506,   538,   562,   nil,   601,   nil,
   nil,   nil,   nil,   461,   nil,   266,   nil,   306,   nil,   461,
   nil,   701,   371,   nil,   709,   426,   nil,   720,    63,   nil,
   722,   156,   nil,   453,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23746,   nil,
   nil,   nil,   nil,   742,   nil,   727,   nil, 15462,   728,   nil,
   723,   nil,   870,   238,   nil,   nil,   nil,  1971,   nil,   nil,
   nil,   nil,   nil,  2108,   738,   nil,   nil,   759,   765,   448,
   525,  1448,   nil,   nil,   nil,   268,   396,   808,   nil,   nil,
  1576,  1708,   nil,   nil,   nil,   120,   nil,   809, 24284, 24352,
 15598,   240, 15734, 15870, 16006,  1840,  3067,   697,   755,   841,
   843,   846,   853,  1658,  4300,  4324,  3204,  3341,  3478,  3615,
  3752,  3889,   621,   813,  4026,  4163,  2519,  1010,   914,   nil,
  1840,   nil,   nil,   nil,   nil,   802,   nil,   nil,   nil,   806,
   nil,   nil, 16142,   nil,   nil, 16278,   nil, 16414,   nil,   nil,
   nil,   nil, 16550,  1321,   825,   823,   829,   nil,   nil,   830,
 16686,   834, 16822, 24420, 24488,   893,   871,   nil,   nil, 16958,
   846,   nil, 17094, 17230, 17366, 24556, 24624,  1398,  2656, 17502,
   970,   973,   857,   nil,   nil,   403,   452,   897,   902,   nil,
   587,   928,  3067,  1006,   nil,  3204,   125,  1012,  1013,  1010,
  1027,   nil,   nil, 17638, 24692, 24760,    98,   nil,   308,   329,
   169,   nil,   929,   nil,   933, 17774,   nil,   951,   nil,   nil,
   nil, 17910,   nil,   595,   nil,   922,   925,   nil,   933,   942,
   949,   nil,   nil,   nil,   nil,   nil,   nil,   941,   nil,   664,
   nil, 18046,   nil,   nil,   nil,  1031,   nil,   nil,   nil,  1032,
   nil,   nil,  1033,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   262,   nil,   nil,   325,   nil,   nil,
   nil,   968,   nil,   nil,   975,   nil,  3341,   nil, 23879,   nil,
   977, 18182, 18318, 18454, 24828, 24896, 18590,   545,  1012, 18726,
 18862, 18998, 19134,  1011,   nil,   nil,   nil, 19270, 19406,  1015,
   nil,   nil,   nil,   242,   276,   530,   664,   992,   992,   nil,
   -19,  1095,   190,   nil,   nil,  1010,   nil,  1115,   nil,  1012,
   nil,  1059, 19542,   nil,   nil,   nil,   nil,    53, 19678,  1023,
   nil,  1030,    58,   161,  1070,   340,   971,  1080,  1046, 19814,
   nil,  1110,  1111,   127,   306,   nil, 19950,   nil,   nil,   nil,
   nil, 20086,   nil,   nil, 20222,   nil,   nil,   nil,   347,   nil,
  1165,   nil,   nil,   nil,   nil,   nil,  1171,   nil, 20358,  1056,
   129,   164,   165,   167,  3478,   nil,   934,   nil, 24964, 25032,
 20494,   nil,   nil,   nil,   425,  3615,  3752,   727,   890, 24012,
   144,   162,  1058,   357,   nil,   nil,   544,   991,   nil,  1152,
   nil,  1280,   nil, 20630,   nil,   764,   nil,  1056,  1064,   899,
   nil,  1068,   nil,   nil,   nil,   nil,   927,  3889,   nil,   nil,
   nil,   nil,   nil,  1086,   nil,  1082, 20766,  1086,   277,   314,
   798,   926,  2793, 20902,   nil,  1084,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 21038, 21174, 21310, 21446,
   358, 21582,   nil,   nil,  1379,   nil,  4026,   nil,   nil,  1103,
   nil,   214,   nil,   nil,   nil,  1089,   365,   nil,   nil,   nil,
   nil,   nil,   nil,  4163,   nil,  1091,  1133,   nil,   nil,   704,
  1214,   nil,   nil, 21718,   nil,  4300,  1224,   nil,   nil,   nil,
 21854,   140,   168,  1228,   366,   985,   nil,  1113,  4437, 21990,
   705,  1236,  1238,  1122,   716,   nil,   nil,   nil,  4574,  4711,
  1118,  1128,  1140,   nil,   nil,   nil,  1141,  1145,   nil,  1146,
  1148,   nil,  1151,   nil,  1155,   795,   539,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1146,   nil,  1159,   366,   nil,   nil,
 22126, 22262,  2930,  1161,  1169,   nil,  1171,  1183,  1184,   nil,
  1209,  1194,  1181, 22398,   nil,   nil,   nil,   nil,  4848,  4985,
   nil,   118, 22534,   nil,   nil,   nil,   133,   nil,   nil,   nil,
 22670,  5122,   nil,   nil,  1313,   765,   nil,   nil,   nil,   nil,
   nil,  1237,  1225,  1330,  1181,   nil,   nil,  1540,   nil,  1639,
   nil,  1771,   nil,  1833,   nil,   nil,   nil,   nil,  1211,  1212,
   nil,   485,   nil,   nil, 25094,   nil,   nil, 25101,   nil,  5986,
   nil,   nil,  1236, 22806,   965,  1291,   nil,  1340,  5259,  1010,
  1032,  1064,  1294,  1068,   nil,  5396,   nil, 22942,   302,   nil,
   nil,  5533,  5670,   nil,   nil,   761,   nil,   nil,   nil,  1221,
  1222,  1225,  1236,   657,   919,  1237,   nil,   nil,  1238,  1239,
  1241,  1242,   nil,  1243,   nil,  1096, 25169,   nil,   nil,  1366,
 23078, 25237, 25305,  1098,   653,   nil,   nil,   nil,   nil,  1365,
  1366,   nil,  1189,  6666,   nil,   nil,   nil,   nil,  1247,   nil,
 25367,   nil,  6802,   nil,  6938,   nil,  7074,   nil,   nil,  1287,
  1288,   nil,  1253,   147,   154,   160,  1132,   nil,   nil,   nil,
   nil,  1253,  1268,  1269,  1273,  1274,   157,   nil,  7346,   nil,
   nil,   nil,   nil,  1276,   nil ]

racc_action_default = [
    -1,  -640,  -639,  -640,    -2,  -626,    -4,    -5,  -640,    -8,
    -9,  -640,  -640,  -640,   -36,  -640,  -640,   -41,  -640,  -640,
  -291,   -52,  -628,  -640,   -57,   -62,   -63,   -64,   -68,  -270,
  -270,  -270,  -306,  -339,  -340,   -80,  -639,   -84,   -92,   -94,
  -640,  -533,  -534,  -640,  -640,  -640,  -640,  -229,  -640,  -628,
  -243,  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -289,  -290,
  -613,  -293,  -295,  -302,  -304,  -314,  -316,  -640,  -640,   -59,
   -59,  -626,  -640,  -324,  -331,  -640,  -341,  -342,  -344,  -345,
  -346,  -347,  -348,  -349,  -350,  -351,  -352,  -353,  -362,  -417,
  -465,  -466,  -467,  -468,  -469,  -639,  -472,  -639,  -639,  -639,
  -639,  -639,  -639,  -508,  -509,  -639,  -511,  -517,  -518,  -611,
  -522,  -523,  -612,  -525,  -526,  -527,  -528,  -529,  -530,  -531,
  -532,  -537,  -538,  1085,    -3,  -627,  -635,  -636,  -637,    -7,
  -640,  -640,  -640,  -640,  -640,  -640,   -24,  -640,  -123,  -124,
  -125,  -126,  -127,  -128,  -129,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,
  -198,  -199,  -200,  -201,  -202,  -203,   -29,  -130,  -639,  -640,
  -640,  -640,  -640,  -640,  -639,  -640,  -640,  -623,  -640,  -640,
  -628,  -629,   -56,  -640,  -533,  -534,  -640,  -291,  -640,  -640,
  -235,  -640,  -639,  -640,  -640,  -640,  -640,  -640,  -640,  -640,
  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -640,
  -640,  -640,  -640,  -640,  -640,  -640,  -244,  -245,  -246,  -247,
  -640,  -355,  -445,  -425,  -640,  -624,  -625,   -69,  -639,  -640,
  -313,  -354,  -429,  -438,  -440,   -75,  -435,   -76,  -628,   -77,
  -250,  -265,  -639,  -639,  -269,  -640,  -275,  -640,  -606,  -640,
  -640,   -78,   -79,  -626,   -17,   -18,  -640,   -21,   -22,   -82,
  -639,  -628,  -640,   -85,   -88,  -639,  -100,  -101,  -640,  -640,
  -108,  -306,  -309,  -628,  -640,  -339,  -340,  -343,  -436,  -640,
   -90,  -640,   -96,  -301,  -519,  -520,  -640,  -223,  -224,  -640,
  -236,  -640,  -639,  -297,  -628,  -639,  -639,  -315,   -58,  -640,
  -640,  -640,  -639,  -639,  -626,  -640,  -627,  -533,  -534,  -640,
  -640,  -291,  -640,  -372,  -373,  -640,  -327,  -640,  -123,  -124,
  -163,  -164,  -165,  -181,  -186,  -193,  -196,  -334,  -640,  -533,
  -534,  -601,  -602,  -565,  -470,  -640,  -493,  -640,  -495,  -640,
  -497,  -640,  -640,  -477,  -640,  -640,  -483,  -640,  -640,  -489,
  -640,  -640,  -491,  -640,  -510,  -512,  -513,  -514,  -515,    -6,
  -638,   -30,   -31,   -32,   -33,   -34,   -10,   -11,  -640,   -26,
   -27,   -28,  -131,  -640,   -37,   -39,   -40,  -640,  -640,   -38,
  -640,   -42,  -640,  -291,   -50,   -51,  -204,  -255,  -275,   -53,
   -54,   -43,  -205,  -255,  -628,  -260,  -261,  -639,  -639,  -614,
  -615,  -270,  -433,  -616,  -617,  -615,  -614,  -270,  -432,  -434,
  -616,  -617,   -49,  -212,   -55,  -628,  -312,  -640,  -640,  -640,
  -639,  -301,  -640,  -640,  -640,  -213,  -214,  -215,  -216,  -217,
  -218,  -219,  -220,  -225,  -226,  -227,  -228,  -230,  -231,  -232,
  -233,  -234,  -237,  -238,  -239,  -240,  -628,  -248,  -640,  -446,
  -270,  -614,  -615,   -66,   -70,  -628,  -271,  -442,  -445,  -628,
  -308,  -266,  -640,  -274,  -267,  -640,  -272,  -640,  -276,  -609,
  -610,   -16,  -627,   -20,  -640,  -628,   -81,  -299,   -97,   -86,
  -640,  -628,  -639,  -640,  -640,  -107,  -640,  -519,  -520,  -640,
   -93,   -98,  -640,  -640,  -640,  -640,  -640,  -249,  -241,  -640,
  -457,  -640,  -628,  -296,  -251,  -632,  -632,  -640,  -640,  -604,
  -632,  -640,  -639,  -363,  -364,  -639,  -640,  -640,  -640,  -640,
  -640,  -358,  -452,  -639,  -640,  -640,  -301,   -59,  -118,  -119,
  -640,  -121,  -640,  -291,  -639,  -640,  -332,  -543,  -336,  -621,
  -622,  -640,  -418,  -565,  -421,  -600,  -600,  -548,  -550,  -550,
  -550,  -564,  -566,  -567,  -568,  -569,  -570,  -571,  -572,  -640,
  -574,  -640,  -580,  -582,  -583,  -585,  -590,  -592,  -593,  -595,
  -596,  -597,  -640,  -471,  -494,  -499,  -500,  -502,  -473,  -496,
  -474,  -498,  -475,  -476,  -640,  -479,  -481,  -640,  -482,  -485,
  -486,  -640,  -487,  -488,  -640,  -516,  -639,   -25,  -640,   -35,
  -281,  -640,  -640,  -639,  -640,  -640,  -640,  -437,  -640,  -262,
  -264,  -640,  -640,   -71,  -258,  -259,  -430,  -640,  -640,   -73,
  -431,  -311,  -630,  -614,  -615,  -614,  -615,  -628,  -640,  -424,
  -639,   -65,  -426,  -442,  -257,  -640,  -443,  -640,  -307,  -639,
  -273,  -277,  -640,  -607,  -608,   -19,   -23,   -83,  -640,   -89,
   -95,  -628,  -614,  -615,  -639,  -104,  -106,  -640,   -91,  -640,
  -211,  -221,  -222,  -628,  -639,  -356,  -639,  -294,  -361,  -298,
  -252,  -634,  -633,  -254,  -634,  -303,  -305,  -605,  -639,  -365,
  -639,   -60,  -366,  -367,  -319,  -320,  -640,  -322,  -640,  -628,
  -614,  -615,  -618,  -300,  -639,  -118,  -119,  -120,  -640,  -640,
  -639,  -325,  -539,  -541,  -328,  -639,  -639,  -565,  -565,  -640,
  -628,  -640,  -628,  -640,  -546,  -547,  -640,  -640,  -557,  -640,
  -560,  -640,  -562,  -640,  -374,  -640,  -376,  -378,  -381,  -384,
  -571,  -628,  -576,  -584,  -594,  -598,  -640,  -639,  -478,  -480,
  -484,  -490,  -492,  -640,  -132,  -279,  -640,  -628,  -614,  -615,
  -615,  -614,  -256,  -640,  -631,  -639,   -45,  -207,   -46,  -208,
   -72,   -47,  -210,   -48,  -209,   -74,  -640,  -640,  -640,  -640,
  -437,  -640,  -406,  -407,  -628,  -409,  -639,  -428,  -427,  -640,
  -439,  -639,  -441,  -268,  -278,   -87,  -102,   -99,  -310,   -13,
   -15,  -357,  -359,  -639,  -464,  -458,  -639,  -459,  -460,  -632,
  -640,  -360,  -368,  -640,  -370,  -639,  -640,   -61,  -321,  -448,
  -640,  -640,  -437,  -640,  -118,  -119,  -122,  -628,  -639,  -640,
  -640,  -640,  -640,  -628,  -640,  -337,  -603,  -419,  -639,  -639,
  -411,  -628,  -600,  -581,  -599,  -549,  -550,  -550,  -575,  -550,
  -550,  -591,  -550,  -586,  -628,  -640,  -640,  -383,  -573,  -501,
  -504,  -505,  -506,  -507,  -640,   -12,  -280,  -437,   -44,  -206,
  -263,  -640,  -242,  -600,  -600,  -388,  -639,  -639,  -639,  -405,
  -640,  -628,  -571,  -640,  -578,  -588,  -447,   -67,  -639,  -639,
  -463,  -640,  -640,  -462,  -253,  -317,  -640,  -371,  -318,  -449,
  -640,  -639,  -323,  -437,  -640,  -640,  -329,  -333,  -335,  -542,
  -544,  -543,  -640,  -640,  -640,  -420,  -545,  -640,  -553,  -640,
  -555,  -640,  -558,  -640,  -561,  -563,  -375,  -377,  -379,  -382,
  -503,  -640,  -386,  -387,  -396,  -390,  -398,  -640,  -401,  -640,
  -403,  -408,  -640,  -640,  -577,  -640,  -444,  -639,  -639,  -109,
  -110,  -640,  -640,  -117,  -461,  -639,  -450,  -640,  -639,  -326,
  -540,  -639,  -639,  -422,  -423,  -628,  -413,  -415,  -416,  -550,
  -550,  -550,  -550,  -640,  -640,  -600,  -579,  -389,  -639,  -639,
  -639,  -639,  -589,  -639,  -410,  -587,  -640,  -301,   -14,  -457,
  -639,  -640,  -640,  -116,  -639,  -451,  -453,  -454,  -455,  -640,
  -640,  -412,  -640,  -640,  -551,  -554,  -556,  -559,  -380,  -385,
  -640,  -393,  -640,  -395,  -640,  -399,  -640,  -402,  -404,  -300,
  -618,  -456,  -628,  -614,  -615,  -618,  -115,  -369,  -330,  -338,
  -414,  -550,  -639,  -639,  -639,  -639,  -437,  -552,  -640,  -391,
  -394,  -397,  -400,  -639,  -392 ]

clist = [
'6,327,327,229,291,291,291,225,141,141,377,444,128,273,347,275,551,4',
'352,353,570,349,350,313,504,354,451,457,9,714,341,282,286,416,9,124',
'327,136,217,514,405,426,429,144,144,540,850,442,562,565,756,125,463',
'856,840,129,888,498,891,232,330,312,594,309,781,505,293,293,293,774',
'348,348,141,685,348,500,917,601,128,311,747,967,969,693,411,412,413',
'414,343,1022,277,285,287,386,826,388,390,393,396,399,402,355,141,386',
'385,657,466,435,720,723,435,1,2,727,403,435,289,301,302,135,292,292',
'292,881,1006,441,690,1008,634,690,462,637,646,348,348,348,348,584,839',
'586,929,695,524,216,364,764,765,418,731,857,274,9,683,648,339,557,682',
'381,558,362,415,751,1022,378,510,588,342,344,552,345,346,19,409,365',
'629,868,631,19,585,635,870,1001,635,367,755,920,587,526,759,951,968',
'919,233,921,514,1005,291,592,877,1048,967,233,233,233,383,19,318,318',
'761,507,508,831,1070,861,680,1008,1036,738,846,931,553,468,445,461,439',
'440,1018,452,693,384,894,19,464,465,736,774,233,233,387,897,233,359',
'389,423,699,928,891,392,866,829,291,291,888,708,395,424,434,677,398',
'434,291,401,899,888,434,786,787,312,404,451,457,869,762,690,690,886',
'445,883,327,1016,591,,982,,,,,601,,,513,513,693,687,19,327,463,,442',
'233,233,233,233,19,536,566,533,428,428,,128,,,293,,,,541,,701,,1037',
'293,,545,,282,1028,,327,286,327,523,521,704,312,529,309,820,,312,671',
'309,554,559,888,704,574,,522,,,1067,525,348,774,774,,531,,739,128,836',
'506,,,710,292,,,,,509,,,704,292,567,568,556,560,684,,,569,688,,19,233',
'432,233,233,432,233,,,,432,233,233,862,697,934,887,,889,,700,,,810,19',
'835,,1002,141,815,,,,654,789,696,,789,658,,,719,871,872,,956,555,,833',
'873,874,,,797,,291,,647,513,513,233,233,664,144,601,601,665,,451,457',
'233,907,670,918,,,972,973,,461,,445,,452,,,774,774,19,,678,693,19,717',
',,318,19,807,809,,,,,812,814,,327,,734,735,664,737,318,,665,327,291',
',,,1061,,,19,663,,,,541,,669,,233,19,19,,690,541,744,,943,,445,461,',
',582,452,582,867,847,435,,,944,461,,291,689,452,435,435,704,833,713',
'953,435,435,,,,,941,681,,806,808,1049,,,,811,813,445,461,732,,,452,',
',,,,753,,,,,728,754,838,730,,,1009,760,,,,,,,,,,,,,,,,1019,,,1020,,',
',,,,,,,,,291,,909,,,988,828,,,,995,876,,,233,807,809,814,812,6,141,882',
',,,,445,461,,,,452,898,658,,,793,327,1038,,858,,,,827,,,9,327,794,1039',
'1040,,822,,144,,658,,541,,1072,513,434,,435,19,,805,875,837,,434,434',
'318,,233,664,434,434,908,665,914,318,670,,,844,,848,,,,233,,658,,291',
'1076,,,854,,854,,,19,,,19,909,,,,,,,233,880,,461,,,445,949,,452,,,233',
'849,141,955,,,233,,,,,,,,,863,966,,,768,770,772,,,658,935,,,,,,938,',
',,,,,942,,,,,,,,947,948,,513,428,880,,936,,,,,904,,,19,,1062,,,,432',
'233,945,,,,,,822,432,432,704,,,,432,432,,434,,,,,933,,,,658,,,926,,',
'1015,,348,914,,,914,,914,,,,,318,930,,,,348,999,,,,946,318,,937,950',
',,,,,327,,,,,,,,,327,,,,,,880,952,,,,,,884,,,884,19,975,975,975,,,233',
',,,,19,19,,,29,,,,,914,29,914,,914,,914,,,,,,,,327,,29,,,1000,986,987',
',19,,29,29,29,914,29,,,,998,,1068,1069,915,,432,,,,,,,1031,,,,,,844',
'1041,,29,,,,,29,29,19,854,29,,,,,291,,,,,,,,,,19,1029,,,975,975,975',
'975,1034,975,233,461,19,890,,892,445,461,,,854,452,976,978,980,19,233',
',,,,658,,,,19,19,,,29,425,438,,,29,29,29,29,29,958,960,,962,964,,965',
',,975,975,975,975,,,,,,,916,975,,,,,,,,,,,984,,,,,19,19,,,991,,,,,,',
',,19,,,,,,,884,,,915,,,915,,915,,,516,,518,,519,520,,,1051,1053,1055',
'1057,,1058,,,29,29,29,29,29,29,29,,1025,,29,29,29,19,,,,,,,19,,,,29',
',19,19,,,,,,,,561,,,,,1044,1045,1046,1047,,,1079,1080,1081,1082,,,915',
'32,915,233,915,1084,915,32,29,29,,,,,,,,1010,29,1011,,1012,32,,,,,,915',
',,32,32,32,,32,29,1021,,1023,29,,,,,29,,,,,1077,,,,,,,,,,,32,,,650,',
'32,32,,,32,,29,,,,,,,,,29,29,29,,,,,,,,,,,,,,,,,,,,1071,,,,,,,1073,',
'1074,,1075,,,,,,,,,,32,,,,,32,32,32,32,32,,,,,1083,,,,,,,,,,,691,,,561',
',694,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,',
',32,32,32,32,32,32,32,,,,32,32,32,,,,,,,,,,,,32,,,,,,,782,,,,29,,,,',
',,,,,29,,,,,,,,,,,,,,,32,32,29,,,,,,,,32,795,,,,29,,,29,691,561,,,,',
',29,,32,,,,32,,,,,32,29,,,,,,29,,,,,,,,834,,,,,,,,,,,,32,,,,,,,,,32',
'32,32,845,,,,,691,,16,561,,,,,16,,,,,,,,,859,29,,,,,,29,29,,,,,,,,29',
'29,,16,,,29,29,,,,,,,,,,,,893,,,,,,,,,,16,,,,,,,,,,363,,,906,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,29,,,,,,29,,,16,,29,29,,,,,,16,,',
',,939,,,,,,,,,,,,,,,,,,,,29,,,,32,,,,,,,,,,32,,29,,,,,,,,,,,,,,561,32',
',,,,,,,29,,,,,32,,,32,,,,,,,,32,29,,,16,996,430,,,430,,29,32,29,430',
',,,32,,,,,,,,29,29,16,,,,,,,,29,29,,,,,,,,,,,,,,,,,,,,,,,,,1035,,,,',
',,,,,,32,,,,,,32,32,,,,,,29,29,32,32,,,16,,32,32,16,,,29,,16,240,,,',
',,,,,290,290,290,,,,,,,,,,,337,338,,340,16,,,,,,,,,,16,16,,,,,,,29,',
',,,,,29,,,,,,29,29,,,,,,,,,,,32,,,,,,32,,,,,32,32,,,,,29,,,,,,,,,,,',
',,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,32,,,,,18,',
',,,,18,,,,,,32,,,,,,,,,,32,,32,,,,,,,,,,18,,,32,32,,290,437,,,443,290',
',32,32,443,16,,,,,,,,,,18,,240,,,475,476,477,478,479,480,481,482,483',
'484,485,486,487,488,489,490,491,492,493,494,495,496,,,,16,497,,16,,',
',32,32,290,290,,,,,,,,,290,32,,,,,,290,,290,,290,290,,18,,,,,,,,,18',
',,,,,,,,,,,,,,,,,,,,,,,,32,,,547,,548,,32,,290,290,,,32,32,,,16,,,,',
',430,,,,,,,,,430,430,,,,,430,430,,,32,,,,,,,,,,,,,,,,,18,,18,,,18,,',
',,18,,,,,,,,,,,,,,18,,,,,,,,290,,,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,',
'16,16,,,,,,,290,,443,443,443,,,,,,,,,18,,,,18,,,,,18,,16,,,,,,,20,,',
',,,20,,,430,,290,,,290,,290,,18,,,,,,,,,,18,18,,290,16,,20,320,320,',
',,,443,711,712,,,,,,16,,,,,,,,,,,20,16,,,,,,,,,361,,290,,16,,,,,,,,',
',16,16,,,,,,,,,,,,,,,,,,,,,,,,,290,,,,,,,,,,,,,20,,,,,,,,,20,,16,16',
',,994,,,,,,,,,16,,,290,443,290,,,802,,,290,290,443,443,,,,,443,443,',
',,,,,,,,,,,,,,,,,,,,,,290,,,16,,,,18,,,16,,,,,,16,16,,,,,,,290,20,,433',
',290,433,,290,,,433,,,,,,,,,,,290,18,,20,18,,,,,,,,290,,,,,,,,,,,,,',
',,,,,,,,,290,,,,,,,,,,,,,,,,,,,,,,,290,,,,,,,443,,20,,,,20,,,,320,20',
',443,443,443,443,,912,,18,,,,,,18,320,,,,,,,,18,18,,20,41,,18,18,,,41',
',,20,20,,,,,,,,290,,,,583,,583,,,,,,,,,,41,316,316,,,,,42,,,,,,42,,',
',,,,,,,,,,41,,,,,,,,290,443,357,,,379,,42,317,317,,18,,,,,,,,,,,18,18',
',,,,,,290,,,42,,,,,,,,,,358,,,380,,,,,,,,18,41,,,,,,,,,41,,,,,,18,,',
',,,,,,,,,,,,,,290,,,,,,18,,,42,,,,,,,,,42,,,,,18,20,,,,,,,,320,290,',
'18,,,,,,320,,,,,,,18,,,,,,,,,,18,18,,41,,,20,,,20,,,,,,,,,,,,,,,,,,41',
',,,,,,,,,,,,,,,,42,,,,,,18,18,,,,,,,,,,,,18,,,,,42,,,,,,,,,,,,,,,,,',
',,,,20,41,,,,41,433,,,316,41,,,,,433,433,,,,18,433,433,,,,316,18,,,',
',,18,18,,,41,,,,,42,,,,42,41,41,,317,42,320,,,,,,,,379,,379,320,,,,317',
',,,,,,,,,,42,,,,,,,,,,42,42,,,,,,,,,20,,,380,,380,,,,,,20,20,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,903,20,,,,,,,,,,,,,,,,433,,,,,,,,,,,,,,,,,,,,',
',,20,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,20,,,,,,,,41,,,,,20,,,316,,,,,,,20',
'20,316,,,,,,,,,,,,,,,,,,,,,,,41,42,,41,,,,,,317,,,,,,,,,317,,583,,,',
',20,20,,,993,,,,,,,,,20,,,42,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',583,,,,41,20,,,,,,,20,,,,,,20,20,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,',
',,,,316,,,,,,,,,,,316,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,317,,,,,41,,,,,,317',
',,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,41,,,,,,,,,42,42,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,41,,42,,,,,,,,,,,,,,,41,,,,,,,,,,,,41,,,,,,,,,,,',
'42,41,,,,,,,,,,41,41,,,,,42,,,,,,,,,,,,42,,,,,,,,,,,,,42,,,,,,,,,,42',
'42,,,379,,,,,41,41,,,989,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,380,,,,,42',
'42,,,990,,,,,,,,,42,379,,,,,41,,,,,,,41,,,,,,41,41,,,,,,,,,,,,,,,,,',
',,,,380,,,,,42,,,,,,,42,,,,,,42,42' ]
        racc_goto_table = arr = ::Array.new(3731, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,77,77,40,46,46,46,38,71,71,70,36,116,169,100,38,12,2,42,42,111,24',
'24,63,52,24,50,50,9,15,40,83,83,10,9,5,77,22,22,85,70,29,29,73,73,65',
'105,75,104,104,119,8,75,107,17,7,207,170,211,27,64,14,168,59,145,36',
'82,82,82,144,31,31,71,53,31,50,156,202,116,60,68,143,146,216,24,24,24',
'24,9,212,51,51,51,6,158,6,6,6,6,6,6,5,71,6,186,37,61,25,81,81,25,1,3',
'81,186,25,58,58,58,11,80,80,80,160,162,33,86,163,190,86,33,190,13,31',
'31,31,31,69,16,69,18,20,21,23,26,151,151,32,43,45,49,9,55,74,78,79,84',
'96,99,113,9,115,212,120,61,121,122,123,124,125,126,35,7,127,191,128',
'191,35,129,191,130,131,191,132,133,160,134,61,135,136,147,148,35,154',
'85,161,46,164,165,146,143,35,35,35,166,35,35,35,167,172,173,175,162',
'176,178,163,179,180,181,182,61,38,6,71,31,31,156,83,216,185,145,35,31',
'31,111,144,35,35,187,144,35,35,188,14,65,158,211,189,68,53,46,46,207',
'65,192,27,27,36,193,27,46,194,195,207,27,196,197,14,200,50,50,201,168',
'86,86,206,6,208,77,209,215,,160,,,,,202,,,6,6,216,170,35,77,75,,75,35',
'35,35,35,35,40,24,38,80,80,,116,,,82,,,,63,,36,,107,82,,38,,83,17,,77',
'83,77,9,5,50,14,64,59,37,,14,61,59,6,6,207,50,38,,8,,,105,60,31,144',
'144,,60,,36,116,37,58,,,75,80,,,,,58,,,50,80,14,14,82,82,61,,,5,61,',
'35,35,35,35,35,35,35,,,,35,35,35,37,61,81,157,,157,,61,,,52,35,65,,119',
'71,52,,,,38,191,10,,191,40,,,61,12,12,,151,80,,85,168,168,,,36,,46,',
'22,6,6,35,35,6,73,202,202,83,,50,50,35,37,83,157,,,151,151,,71,,6,,83',
',,144,144,35,,40,216,35,98,,,35,35,75,75,,,,,75,75,,77,,98,98,6,98,35',
',83,77,46,,,,15,,,35,51,,,,63,,51,,35,35,35,,86,63,42,,37,,6,71,,,35',
'83,35,36,29,25,,,12,71,,46,82,83,25,25,50,85,31,12,25,25,,,,,104,51',
',33,33,151,,,,33,33,6,71,116,,,83,,,,,,6,,,,,14,31,61,14,,,157,31,,',
',,,,,,,,,,,,,157,,,157,,,,,,,,,,,,46,,75,,,104,100,,,,104,61,,,35,75',
'75,75,75,6,71,150,,,,,6,71,,,,83,61,40,,,2,77,111,,98,,,,169,,,9,77',
'22,12,12,,6,,73,,40,,63,,157,6,27,,25,35,,82,70,63,,27,27,35,,35,6,27',
'27,33,83,150,35,83,,,6,,6,,,,35,,40,,46,37,,,6,,6,,,35,,,35,75,,,,,',
',35,40,,71,,,6,61,,83,,,35,82,71,61,,,35,,,,,,,,,14,61,,,205,205,205',
',,40,98,,,,,,98,,,,,,,98,,,,,,,,98,98,,6,80,40,,24,,,,,14,,,35,,36,',
',,35,35,24,,,,,,6,35,35,50,,,,35,35,,27,,,,,6,,,,40,,,14,,,150,,31,150',
',,150,,150,,,,,35,14,,,,31,98,,,,116,35,,14,116,,,,,,77,,,,,,,,,77,',
',,,,40,14,,,,,,152,,,152,35,6,6,6,,,35,,,,,35,35,,,54,,,,,150,54,150',
',150,,150,,,,,,,,77,,54,,,116,14,14,,35,,54,54,54,150,54,,,,14,,98,98',
'152,,35,,,,,,,38,,,,,,6,40,,54,,,,,54,54,35,6,54,,,,,46,,,,,,,,,,35',
'14,,,6,6,6,6,14,6,35,71,35,155,,155,6,71,,,6,83,153,153,153,35,35,,',
',,40,,,,35,35,,,54,30,30,,,54,54,54,54,54,205,205,,205,205,,205,,,6',
'6,6,6,,,,,,,155,6,,,,,,,,,,,35,,,,,35,35,,,35,,,,,,,,,35,,,,,,,152,',
',152,,,152,,152,,,30,,30,,30,30,,,153,153,153,153,,153,,,54,54,54,54',
'54,54,54,,35,,54,54,54,35,,,,,,,35,,,,54,,35,35,,,,,,,,30,,,,,205,205',
'205,205,,,153,153,153,153,,,152,57,152,35,152,153,152,57,54,54,,,,,',
',,155,54,155,,155,57,,,,,,152,,,57,57,57,,57,54,155,,155,54,,,,,54,',
',,,205,,,,,,,,,,,57,,,30,,57,57,,,57,,54,,,,,,,,,54,54,54,,,,,,,,,,',
',,,,,,,,,155,,,,,,,155,,155,,155,,,,,,,,,,57,,,,,57,57,57,57,57,,,,',
'155,,,,,,,,,,,30,,,30,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,54,,,,,,,,,,,,,,,,,57,57,57,57,57,57,57,,,,57,57,57,,,,,,,,,,,,57',
',,,,,,30,,,,54,,,,,,,,,,54,,,,,,,,,,,,,,,57,57,54,,,,,,,,57,30,,,,54',
',,54,30,30,,,,,,54,,57,,,,57,,,,,57,54,,,,,,54,,,,,,,,30,,,,,,,,,,,',
'57,,,,,,,,,57,57,57,30,,,,,30,,28,30,,,,,28,,,,,,,,,30,54,,,,,,54,54',
',,,,,,,54,54,,28,,,54,54,,,,,,,,,,,,30,,,,,,,,,,28,,,,,,,,,,28,,,30',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,,54,,,,,,54,,,28,,54,54,,,',
',,28,,,,,30,,,,,,,,,,,,,,,,,,,,54,,,,57,,,,,,,,,,57,,54,,,,,,,,,,,,',
',30,57,,,,,,,,54,,,,,57,,,57,,,,,,,,57,54,,,28,30,28,,,28,,54,57,54',
'28,,,,57,,,,,,,,54,54,28,,,,,,,,54,54,,,,,,,,,,,,,,,,,,,,,,,,,30,,,',
',,,,,,,57,,,,,,57,57,,,,,,54,54,57,57,,,28,,57,57,28,,,54,,28,41,,,',
',,,,,41,41,41,,,,,,,,,,,41,41,,41,28,,,,,,,,,,28,28,,,,,,,54,,,,,,,54',
',,,,,54,54,,,,,,,,,,,57,,,,,,57,,,,,57,57,,,,,54,,,,,,,,,,,,,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,57,,,,,34,,,,,,34,',
',,,,57,,,,,,,,,,57,,57,,,,,,,,,,34,,,57,57,,41,41,,,41,41,,57,57,41',
'28,,,,,,,,,,34,,41,,,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41',
'41,41,41,41,41,41,,,,28,41,,28,,,,57,57,41,41,,,,,,,,,41,57,,,,,,41',
',41,,41,41,,34,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,57,,,41,,41,,57,,41',
'41,,,57,57,,,28,,,,,,28,,,,,,,,,28,28,,,,,28,28,,,57,,,,,,,,,,,,,,,',
',34,,34,,,34,,,,,34,,,,,,,,,,,,,,34,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,',
',28,,,,,,,,,,,28,28,,,,,,,41,,41,41,41,,,,,,,,,34,,,,34,,,,,34,,28,',
',,,,,39,,,,,,39,,,28,,41,,,41,,41,,34,,,,,,,,,,34,34,,41,28,,39,39,39',
',,,,41,41,41,,,,,,28,,,,,,,,,,,39,28,,,,,,,,,39,,41,,28,,,,,,,,,,28',
'28,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,39,,,,,,,,,39,,28,28,,,28',
',,,,,,,,28,,,41,41,41,,,41,,,41,41,41,41,,,,,41,41,,,,,,,,,,,,,,,,,',
',,,,,,41,,,28,,,,34,,,28,,,,,,28,28,,,,,,,41,39,,39,,41,39,,41,,,39',
',,,,,,,,,,41,34,,39,34,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,',
',,,,,,,,,,,,41,,,,,,,41,,39,,,,39,,,,39,39,,41,41,41,41,,41,,34,,,,',
',34,39,,,,,,,,34,34,,39,66,,34,34,,,66,,,39,39,,,,,,,,41,,,,39,,39,',
',,,,,,,,66,66,66,,,,,67,,,,,,67,,,,,,,,,,,,,66,,,,,,,,41,41,66,,,66',
',67,67,67,,34,,,,,,,,,,,34,34,,,,,,,41,,,67,,,,,,,,,,67,,,67,,,,,,,',
'34,66,,,,,,,,,66,,,,,,34,,,,,,,,,,,,,,,,,41,,,,,,34,,,67,,,,,,,,,67',
',,,,34,39,,,,,,,,39,41,,34,,,,,,39,,,,,,,34,,,,,,,,,,34,34,,66,,,39',
',,39,,,,,,,,,,,,,,,,,,66,,,,,,,,,,,,,,,,,67,,,,,,34,34,,,,,,,,,,,,34',
',,,,67,,,,,,,,,,,,,,,,,,,,,,39,66,,,,66,39,,,66,66,,,,,39,39,,,,34,39',
'39,,,,66,34,,,,,,34,34,,,66,,,,,67,,,,67,66,66,,67,67,39,,,,,,,,66,',
'66,39,,,,67,,,,,,,,,,,67,,,,,,,,,,67,67,,,,,,,,,39,,,67,,67,,,,,,39',
'39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,39,,,,,,,,,,,,,,,,39,,,,,,,,,,,,',
',,,,,,,,,,39,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,39,,,,,,,,66,,,,,39,,,66',
',,,,,,39,39,66,,,,,,,,,,,,,,,,,,,,,,,66,67,,66,,,,,,67,,,,,,,,,67,,39',
',,,,39,39,,,39,,,,,,,,,39,,,67,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,39,,,,66,39,,,,,,,39,,,,,,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,',
',,,,,66,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,66,,,,,,67',
',,,,66,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,66,,,,,,,,,67,67,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,66,,67,,,,,,,,,,,,,,,66,,,,,,,,,,,,66,,,,,,,,,,,',
'67,66,,,,,,,,,,66,66,,,,,67,,,,,,,,,,,,67,,,,,,,,,,,,,67,,,,,,,,,,67',
'67,,,66,,,,,66,66,,,66,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,67,,,,,67,67',
',,67,,,,,,,,,67,66,,,,,66,,,,,,,66,,,,,,66,66,,,,,,,,,,,,,,,,,,,,,,67',
',,,,67,,,,,,,67,,,,,,67,67' ]
        racc_goto_check = arr = ::Array.new(3731, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   111,    15,   112,   nil,    30,    -2,    47,    46,    26,
  -102,   109,  -326,  -285,    25,  -521,  -576,  -660,  -699,   nil,
  -381,  -166,    26,   131,   -46,  -113,    72,    36,  1554,  -178,
   833,     3,    11,   -98,  2024,   169,  -213,  -339,   -12,  2346,
   -19,  1847,   -51,  -418,   nil,  -582,   -28,   nil,   nil,   123,
  -199,    61,  -253,  -434,   926,  -351,   nil,  1195,    84,    27,
    43,  -124,   nil,   -14,    22,  -286,  2687,  2728,  -500,  -228,
   -65,    -3,   nil,    32,  -269,  -176,   nil,   -36,   107,  -190,
    88,  -447,    34,     2,  -344,  -254,  -386,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    82,   nil,   -71,  -188,
   -51,   nil,   nil,   nil,  -301,  -682,   nil,  -677,   nil,   nil,
   nil,  -335,   nil,    87,   nil,  -423,     7,   nil,   nil,  -537,
    88,  -213,   105,   105,  -175,   106,   106,   100,  -576,  -188,
  -574,  -765,   109,  -402,  -191,  -400,  -686,   nil,   nil,   nil,
   nil,   nil,   nil,  -814,  -540,  -545,  -814,  -705,  -633,   nil,
  -117,  -450,   146,   118,  -631,   256,  -748,  -364,  -586,   nil,
  -639,  -759,  -830,  -827,  -186,  -563,   115,  -384,  -321,   -12,
  -215,   nil,   -74,   -74,   nil,  -475,  -525,   nil,  -285,  -782,
  -355,  -498,  -627,   nil,   nil,   137,     9,   141,   144,   148,
  -264,  -213,   154,   157,   159,  -524,  -361,  -361,   nil,   nil,
   163,  -481,  -306,   nil,   nil,   175,  -492,  -711,  -486,  -692,
   nil,  -711,  -888,   nil,   nil,  -102,  -432 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   304,     7,   356,   307,
   nil,   nil,   nil,   nil,   550,   nil,   nil,   nil,   nil,   303,
   305,   nil,   nil,   nil,   nil,    14,    15,    21,   238,   nil,
   296,    17,   nil,   431,   239,   336,   nil,   nil,   749,   237,
   467,    24,   nil,   nil,   351,   nil,    25,    26,    27,   nil,
   707,   nil,   nil,   nil,   324,   nil,    28,   321,   446,    35,
   nil,   nil,    37,    40,    39,   nil,   234,   235,   581,   nil,
   143,   454,   142,    91,   nil,   436,    47,    50,   270,   nil,
   447,   nil,   448,   459,   666,   511,   294,   279,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    61,   nil,   nil,
   280,    65,    66,    67,   nil,   nil,    68,   852,    69,    70,
    71,   nil,    72,   nil,    73,   nil,   563,    74,    75,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   284,   272,   716,
   843,   572,   853,   776,   608,   nil,   777,   778,  1017,   913,
   596,   nil,   597,   nil,   nil,   598,   nil,   600,   nil,   823,
   nil,   nil,   nil,   606,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   458,   nil,   nil,   686,   nil,   nil,   499,   nil,   nil,
   nil,   nil,   nil,    90,    92,    94,   nil,   nil,   nil,   nil,
   nil,   624,   nil,   nil,   nil,   nil,   nil,   nil,   103,   104,
   nil,   nil,   885,   758,   595,   nil,   599,   610,   612,   924,
   615,   616,   925,   619,   622,   nil,   298 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 146, :_reduce_1,
  2, 144, :_reduce_2,
  2, 145, :_reduce_3,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  3, 147, :_reduce_6,
  2, 147, :_reduce_none,
  1, 150, :_reduce_none,
  0, 154, :_reduce_9,
  3, 150, :_reduce_10,
  0, 156, :_reduce_11,
  4, 153, :_reduce_12,
  0, 161, :_reduce_13,
  6, 155, :_reduce_14,
  3, 155, :_reduce_15,
  2, 157, :_reduce_16,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_19,
  2, 162, :_reduce_20,
  1, 163, :_reduce_none,
  0, 164, :_reduce_22,
  3, 163, :_reduce_23,
  0, 175, :_reduce_24,
  4, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  3, 152, :_reduce_28,
  2, 152, :_reduce_29,
  3, 152, :_reduce_30,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  3, 152, :_reduce_33,
  3, 152, :_reduce_34,
  4, 152, :_reduce_35,
  1, 152, :_reduce_none,
  3, 152, :_reduce_37,
  3, 152, :_reduce_38,
  3, 152, :_reduce_39,
  3, 152, :_reduce_40,
  1, 152, :_reduce_none,
  3, 168, :_reduce_42,
  3, 168, :_reduce_43,
  6, 168, :_reduce_44,
  5, 168, :_reduce_45,
  5, 168, :_reduce_46,
  5, 168, :_reduce_47,
  5, 168, :_reduce_48,
  3, 168, :_reduce_49,
  1, 176, :_reduce_50,
  1, 176, :_reduce_none,
  1, 174, :_reduce_none,
  3, 174, :_reduce_53,
  3, 174, :_reduce_54,
  3, 174, :_reduce_55,
  2, 174, :_reduce_56,
  1, 174, :_reduce_none,
  1, 167, :_reduce_58,
  0, 187, :_reduce_59,
  0, 188, :_reduce_60,
  4, 185, :_reduce_61,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 190, :_reduce_none,
  4, 190, :_reduce_65,
  0, 198, :_reduce_66,
  4, 195, :_reduce_67,
  1, 197, :_reduce_68,
  2, 189, :_reduce_69,
  3, 189, :_reduce_70,
  4, 189, :_reduce_71,
  5, 189, :_reduce_72,
  4, 189, :_reduce_73,
  5, 189, :_reduce_74,
  2, 189, :_reduce_75,
  2, 189, :_reduce_76,
  2, 189, :_reduce_77,
  2, 189, :_reduce_78,
  2, 189, :_reduce_79,
  1, 169, :_reduce_none,
  3, 169, :_reduce_81,
  1, 203, :_reduce_none,
  3, 203, :_reduce_83,
  1, 202, :_reduce_84,
  2, 202, :_reduce_85,
  3, 202, :_reduce_86,
  5, 202, :_reduce_87,
  2, 202, :_reduce_88,
  4, 202, :_reduce_89,
  2, 202, :_reduce_90,
  4, 202, :_reduce_91,
  1, 202, :_reduce_92,
  3, 202, :_reduce_93,
  1, 206, :_reduce_none,
  3, 206, :_reduce_95,
  2, 205, :_reduce_96,
  3, 205, :_reduce_97,
  1, 208, :_reduce_98,
  3, 208, :_reduce_99,
  1, 207, :_reduce_100,
  1, 207, :_reduce_101,
  4, 207, :_reduce_102,
  3, 207, :_reduce_103,
  3, 207, :_reduce_104,
  3, 207, :_reduce_105,
  3, 207, :_reduce_106,
  2, 207, :_reduce_107,
  1, 207, :_reduce_108,
  1, 171, :_reduce_109,
  1, 171, :_reduce_110,
  4, 171, :_reduce_111,
  3, 171, :_reduce_112,
  3, 171, :_reduce_113,
  3, 171, :_reduce_114,
  3, 171, :_reduce_115,
  2, 171, :_reduce_116,
  1, 171, :_reduce_117,
  1, 211, :_reduce_118,
  1, 211, :_reduce_none,
  2, 212, :_reduce_120,
  1, 212, :_reduce_121,
  3, 212, :_reduce_122,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_126,
  1, 213, :_reduce_none,
  1, 165, :_reduce_128,
  1, 165, :_reduce_none,
  1, 166, :_reduce_130,
  0, 217, :_reduce_131,
  4, 166, :_reduce_132,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  3, 184, :_reduce_204,
  3, 184, :_reduce_205,
  6, 184, :_reduce_206,
  5, 184, :_reduce_207,
  5, 184, :_reduce_208,
  5, 184, :_reduce_209,
  5, 184, :_reduce_210,
  4, 184, :_reduce_211,
  3, 184, :_reduce_212,
  3, 184, :_reduce_213,
  3, 184, :_reduce_214,
  3, 184, :_reduce_215,
  3, 184, :_reduce_216,
  3, 184, :_reduce_217,
  3, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 184, :_reduce_220,
  4, 184, :_reduce_221,
  4, 184, :_reduce_222,
  2, 184, :_reduce_223,
  2, 184, :_reduce_224,
  3, 184, :_reduce_225,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  1, 184, :_reduce_none,
  3, 184, :_reduce_230,
  3, 184, :_reduce_231,
  3, 184, :_reduce_232,
  3, 184, :_reduce_233,
  3, 184, :_reduce_234,
  2, 184, :_reduce_235,
  2, 184, :_reduce_236,
  3, 184, :_reduce_237,
  3, 184, :_reduce_238,
  3, 184, :_reduce_239,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  6, 184, :_reduce_242,
  1, 184, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 219, :_reduce_248,
  3, 219, :_reduce_249,
  1, 173, :_reduce_250,
  1, 222, :_reduce_none,
  2, 222, :_reduce_252,
  4, 222, :_reduce_253,
  2, 222, :_reduce_254,
  1, 218, :_reduce_none,
  3, 218, :_reduce_256,
  3, 226, :_reduce_257,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 179, :_reduce_262,
  4, 179, :_reduce_263,
  2, 179, :_reduce_264,
  1, 201, :_reduce_265,
  2, 201, :_reduce_266,
  2, 201, :_reduce_267,
  4, 201, :_reduce_268,
  1, 201, :_reduce_269,
  0, 230, :_reduce_270,
  2, 194, :_reduce_271,
  2, 229, :_reduce_272,
  2, 228, :_reduce_273,
  1, 228, :_reduce_none,
  1, 223, :_reduce_275,
  2, 223, :_reduce_276,
  3, 223, :_reduce_277,
  4, 223, :_reduce_278,
  3, 172, :_reduce_279,
  4, 172, :_reduce_280,
  2, 172, :_reduce_281,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_292,
  0, 265, :_reduce_293,
  4, 220, :_reduce_294,
  0, 266, :_reduce_295,
  3, 220, :_reduce_296,
  0, 267, :_reduce_297,
  4, 220, :_reduce_298,
  3, 220, :_reduce_299,
  3, 220, :_reduce_300,
  2, 220, :_reduce_301,
  0, 268, :_reduce_302,
  4, 220, :_reduce_303,
  0, 269, :_reduce_304,
  4, 220, :_reduce_305,
  1, 220, :_reduce_306,
  4, 220, :_reduce_307,
  3, 220, :_reduce_308,
  1, 220, :_reduce_309,
  5, 220, :_reduce_310,
  4, 220, :_reduce_311,
  3, 220, :_reduce_312,
  2, 220, :_reduce_313,
  1, 220, :_reduce_none,
  2, 220, :_reduce_315,
  1, 220, :_reduce_316,
  6, 220, :_reduce_317,
  6, 220, :_reduce_318,
  4, 220, :_reduce_319,
  4, 220, :_reduce_320,
  5, 220, :_reduce_321,
  4, 220, :_reduce_322,
  6, 220, :_reduce_323,
  0, 270, :_reduce_324,
  0, 271, :_reduce_325,
  7, 220, :_reduce_326,
  0, 272, :_reduce_327,
  0, 273, :_reduce_328,
  0, 274, :_reduce_329,
  9, 220, :_reduce_330,
  0, 275, :_reduce_331,
  0, 276, :_reduce_332,
  6, 220, :_reduce_333,
  0, 277, :_reduce_334,
  6, 220, :_reduce_335,
  0, 278, :_reduce_336,
  0, 279, :_reduce_337,
  9, 220, :_reduce_338,
  1, 220, :_reduce_339,
  1, 220, :_reduce_340,
  1, 220, :_reduce_341,
  1, 220, :_reduce_342,
  1, 178, :_reduce_343,
  1, 240, :_reduce_none,
  1, 246, :_reduce_none,
  1, 249, :_reduce_none,
  1, 251, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 255, :_reduce_none,
  1, 257, :_reduce_351,
  1, 260, :_reduce_352,
  1, 261, :_reduce_353,
  1, 280, :_reduce_none,
  1, 281, :_reduce_none,
  1, 282, :_reduce_none,
  1, 283, :_reduce_none,
  1, 284, :_reduce_none,
  1, 159, :_reduce_none,
  1, 285, :_reduce_none,
  1, 241, :_reduce_none,
  1, 200, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  2, 247, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 248, :_reduce_none,
  5, 248, :_reduce_369,
  1, 250, :_reduce_none,
  2, 250, :_reduce_371,
  1, 256, :_reduce_none,
  1, 256, :_reduce_373,
  1, 286, :_reduce_none,
  3, 286, :_reduce_375,
  1, 289, :_reduce_376,
  3, 289, :_reduce_377,
  1, 288, :_reduce_378,
  3, 288, :_reduce_379,
  5, 288, :_reduce_380,
  1, 288, :_reduce_381,
  3, 288, :_reduce_382,
  2, 290, :_reduce_383,
  1, 290, :_reduce_384,
  4, 291, :_reduce_385,
  2, 291, :_reduce_386,
  2, 291, :_reduce_387,
  1, 291, :_reduce_388,
  2, 296, :_reduce_389,
  1, 296, :_reduce_none,
  6, 297, :_reduce_391,
  8, 297, :_reduce_392,
  4, 297, :_reduce_393,
  6, 297, :_reduce_394,
  4, 297, :_reduce_395,
  2, 297, :_reduce_396,
  6, 297, :_reduce_397,
  2, 297, :_reduce_398,
  4, 297, :_reduce_399,
  6, 297, :_reduce_400,
  2, 297, :_reduce_401,
  4, 297, :_reduce_402,
  2, 297, :_reduce_403,
  4, 297, :_reduce_404,
  1, 297, :_reduce_405,
  1, 301, :_reduce_406,
  1, 301, :_reduce_407,
  3, 302, :_reduce_408,
  1, 302, :_reduce_409,
  4, 302, :_reduce_410,
  1, 303, :_reduce_none,
  4, 303, :_reduce_412,
  1, 304, :_reduce_413,
  3, 304, :_reduce_414,
  1, 305, :_reduce_415,
  1, 305, :_reduce_none,
  0, 309, :_reduce_417,
  0, 310, :_reduce_418,
  5, 245, :_reduce_419,
  4, 307, :_reduce_420,
  1, 307, :_reduce_421,
  3, 308, :_reduce_422,
  3, 308, :_reduce_423,
  3, 312, :_reduce_424,
  2, 191, :_reduce_425,
  4, 191, :_reduce_426,
  5, 191, :_reduce_427,
  5, 191, :_reduce_428,
  2, 244, :_reduce_429,
  4, 244, :_reduce_430,
  4, 244, :_reduce_431,
  3, 244, :_reduce_432,
  3, 244, :_reduce_433,
  3, 244, :_reduce_434,
  2, 244, :_reduce_435,
  1, 244, :_reduce_436,
  4, 244, :_reduce_437,
  0, 315, :_reduce_438,
  4, 243, :_reduce_439,
  0, 316, :_reduce_440,
  4, 243, :_reduce_441,
  0, 317, :_reduce_442,
  0, 318, :_reduce_443,
  4, 196, :_reduce_444,
  0, 320, :_reduce_445,
  0, 321, :_reduce_446,
  4, 313, :_reduce_447,
  1, 319, :_reduce_448,
  2, 319, :_reduce_449,
  3, 319, :_reduce_450,
  4, 319, :_reduce_451,
  0, 323, :_reduce_452,
  6, 254, :_reduce_453,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  6, 158, :_reduce_456,
  0, 158, :_reduce_457,
  1, 324, :_reduce_458,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  2, 325, :_reduce_461,
  1, 325, :_reduce_none,
  2, 160, :_reduce_463,
  1, 160, :_reduce_none,
  1, 231, :_reduce_465,
  1, 231, :_reduce_none,
  1, 232, :_reduce_467,
  1, 327, :_reduce_468,
  1, 327, :_reduce_none,
  2, 327, :_reduce_470,
  3, 328, :_reduce_471,
  1, 328, :_reduce_472,
  3, 233, :_reduce_473,
  3, 234, :_reduce_474,
  3, 235, :_reduce_475,
  3, 235, :_reduce_476,
  1, 332, :_reduce_477,
  3, 332, :_reduce_478,
  1, 333, :_reduce_none,
  2, 333, :_reduce_480,
  3, 237, :_reduce_481,
  3, 237, :_reduce_482,
  1, 335, :_reduce_483,
  3, 335, :_reduce_484,
  3, 236, :_reduce_485,
  3, 236, :_reduce_486,
  3, 238, :_reduce_487,
  3, 238, :_reduce_488,
  1, 336, :_reduce_489,
  3, 336, :_reduce_490,
  1, 337, :_reduce_491,
  3, 337, :_reduce_492,
  1, 329, :_reduce_493,
  2, 329, :_reduce_494,
  1, 330, :_reduce_495,
  2, 330, :_reduce_496,
  1, 331, :_reduce_497,
  2, 331, :_reduce_498,
  1, 334, :_reduce_499,
  0, 339, :_reduce_500,
  3, 334, :_reduce_501,
  0, 340, :_reduce_502,
  4, 334, :_reduce_503,
  1, 338, :_reduce_504,
  1, 338, :_reduce_505,
  1, 338, :_reduce_506,
  1, 338, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  2, 341, :_reduce_510,
  1, 341, :_reduce_511,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  3, 342, :_reduce_516,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  2, 326, :_reduce_519,
  2, 326, :_reduce_520,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_526,
  1, 210, :_reduce_527,
  1, 210, :_reduce_528,
  1, 210, :_reduce_529,
  1, 210, :_reduce_530,
  1, 210, :_reduce_531,
  1, 210, :_reduce_532,
  1, 239, :_reduce_533,
  1, 239, :_reduce_534,
  1, 177, :_reduce_535,
  1, 177, :_reduce_536,
  1, 182, :_reduce_537,
  1, 182, :_reduce_538,
  0, 344, :_reduce_539,
  4, 258, :_reduce_540,
  1, 258, :_reduce_541,
  3, 262, :_reduce_542,
  0, 346, :_reduce_543,
  3, 262, :_reduce_544,
  4, 345, :_reduce_545,
  2, 345, :_reduce_546,
  2, 345, :_reduce_547,
  1, 345, :_reduce_none,
  2, 348, :_reduce_549,
  0, 348, :_reduce_550,
  6, 311, :_reduce_551,
  8, 311, :_reduce_552,
  4, 311, :_reduce_553,
  6, 311, :_reduce_554,
  4, 311, :_reduce_555,
  6, 311, :_reduce_556,
  2, 311, :_reduce_557,
  4, 311, :_reduce_558,
  6, 311, :_reduce_559,
  2, 311, :_reduce_560,
  4, 311, :_reduce_561,
  2, 311, :_reduce_562,
  4, 311, :_reduce_563,
  1, 311, :_reduce_564,
  0, 311, :_reduce_565,
  1, 306, :_reduce_566,
  1, 306, :_reduce_567,
  1, 306, :_reduce_568,
  1, 306, :_reduce_569,
  1, 287, :_reduce_none,
  1, 287, :_reduce_571,
  1, 350, :_reduce_none,
  3, 350, :_reduce_573,
  1, 298, :_reduce_574,
  3, 298, :_reduce_575,
  2, 351, :_reduce_576,
  2, 352, :_reduce_577,
  1, 292, :_reduce_none,
  3, 292, :_reduce_579,
  1, 347, :_reduce_none,
  3, 347, :_reduce_581,
  1, 353, :_reduce_none,
  1, 353, :_reduce_none,
  2, 293, :_reduce_584,
  1, 293, :_reduce_585,
  3, 354, :_reduce_586,
  3, 355, :_reduce_587,
  1, 299, :_reduce_588,
  3, 299, :_reduce_589,
  1, 349, :_reduce_590,
  3, 349, :_reduce_591,
  1, 356, :_reduce_none,
  1, 356, :_reduce_none,
  2, 300, :_reduce_594,
  1, 300, :_reduce_595,
  1, 357, :_reduce_none,
  1, 357, :_reduce_none,
  2, 295, :_reduce_598,
  2, 294, :_reduce_599,
  0, 294, :_reduce_600,
  1, 263, :_reduce_none,
  0, 358, :_reduce_602,
  4, 263, :_reduce_603,
  1, 242, :_reduce_604,
  2, 242, :_reduce_none,
  1, 225, :_reduce_none,
  3, 225, :_reduce_607,
  3, 359, :_reduce_608,
  2, 359, :_reduce_609,
  2, 359, :_reduce_610,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 314, :_reduce_none,
  1, 314, :_reduce_none,
  1, 314, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 181, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 204, :_reduce_none,
  2, 180, :_reduce_none,
  0, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 259, :_reduce_635,
  1, 259, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_638,
  0, 149, :_reduce_639 ]

racc_reduce_n = 640

racc_shift_n = 1085

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tLOWEST => 139,
  :tEQL => 140,
  :tBDOT2 => 141,
  :tBDOT3 => 142 }

racc_nt_base = 143

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tLOWEST",
  "tEQL",
  "tBDOT2",
  "tBDOT3",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "@5",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@6",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@7",
  "@8",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@9",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@10",
  "arg_rhs",
  "rel_expr",
  "primary",
  "relop",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "@28",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "case_args",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "ssym",
  "dsym",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 11
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      # TODO: move down to main match so I can just use val

                      warn "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug 12

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      result = val[2] # wtf?

    result
end

def _reduce_24(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_27(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_28(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_29(val, _values, result)
                      result = val[1]

    result
end

def _reduce_30(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_31(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_33(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_34(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_35(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug 13
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_38(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_43(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_44(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_45(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_46(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_47(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_48(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_49(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_50(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_55(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_56(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_60(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_61(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

def _reduce_65(val, _values, result)
                      blk, _, (msg, _line), args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_66(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_67(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      # self.env.unextend

    result
end

def _reduce_68(val, _values, result)
                      (msg, line), = val
                      result = new_call(nil, msg.to_sym).line line

    result
end

def _reduce_69(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_70(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_71(val, _values, result)
                      lhs, callop, (op, _), args = val

                      result = new_call lhs, op.to_sym, args, callop
                      result.line lhs.line

    result
end

def _reduce_72(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_73(val, _values, result)
                      lhs, _, (id, line), args = val

                      result = new_call lhs, id.to_sym, args
                      result.line line

    result
end

def _reduce_74(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_75(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_76(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_78(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_79(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      result = val[1]

    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_84(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_85(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_86(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_87(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_88(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_89(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_90(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_91(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_92(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_93(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 94 omitted

def _reduce_95(val, _values, result)
                      result = val[1]

    result
end

def _reduce_96(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_97(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_98(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_99(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_102(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_103(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_104(val, _values, result)
                      recv, _, (id, _line) = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_105(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 14
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, (id, _line) = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_107(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 15
                        yyerror "dynamic constant assignment"
                      end

                      _, (id, l) = val

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_108(val, _values, result)
                      ref, = val

                      self.backref_assign_error ref

    result
end

def _reduce_109(val, _values, result)
                      var, = val

                      result = self.assignable var

    result
end

def _reduce_110(val, _values, result)
                      var, = val

                      result = self.assignable var

                      debug 16

    result
end

def _reduce_111(val, _values, result)
                      lhs, _, args, _ = val

                      result = self.aryset lhs, args

    result
end

def _reduce_112(val, _values, result)
                      lhs, op, (id, _line) = val

                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_113(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_attrasgn lhs, id

    result
end

def _reduce_114(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_115(val, _values, result)
                      expr, _, (id, _line) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 17
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      _, (id, l) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 18
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_117(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_118(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      _, (name, line) = val
                      result = s(:colon3, name.to_sym).line line

    result
end

def _reduce_121(val, _values, result)
                      (id, line), = val
                      result = [id.to_sym, line] # TODO: sexp?

    result
end

def _reduce_122(val, _values, result)
                      pval, _, (name, _line) = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

def _reduce_126(val, _values, result)
                      lexer.lex_state = EXPR_END

    result
end

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      (id, line), = val

                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

def _reduce_204(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_205(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_209(val, _values, result)
                      lhs, _, (id, _line), (op, _), rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_210(val, _values, result)
                      lhs1, _, (lhs2, _line), op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_211(val, _values, result)
                      _, (lhs, line), op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_212(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_213(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_214(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      _, (num, line), _, arg = val
                      lit = s(:lit, num).line line
                      result = new_call(new_call(lit, :"**", argl(arg)), :"-@")

    result
end

def _reduce_222(val, _values, result)
                      _, (num, line), _, arg = val
                      lit = s(:lit, num).line line
                      result = new_call(new_call(lit, :"**", argl(arg)), :"-@")

                      ## TODO: why is this 2.0 only?
                      debug 19

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 229 omitted

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_234(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_235(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_236(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_237(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_241(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_242(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      lhs, (op, _), rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_249(val, _values, result)
                      lhs, (op, _), rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_250(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_253(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_254(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_257(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = args val

    result
end

def _reduce_263(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_264(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_265(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_266(val, _values, result)
                      result = call_args val

    result
end

def _reduce_267(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_268(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_269(val, _values, result)
                      result = call_args val

    result
end

def _reduce_270(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_271(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_272(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_273(val, _values, result)
                      result = val[1]

    result
end

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_276(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_277(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_278(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_279(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_280(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_281(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      (msg, line), = val
                      result = new_call nil, msg.to_sym
                      result.line line

    result
end

def _reduce_293(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_294(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_295(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_296(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_297(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_298(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_299(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_300(val, _values, result)
                      expr, _, (id, _line) = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_301(val, _values, result)
                      _, (id, line) = val

                      result = s(:colon3, id.to_sym).line line

    result
end

def _reduce_302(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_303(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_304(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_305(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_306(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_307(val, _values, result)
                      (_, line), _, args, _ = val

                      result = new_yield(args).line line

    result
end

def _reduce_308(val, _values, result)
                      (_, line), _, _ = val

                      result = new_yield.line line

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val

                      result = new_yield.line line

    result
end

def _reduce_310(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_311(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_312(val, _values, result)
                      debug 20

    result
end

def _reduce_313(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 314 omitted

def _reduce_315(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_316(val, _values, result)
                      expr, = val
                      result = expr

    result
end

def _reduce_317(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_318(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_319(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_320(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_321(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_322(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_323(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_325(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_326(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_329(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_330(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_331(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_332(val, _values, result)
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_334(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

    result
end

def _reduce_335(val, _values, result)
                      result, in_def = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.ignore_body_comments

    result
end

def _reduce_336(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL

    result
end

def _reduce_338(val, _values, result)
                      # [kdef, recv, _, _, (name, line), in_def, args, body, kend]
                      # =>
                      # [kdef, recv, (name, line), in_def, args, body, kend]

                      val.delete_at 3
                      val.delete_at 2

                      result, in_def = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.ignore_body_comments

    result
end

def _reduce_339(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_340(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_341(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_342(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_343(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_352(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_353(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = val[1]

    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

def _reduce_376(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_377(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_378(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_379(val, _values, result)
                      args, _, rest = val

                      result = block_var args, rest

    result
end

def _reduce_380(val, _values, result)
                      lhs, _, splat, _, rhs = val

                      result = block_var lhs, splat, rhs

    result
end

def _reduce_381(val, _values, result)
                      rest, = val

                      result = block_var rest

    result
end

def _reduce_382(val, _values, result)
                      splat, _, rest = val

                      result = block_var splat, rest

    result
end

def _reduce_383(val, _values, result)
                      _, (id, line) = val

                      result = args ["*#{id}".to_sym]
                      result.line line

    result
end

def _reduce_384(val, _values, result)
                      result = args [:*]
                      result.line lexer.lineno # FIX: tSTAR -> line

    result
end

def _reduce_385(val, _values, result)
                      result = call_args val

    result
end

def _reduce_386(val, _values, result)
                      result = call_args val

    result
end

def _reduce_387(val, _values, result)
                      result = call_args val

    result
end

def _reduce_388(val, _values, result)
                      (id, line), = val
                      result = call_args [id]
                      result.line line

    result
end

def _reduce_389(val, _values, result)
                      result = args val

    result
end

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      result = args val

    result
end

def _reduce_392(val, _values, result)
                      result = args val

    result
end

def _reduce_393(val, _values, result)
                      result = args val

    result
end

def _reduce_394(val, _values, result)
                      result = args val

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

def _reduce_396(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args val

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
 result = 0
    result
end

def _reduce_407(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_408(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_410(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      result = args val

    result
end

def _reduce_413(val, _values, result)
                      result = args val

    result
end

def _reduce_414(val, _values, result)
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      (id, line), = val
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 416 omitted

def _reduce_417(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_418(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_419(val, _values, result)
                      _, (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_422(val, _values, result)
                      result = val[1]

    result
end

def _reduce_423(val, _values, result)
                      result = val[1]

    result
end

def _reduce_424(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_425(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      cmd, blk = val

                      syntax_error "Both block arg and actual block given." if
                        cmd.block_pass?

                      if inverted? val then
                        val = invert_block_call val
                        cmd, blk = val
                      end

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_426(val, _values, result)
                      lhs, _, (id, _line), args = val

                      result = new_call lhs, id.to_sym, args

    result
end

def _reduce_427(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_428(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_429(val, _values, result)
                      call, args = val

                      result = call.concat args.sexp_body if args

    result
end

def _reduce_430(val, _values, result)
                      recv, call_op, (op, _line), args = val

                      result = new_call recv, op.to_sym, args, call_op

    result
end

def _reduce_431(val, _values, result)
                      recv, _, (op, _line), args = val

                      result = new_call recv, op.to_sym, args

    result
end

def _reduce_432(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_call lhs, id.to_sym

    result
end

def _reduce_433(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_434(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_435(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_436(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_438(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_439(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_440(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_441(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_442(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_443(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_444(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_445(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_446(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_447(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_448(val, _values, result)
                      arg, = val

                      result = s(:array, arg).line arg.line

    result
end

def _reduce_449(val, _values, result)
                      _, arg = val

                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_450(val, _values, result)
                      args, _, id = val

                      result = self.list_append args, id

    result
end

def _reduce_451(val, _values, result)
                      args, _, _, id = val

                      result = self.list_append args, s(:splat, id).line(id.line)

    result
end

def _reduce_452(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_453(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line val[1]
                      result << val[5] if val[5]

    result
end

# reduce 454 omitted

# reduce 455 omitted

def _reduce_456(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_457(val, _values, result)
                      result = nil

    result
end

def _reduce_458(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 459 omitted

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = val[1]

    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 464 omitted

def _reduce_465(val, _values, result)
                      (lit, line), = val
                      result = s(:lit, lit).line line

    result
end

# reduce 466 omitted

def _reduce_467(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_468(val, _values, result)
                      debug 37

    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_471(val, _values, result)
                      (_, line), str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_DEDENT

                      result = str.line line

    result
end

def _reduce_472(val, _values, result)
                      result = new_string val

    result
end

def _reduce_473(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_474(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_475(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_476(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_477(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_478(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_481(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_482(val, _values, result)
                      (_, line), list, _, = val
                      list.line line
                      result = list

    result
end

def _reduce_483(val, _values, result)
                      result = new_symbol_list

    result
end

def _reduce_484(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_485(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_486(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_487(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_488(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_489(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_490(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_491(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_493(val, _values, result)
                      line = prev_value_to_lineno _values.last
                      result = s(:str, +"").line line

    result
end

def _reduce_494(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_495(val, _values, result)
                      result = nil

    result
end

def _reduce_496(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_497(val, _values, result)
                      result = nil

    result
end

def _reduce_498(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_499(val, _values, result)
                      result = new_string val

    result
end

def _reduce_500(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_501(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_502(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_503(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.pop
                      lexer.cmdarg.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug 38
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_504(val, _values, result)
                      (id, line), = val
                      result = s(:gvar, id.to_sym).line line

    result
end

def _reduce_505(val, _values, result)
                      (id, line), = val
                      result = s(:ivar, id.to_sym).line line

    result
end

def _reduce_506(val, _values, result)
                      (id, line), = val
                      result = s(:cvar, id.to_sym).line line

    result
end

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      _, (id, line) = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

def _reduce_511(val, _values, result)
                      (id, line), = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug 39
                      end

    result
end

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, (num, line) = val
                      result = [-num, line]

    result
end

def _reduce_520(val, _values, result)
                      _, (num, line) = val
                      result = [-num, line]

    result
end

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

def _reduce_526(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_527(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_528(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_529(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_530(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_531(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_533(val, _values, result)
                      raise "NO: #{val.inspect}" if Sexp === val.first
                      (var, line), = val
                      result = Sexp === var ? var : self.gettable(var)
                      result.line line

    result
end

def _reduce_534(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_535(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_536(val, _values, result)
                      result = self.assignable val[0]
                      debug 40

    result
end

def _reduce_537(val, _values, result)
                      (ref, line), = val
                      result = s(:nth_ref, ref).line line

    result
end

def _reduce_538(val, _values, result)
                      (ref, line), = val
                      result = s(:back_ref, ref).line line

    result
end

def _reduce_539(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_540(val, _values, result)
                      result = val[2]

    result
end

def _reduce_541(val, _values, result)
                      result = nil

    result
end

def _reduce_542(val, _values, result)
                      result = end_args val

    result
end

def _reduce_543(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_544(val, _values, result)
                      result = end_args val

    result
end

def _reduce_545(val, _values, result)
                      result = args val

    result
end

def _reduce_546(val, _values, result)
                      result = args val

    result
end

def _reduce_547(val, _values, result)
                      result = args val

    result
end

# reduce 548 omitted

def _reduce_549(val, _values, result)
                      result = val[1]

    result
end

def _reduce_550(val, _values, result)
                      result = nil

    result
end

def _reduce_551(val, _values, result)
                      result = args val

    result
end

def _reduce_552(val, _values, result)
                      result = args val

    result
end

def _reduce_553(val, _values, result)
                      result = args val

    result
end

def _reduce_554(val, _values, result)
                      result = args val

    result
end

def _reduce_555(val, _values, result)
                      result = args val

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val
                      # result.line lexer.lineno

    result
end

def _reduce_566(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_567(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      (id, line), = val
                      identifier = id.to_sym
                      self.env[identifier] = :lvar

                      result = [identifier, line]

    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      _, margs, _ = val

                      result = margs

    result
end

def _reduce_574(val, _values, result)
                      result = new_arg val

    result
end

def _reduce_575(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << (Sexp === item ? item : item.first)

    result
end

def _reduce_576(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_577(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      result = args val

    result
end

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      _, (id, line) = val

                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"**#{name}", line]

    result
end

def _reduce_585(val, _values, result)
                      id = :"**"
                      self.env[id] = :lvar # TODO: needed?!?
                      result = [id, lexer.lineno] # TODO: tPOW/tDSTAR include lineno

    result
end

def _reduce_586(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs
                      # TODO: detect duplicate names

    result
end

def _reduce_587(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs

    result
end

def _reduce_588(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_589(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_590(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_591(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      _, (id, line) = val
                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"*#{name}", line]

    result
end

def _reduce_595(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = [name, lexer.lineno] # FIX: tSTAR to include lineno

    result
end

# reduce 596 omitted

# reduce 597 omitted

def _reduce_598(val, _values, result)
                      _, (id, line) = val
                      identifier = id.to_sym

                      self.env[identifier] = :lvar
                      result = ["&#{identifier}".to_sym, line]

    result
end

def _reduce_599(val, _values, result)
                      _, arg = val
                      result = arg

    result
end

def _reduce_600(val, _values, result)
                      result = nil

    result
end

# reduce 601 omitted

def _reduce_602(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_603(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_604(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 605 omitted

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_608(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_609(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_610(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

def _reduce_635(val, _values, result)
 yyerrok
    result
end

# reduce 636 omitted

# reduce 637 omitted

def _reduce_638(val, _values, result)
 yyerrok
    result
end

def _reduce_639(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
