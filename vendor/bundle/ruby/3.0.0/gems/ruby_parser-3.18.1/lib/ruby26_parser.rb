#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby26Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-526,647,650,285,568,-109,285,-526,-526,-526,224,225,-526,-526,-526',
'-103,-526,-110,832,-105,568,568,224,225,-526,234,-526,-526,-526,224',
'225,752,224,225,-95,753,-526,-526,230,-526,-526,-526,-526,-526,863,280',
'575,568,-117,-104,-116,-81,831,-112,-114,-109,133,134,135,136,137,235',
'887,-102,646,649,-540,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,568,-103,-526,-526,-526,-105,-526,-526,740,287,-526',
'-111,287,-526,-526,3,-526,126,-526,235,-526,231,-526,-526,-526,-526',
'-526,-526,-526,-100,-526,235,-526,221,-624,-104,-103,130,235,-103,-105',
'-101,129,-105,-109,-526,-526,-526,-526,-102,-526,-110,-526,130,130,-529',
'-103,-526,129,129,-105,-526,-529,-529,-529,-526,-117,-529,-529,-529',
'-104,-529,-108,-104,-107,-116,-112,-103,-105,-529,130,-529,-529,-529',
'-102,129,886,-102,-109,-114,-104,-529,-529,-109,-529,-529,-529,-529',
'-529,-113,-115,-111,832,95,-102,-113,-115,222,130,285,-541,96,849,129',
'130,423,-102,949,850,129,425,424,-529,-529,-529,-529,-529,-529,-529',
'-529,-529,-529,-529,-529,-529,-529,831,285,-529,-529,-529,223,-529,-529',
'108,109,-529,108,109,-529,-529,226,-529,477,-529,275,-529,232,-529,-529',
'-529,-529,-529,-529,-529,-110,-529,337,-529,-110,-110,-624,-625,338',
'282,631,547,-624,-625,631,-117,-529,-529,-529,-529,-117,-529,130,-529',
'-116,-112,-303,129,-529,-116,-112,287,-529,-303,-303,-303,-529,282,-114',
'-303,-303,616,-303,-114,235,-104,-106,-117,-113,-115,-111,-117,619,-113',
'-115,-111,823,110,111,287,110,111,-303,-303,370,-303,-303,-303,-303',
'-303,-116,633,632,629,230,633,632,824,616,395,631,229,130,130,794,627',
'626,129,129,619,227,702,398,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,130,668,-303,-303,-303,129,674,669,-112',
'401,-303,920,620,-303,631,627,626,404,-303,-621,-303,421,-303,-303,-303',
'-303,-303,-303,-303,-114,-303,231,-303,426,633,632,611,-346,608,607',
'606,616,609,796,-346,-303,-303,476,-106,620,-303,230,619,-346,810,-628',
'631,-303,474,636,-112,-303,-628,-628,-628,-115,-114,475,-628,-628,-111',
'-628,-526,478,614,633,632,629,232,-526,-628,479,631,-538,-621,627,626',
'234,-526,631,-538,-628,-628,-539,-628,-628,-628,-628,-628,-538,-539',
'-346,508,-526,517,230,-621,-529,520,-539,-526,-540,540,-111,-529,231',
'522,633,632,620,-108,538,-628,-628,-628,-628,-628,-628,-628,-628,-628',
'-628,-628,-628,-628,-628,-526,-117,-628,-628,-628,-536,675,633,632,634',
'-628,-538,-536,-628,633,632,639,-100,-628,-622,-628,-539,-628,-628,-628',
'-628,-628,-628,-628,-80,-628,-628,-628,231,-109,235,611,-294,608,607',
'606,616,609,533,-294,-628,-628,534,-104,-535,-628,-537,619,-294,631',
'-628,-535,-628,-537,-534,541,-628,-628,-628,-628,-113,-534,-628,-628',
'-628,-531,-628,-529,729,614,292,728,-531,-541,-529,-628,-628,-628,-628',
'-622,627,626,729,-529,235,731,-628,-628,230,-628,-628,-628,-628,-628',
'130,550,-294,282,-532,129,230,-622,-533,130,475,-532,547,579,129,-533',
'633,632,644,544,620,-101,577,-628,-628,-628,-628,-628,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-529,-110,-628,-628,-628,593,825,-628',
'729,548,-628,731,594,-628,-628,631,-628,-107,-628,-628,-628,231,-628',
'-628,-628,-628,-628,-628,-628,255,-628,-628,-628,231,-116,729,235,611',
'731,608,607,606,616,609,230,-628,-628,-628,-628,575,-628,661,-628,619',
'414,-303,580,-628,581,668,659,-628,-303,-303,-303,-113,638,-303,-303',
'-303,642,-303,-628,-304,645,614,633,632,651,-628,-304,-303,-303,-303',
'-624,648,627,626,-628,-304,655,-303,-303,230,-303,-303,-303,-303,-303',
'235,755,-103,1051,-303,-276,-304,-628,657,231,757,-303,669,-304,810',
'658,-625,224,225,-112,-303,620,-304,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-628,-304,-303,-303,-303,662,826',
'-303,859,863,-303,224,225,-303,-303,235,-303,-105,-303,-102,-303,231',
'-303,-303,-303,-303,-303,-303,-303,666,-303,-303,-303,-304,-114,611',
'-111,608,607,606,616,609,-303,667,255,-303,-303,-303,-303,-303,-303',
'619,-303,282,-625,-303,679,-303,-303,627,626,-303,-303,-303,-303,-115',
'255,255,-303,-303,255,-303,230,614,597,255,252,859,863,1035,254,253',
'624,623,627,626,230,255,757,686,235,-303,-303,1041,-303,-303,-303,-303',
'-303,252,235,230,1039,254,253,421,-303,235,1035,-95,611,706,608,607',
'606,235,609,757,620,553,717,722,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,231,725,-303,-303,-303,611,674,608,607',
'606,-303,609,782,-303,231,235,732,733,-303,522,-303,786,-303,-303,-303',
'-303,-303,-303,-303,231,-303,736,-303,725,725,611,575,608,607,606,616',
'609,725,782,759,-303,-303,764,-303,770,-303,619,786,272,273,-628,773',
'-303,774,776,778,-303,-628,-628,-628,-115,780,789,-628,-628,255,-628',
'611,614,608,607,606,790,609,791,-628,797,624,623,627,626,265,266,271',
'270,798,-628,-628,-277,-628,-628,-628,-628,-628,811,508,508,252,235',
'258,828,254,253,250,251,782,275,256,837,257,839,520,522,620,786,717',
'235,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628',
'-628,282,282,-628,-628,-628,611,675,608,607,606,-628,609,717,-628,255',
'863,725,235,-628,235,-628,904,-628,-628,-628,-628,-628,-628,-628,905',
'-628,-628,-628,235,914,-278,611,235,608,607,606,616,609,782,919,-628',
'-628,936,-628,717,-628,-276,619,941,725,-439,725,-628,725,235,725,-628',
'-439,-439,-439,-113,725,-439,-439,-439,235,-439,255,611,614,608,607',
'606,963,609,-439,-439,-439,624,623,627,626,235,265,266,773,-439,-439',
'966,-439,-439,-439,-439,-439,611,968,608,607,606,252,609,258,970,254',
'253,250,251,972,972,256,235,257,979,-279,620,980,773,-439,-439,-439',
'-439,-439,-439,-439,-439,-439,-439,-439,-439,-439,-439,983,782,-439',
'-439,-439,986,988,-439,990,282,-439,235,992,-439,-439,725,-439,764,-439',
'1012,-439,1013,-439,-439,-439,-439,-439,-439,-439,1022,-439,-439,-439',
'611,1023,608,607,606,616,609,133,134,135,136,137,-439,-439,1033,-439',
'619,-439,-312,133,134,135,136,137,-439,-312,-312,-312,-439,1036,-312',
'-312,-312,849,-312,255,909,910,614,1042,911,124,125,255,-312,-312,1052',
'624,623,627,626,265,266,972,-312,-312,972,-312,-312,-312,-312,-312,611',
'972,608,607,606,252,609,258,773,254,253,250,251,252,1059,1061,1063,254',
'253,250,251,620,1065,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312',
'-312,-312,-312,-312,1065,782,-312,-312,-312,722,725,-312,725,292,-312',
'1023,-625,-312,-312,-624,-312,235,-312,972,-312,1087,-312,-312,-312',
'-312,-312,-312,-312,1065,-312,1065,-312,611,1065,608,607,606,616,609',
'133,134,135,136,137,-312,-312,1065,-312,619,-312,-295,,,,,,-312,-295',
'-295,-295,-312,,-295,-295,-295,,-295,255,,,614,,,,,255,-295,-295,-295',
'624,623,627,626,265,266,,-295,-295,,-295,-295,-295,-295,-295,1016,,608',
'607,606,252,609,258,,254,253,250,251,252,,,,254,253,250,251,620,,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295',
'-295,-295,,,-295,,,-295,,,-295,-295,,-295,,-295,,-295,,-295,-295,-295',
'-295,-295,-295,-295,,-295,,-295,611,,608,607,606,616,609,,,,,,-295,-295',
'-295,-295,619,-295,-650,-295,,,,,-295,-650,-650,-650,-295,,-650,-650',
'-650,,-650,255,,,614,,,,,-650,-650,-650,,624,623,627,626,265,266,,-650',
'-650,,-650,-650,-650,-650,-650,1016,,608,607,606,252,609,,,254,253,250',
'251,,,,,,,,,620,,-650,-650,-650,-650,-650,-650,-650,-650,-650,-650,-650',
'-650,-650,-650,,,-650,-650,-650,,,-650,,282,-650,,,-650,-650,,-650,',
'-650,,-650,,-650,-650,-650,-650,-650,-650,-650,,-650,-650,-650,611,',
'608,607,606,616,609,,,,,,-650,-650,,-650,619,-650,-629,,,,,,-650,-629',
'-629,-629,-650,,-629,-629,-629,,-629,,,,614,,,,,-629,-629,-629,-629',
'624,623,627,626,,,,-629,-629,,-629,-629,-629,-629,-629,,,,,,,,,,,,,',
'235,,,,,,,,620,,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629',
'-629,-629,-629,,,-629,-629,-629,,,-629,,,-629,,,-629,-629,,-629,,-629',
',-629,,-629,-629,-629,-629,-629,-629,-629,,-629,-629,-629,611,,608,607',
'606,616,609,,,,,,-629,-629,-629,-629,619,-629,-630,-629,,,,,-629,-630',
'-630,-630,-629,,-630,-630,-630,,-630,,,,614,,,,,-630,-630,-630,-630',
'624,623,627,626,,,,-630,-630,,-630,-630,-630,-630,-630,,,,,,,,,,,,,',
',,,,,,,,620,,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630',
'-630,-630,-630,,,-630,-630,-630,,,-630,,,-630,,,-630,-630,,-630,,-630',
',-630,,-630,-630,-630,-630,-630,-630,-630,,-630,-630,-630,,,,,,,,,,',
',,-630,-630,-630,-630,,-630,-650,-630,,,,,-630,-650,-650,-650,-630,',
'-650,-650,-650,,-650,,,,,,,,,-650,-650,,,,,,,,,,-650,-650,,-650,-650',
'-650,-650,-650,,,,,,,,506,458,,,507,,,,,,,,,173,174,,169,151,152,153',
'160,157,159,,,154,155,-650,,,175,176,161,162,-650,,,,,282,-650,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,-650,-650,177',
',,,,,,,,,,,-650,,,,,-650,,,170,,,,-650,,,,-650,8,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,663,11,49,10,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,105,95,97,98,99,101,,,,96,106,,269,,-251,,,89,,,93,100,102',
',110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,663,11,49,313,13,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,248,249,,,265,266,,43,,,315,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,',
',96,106,,269,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
'11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,105,95,97,98,99,101,,,,96,106,,269,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,269',
',,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255,259',
'260,261,262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,315,,,62',
'63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95',
'97,98,99,101,,,,96,106,235,269,,,,,89,,,93,100,102,,110,111,311,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,',
'248,249,,,265,266,,43,,,315,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,269,,,,,89',
',,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255,259,260,261',
'262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64',
',38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99',
'101,,,,96,106,,269,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,',
',265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270',
'256,23,257,,,,105,95,97,98,99,101,,,,96,106,,269,,,,,89,,,93,100,102',
',110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,-651,-651,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,255,259,260,261,262,272,273,267,268,263,264,,-651,-651,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,255,-651,-651,-651,-651,272,273,,,-651',
'-651,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,10,13,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,255,-651,-651,-651,-651',
'272,273,,,-651,-651,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313',
'13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255',
'-651,-651,-651,-651,272,273,,,-651,-651,,,,,,265,266,,43,,,36,,,62,63',
',,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,255,-651,-651,-651,-651,272,273,,,-651,-651,,,,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,255,-651,-651,-651,-651,272,273,,,-651',
'-651,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255,-651,-651,-651',
'-651,272,273,,,-651,-651,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,255,259,260,261,262,272,273,,,263,264,,,,,,265,266,,43,,,36,,,62',
'63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,',
'108,109,,45,46,44,255,259,260,261,262,272,273,267,,263,264,,,,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
'11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313',
'13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,',
'108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,10,13,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,',
',49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245',
',,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89',
',305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99',
'101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,,',
'334,,,,,,611,,608,607,606,616,609,,,,,,,,324,,619,320,,,62,63,,,64,',
'319,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,611,,608,607,606',
'616,609,,,,,,,,324,,619,246,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95',
'97,98,99,101,627,626,,96,106,,,,336,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,620,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,',
'83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,130,,,,,129,89,',
',93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,611,,608,607,606,616',
'609,,,,,,,,364,,619,36,,,62,63,,,64,,38,,,,,,,,,,,,614,,,,,105,95,97',
'98,99,101,627,626,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12',
'78,,,,79,80,,,,83,620,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,22,,,,,,11,49,10,13,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,414,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49',
',13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431,,,,48,,,,,',
',,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431',
',,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,',
',122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,235,,,,',
',89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96',
'106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105',
'302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48',
',,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,235,,,,,,89,,305,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,,,334,,,,,,611,,608,607,606,616,609,,,,,',
',,324,,619,246,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95,97,98,99,101',
'627,626,,96,106,,,,536,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,620,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',,,334,,,,,,611,,608,607,606,616,609,,,,,,,,324,,619,320,,,62,63,,,64',
',,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96,106,,,,,,,89,,',
'93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,553,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,,,48,,,,,,',
',245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115',
'304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,',
'89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122',
'121,123,582,60,114,113,583,,116,124,125,,108,109,,,,334,,,,,,611,,608',
'607,606,616,609,,,,,,,,584,,619,246,,,62,63,,,64,,,,,,,,,,,,,,614,,',
',,105,95,97,98,99,101,627,626,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,620,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,328,,,122,121,123,582,60,114,113,583,,116',
'124,125,,108,109,,,,334,,,,,,611,,608,607,606,616,609,,,,,,,,584,,619',
'246,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81',
'82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,',
',122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,',
',,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,699,,299,,48,,,',
',,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106',
',,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,414,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,',
',,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,',
',,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,,,,,,,',
',,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,',
',,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117',
'119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,802,,',
',48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60',
'114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101',
',,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
'11,49,,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',699,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89',
',305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101',
',,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,,',
'334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431,,,,48,,,,,',
',,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,699,,,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,',
'89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,302,97,98,99',
'101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,868,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305',
'93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,',
',,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101',
',,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,',
',,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,',
'105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119',
'120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,,,334,,,,,,,,,,,,,,,,,,,,994,,,246,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117',
'119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,,,334,,,,,,,,,,,,,,,,,,,,1001,,,246,,,62,63,,,64,,,,,,,,,',
',,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',1006,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,',
'93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,,,,,,,,,,,,,,,994,',
',246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,',
',122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,188',
'199,189,212,185,205,195,194,215,216,210,193,192,187,213,217,218,197',
'186,200,204,206,198,191,,,,207,214,209,208,201,211,196,184,203,202,',
',,,,183,190,181,182,178,179,180,141,143,140,,142,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,105,,,,,,,,,',
'106,,,,,,,,,170,188,199,189,212,185,205,195,194,215,216,210,193,192',
'187,213,217,218,197,186,200,204,206,198,191,,,,207,214,209,208,201,211',
'196,184,203,202,,,,,,183,190,181,182,178,179,180,141,143,,,142,,,,,',
',,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,105,,,,,,,,,,106,,,,,,,,,170,188,199,189,212,185,205,195,194,215',
'216,210,193,192,187,213,217,218,197,186,200,204,206,198,191,,,,207,214',
'209,379,378,380,377,184,203,202,,,,,,183,190,181,182,374,375,376,372',
'143,114,113,373,,116,,,,,,,173,174,,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,386,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,188,199,189,212',
'185,205,195,194,215,216,210,193,192,187,213,217,218,197,186,200,204',
'206,198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,,183,190',
'181,182,178,179,180,141,143,411,410,142,,412,,,,,,,173,174,,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,',
',,170,188,199,189,212,185,205,195,194,215,216,210,193,192,187,213,217',
'218,197,186,200,204,206,198,191,,,,207,214,209,208,201,211,196,184,203',
'202,,,,,,183,190,181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,',
',,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,105,,,',
',,,,,,106,,,,,,,,,170,188,199,189,212,185,205,195,194,215,216,210,193',
'192,187,213,217,218,197,186,200,204,206,198,191,,,,207,214,209,208,201',
'211,196,184,203,202,,,,,,183,190,181,182,178,179,180,141,143,,,142,',
',,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,105,,,,,,,,,,106,,,,,,,,,170,188,199,189,212,185,205,195,194,215',
'216,210,193,192,187,213,217,218,197,186,200,204,206,198,191,,,,207,214',
'209,208,201,211,196,184,203,202,,,,,,183,190,181,182,178,179,180,141',
'143,,,142,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,',
'175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,454,458,,,455,,,,,,,,,173,174,170,169,151,152',
'153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,461,465,,,460',
',,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176',
'161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,680,458,,,681,,,,,,,,,173,174,170,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,682,465,,,683,,,,',
',,,,173,174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,,,,,710,458,,,711,,,,,,,,,173,174,170,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,,,,,713,465,,,714,,,,,,,,',
'173,174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,680,458,,,681,,,,,,,,,173,174,170,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,682,465,,,683,,,,,,,,,173',
'174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,',
',,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,,,,,747,458,,,748,,,,,,,,,173,174,170,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,749,465,,,750,,,,,,,,,173,174',
'170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,804,458,,,805,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,807,465,,,806,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'872,465,,,873,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,506,458,,,507,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,611,177,608',
'607,606,616,609,611,,608,607,606,616,609,,,619,,,,,170,,619,,,,,,,,',
',,,,,,614,,,,,,,614,,624,623,627,626,,,,624,623,627,626,,,,,,,,,,,,',
',,,,,1069,465,,,1068,,,,620,,,,,173,174,620,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,1072,458,,,1073,,,,,,,,,173',
'174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,',
',,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,,,,,1074,465,,,1075,,,,,,,,,173,174,170,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,611,177,608,607,606,616,609,,,,,,,',
',,619,,,,,170,,,,,,,,,,,,,,,,,614,,,,,,,,,624,623,627,626,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,620' ]
        racc_action_table = arr = ::Array.new(26232, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'112,402,405,65,353,361,689,112,112,112,470,470,112,112,112,710,112,362',
'687,711,354,940,720,720,112,22,112,112,112,767,767,584,17,17,705,584',
'112,112,27,112,112,112,112,112,1007,27,1007,945,365,713,580,705,687',
'747,748,998,9,9,9,9,9,22,768,844,402,405,238,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,869,710,112,112,112,711,112,112,570',
'65,112,870,689,112,112,1,112,3,112,470,112,27,112,112,112,112,112,112',
'112,361,112,720,112,13,713,713,710,353,767,710,711,362,353,711,238,112',
'112,112,112,844,112,999,112,354,940,115,710,112,354,940,711,112,115',
'115,115,112,1002,115,115,115,713,115,365,713,580,1042,1072,747,748,115',
'945,115,115,115,844,945,768,844,998,1073,713,115,115,998,115,115,115',
'115,115,1074,1075,1085,838,92,844,749,750,15,570,29,239,92,721,570,869',
'140,870,869,721,869,140,140,115,115,115,115,115,115,115,115,115,115',
'115,115,115,115,838,329,115,115,115,16,115,115,44,44,115,334,334,115',
'115,18,115,241,115,25,115,438,115,115,115,115,115,115,115,999,115,40',
'115,239,999,749,750,43,29,524,476,1074,1075,640,1002,115,115,115,115',
'1002,115,5,115,1042,1072,460,5,115,1042,1072,29,115,460,460,460,115',
'329,1073,460,460,770,460,1073,49,749,750,241,1074,1075,1085,438,770',
'1074,1075,1085,680,44,44,329,334,334,460,460,73,460,460,460,460,460',
'476,524,524,524,19,640,640,681,980,99,643,19,308,358,640,770,770,308',
'358,980,19,524,100,460,460,460,460,460,460,460,460,460,460,460,460,460',
'460,878,804,460,460,460,878,460,805,680,101,460,827,770,460,389,980',
'980,102,460,582,460,138,460,460,460,460,460,460,460,681,460,19,460,219',
'643,643,778,50,778,778,778,778,778,643,50,460,460,240,460,980,460,237',
'778,50,916,461,393,460,237,393,804,460,461,461,461,460,805,237,461,461',
'827,461,582,242,778,389,389,389,20,582,461,243,391,321,582,778,778,247',
'582,396,321,461,461,322,461,461,461,461,461,321,322,50,281,372,296,323',
'582,373,297,322,372,41,323,916,373,237,300,393,393,778,20,323,461,461',
'461,461,461,461,461,461,461,461,461,461,461,461,582,20,461,461,461,374',
'461,391,391,391,461,321,374,461,396,396,396,41,461,583,461,322,461,461',
'461,461,461,461,461,314,461,461,461,323,41,316,968,325,968,968,968,968',
'968,317,325,461,461,318,461,375,461,376,968,325,399,682,375,461,376',
'377,324,461,682,682,682,461,377,682,682,682,378,682,583,559,968,327',
'559,378,42,583,682,682,682,682,583,968,968,560,583,328,560,682,682,340',
'682,682,682,682,682,882,340,325,333,379,882,363,583,380,954,340,379',
'338,363,954,380,399,399,399,335,968,42,363,682,682,682,682,682,682,682',
'682,682,682,682,682,682,682,583,42,682,682,682,382,682,682,564,339,682',
'564,382,682,682,407,682,338,682,872,682,340,682,682,682,682,682,682',
'682,342,682,682,682,363,338,857,348,970,857,970,970,970,970,970,437',
'682,682,682,682,359,682,437,682,970,360,683,364,682,366,454,437,682',
'683,683,683,682,395,683,683,683,398,683,872,541,401,970,407,407,407',
'872,541,683,683,683,872,404,970,970,872,541,427,683,683,586,683,683',
'683,683,683,1014,586,454,1014,714,430,753,872,432,437,586,714,455,753',
'664,435,714,352,352,454,714,970,753,683,683,683,683,683,683,683,683',
'683,683,683,683,683,683,872,541,683,683,683,439,683,683,735,735,683',
'761,761,683,683,449,683,455,683,664,683,586,683,683,683,683,683,683',
'683,452,683,714,683,753,455,387,664,387,387,387,387,387,873,453,482',
'683,683,683,683,873,683,387,683,462,873,806,472,683,873,773,773,683',
'806,806,806,683,484,483,806,806,485,806,993,387,387,486,482,1043,1043',
'993,482,482,387,387,387,387,1000,487,993,503,510,806,806,1000,806,806',
'806,806,806,483,514,1034,1000,483,483,530,873,531,1034,532,614,535,614',
'614,614,537,614,1034,387,542,545,554,806,806,806,806,806,806,806,806',
'806,806,806,806,806,806,993,555,806,806,806,782,806,782,782,782,806',
'782,614,806,1000,556,561,562,806,565,806,614,806,806,806,806,806,806',
'806,1034,806,567,806,571,572,597,573,597,597,597,597,597,574,782,588',
'806,806,591,806,599,806,597,782,47,47,807,600,806,602,603,604,806,807',
'807,807,806,613,621,807,807,502,807,904,597,904,904,904,625,904,628',
'807,647,597,597,597,597,502,502,47,47,650,807,807,656,807,807,807,807',
'807,665,670,676,502,684,502,685,502,502,502,502,904,688,502,692,502',
'694,696,698,597,904,707,709,807,807,807,807,807,807,807,807,807,807',
'807,807,807,807,712,715,807,807,807,905,807,905,905,905,807,905,716',
'807,719,737,743,746,807,769,807,784,807,807,807,807,807,807,807,785',
'807,807,807,787,799,801,764,803,764,764,764,764,764,905,812,807,807',
'836,807,843,807,853,764,854,858,30,864,807,871,875,879,807,30,30,30',
'807,880,30,30,30,881,30,551,786,764,786,786,786,888,786,30,30,30,764',
'764,764,764,889,551,551,890,30,30,894,30,30,30,30,30,1022,895,1022,1022',
'1022,551,1022,551,897,551,551,551,551,898,900,551,903,551,913,915,764',
'922,923,30,30,30,30,30,30,30,30,30,30,30,30,30,30,925,1022,30,30,30',
'926,927,30,929,30,30,930,931,30,30,953,30,960,30,961,30,962,30,30,30',
'30,30,30,30,977,30,30,30,765,978,765,765,765,765,765,312,312,312,312',
'312,30,30,991,30,765,30,31,347,347,347,347,347,30,31,31,31,30,994,31',
'31,31,996,31,488,792,792,765,1001,792,792,792,497,31,31,1018,765,765',
'765,765,488,488,1019,31,31,1020,31,31,31,31,31,1023,1021,1023,1023,1023',
'488,1023,488,1024,488,488,488,488,497,1027,1028,1029,497,497,497,497',
'765,1030,31,31,31,31,31,31,31,31,31,31,31,31,31,31,1032,1023,31,31,31',
'1038,1048,31,1049,31,31,1057,1068,31,31,1069,31,1071,31,1080,31,1081',
'31,31,31,31,31,31,31,1082,31,1083,31,774,1084,774,774,774,774,774,529',
'529,529,529,529,31,31,1092,31,774,31,60,,,,,,31,60,60,60,31,,60,60,60',
',60,489,,,774,,,,,498,60,60,60,774,774,774,774,489,489,,60,60,,60,60',
'60,60,60,963,,963,963,963,489,963,489,,489,489,489,489,498,,,,498,498',
'498,498,774,,60,60,60,60,60,60,60,60,60,60,60,60,60,60,,,60,60,60,,',
'60,,,60,,,60,60,,60,,60,,60,,60,60,60,60,60,60,60,,60,,60,776,,776,776',
'776,776,776,,,,,,60,60,60,60,776,60,456,60,,,,,60,456,456,456,60,,456',
'456,456,,456,490,,,776,,,,,456,456,456,,776,776,776,776,490,490,,456',
'456,,456,456,456,456,456,1051,,1051,1051,1051,490,1051,,,490,490,490',
'490,,,,,,,,,776,,456,456,456,456,456,456,456,456,456,456,456,456,456',
'456,,,456,456,456,,,456,,456,456,,,456,456,,456,,456,,456,,456,456,456',
'456,456,456,456,,456,456,456,831,,831,831,831,831,831,,,,,,456,456,',
'456,831,456,465,,,,,,456,465,465,465,456,,465,465,465,,465,,,,831,,',
',,465,465,465,465,831,831,831,831,,,,465,465,,465,465,465,465,465,,',
',,,,,,,,,,,831,,,,,,,,831,,465,465,465,465,465,465,465,465,465,465,465',
'465,465,465,,,465,465,465,,,465,,,465,,,465,465,,465,,465,,465,,465',
'465,465,465,465,465,465,,465,465,465,966,,966,966,966,966,966,,,,,,465',
'465,465,465,966,465,466,465,,,,,465,466,466,466,465,,466,466,466,,466',
',,,966,,,,,466,466,466,466,966,966,966,966,,,,466,466,,466,466,466,466',
'466,,,,,,,,,,,,,,,,,,,,,,966,,466,466,466,466,466,466,466,466,466,466',
'466,466,466,466,,,466,466,466,,,466,,,466,,,466,466,,466,,466,,466,',
'466,466,466,466,466,466,466,,466,466,466,,,,,,,,,,,,,466,466,466,466',
',466,505,466,,,,,466,505,505,505,466,,505,505,505,,505,,,,,,,,,505,505',
',,,,,,,,,505,505,,505,505,505,505,505,,,,,,,,278,278,,,278,,,,,,,,,278',
'278,,278,278,278,278,278,278,278,,,278,278,505,,,278,278,278,278,505',
',,,,505,505,,,,,,,278,278,,278,278,278,278,278,278,278,278,278,278,278',
'505,505,278,,,,,,,,,,,,505,,,,,505,,,278,,,,505,,,,505,2,2,2,2,2,2,',
',,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,442,2,2,2,2,2,2',
'2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,442,442,442,442,442,442,442,442,442,442',
'442,,442,442,,,442,442,,2,,,2,,,2,2,,,2,,2,442,,442,2,442,442,442,442',
'442,442,442,2,442,,,,2,2,2,2,2,2,,,,2,2,,442,,442,,,2,,,2,2,2,,2,2,36',
'36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36',
'36,36,36,,,36,,,,,448,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36',
',36,36,,36,36,36,448,448,448,448,448,448,448,448,448,448,448,,448,448',
',,448,448,,36,,,36,,,36,36,,,36,,36,448,,448,36,448,448,448,448,448',
'448,448,36,448,,,,36,36,36,36,36,36,,,,36,36,,448,,,,,36,,,36,36,36',
',36,36,221,221,221,221,221,221,,,,221,221,,,,221,,221,221,221,221,221',
'221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,221,221,221,221',
'221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221,24',
'24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,221,,,221,,,221,221,,',
'221,,221,24,,24,221,24,24,24,24,24,24,24,221,24,,,,221,221,221,221,221',
'221,,,,221,221,,24,,,,,221,,,221,221,221,,221,221,246,246,246,246,246',
'246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246',
'246,246,246,246,,,246,,,,,,246,246,246,246,246,246,246,246,246,246,246',
'246,,246,246,246,,246,246,,246,246,246,294,294,294,294,294,294,294,294',
'294,294,294,,294,294,,,294,294,,246,,,246,,,246,246,,,246,,246,294,',
'294,246,294,294,294,294,294,294,294,246,294,,,,246,246,246,246,246,246',
',,,246,246,,294,,,,,246,,,246,246,246,,246,246,315,315,315,315,315,315',
',,,315,315,,,,315,,315,315,315,315,315,315,315,,,,,,315,315,315,315',
'315,315,315,,,315,,,,,,315,315,315,315,315,315,315,315,315,315,315,315',
',315,315,315,,315,315,,315,315,315,501,501,501,501,501,501,501,501,501',
'501,501,,501,501,,,501,501,,315,,,315,,,315,315,,,315,,315,501,,501',
'315,501,501,501,501,501,501,501,315,501,,,,315,315,315,315,315,315,',
',,315,315,501,501,,,,,315,,,315,315,315,,315,315,320,320,320,320,320',
'320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320',
'320,320,320,320,,,320,,,,,,320,320,320,320,320,320,320,320,320,320,320',
'320,,320,320,320,,320,320,,320,320,320,552,552,552,552,552,552,552,552',
'552,552,552,,552,552,,,552,552,,320,,,320,,,320,320,,,320,,320,552,',
'552,320,552,552,552,552,552,552,552,320,552,,,,320,320,320,320,320,320',
',,,320,320,,552,,,,,320,,,320,320,320,,320,320,346,346,346,346,346,346',
',,,346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346,346,346',
'346,346,346,,,346,,,,,,346,346,346,346,346,346,346,346,346,346,346,346',
',346,346,346,,346,346,,346,346,346,809,809,809,809,809,809,809,809,809',
'809,809,,809,809,,,809,809,,346,,,346,,,346,346,,,346,,346,809,,809',
'346,809,809,809,809,809,809,809,346,809,,,,346,346,346,346,346,346,',
',,346,346,,809,,,,,346,,,346,346,346,,346,346,356,356,356,356,356,356',
',,,356,356,,,,356,,356,356,356,356,356,356,356,,,,,,356,356,356,356',
'356,356,356,,,356,,,,,,356,356,356,356,356,356,356,356,356,356,356,356',
',356,356,356,,356,356,,356,356,356,921,921,921,921,921,921,921,921,921',
'921,921,,921,921,,,921,921,,356,,,356,,,356,356,,,356,,356,921,,921',
'356,921,921,921,921,921,921,921,356,921,,,,356,356,356,356,356,356,',
',,356,356,,921,,,,,356,,,356,356,356,,356,356,357,357,357,357,357,357',
',,,357,357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357,357,357',
'357,357,357,,,357,,,,,,357,357,357,357,357,357,357,357,357,357,357,357',
',357,357,357,,357,357,,357,357,357,480,480,480,480,480,480,480,480,480',
'480,480,,480,480,,,480,480,,357,,,357,,,357,357,,,357,,357,480,,480',
'357,480,480,480,480,480,480,480,357,480,,,,357,357,357,357,357,357,',
',,357,357,,,,,,,357,,,357,357,357,,357,357,566,566,566,566,566,566,',
',,566,566,,,,566,,566,566,566,566,566,566,566,,,,,,566,566,566,566,566',
'566,566,,,566,,,,,,566,566,566,566,566,566,566,566,566,566,566,566,',
'566,566,566,,566,566,,566,566,566,481,481,481,481,481,481,481,481,481',
'481,481,,481,481,,,481,481,,566,,,566,,,566,566,,,566,,566,481,,481',
'566,481,481,481,481,481,481,481,566,481,,,,566,566,566,566,566,566,',
',,566,566,,,,,,,566,,,566,566,566,,566,566,569,569,569,569,569,569,',
',,569,569,,,,569,,569,569,569,569,569,569,569,,,,,,569,569,569,569,569',
'569,569,,,569,,,,,,569,569,569,569,569,569,569,569,569,569,569,569,',
'569,569,569,,569,569,,569,569,569,491,491,491,491,491,491,491,,,491',
'491,,,,,,491,491,,569,,,569,,,569,569,,,569,,569,491,,491,569,491,491',
'491,491,491,491,491,569,491,,,,569,569,569,569,569,569,,,,569,569,,',
',,,,569,,,569,569,569,,569,569,652,652,652,652,652,652,,,,652,652,,',
',652,,652,652,652,652,652,652,652,,,,,,652,652,652,652,652,652,652,',
',652,,,,,,652,652,652,652,652,652,652,652,652,652,652,652,,652,652,652',
',652,652,,652,652,652,492,492,492,492,492,492,492,,,492,492,,,,,,492',
'492,,652,,,652,,,652,652,,,652,,652,492,,492,652,492,492,492,492,492',
'492,492,652,492,,,,652,652,652,652,652,652,,,,652,652,,,,,,,652,,,652',
'652,652,,652,652,751,751,751,751,751,751,,,,751,751,,,,751,,751,751',
'751,751,751,751,751,,,,,,751,751,751,751,751,751,751,,,751,,,,,,751',
'751,751,751,751,751,751,751,751,751,751,751,,751,751,751,,751,751,,751',
'751,751,493,493,493,493,493,493,493,,,493,493,,,,,,493,493,,751,,,751',
',,751,751,,,751,,751,493,,493,751,493,493,493,493,493,493,493,751,493',
',,,751,751,751,751,751,751,,,,751,751,,,,,,,751,,,751,751,751,,751,751',
'762,762,762,762,762,762,,,,762,762,,,,762,,762,762,762,762,762,762,762',
',,,,,762,762,762,762,762,762,762,,,762,,,,,,762,762,762,762,762,762',
'762,762,762,762,762,762,,762,762,762,,762,762,,762,762,762,494,494,494',
'494,494,494,494,,,494,494,,,,,,494,494,,762,,,762,,,762,762,,,762,,762',
'494,,494,762,494,494,494,494,494,494,494,762,494,,,,762,762,762,762',
'762,762,,,,762,762,,,,,,,762,,,762,762,762,,762,762,763,763,763,763',
'763,763,,,,763,763,,,,763,,763,763,763,763,763,763,763,,,,,,763,763',
'763,763,763,763,763,,,763,,,,,,763,763,763,763,763,763,763,763,763,763',
'763,763,,763,763,763,,763,763,,763,763,763,495,495,495,495,495,495,495',
',,495,495,,,,,,495,495,,763,,,763,,,763,763,,,763,,763,495,,495,763',
'495,495,495,495,495,495,495,763,495,,,,763,763,763,763,763,763,,,,763',
'763,,,,,,,763,,,763,763,763,,763,763,793,793,793,793,793,793,,,,793',
'793,,,,793,,793,793,793,793,793,793,793,,,,,,793,793,793,793,793,793',
'793,,,793,,,,,,793,793,793,793,793,793,793,793,793,793,793,793,,793',
'793,793,,793,793,,793,793,793,496,496,496,496,496,496,496,,,496,496',
',,,,,496,496,,793,,,793,,,793,793,,,793,,793,496,,496,793,496,496,496',
'496,496,496,496,793,496,,,,793,793,793,793,793,793,,,,793,793,,,,,,',
'793,,,793,793,793,,793,793,833,833,833,833,833,833,,,,833,833,,,,833',
',833,833,833,833,833,833,833,,,,,,833,833,833,833,833,833,833,,,833',
',,,,,833,833,833,833,833,833,833,833,833,833,833,833,,833,833,833,,833',
'833,,833,833,833,499,499,499,499,499,499,499,,,499,499,,,,,,499,499',
',833,,,833,,,833,833,,,833,,833,499,,499,833,499,499,499,499,499,499',
'499,833,499,,,,833,833,833,833,833,833,,,,833,833,,,,,,,833,,,833,833',
'833,,833,833,851,851,851,851,851,851,,,,851,851,,,,851,,851,851,851',
'851,851,851,851,,,,,,851,851,851,851,851,851,851,,,851,,,,,,851,851',
'851,851,851,851,851,851,851,851,851,851,,851,851,851,,851,851,,851,851',
'851,500,500,500,500,500,500,500,500,,500,500,,,,,,500,500,,851,,,851',
',,851,851,,,851,,851,500,,500,851,500,500,500,500,500,500,500,851,500',
',,,851,851,851,851,851,851,,,,851,851,,,,,,,851,,,851,851,851,,851,851',
'863,863,863,863,863,863,,,,863,863,,,,863,,863,863,863,863,863,863,863',
',,,,,863,863,863,863,863,863,863,,,863,,,,,,863,863,863,863,863,863',
'863,863,863,863,863,863,,863,863,863,,863,863,,863,863,863,,,,,,,,,',
',,,,,,,,,,863,,,863,,,863,863,,,863,,863,,,,863,,,,,,,,863,,,,,863,863',
'863,863,863,863,,,,863,863,,,,,,,863,,,863,863,863,,863,863,876,876',
'876,876,876,876,,,,876,876,,,,876,,876,876,876,876,876,876,876,,,,,',
'876,876,876,876,876,876,876,,,876,,,,,,876,876,876,876,876,876,876,876',
'876,876,876,876,,876,876,876,,876,876,,876,876,876,,,,,,,,,,,,,,,,,',
',,876,,,876,,,876,876,,,876,,876,,,,876,,,,,,,,876,,,,,876,876,876,876',
'876,876,,,,876,876,,,,,,,876,,,876,876,876,,876,876,886,886,886,886',
'886,886,,,,886,886,,,,886,,886,886,886,886,886,886,886,,,,,,886,886',
'886,886,886,886,886,,,886,,,,,,886,886,886,886,886,886,886,886,886,886',
'886,886,,886,886,886,,886,886,,886,886,886,,,,,,,,,,,,,,,,,,,,886,,',
'886,,,886,886,,,886,,886,,,,886,,,,,,,,886,,,,,886,886,886,886,886,886',
',,,886,886,,,,,,,886,,,886,886,886,,886,886,887,887,887,887,887,887',
',,,887,887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887',
'887,887,887,,,887,,,,,,887,887,887,887,887,887,887,887,887,887,887,887',
',887,887,887,,887,887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887',
'887,,,887,,887,,,,887,,,,,,,,887,,,,,887,887,887,887,887,887,,,,887',
'887,,,,,,,887,,,887,887,887,,887,887,937,937,937,937,937,937,,,,937',
'937,,,,937,,937,937,937,937,937,937,937,,,,,,937,937,937,937,937,937',
'937,,,937,,,,,,937,937,937,937,937,937,937,937,937,937,937,937,,937',
'937,937,,937,937,,937,937,937,,,,,,,,,,,,,,,,,,,,937,,,937,,,937,937',
',,937,,937,,,,937,,,,,,,,937,,,,,937,937,937,937,937,937,,,,937,937',
',,,,,,937,,,937,937,937,,937,937,938,938,938,938,938,938,,,,938,938',
',,,938,,938,938,938,938,938,938,938,,,,,,938,938,938,938,938,938,938',
',,938,,,,,,938,938,938,938,938,938,938,938,938,938,938,938,,938,938',
'938,,938,938,,938,938,938,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,938,,,938',
',938,,,,938,,,,,,,,938,,,,,938,938,938,938,938,938,,,,938,938,,,,,,',
'938,,,938,938,938,,938,938,950,950,950,950,950,950,,,,950,950,,,,950',
',950,950,950,950,950,950,950,,,,,,950,950,950,950,950,950,950,,,950',
',,,,,950,950,950,950,950,950,950,950,950,950,950,950,,950,950,950,,950',
'950,,950,950,950,,,,,,,,,,,,,,,,,,,,950,,,950,,,950,950,,,950,,950,',
',,950,,,,,,,,950,,,,,950,950,950,950,950,950,,,,950,950,,,,,,,950,,',
'950,950,950,,950,950,997,997,997,997,997,997,,,,997,997,,,,997,,997',
'997,997,997,997,997,997,,,,,,997,997,997,997,997,997,997,,,997,,,,,',
'997,997,997,997,997,997,997,997,997,997,997,997,,997,997,997,,997,997',
',997,997,997,,,,,,,,,,,,,,,,,,,,997,,,997,,,997,997,,,997,,997,,,,997',
',,,,,,,997,,,,,997,997,997,997,997,997,,,,997,997,,,,,,,997,,,997,997',
'997,,997,997,1004,1004,1004,1004,1004,1004,,,,1004,1004,,,,1004,,1004',
'1004,1004,1004,1004,1004,1004,,,,,,1004,1004,1004,1004,1004,1004,1004',
',,1004,,,,,,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004',
',1004,1004,1004,,1004,1004,,1004,1004,1004,,,,,,,,,,,,,,,,,,,,1004,',
',1004,,,1004,1004,,,1004,,1004,,,,1004,,,,,,,,1004,,,,,1004,1004,1004',
'1004,1004,1004,,,,1004,1004,,,,,,,1004,,,1004,1004,1004,,1004,1004,1010',
'1010,1010,1010,1010,1010,,,,1010,1010,,,,1010,,1010,1010,1010,1010,1010',
'1010,1010,,,,,,1010,1010,1010,1010,1010,1010,1010,,,1010,,,,,,1010,1010',
'1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,,1010,1010,1010,,1010',
'1010,,1010,1010,1010,,,,,,,,,,,,,,,,,,,,1010,,,1010,,,1010,1010,,,1010',
',1010,,,,1010,,,,,,,,1010,,,,,1010,1010,1010,1010,1010,1010,,,,1010',
'1010,,,,,,,1010,,,1010,1010,1010,,1010,1010,1011,1011,1011,1011,1011',
'1011,,,,1011,1011,,,,1011,,1011,1011,1011,1011,1011,1011,1011,,,,,,1011',
'1011,1011,1011,1011,1011,1011,,,1011,,,,,,1011,1011,1011,1011,1011,1011',
'1011,1011,1011,1011,1011,1011,,1011,1011,1011,,1011,1011,,1011,1011',
'1011,,,,,,,,,,,,,,,,,,,,1011,,,1011,,,1011,1011,,,1011,,1011,,,,1011',
',,,,,,,1011,,,,,1011,1011,1011,1011,1011,1011,,,,1011,1011,,,,,,,1011',
',,1011,1011,1011,,1011,1011,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,',
',,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8',
',,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8',
',,,8,8,,,,,,,8,,,8,8,8,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,',
'32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32',
'32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32',
',32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,',
'32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33',
'33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33',
'33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,',
',,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,33,33,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,34,34,37,37,37,,37',
',,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37',
',,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,972,',
'972,972,972,972,972,,,,,,,,37,,972,37,,,37,37,,,37,,37,,,,,,,,,,,,972',
',,,,37,37,37,37,37,37,972,972,,37,37,,,,,,,37,,,37,37,37,,37,37,38,38',
'38,,38,,,,38,38,,,,38,972,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38',
'38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,',
',,,988,,988,988,988,988,988,,,,,,,,38,,988,38,,,38,38,,,38,,,,,,,,,',
',,,,988,,,,,38,38,38,38,38,38,988,988,,38,38,,,,38,,,38,,,38,38,38,',
'38,38,45,45,45,,45,,,,45,45,,,,45,988,45,45,45,45,45,45,45,,,,,,45,45',
'45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45',
'45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,',
'45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,45,45,46,46,46',
',46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,',
',46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,',
',,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46',
'46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,46,46,48,48,48,,48,,,,48,48,',
',,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,',
',48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,',
',,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48,,,,48',
'48,,,,,,,48,,,48,48,48,,48,48,62,62,62,62,62,,,,62,62,,,,62,,62,62,62',
'62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,62,62,,62,62,62,62,62',
'62,62,62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,',
'62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,',
'62,,,62,62,62,,62,62,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67',
'67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67',
',67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,',
',,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67',
',67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68',
'68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68',
'68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,',
'68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68,,68,68,71,71,71',
',71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,',
',71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,',
',,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71',
'71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,71,71,72,72,72,,72,,,,72',
'72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,',
'72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,1052,,1052',
'1052,1052,1052,1052,,,,,,,,72,,1052,72,,,72,72,,,72,,72,,,,,,,,,,,,1052',
',,,,72,72,72,72,72,72,1052,1052,,72,72,,,,,,,72,,,72,72,72,,72,72,128',
'128,128,128,128,,,,128,128,,,,128,1052,128,128,128,128,128,128,128,',
',,,,128,128,128,128,128,128,128,,,128,,,,,,128,128,128,128,128,128,128',
'128,128,128,128,128,,128,128,128,,128,128,,128,128,128,,,,,,,,,,,,,',
',,,,,,128,,,128,,,128,128,,,128,,128,,,,128,,,,,,,,128,,,,,128,128,128',
'128,128,128,,,,128,128,,,,,,128,128,,,128,128,128,,128,128,133,133,133',
',133,,,,133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133',
'133,133,133,133,,,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133',
'133,133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133',
',,133,,,,,,133,,,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,,,',
',,,133,,,133,133,133,,133,133,134,134,134,,134,,,,134,134,,,,134,,134',
'134,134,134,134,134,134,,,,,,134,134,134,134,134,134,134,,,134,,,,,',
',134,,,134,134,134,134,134,134,134,134,,134,134,134,,134,134,,134,134',
'134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,,,134',
',,,,134,134,134,134,134,134,,,,134,134,,,,,,,134,,,134,134,134,,134',
'134,135,135,135,,135,,,,135,135,,,,135,,135,135,135,135,135,135,135',
',,,,,135,135,135,135,135,135,135,,,135,,,,,,,135,,,135,135,135,135,135',
'135,135,135,,135,135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135',
',,135,,,135,135,,,135,,,,,,135,,,,,,,,135,,,,,135,135,135,135,135,135',
',,,135,135,,,,,,,135,,,135,135,135,,135,135,136,136,136,,136,,,,136',
'136,,,,136,,136,136,136,136,136,136,136,,,,,,136,136,136,136,136,136',
'136,,,136,,,,,,,136,,,136,136,136,136,136,136,136,136,,136,136,136,',
'136,136,,136,136,136,,,,,,,,,,,,,,,,,,,,136,,,136,,,136,136,,,136,,',
',,,136,,,,,,,,136,,,,,136,136,136,136,136,136,,,,136,136,,,,,,,136,',
',136,136,136,,136,136,137,137,137,137,137,,,,137,137,,,,137,,137,137',
'137,137,137,137,137,,,,,,137,137,137,137,137,137,137,,,137,,,,,,137',
'137,,137,137,137,137,137,137,137,137,137,,137,137,137,,137,137,,137',
'137,137,,,,,,,,,,,,,,,,,,,,137,,,137,,,137,137,,,137,,137,,,,137,,,',
',,,,137,,,,,137,137,137,137,137,137,,,,137,137,,,,,,,137,,,137,137,137',
',137,137,222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222,222',
'222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222',
'222,222,222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,',
',,222,,,222,,,222,222,,,222,,222,,,,222,,,,,,,,222,,,,,222,222,222,222',
'222,222,,,,222,222,,,,,,,222,,,222,222,222,,222,222,223,223,223,,223',
',,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223,223,223',
'223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223',
'223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223',
',223,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,',
'223,,,223,223,223,,223,223,224,224,224,,224,,,,224,224,,,,224,,224,224',
'224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224',
',,224,224,224,224,224,224,224,224,,224,224,224,,224,224,,224,224,224',
',,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,',
',224,224,224,224,224,224,,,,224,224,,,,,,,224,,,224,224,224,,224,224',
'225,225,225,,225,,,,225,225,,,,225,,225,225,225,225,225,225,225,,,,',
',225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225',
'225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,',
'225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225',
',,,225,225,,,,,,,225,,,225,225,225,,225,225,226,226,226,,226,,,,226',
'226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226',
'226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226,226,',
'226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,',
',,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,,226,',
',226,226,226,,226,226,227,227,227,,227,,,,227,227,,,,227,,227,227,227',
'227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227',
'227,227,227,227,227,227,227,227,227,227,227,,227,227,,227,227,227,,',
',,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,227,,227,,227,,,,,,,,227',
',,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,,227,227,227,227,,227',
'227,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232',
'232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232',
',,,232,232,,,,,,,232,,,232,232,232,,232,232,233,233,233,,233,,,,233',
'233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233',
'233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233,',
'233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,',
',,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233,',
',233,233,233,,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234,234',
'234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234',
'234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,',
',,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234',
'234,234,234,234,234,,,,234,234,234,,,,,,234,,,234,234,234,,234,234,245',
'245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245',
'245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245',
'245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245',
',,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245',
'245,,,,,,,245,,,245,245,245,,245,245,248,248,248,,248,,,,248,248,,,',
'248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,',
'248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248',
',248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,',
',,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248',
'248,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,',
',,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249',
'249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,249,249,250,250,250',
',250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250',
'250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250',
',,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,',
',,,250,,,250,250,250,,250,250,251,251,251,,251,,,,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251',
'251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251',
',,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,251',
'251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252',
'252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,,252,252,253,253,253,,253,,,,253',
'253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253',
'253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,',
'253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,',
',253,253,253,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,254,254,255',
'255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255',
',,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255',
'255,,,,,,,255,,,255,255,255,,255,255,256,256,256,,256,,,,256,256,,,',
'256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,',
'256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256',
',256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,',
',,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256',
'256,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,',
',,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257',
'257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,257,257,258,258,258',
',258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258',
'258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258',
'258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258',
',,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,',
',,,258,,,258,258,258,,258,258,259,259,259,,259,,,,259,259,,,,259,,259',
'259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,',
',259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259',
'259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259',
',,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,259',
'259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260',
',,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260',
'260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260',
',,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260',
',,,260,260,,,,,,,260,,,260,260,260,,260,260,261,261,261,,261,,,,261',
'261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261',
'261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,',
'261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,',
',,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261,',
',261,261,261,,261,261,262,262,262,,262,,,,262,262,,,,262,,262,262,262',
'262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262',
'262,262,262,262,262,262,262,,262,262,262,,262,262,,262,262,262,,,,,',
',,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262',
'262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,262,262,263',
'263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263',
'263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263',
'263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263',
',,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263',
'263,,,,,,,263,,,263,263,263,,263,263,264,264,264,,264,,,,264,264,,,',
'264,,264,264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,',
'264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264,264,264,,264,264',
',264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,',
',,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,,,264,264',
'264,,264,264,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265',
'265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265',
'265,265,265,265,265,,265,265,265,,265,265,,265,265,265,,,,,,,,,,,,,',
',,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265,265,265',
'265,265,265,,,,265,265,,,,,,,265,,,265,265,265,,265,265,266,266,266',
',266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266,266',
'266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266,,266',
'266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266',
',,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,',
',,,266,,,266,266,266,,266,266,267,267,267,,267,,,,267,267,,,,267,,267',
'267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,',
',267,,,267,267,267,267,267,267,267,267,,267,267,267,,267,267,,267,267',
'267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,,,,,,,,267',
',,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267,267,,267',
'267,268,268,268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268',
',,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268',
'268,268,268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268',
',,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268',
',,,268,268,,,,,,,268,,,268,268,268,,268,268,269,269,269,,269,,,,269',
'269,,,,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269',
'269,,,269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269,269,269,',
'269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,',
',,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,',
',269,269,269,,269,269,274,274,274,,274,,,,274,274,,,,274,,274,274,274',
'274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274',
'274,274,274,274,274,274,274,,274,274,274,,274,274,,274,274,274,,,,,',
',,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,,,,,274,,,,,,,,274,,,,,274',
'274,274,274,274,274,,,,274,274,,,,,,,274,,,274,274,274,,274,274,282',
'282,282,,282,,,,282,282,,,,282,,282,282,282,282,282,282,282,,,,,,282',
'282,282,282,282,282,282,,,282,,,,,,,282,,,282,282,282,282,282,282,282',
'282,282,282,282,282,,282,282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282',
',,282,282,,,282,,282,,282,,282,,,,,,,,282,,,,,282,282,282,282,282,282',
',,,282,282,,,,,,,282,,282,282,282,282,,282,282,283,283,283,,283,,,,283',
'283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283,283',
'283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283,283,283,283,283',
',283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,',
'283,,283,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,,,,',
',,283,,283,283,283,283,,283,283,292,292,292,,292,,,,292,292,,,,292,',
'292,292,292,292,292,292,292,,,,,,292,292,292,292,292,292,292,,,292,',
',,,,,292,,,292,292,292,292,292,292,292,292,292,292,292,292,,292,292',
',292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,292,,292',
',292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292,292,292,,,,,,292',
',292,292,292,292,,292,292,299,299,299,,299,,,,299,299,,,,299,,299,299',
'299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,,,299',
',,299,299,299,299,299,299,299,299,,299,299,299,,299,299,,299,299,299',
',,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,299,,,,,,,,299,,,',
',299,299,299,299,299,299,,,,299,299,,,,,,,299,,,299,299,299,,299,299',
'301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,',
',301,301,301,301,301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301',
'301,301,,301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,',
'301,,,301,301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301',
',,,301,301,,,,,,,301,,,301,301,301,,301,301,304,304,304,,304,,,,304',
'304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304',
'304,,,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304,',
'304,304,,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,',
',,,304,,,,,,,,304,,,,,304,304,304,304,304,304,,,,304,304,,,,,,,304,',
',304,304,304,,304,304,305,305,305,,305,,,,305,305,,,,305,,305,305,305',
'305,305,305,305,,,,,,305,305,305,305,305,305,305,,,305,,,,,,,305,,,305',
'305,305,305,305,305,305,305,,305,305,305,,305,305,,305,305,305,,,,,',
',,,,,,,,,,,,,,305,,,305,,,305,305,,,305,,,,,,305,,,,,,,,305,,,,,305',
'305,305,305,305,305,,,,305,305,,,,,,,305,,,305,305,305,,305,305,311',
'311,311,311,311,,,,311,311,,,,311,,311,311,311,311,311,311,311,,,,,',
'311,311,311,311,311,311,311,,,311,,,,,,311,311,,311,311,311,311,311',
'311,311,311,311,,311,311,311,,311,311,,311,311,311,,,,,,,,,,,,,,,,,',
',,311,,,311,,,311,311,,,311,,311,,,,311,,,,,,,,311,,,,,311,311,311,311',
'311,311,,,,311,311,,,,,,,311,,,311,311,311,,311,311,319,319,319,,319',
',,,319,319,,,,319,,319,319,319,319,319,319,319,,,,,,319,319,319,319',
'319,319,319,,,319,,,,,,,319,,,319,319,319,319,319,319,319,319,,319,319',
'319,,319,319,,,,319,,,,,,1061,,1061,1061,1061,1061,1061,,,,,,,,319,',
'1061,319,,,319,319,,,319,,,,,,,,,,,,,,1061,,,,,319,319,319,319,319,319',
'1061,1061,,319,319,,,,319,,,319,,,319,319,319,,319,319,336,336,336,',
'336,,,,336,336,,,,336,1061,336,336,336,336,336,336,336,,,,,,336,336',
'336,336,336,336,336,,,336,,,,,,,336,,,336,336,336,336,336,336,336,336',
',336,336,336,,336,336,,,,336,,,,,,1063,,1063,1063,1063,1063,1063,,,',
',,,,336,,1063,336,,,336,336,,,336,,,,,,,,,,,,,,1063,,,,,336,336,336',
'336,336,336,1063,1063,,336,336,,,,,,,336,,,336,336,336,,336,336,343',
'343,343,,343,,,,343,343,,,,343,1063,343,343,343,343,343,343,343,,,,',
',343,343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343,343,343,343',
'343,343,,343,343,343,,343,343,,343,343,343,,,,,,,,,,,,,,,,,,,,343,,',
'343,,,343,343,,,343,,,,,,343,,,,,,,,343,,,,,343,343,343,343,343,343',
',,,343,343,,,,,,,343,,,343,343,343,,343,343,345,345,345,,345,,,,345',
'345,,,,345,,345,345,345,345,345,345,345,,,,,,345,345,345,345,345,345',
'345,,,345,,,,,,,345,,,345,345,345,345,345,345,345,345,,345,345,345,',
'345,345,,345,345,345,,,,,,,,,,,,,,,,,,,,345,,,345,345,,345,345,,,345',
',,,,,345,,,,,,,,345,,,,,345,345,345,345,345,345,,,,345,345,,,,,,,345',
',,345,345,345,,345,345,349,349,349,,349,,,,349,349,,,,349,,349,349,349',
'349,349,349,349,,,,,,349,349,349,349,349,349,349,,,349,,,,,,,349,,,349',
'349,349,349,349,349,349,349,349,349,349,349,,349,349,,349,349,349,,',
',,,,,,,,,,,,,,,,,349,,,349,,,349,349,,,349,,349,,,,349,,,,,,,,349,,',
',,349,349,349,349,349,349,,,,349,349,,,,,,,349,,349,349,349,349,,349',
'349,350,350,350,,350,,,,350,350,,,,350,,350,350,350,350,350,350,350',
',,,,,350,350,350,350,350,350,350,,,350,,,,,,,350,,,350,350,350,350,350',
'350,350,350,350,350,350,350,,350,350,,350,350,350,,,,,,,,,,,,,,,,,,',
',350,,,350,,,350,350,,,350,,,,,,350,,,,,,,,350,,,,,350,350,350,350,350',
'350,,,,350,350,,,,,,,350,,350,350,350,350,,350,350,355,355,355,,355',
',,,355,355,,,,355,,355,355,355,355,355,355,355,,,,,,355,355,355,355',
'355,355,355,,,355,,,,,,,355,,,355,355,355,355,355,355,355,355,,355,355',
'355,,355,355,,355,355,355,,,,,,,,,,,,,,,,,,,,355,,,355,,,355,355,,,355',
',,,,,355,,,,,,,,355,,,,,355,355,355,355,355,355,,,,355,355,,,,,,,355',
',,355,355,355,,355,355,369,369,369,,369,,,,369,369,,,,369,,369,369,369',
'369,369,369,369,,,,,,369,369,369,369,369,369,369,,,369,,,,,,,369,,,369',
'369,369,369,369,369,369,369,,369,369,369,,369,369,,,,369,,,,,,1065,',
'1065,1065,1065,1065,1065,,,,,,,,369,,1065,369,,,369,369,,,369,,,,,,',
',,,,,,,1065,,,,,369,369,369,369,369,369,1065,1065,,369,369,,,,,,,369',
',,369,369,369,,369,369,371,371,371,,371,,,,371,371,,,,371,1065,371,371',
'371,371,371,371,371,,,,,,371,371,371,371,371,371,371,,,371,,,,,,,371',
',,371,371,371,371,371,371,371,371,,371,371,371,,371,371,,,,371,,,,,',
'1087,,1087,1087,1087,1087,1087,,,,,,,,371,,1087,371,,,371,371,,,371',
',,,,,,,,,,,,,1087,,,,,371,371,371,371,371,371,1087,1087,,371,371,,,',
',,,371,,,371,371,371,,371,371,431,431,431,,431,,,,431,431,,,,431,1087',
'431,431,431,431,431,431,431,,,,,,431,431,431,431,431,431,431,,,431,',
',,,,,431,,,431,431,431,431,431,431,431,431,,431,431,431,,431,431,,431',
'431,431,,,,,,,,,,,,,,,,,,,,431,,,431,,,431,431,,,431,,,,,,431,,,,,,',
',431,,,,,431,431,431,431,431,431,,,,431,431,,,,,,,431,,,431,431,431',
',431,431,475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475,475',
'475,,,,,,475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475',
'475,475,475,475,475,475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,',
',,,,,475,,,475,,,475,475,,,475,,475,,475,,475,,,,,,,,475,,,,,475,475',
'475,475,475,475,,,,475,475,,,,,,,475,,475,475,475,475,,475,475,477,477',
'477,,477,,,,477,477,,,,477,,477,477,477,477,477,477,477,,,,,,477,477',
'477,477,477,477,477,,,477,,,,,,,477,,,477,477,477,477,477,477,477,477',
',477,477,477,,477,477,,477,477,477,,,,,,,,,,,,,,,,,,,,477,,,477,,,477',
'477,,,477,,,,,,477,,,,,,,,477,,,,,477,477,477,477,477,477,,,,477,477',
',,,,,,477,,,477,477,477,,477,477,478,478,478,,478,,,,478,478,,,,478',
',478,478,478,478,478,478,478,,,,,,478,478,478,478,478,478,478,,,478',
',,,,,,478,,,478,478,478,478,478,478,478,478,,478,478,478,,478,478,,478',
'478,478,,,,,,,,,,,,,,,,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,',
',478,,,,,478,478,478,478,478,478,,,,478,478,,,,,,,478,,,478,478,478',
',478,478,479,479,479,,479,,,,479,479,,,,479,,479,479,479,479,479,479',
'479,,,,,,479,479,479,479,479,479,479,,,479,,,,,,,479,,,479,479,479,479',
'479,479,479,479,,479,479,479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,',
',,479,,,479,,,479,479,,,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479',
'479,479,,,,479,479,,,,,,,479,,,479,479,479,,479,479,517,517,517,,517',
',,,517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517,517,517',
'517,517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517,517,517',
'517,517,,517,517,,517,517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517',
',,517,,517,,517,,517,,,,,,,,517,,,,,517,517,517,517,517,517,,,,517,517',
',,,,,,517,,517,517,517,517,,517,517,520,520,520,,520,,,,520,520,,,,520',
',520,520,520,520,520,520,520,,,,,,520,520,520,520,520,520,520,,,520',
',,,,,,520,,,520,520,520,520,520,520,520,520,520,520,520,520,,520,520',
',520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,,,520,,520',
',,,,,,,520,,,,,520,520,520,520,520,520,,,,520,520,,,,,,,520,,520,520',
'520,520,,520,520,522,522,522,,522,,,,522,522,,,,522,,522,522,522,522',
'522,522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522',
'522,522,522,522,522,522,,522,522,522,,522,522,,522,522,522,,,,,,,,,',
',,,,,,,,,,522,,,522,,,522,522,,,522,,,,,,522,,,,,,,,522,,,,,522,522',
'522,522,522,522,,,,522,522,,,,,,,522,,,522,522,522,,522,522,528,528',
'528,528,528,,,,528,528,,,,528,,528,528,528,528,528,528,528,,,,,,528',
'528,528,528,528,528,528,,,528,,,,,,528,528,528,528,528,528,528,528,528',
'528,528,528,,528,528,528,,528,528,,528,528,528,,,,,,,,,,,,,,,,,,,,528',
',,528,,,528,528,,,528,,528,,,,528,,,,,,,,528,,,,,528,528,528,528,528',
'528,,,,528,528,,,,,,528,528,,,528,528,528,,528,528,536,536,536,,536',
',,,536,536,,,,536,,536,536,536,536,536,536,536,,,,,,536,536,536,536',
'536,536,536,,,536,,,,,,,536,,,536,536,536,536,536,536,536,536,,536,536',
'536,,536,536,,,,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,,',
',,,,,,,,,,,,,,,536,536,536,536,536,536,,,,536,536,,,,,,,536,,,536,536',
'536,,536,536,538,538,538,,538,,,,538,538,,,,538,,538,538,538,538,538',
'538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,,,538,,,538,538,538',
'538,538,538,538,538,538,538,538,538,,538,538,,538,538,538,,,,,,,,,,',
',,,,,,,,,538,,,538,,,538,538,,,538,,538,,538,,538,,,,,,,,538,,,,,538',
'538,538,538,538,538,,,,538,538,,,,,,,538,,538,538,538,538,,538,538,544',
'544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,,,544',
'544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544,544',
'544,,544,544,544,,544,544,,,,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544',
'544,,,544,,,,,,,,,,,,,,,,,,,544,544,544,544,544,544,,,,544,544,,,,,',
',544,,,544,544,544,,544,544,547,547,547,,547,,,,547,547,,,,547,,547',
'547,547,547,547,547,547,,,,,,547,547,547,547,547,547,547,,,547,,,,,',
',547,,,547,547,547,547,547,547,547,547,,547,547,547,,547,547,,547,547',
'547,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,547,,,547,,,,,,547,,,,,,,,547',
',,,,547,547,547,547,547,547,,,,547,547,,,,,,,547,,,547,547,547,,547',
'547,548,548,548,,548,,,,548,548,,,,548,,548,548,548,548,548,548,548',
',,,,,548,548,548,548,548,548,548,,,548,,,,,,,548,,,548,548,548,548,548',
'548,548,548,,548,548,548,,548,548,,548,548,548,,,,,,,,,,,,,,,,,,,,548',
',,548,,,548,548,,,548,,,,,,548,,,,,,,,548,,,,,548,548,548,548,548,548',
',,,548,548,,,,,,,548,,,548,548,548,,548,548,553,553,553,,553,,,,553',
'553,,,,553,,553,553,553,553,553,553,553,,,,,,553,553,553,553,553,553',
'553,,,553,,,,,,,553,,,553,553,553,553,553,553,553,553,,553,553,553,',
'553,553,,553,553,553,,,,,,,,,,,,,,,,,,,,553,,,553,,,553,553,,,553,,',
',,,553,,,,,,,,553,,,,,553,553,553,553,553,553,,,,553,553,,,,,,,553,',
',553,553,553,,553,553,577,577,577,,577,,,,577,577,,,,577,,577,577,577',
'577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577,,,,,,,577,,,577',
'577,577,577,577,577,577,577,577,577,577,577,,577,577,,577,577,577,,',
',,,,,,,,,,,,,,,,,577,,,577,,,577,577,,,577,,577,,577,,577,,,,,,,,577',
',,,,577,577,577,577,577,577,,,,577,577,,,,,,,577,,577,577,577,577,,577',
'577,589,589,589,,589,,,,589,589,,,,589,,589,589,589,589,589,589,589',
',,,,,589,589,589,589,589,589,589,,,589,,,,,,,589,,,589,589,589,589,589',
'589,589,589,,589,589,589,,589,589,,589,589,589,,,,,,,,,,,,,,,,,,,,589',
',,589,,,589,589,,,589,,,,,,589,,,,,,,,589,,,,,589,589,589,589,589,589',
',,,589,589,,,,,,,589,,,589,589,589,,589,589,595,595,595,,595,,,,595',
'595,,,,595,,595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595',
'595,,,595,,,,,,,595,,,595,595,595,595,595,595,595,595,,595,595,595,',
'595,595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595,,',
',,,595,,,,,,,,595,,,,,595,595,595,595,595,595,,,,595,595,,,,,,,595,',
',595,595,595,,595,595,617,617,617,,617,,,,617,617,,,,617,,617,617,617',
'617,617,617,617,,,,,,617,617,617,617,617,617,617,,,617,,,,,,,617,,,617',
'617,617,617,617,617,617,617,,617,617,617,,617,617,,617,617,617,,,,,',
',,,,,,,,,,,,,,617,,,617,,,617,617,,,617,,,,,,617,,,,,,,,617,,,,,617',
'617,617,617,617,617,,,,617,617,,,,,,,617,,,617,617,617,,617,617,657',
'657,657,,657,,,,657,657,,,,657,,657,657,657,657,657,657,657,,,,,,657',
'657,657,657,657,657,657,,,657,,,,,,,657,,,657,657,657,657,657,657,657',
'657,,657,657,657,,657,657,,657,657,657,,,,,,,,,,,,,,,,,,,,657,,,657',
',,657,657,,,657,,657,,,,657,,,,,,,,657,,,,,657,657,657,657,657,657,',
',,657,657,,,,,,,657,,,657,657,657,,657,657,658,658,658,,658,,,,658,658',
',,,658,,658,658,658,658,658,658,658,,,,,,658,658,658,658,658,658,658',
',,658,,,,,,,658,,,658,658,658,658,658,658,658,658,,658,658,658,,658',
'658,,658,658,658,,,,,,,,,,,,,,,,,,,,658,,,658,,,658,658,,,658,,,,,,658',
',,,,,,,658,,,,,658,658,658,658,658,658,,,,658,658,,,,,,,658,,,658,658',
'658,,658,658,659,659,659,,659,,,,659,659,,,,659,,659,659,659,659,659',
'659,659,,,,,,659,659,659,659,659,659,659,,,659,,,,,,,659,,,659,659,659',
'659,659,659,659,659,659,659,659,659,,659,659,,659,659,659,,,,,,,,,,',
',,,,,,,,,659,,,659,,,659,659,,,659,,659,,659,,659,,,,,,,,659,,,,,659',
'659,659,659,659,659,,,,659,659,,,,,,,659,,659,659,659,659,,659,659,662',
'662,662,662,662,,,,662,662,,,,662,,662,662,662,662,662,662,662,,,,,',
'662,662,662,662,662,662,662,,,662,,,,,,662,662,,662,662,662,662,662',
'662,662,662,662,,662,662,662,,662,662,,662,662,662,,,,,,,,,,,,,,,,,',
',,662,,,662,,,662,662,,,662,,662,,,,662,,,,,,,,662,,,,,662,662,662,662',
'662,662,,,,662,662,,,,,,,662,,,662,662,662,,662,662,663,663,663,,663',
',,,663,663,,,,663,,663,663,663,663,663,663,663,,,,,,663,663,663,663',
'663,663,663,,,663,,,,,,,663,,,663,663,663,663,663,663,663,663,,663,663',
'663,,663,663,,663,663,663,,,,,,,,,,,,,,,,,,,,663,,,663,,,663,663,,,663',
',,,,,663,,,,,,,,663,,,,,663,663,663,663,663,663,,,,663,663,,,,,,,663',
',,663,663,663,,663,663,666,666,666,,666,,,,666,666,,,,666,,666,666,666',
'666,666,666,666,,,,,,666,666,666,666,666,666,666,,,666,,,,,,,666,,,666',
'666,666,666,666,666,666,666,666,666,666,666,,666,666,,666,666,666,,',
',,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,,666,,666,,666,,,,,,,,666',
',,,,666,666,666,666,666,666,,,,666,666,,,,,,,666,,666,666,666,666,,666',
'666,667,667,667,,667,,,,667,667,,,,667,,667,667,667,667,667,667,667',
',,,,,667,667,667,667,667,667,667,,,667,,,,,,,667,,,667,667,667,667,667',
'667,667,667,667,667,667,667,,667,667,,667,667,667,,,,,,,,,,,,,,,,,,',
',667,,,667,,,667,667,,,667,,,,667,,667,,,,,,,,667,,,,,667,667,667,667',
'667,667,,,,667,667,,,,,,,667,,667,667,667,667,,667,667,668,668,668,',
'668,,,,668,668,,,,668,,668,668,668,668,668,668,668,,,,,,668,668,668',
'668,668,668,668,,,668,,,,,,,668,,,668,668,668,668,668,668,668,668,,668',
'668,668,,668,668,,668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668',
',,668,,,,,,668,,,,,,,,668,,,,,668,668,668,668,668,668,,,,668,668,,,',
',,,668,,,668,668,668,,668,668,669,669,669,,669,,,,669,669,,,,669,,669',
'669,669,669,669,669,669,,,,,,669,669,669,669,669,669,669,,,669,,,,,',
',669,,,669,669,669,669,669,669,669,669,,669,669,669,,669,669,,669,669',
'669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669,,,669,,,,,,669,,,,,,,,669',
',,,,669,669,669,669,669,669,,,,669,669,,,,,,,669,,,669,669,669,,669',
'669,674,674,674,,674,,,,674,674,,,,674,,674,674,674,674,674,674,674',
',,,,,674,674,674,674,674,674,674,,,674,,,,,,,674,,,674,674,674,674,674',
'674,674,674,,674,674,674,,674,674,,674,674,674,,,,,,,,,,,,,,,,,,,,674',
',,674,,,674,674,,,674,,,,,,674,,,,,,,,674,,,,,674,674,674,674,674,674',
',,,674,674,,,,,,,674,,,674,674,674,,674,674,675,675,675,,675,,,,675',
'675,,,,675,,675,675,675,675,675,675,675,,,,,,675,675,675,675,675,675',
'675,,,675,,,,,,,675,,,675,675,675,675,675,675,675,675,,675,675,675,',
'675,675,,675,675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,',
',,,675,,,,,,,,675,,,,,675,675,675,675,675,675,,,,675,675,,,,,,,675,',
',675,675,675,,675,675,699,699,699,,699,,,,699,699,,,,699,,699,699,699',
'699,699,699,699,,,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699',
'699,699,699,699,699,699,699,,699,699,699,,699,699,,699,699,699,,,,,',
',,,,,,,,,,,,,,699,,,699,,,699,699,,,699,,,,,,699,,,,,,,,699,,,,,699',
'699,699,699,699,699,,,,699,699,,,,,,,699,,,699,699,699,,699,699,702',
'702,702,,702,,,,702,702,,,,702,,702,702,702,702,702,702,702,,,,,,702',
'702,702,702,702,702,702,,,702,,,,,,,702,,,702,702,702,702,702,702,702',
'702,,702,702,702,,702,702,,702,702,702,,,,,,,,,,,,,,,,,,,,702,,,702',
',,702,702,,,702,,,,,,702,,,,,,,,702,,,,,702,702,702,702,702,702,,,,702',
'702,,,,,,,702,,,702,702,702,,702,702,706,706,706,,706,,,,706,706,,,',
'706,,706,706,706,706,706,706,706,,,,,,706,706,706,706,706,706,706,,',
'706,,,,,,,706,,,706,706,706,706,706,706,706,706,,706,706,706,,706,706',
',,,706,,,,,,,,,,,,,,,,,,,,706,,,706,,,706,706,,,706,,,,,,,,,,,,,,,,',
',,706,706,706,706,706,706,,,,706,706,,,,,,,706,,,706,706,706,,706,706',
'717,717,717,,717,,,,717,717,,,,717,,717,717,717,717,717,717,717,,,,',
',717,717,717,717,717,717,717,,,717,,,,,,,717,,,717,717,717,717,717,717',
'717,717,,717,717,717,,717,717,,,,717,,,,,,,,,,,,,,,,,,,,717,,,717,,',
'717,717,,,717,,,,,,,,,,,,,,,,,,,717,717,717,717,717,717,,,,717,717,',
',,,,,717,,,717,717,717,,717,717,723,723,723,,723,,,,723,723,,,,723,',
'723,723,723,723,723,723,723,,,,,,723,723,723,723,723,723,723,,,723,',
',,,,,723,,,723,723,723,723,723,723,723,723,,723,723,723,,723,723,,723',
'723,723,,,,,,,,,,,,,,,,,,,,723,,,723,,,723,723,,,723,,723,,,,723,,,',
',,,,723,,,,,723,723,723,723,723,723,,,,723,723,,,,,,,723,,,723,723,723',
',723,723,728,728,728,,728,,,,728,728,,,,728,,728,728,728,728,728,728',
'728,,,,,,728,728,728,728,728,728,728,,,728,,,,,,,728,,,728,728,728,728',
'728,728,728,728,728,728,728,728,,728,728,,728,728,728,,,,,,,,,,,,,,',
',,,,,728,,,728,,,728,728,,,728,,728,,,,728,,,,,,,,728,,,,,728,728,728',
'728,728,728,,,,728,728,,,,,,,728,,728,728,728,728,,728,728,731,731,731',
',731,,,,731,731,,,,731,,731,731,731,731,731,731,731,,,,,,731,731,731',
'731,731,731,731,,,731,,,,,,,731,,,731,731,731,731,731,731,731,731,731',
'731,731,731,,731,731,,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731',
'731,,,731,,,,,,731,,,,,,,,731,,,,,731,731,731,731,731,731,,,,731,731',
',,,,,,731,,731,731,731,731,,731,731,745,745,745,,745,,,,745,745,,,,745',
',745,745,745,745,745,745,745,,,,,,745,745,745,745,745,745,745,,,745',
',,,,,,745,,,745,745,745,745,745,745,745,745,,745,745,745,,745,745,,745',
'745,745,,,,,,,,,,,,,,,,,,,,745,,,745,,,745,745,,,745,,745,,,,745,,,',
',,,,745,,,,,745,745,745,745,745,745,,,,745,745,,,,,,,745,,,745,745,745',
',745,745,757,757,757,,757,,,,757,757,,,,757,,757,757,757,757,757,757',
'757,,,,,,757,757,757,757,757,757,757,,,757,,,,,,,757,,,757,757,757,757',
'757,757,757,757,757,757,757,757,,757,757,,757,757,757,,,,,,,,,,,,,,',
',,,,,757,,,757,,,757,757,,,757,,757,,757,,757,,,,,,,,757,,,,,757,757',
'757,757,757,757,,,,757,757,,,,,,,757,,757,757,757,757,,757,757,780,780',
'780,,780,,,,780,780,,,,780,,780,780,780,780,780,780,780,,,,,,780,780',
'780,780,780,780,780,,,780,,,,,,,780,,,780,780,780,780,780,780,780,780',
',780,780,780,,780,780,,780,780,780,,,,,,,,,,,,,,,,,,,,780,,,780,,,780',
'780,,,780,,,,,,780,,,,,,,,780,,,,,780,780,780,780,780,780,,,,780,780',
',,,,,,780,,,780,780,780,,780,780,802,802,802,,802,,,,802,802,,,,802',
',802,802,802,802,802,802,802,,,,,,802,802,802,802,802,802,802,,,802',
',,,,,,802,,,802,802,802,802,802,802,802,802,,802,802,802,,802,802,,802',
'802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802,,,,,,802,,,,,,',
',802,,,,,802,802,802,802,802,802,,,,802,802,,,,,,,802,,,802,802,802',
',802,802,810,810,810,,810,,,,810,810,,,,810,,810,810,810,810,810,810',
'810,,,,,,810,810,810,810,810,810,810,,,810,,,,,,,810,,,810,810,810,810',
'810,810,810,810,,810,810,810,,810,810,,810,810,810,,,,,,,,,,,,,,,,,',
',,810,,,810,,,810,810,,,810,,,,,,810,,,,,,,,810,,,,,810,810,810,810',
'810,810,,,,810,810,,,,,,,810,,,810,810,810,,810,810,823,823,823,,823',
',,,823,823,,,,823,,823,823,823,823,823,823,823,,,,,,823,823,823,823',
'823,823,823,,,823,,,,,,,823,,,823,823,823,823,823,823,823,823,,823,823',
'823,,823,823,,823,823,823,,,,,,,,,,,,,,,,,,,,823,,,823,,,823,823,,,823',
',,,,,823,,,,,,,,823,,,,,823,823,823,823,823,823,,,,823,823,,,,,,,823',
',,823,823,823,,823,823,824,824,824,,824,,,,824,824,,,,824,,824,824,824',
'824,824,824,824,,,,,,824,824,824,824,824,824,824,,,824,,,,,,,824,,,824',
'824,824,824,824,824,824,824,,824,824,824,,824,824,,824,824,824,,,,,',
',,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,,,,,824,,,,,,,,824,,,,,824',
'824,824,824,824,824,,,,824,824,,,,,,,824,,,824,824,824,,824,824,825',
'825,825,,825,,,,825,825,,,,825,,825,825,825,825,825,825,825,,,,,,825',
'825,825,825,825,825,825,,,825,,,,,,,825,,,825,825,825,825,825,825,825',
'825,,825,825,825,,825,825,,825,825,825,,,,,,,,,,,,,,,,,,,,825,,,825',
',,825,825,,,825,,,,,,825,,,,,,,,825,,,,,825,825,825,825,825,825,,,,825',
'825,,,,,,,825,,,825,825,825,,825,825,826,826,826,,826,,,,826,826,,,',
'826,,826,826,826,826,826,826,826,,,,,,826,826,826,826,826,826,826,,',
'826,,,,,,,826,,,826,826,826,826,826,826,826,826,,826,826,826,,826,826',
',826,826,826,,,,,,,,,,,,,,,,,,,,826,,,826,,,826,826,,,826,,,,,,826,',
',,,,,,826,,,,,826,826,826,826,826,826,,,,826,826,,,,,,,826,,,826,826',
'826,,826,826,828,828,828,,828,,,,828,828,,,,828,,828,828,828,828,828',
'828,828,,,,,,828,828,828,828,828,828,828,,,828,,,,,,,828,,,828,828,828',
'828,828,828,828,828,,828,828,828,,828,828,,828,828,828,,,,,,,,,,,,,',
',,,,,,828,,,828,,,828,828,,,828,,,,,,828,,,,,,,,828,,,,,828,828,828',
'828,828,828,,,,828,828,,,,,,,828,,,828,828,828,,828,828,861,861,861',
',861,,,,861,861,,,,861,,861,861,861,861,861,861,861,,,,,,861,861,861',
'861,861,861,861,,,861,,,,,,,861,,,861,861,861,861,861,861,861,861,,861',
'861,861,,861,861,,861,861,861,,,,,,,,,,,,,,,,,,,,861,,,861,,,861,861',
',,861,,,,,,861,,,,,,,,861,,,,,861,861,861,861,861,861,,,,861,861,,,',
',,,861,,,861,861,861,,861,861,868,868,868,,868,,,,868,868,,,,868,,868',
'868,868,868,868,868,868,,,,,,868,868,868,868,868,868,868,,,868,,,,,',
',868,,,868,868,868,868,868,868,868,868,,868,868,868,,868,868,,868,868',
'868,,,,,,,,,,,,,,,,,,,,868,,,868,,,868,868,,,868,,,,,,868,,,,,,,,868',
',,,,868,868,868,868,868,868,,,,868,868,,,,,,,868,,,868,868,868,,868',
'868,877,877,877,,877,,,,877,877,,,,877,,877,877,877,877,877,877,877',
',,,,,877,877,877,877,877,877,877,,,877,,,,,,,877,,,877,877,877,877,877',
'877,877,877,,877,877,877,,877,877,,877,877,877,,,,,,,,,,,,,,,,,,,,877',
',,877,,,877,877,,,877,,,,,,877,,,,,,,,877,,,,,877,877,877,877,877,877',
',,,877,877,,,,,,,877,,,877,877,877,,877,877,919,919,919,,919,,,,919',
'919,,,,919,,919,919,919,919,919,919,919,,,,,,919,919,919,919,919,919',
'919,,,919,,,,,,,919,,,919,919,919,919,919,919,919,919,919,919,919,919',
',919,919,,919,919,919,,,,,,,,,,,,,,,,,,,,919,,,919,,,919,919,,,919,',
',,919,,919,,,,,,,,919,,,,,919,919,919,919,919,919,,,,919,919,,,,,,,919',
',919,919,919,919,,919,919,920,920,920,,920,,,,920,920,,,,920,,920,920',
'920,920,920,920,920,,,,,,920,920,920,920,920,920,920,,,920,,,,,,,920',
',,920,920,920,920,920,920,920,920,,920,920,920,,920,920,,920,920,920',
',,,,,,,,,,,,,,,,,,,920,,,920,,,920,920,,,920,,,,,,920,,,,,,,,920,,,',
',920,920,920,920,920,920,,,,920,920,,,,,,,920,,,920,920,920,,920,920',
'932,932,932,,932,,,,932,932,,,,932,,932,932,932,932,932,932,932,,,,',
',932,932,932,932,932,932,932,,,932,,,,,,,932,,,932,932,932,932,932,932',
'932,932,,932,932,932,,932,932,,,,932,,,,,,,,,,,,,,,,,,,,932,,,932,,',
'932,932,,,932,,,,,,,,,,,,,,,,,,,932,932,932,932,932,932,,,,932,932,',
',,,,,932,,,932,932,932,,932,932,941,941,941,,941,,,,941,941,,,,941,',
'941,941,941,941,941,941,941,,,,,,941,941,941,941,941,941,941,,,941,',
',,,,,941,,,941,941,941,941,941,941,941,941,,941,941,941,,941,941,,,',
'941,,,,,,,,,,,,,,,,,,,,941,,,941,,,941,941,,,941,,,,,,,,,,,,,,,,,,,941',
'941,941,941,941,941,,,,941,941,,,,,,,941,,,941,941,941,,941,941,949',
'949,949,,949,,,,949,949,,,,949,,949,949,949,949,949,949,949,,,,,,949',
'949,949,949,949,949,949,,,949,,,,,,,949,,,949,949,949,949,949,949,949',
'949,,949,949,949,,949,949,,949,949,949,,,,,,,,,,,,,,,,,,,,949,,,949',
',,949,949,,,949,,949,,,,949,,,,,,,,949,,,,,949,949,949,949,949,949,',
',,949,949,,,,,,,949,,,949,949,949,,949,949,992,992,992,,992,,,,992,992',
',,,992,,992,992,992,992,992,992,992,,,,,,992,992,992,992,992,992,992',
',,992,,,,,,,992,,,992,992,992,992,992,992,992,992,,992,992,992,,992',
'992,,,,992,,,,,,,,,,,,,,,,,,,,992,,,992,,,992,992,,,992,,,,,,,,,,,,',
',,,,,,992,992,992,992,992,992,,,,992,992,,,,,,,992,,,992,992,992,,992',
'992,1006,1006,1006,,1006,,,,1006,1006,,,,1006,,1006,1006,1006,1006,1006',
'1006,1006,,,,,,1006,1006,1006,1006,1006,1006,1006,,,1006,,,,,,,1006',
',,1006,1006,1006,1006,1006,1006,1006,1006,,1006,1006,1006,,1006,1006',
',1006,1006,1006,,,,,,,,,,,,,,,,,,,,1006,,,1006,,,1006,1006,,,1006,,',
',,,1006,,,,,,,,1006,,,,,1006,1006,1006,1006,1006,1006,,,,1006,1006,',
',,,,,1006,,,1006,1006,1006,,1006,1006,1039,1039,1039,,1039,,,,1039,1039',
',,,1039,,1039,1039,1039,1039,1039,1039,1039,,,,,,1039,1039,1039,1039',
'1039,1039,1039,,,1039,,,,,,,1039,,,1039,1039,1039,1039,1039,1039,1039',
'1039,1039,1039,1039,1039,,1039,1039,,1039,1039,1039,,,,,,,,,,,,,,,,',
',,,1039,,,1039,,,1039,1039,,,1039,,1039,,1039,,1039,,,,,,,,1039,,,,',
'1039,1039,1039,1039,1039,1039,,,,1039,1039,,,,,,,1039,,1039,1039,1039',
'1039,,1039,1039,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11',
'11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,',
',11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,',
'11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,',
',,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12',
'12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12',
'12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75',
'75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75',
'75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75',
'75,75,75,75,75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,,,,105,105,105,105,105,105,105,105,105,105,,,,,,105,105,105',
'105,105,105,105,105,105,105,105,105,,105,,,,,,,105,105,,105,105,105',
'105,105,105,105,,,105,105,,,,105,105,105,105,,,,,,,,,,,,,,105,105,,105',
'105,105,105,105,105,105,105,105,105,105,,,105,,,,,,,,,,,,,,,,,,,,105',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,,,,422,422,422,422,422,422,422,422,422,422',
',,,,,422,422,422,422,422,422,422,422,422,,,422,,,,,,,,,422,422,,422',
'422,422,422,422,422,422,,,422,422,,,,422,422,422,422,,,,,,,,,,,,,,422',
'422,,422,422,422,422,422,422,422,422,422,422,422,,,422,422,,,,,,,,,',
'422,,,,,,,,,422,654,654,654,654,654,654,654,654,654,654,654,654,654',
'654,654,654,654,654,654,654,654,654,654,654,,,,654,654,654,654,654,654',
'654,654,654,654,,,,,,654,654,654,654,654,654,654,654,654,,,654,,,,,',
',,,654,654,,654,654,654,654,654,654,654,,,654,654,,,,654,654,654,654',
',,,,,,,,,,,,,654,654,,654,654,654,654,654,654,654,654,654,654,654,,',
'654,654,,,,,,,,,,654,,,,,,,,,654,766,766,766,766,766,766,766,766,766',
'766,766,766,766,766,766,766,766,766,766,766,766,766,766,766,,,,766,766',
'766,766,766,766,766,766,766,766,,,,,,766,766,766,766,766,766,766,766',
'766,,,766,,,,,,,,,766,766,,766,766,766,766,766,766,766,,,766,766,,,',
'766,766,766,766,,,,,,,,,,,,,,766,766,,766,766,766,766,766,766,766,766',
'766,766,766,,,766,,,,,228,228,,,228,,,,,,,,,228,228,766,228,228,228',
'228,228,228,228,,,228,228,,,,228,228,228,228,,,,,,228,,,,,,,,228,228',
',228,228,228,228,228,228,228,228,228,228,228,,,228,,,,,229,229,,,229',
',,,,,,,,229,229,228,229,229,229,229,229,229,229,,,229,229,,,,229,229',
'229,229,,,,,,229,,,,,,,,229,229,,229,229,229,229,229,229,229,229,229',
'229,229,,,229,,,,,473,473,,,473,,,,,,,,,473,473,229,473,473,473,473',
'473,473,473,,,473,473,,,,473,473,473,473,,,,,,473,,,,,,,,473,473,,473',
'473,473,473,473,473,473,473,473,473,473,,,473,,,,,474,474,,,474,,,,',
',,,,474,474,473,474,474,474,474,474,474,474,,,474,474,,,,474,474,474',
'474,,,,,,474,,,,,,,,474,474,,474,474,474,474,474,474,474,474,474,474',
'474,,,474,,,,,539,539,,,539,,,,,,,,,539,539,474,539,539,539,539,539',
'539,539,,,539,539,,,,539,539,539,539,,,,,,539,,,,,,,,539,539,,539,539',
'539,539,539,539,539,539,539,539,539,,,539,,,,,540,540,,,540,,,,,,,,',
'540,540,539,540,540,540,540,540,540,540,,,540,540,,,,540,540,540,540',
',,,,,540,,,,,,,,540,540,,540,540,540,540,540,540,540,540,540,540,540',
',,540,,,,,549,549,,,549,,,,,,,,,549,549,540,549,549,549,549,549,549',
'549,,,549,549,,,,549,549,549,549,,,,,,549,,,,,,,,549,549,,549,549,549',
'549,549,549,549,549,549,549,549,,,549,,,,,550,550,,,550,,,,,,,,,550',
'550,549,550,550,550,550,550,550,550,,,550,550,,,,550,550,550,550,,,',
',,550,,,,,,,,550,550,,550,550,550,550,550,550,550,550,550,550,550,,',
'550,,,,,578,578,,,578,,,,,,,,,578,578,550,578,578,578,578,578,578,578',
',,578,578,,,,578,578,578,578,,,,,,578,,,,,,,,578,578,,578,578,578,578',
'578,578,578,578,578,578,578,,,578,,,,,579,579,,,579,,,,,,,,,579,579',
'578,579,579,579,579,579,579,579,,,579,579,,,,579,579,579,579,,,,,,579',
',,,,,,,579,579,,579,579,579,579,579,579,579,579,579,579,579,,,579,,',
',,660,660,,,660,,,,,,,,,660,660,579,660,660,660,660,660,660,660,,,660',
'660,,,,660,660,660,660,,,,,,660,,,,,,,,660,660,,660,660,660,660,660',
'660,660,660,660,660,660,,,660,,,,,661,661,,,661,,,,,,,,,661,661,660',
'661,661,661,661,661,661,661,,,661,661,,,,661,661,661,661,,,,,,661,,',
',,,,,661,661,,661,661,661,661,661,661,661,661,661,661,661,,,661,,,,',
'755,755,,,755,,,,,,,,,755,755,661,755,755,755,755,755,755,755,,,755',
'755,,,,755,755,755,755,,,,,,755,,,,,,,,755,755,,755,755,755,755,755',
'755,755,755,755,755,755,,,755,,,,,756,756,,,756,,,,,,,,,756,756,755',
'756,756,756,756,756,756,756,,,756,756,,,,756,756,756,756,,,,,,756,,',
',,,,,756,756,,756,756,756,756,756,756,756,756,756,756,756,,983,756,983',
'983,983,983,983,986,,986,986,986,986,986,,,983,,,,,756,,986,,,,,,,,',
',,,,,,983,,,,,,,986,,983,983,983,983,,,,986,986,986,986,,,,,,,,,,,,',
',,,,,1035,1035,,,1035,,,,983,,,,,1035,1035,986,1035,1035,1035,1035,1035',
'1035,1035,,,1035,1035,,,,1035,1035,1035,1035,,,,,,1035,,,,,,,,1035,1035',
',1035,1035,1035,1035,1035,1035,1035,1035,1035,1035,1035,,,1035,,,,,1040',
'1040,,,1040,,,,,,,,,1040,1040,1035,1040,1040,1040,1040,1040,1040,1040',
',,1040,1040,,,,1040,1040,1040,1040,,,,,,1040,,,,,,,,1040,1040,,1040',
'1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,,,1040,,,,,1041,1041',
',,1041,,,,,,,,,1041,1041,1040,1041,1041,1041,1041,1041,1041,1041,,,1041',
'1041,,,,1041,1041,1041,1041,,,,,,1041,,,,,,,,1041,1041,,1041,1041,1041',
'1041,1041,1041,1041,1041,1041,1041,1041,,1059,1041,1059,1059,1059,1059',
'1059,,,,,,,,,,1059,,,,,1041,,,,,,,,,,,,,,,,,1059,,,,,,,,,1059,1059,1059',
'1059,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1059' ]
        racc_action_check = arr = ::Array.new(26232, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    96,  2022,    98,   nil,   142,   nil,   nil,  6081,    17,
   nil, 24012, 24145,     2,   nil,    42,    76,    -4,   145,   242,
   344,   nil,   -65,  6220,  2302,   209,   nil,   -40,   nil,   165,
  1088,  1220,  6359,  6498,  6637,   nil,  2162,  6776,  6915,   nil,
   119,   377,   480,   199,   164,  7054,  7193,   878,  7332,   164,
   312,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1352,   nil,  7471,   nil,   nil,   -22,   nil,  7610,  7749,   nil,
   nil,  7888,  8027,   227,   nil, 24278,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    68,   nil,   nil,   nil,   nil,   nil,   nil,   195,
   208,   232,   240,   nil,   nil, 24411,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   nil,   nil,   136,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  8166,   nil,
   nil,   nil,   nil,  8305,  8444,  8583,  8722,  8861,   262,   nil,
   143,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   257,
   nil,  2302,  9000,  9139,  9278,  9417,  9556,  9695, 24878, 24946,
   nil,   nil,  9834,  9973, 10112,   nil,   nil,   326,   -21,   104,
   345,   147,   280,   347,   nil, 10251,  2442,   350, 10390, 10529,
 10668, 10807, 10946, 11085, 11224, 11363, 11502, 11641, 11780, 11919,
 12058, 12197, 12336, 12475, 12614, 12753, 12892, 13031, 13170, 13309,
   nil,   nil,   nil,   nil, 13448,   nil,   nil,   nil,  1880,   nil,
   nil,   358, 13587, 13726,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 13865,   nil,  2442,   nil,   328,   332,   nil, 14004,
   381, 14143,   nil,   nil, 14282, 14421,   nil,   nil,   202,   nil,
   nil, 14560,  1170,   nil,   372,  2582,   398,   441,   407, 14699,
  2722,   358,   368,   380,   494,   448,   nil,   474,   452,   193,
   nil,   nil,   nil,   501,   167,   478, 14838,   nil,   513,   567,
   504,   nil,   587, 14977,   nil, 15116,  2862,  1182,   535, 15255,
 15394,   nil,   705,    -8,     8, 15533,  3002,  3142,   203,   658,
   548,   -19,    -7,   516,   626,    24,   659,   nil,   nil, 15672,
   nil, 15811,   378,   382,   416,   460,   462,   470,   481,   514,
   518,   nil,   552,   nil,   nil,   nil,   nil,   745,   nil,   307,
   nil,   375,   nil,   349,   nil,   568,   382,   nil,   572,   483,
   nil,   576,   -59,   nil,   587,   -58,   nil,   580,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 24544,   nil,   nil,   nil,   nil,   602,   nil,   nil,
   600, 15950,   603,   nil,   nil,   593,   nil,   591,   151,   723,
   nil,   nil,  2022,   nil,   nil,   nil,   nil,   nil,  2162,   650,
   nil,   nil,   661,   675,   597,   649,  1484,   nil,   nil,   nil,
   272,   408,   724,   nil,   nil,  1616,  1748,   nil,   nil,   nil,
   -26,   nil,   726, 25014, 25082, 16089,   170, 16228, 16367, 16506,
  3142,  3282,   738,   761,   760,   764,   769,   781,  1170,  1302,
  1434,  3422,  3562,  3702,  3842,  3982,  4122,  1178,  1310,  4262,
  4402,  2582,   900,   841,   nil,  1880,   nil,   nil,   nil,   nil,
   725,   nil,   nil,   nil,   735,   nil,   nil, 16645,   nil,   nil,
 16784,   nil, 16923,   nil,   196,   nil,   nil,   nil, 17062,  1302,
   754,   742,   741,   nil,   nil,   743, 17201,   750, 17340, 25150,
 25218,   620,   790,   nil, 17479,   752,   nil, 17618, 17757, 25286,
 25354,  1038,  2722, 17896,   875,   889,   786,   nil,   nil,   436,
   450,   818,   801,   nil,   507,   828,  3282,   916,   nil,  3422,
    63,   921,   922,   917,   930,   nil,   nil, 18035, 25422, 25490,
    26,   nil,   347,   483,   -20,   nil,   640,   nil,   834, 18174,
   nil,   854,   nil,   nil,   nil, 18313,   nil,   881,   nil,   817,
   824,   nil,   826,   827,   828,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   817,   820,   nil,   nil, 18452,   nil,   nil,
   nil,   913,   nil,   nil,   nil,   923,   nil,   nil,   925,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   200,   nil,   nil,   266,   nil,   nil,   nil,   848,   nil,   nil,
   857,   nil,  3562,   nil, 24677,   nil,   861, 18591, 18730, 18869,
 25558, 25626, 19008, 19147,   651,   901, 19286, 19425, 19564, 19703,
   900,   nil,   nil,   nil, 19842, 19981,   901,   nil,   nil,   nil,
   215,   236,   544,   680,   874,   874,   nil,   -57,   981,   -19,
   nil,   nil,   897,   nil,  1003,   nil,   884,   nil,   926, 20120,
   nil,   nil, 20259,   nil,   nil,   -95, 20398,   888,   nil,   892,
    -9,    -5,   943,    25,   650,   944,   916, 20537,   nil,   980,
   -14,   185,   nil, 20676,   nil,   nil,   nil,   nil, 20815,   nil,
   nil, 20954,   nil,   nil,   nil,   756,   nil,  1034,   nil,   nil,
   nil,   nil,   nil,  1040,   nil, 21093,   924,    29,    30,   162,
   163,  3702,   nil,   652,   nil, 25694, 25762, 21232,   nil,   nil,
   nil,   736,  3842,  3982,  1018,  1151, 24810,    -7,    34,   926,
   231,   nil,   nil,   720,  1283,   nil,  1415,   nil,   338,   nil,
 21371,   nil,   851,   nil,   925,   933,  1055,   940,   nil,   nil,
   nil,   nil,  1185,  4122,   nil,   nil,   nil,   nil,   nil,   954,
   nil,   939, 21510,   944,   267,   273,   816,   952,   nil,  2862,
 21649,   nil,   948,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 21788, 21927, 22066, 22205,   277, 22344,   nil,
   nil,  1547,   nil,  4262,   nil,   nil,   967,   nil,   108,   nil,
   nil,   nil,   nil,   953,    39,   nil,   nil,   nil,   nil,   nil,
   nil,  4402,   nil,   955,   998,   nil,   nil,   534,  1078,   nil,
   nil, 22483,   nil,  4542,  1080,   nil,   nil,   nil, 22622,    69,
    68,  1082,   619,   725,   nil,   966,  4682, 22761,   227,  1084,
  1090,   977,   462,   nil,   nil,   nil,  4822,  4962,   980,   994,
   994,   nil,   nil,   nil,   997,  1004,   nil,  1011,  1016,   nil,
  1017,   nil,   nil,  1022,   918,   987,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1012,   nil,  1022,   320,   nil,   nil, 22900,
 23039,  3002,  1024,  1025,   nil,  1040,  1045,  1046,   nil,  1068,
  1054,  1035, 23178,   nil,   nil,   nil,   nil,  5102,  5242,   nil,
     9, 23317,   nil,   nil,   nil,    35,   nil,   nil,   nil, 23456,
  5382,   nil,   nil,  1175,   471,   nil,   nil,   nil,   nil,   nil,
  1096,  1075,  1181,  1345,   nil,   nil,  1679,   nil,   474,   nil,
   611,   nil,  6797,   nil,   nil,   nil,   nil,  1069,  1074,   nil,
   268,   nil,   nil, 25824,   nil,   nil, 25831,   nil,  6936,   nil,
   nil,  1107, 23595,   755,  1176,   nil,  1227,  5522,    43,   120,
   769,  1186,   135,   nil,  5662,   nil, 23734,    30,   nil,   nil,
  5802,  5942,   nil,   nil,   598,   nil,   nil,   nil,  1119,  1126,
  1129,  1136,  1081,  1213,  1143,   nil,   nil,  1149,  1150,  1151,
  1157,   nil,  1172,   nil,   784, 25899,   nil,   nil,  1299, 23873,
 25967, 26035,   144,   825,   nil,   nil,   nil,   nil,  1298,  1300,
   nil,  1477,  8048,   nil,   nil,   nil,   nil,  1183,   nil, 26097,
   nil, 14720,   nil, 14859,   nil, 15693,   nil,   nil,  1223,  1226,
   nil,  1192,   145,   158,   168,   169,   nil,   nil,   nil,   nil,
  1191,  1193,  1201,  1203,  1206,   170,   nil, 15832,   nil,   nil,
   nil,   nil,  1219,   nil ]

racc_action_default = [
    -1,  -651,  -650,  -651,    -2,  -637,    -4,    -5,  -651,    -8,
    -9,  -651,  -651,  -651,   -36,  -651,  -651,   -40,  -651,  -651,
  -294,   -52,  -639,  -651,   -57,   -62,   -63,   -64,   -68,  -271,
  -271,  -271,  -309,  -342,  -343,   -80,  -650,   -84,   -92,   -94,
  -651,  -538,  -539,  -651,  -651,  -651,  -651,  -230,  -651,  -639,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -623,  -296,  -298,  -305,  -307,  -317,  -319,  -651,  -651,   -59,
   -59,  -637,  -651,  -327,  -334,  -651,  -344,  -345,  -347,  -348,
  -349,  -350,  -351,  -352,  -353,  -354,  -355,  -356,  -365,  -420,
  -468,  -469,  -470,  -471,  -472,  -650,  -475,  -650,  -650,  -650,
  -650,  -650,  -650,  -511,  -512,  -650,  -514,  -520,  -522,  -523,
  -524,  -525,  -621,  -527,  -528,  -622,  -530,  -531,  -532,  -533,
  -534,  -535,  -536,  -537,  -542,  -543,  1094,    -3,  -638,  -646,
  -647,  -648,    -7,  -651,  -651,  -651,  -651,  -651,  -651,   -24,
  -651,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,   -29,
  -130,  -650,  -651,  -651,  -651,  -651,  -651,  -650,  -651,  -651,
  -633,  -634,  -651,  -651,  -639,  -640,   -56,  -651,  -538,  -539,
  -651,  -294,  -651,  -651,  -236,  -651,  -650,  -651,  -215,  -216,
  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,
  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,
  -245,  -246,  -247,  -248,  -651,  -358,  -448,  -428,  -651,  -635,
  -636,   -69,  -650,  -651,  -316,  -357,  -432,  -441,  -443,   -75,
  -438,   -76,  -639,   -77,  -251,  -266,  -650,  -650,  -270,  -651,
  -276,  -651,  -650,  -615,  -651,  -651,   -78,   -79,  -637,   -17,
   -18,  -651,   -21,   -22,   -82,  -650,  -639,  -651,   -85,   -88,
  -650,  -100,  -101,  -651,  -651,  -108,  -309,  -312,  -639,  -651,
  -342,  -343,  -346,  -439,  -651,   -90,  -651,   -96,  -304,  -521,
  -651,  -224,  -225,  -651,  -237,  -651,  -650,  -300,  -639,  -650,
  -650,  -318,   -58,  -651,  -651,  -651,  -650,  -650,  -637,  -651,
  -638,  -538,  -539,  -651,  -651,  -294,  -651,  -375,  -376,  -651,
  -330,  -651,  -123,  -124,  -163,  -164,  -165,  -181,  -186,  -193,
  -196,  -337,  -651,  -538,  -539,  -610,  -611,  -570,  -473,  -651,
  -496,  -651,  -498,  -651,  -500,  -651,  -651,  -480,  -651,  -651,
  -486,  -651,  -651,  -492,  -651,  -651,  -494,  -651,  -513,  -515,
  -516,  -517,  -518,    -6,  -649,   -30,   -31,   -32,   -33,   -34,
   -10,   -11,  -651,   -26,   -27,   -28,  -131,  -651,   -37,   -39,
  -281,  -651,  -651,  -280,   -38,  -651,   -41,  -651,  -294,   -49,
   -51,  -204,  -256,  -276,   -53,   -54,   -42,  -205,  -256,  -639,
  -261,  -262,  -650,  -650,  -624,  -625,  -271,  -436,  -626,  -627,
  -625,  -624,  -271,  -435,  -437,  -626,  -627,   -48,  -212,   -55,
  -639,  -315,  -651,  -651,  -651,  -650,  -304,  -651,  -651,  -651,
  -213,  -214,  -217,  -218,  -219,  -220,  -221,  -222,  -226,  -227,
  -228,  -229,  -231,  -232,  -233,  -234,  -235,  -238,  -239,  -240,
  -241,  -639,  -249,  -651,  -449,  -271,  -624,  -625,   -66,   -70,
  -639,  -272,  -445,  -448,  -639,  -311,  -267,  -651,  -275,  -268,
  -651,  -273,  -651,  -277,  -651,  -618,  -620,   -16,  -638,   -20,
  -651,  -639,   -81,  -302,   -97,   -86,  -651,  -639,  -650,  -651,
  -651,  -107,  -651,  -521,  -651,   -93,   -98,  -651,  -651,  -651,
  -651,  -250,  -242,  -651,  -460,  -651,  -639,  -299,  -252,  -643,
  -643,  -651,  -651,  -613,  -643,  -651,  -650,  -366,  -367,  -650,
  -651,  -651,  -651,  -651,  -651,  -361,  -455,  -650,  -651,  -651,
  -304,   -59,  -118,  -119,  -651,  -121,  -651,  -294,  -650,  -651,
  -335,  -548,  -339,  -631,  -632,  -651,  -421,  -570,  -424,  -609,
  -609,  -553,  -555,  -555,  -555,  -569,  -571,  -572,  -573,  -574,
  -575,  -576,  -577,  -578,  -651,  -580,  -582,  -584,  -589,  -591,
  -592,  -594,  -599,  -601,  -602,  -604,  -605,  -606,  -651,  -474,
  -497,  -502,  -503,  -505,  -476,  -499,  -477,  -501,  -478,  -479,
  -651,  -482,  -484,  -651,  -485,  -488,  -489,  -651,  -490,  -491,
  -651,  -519,  -650,   -25,  -651,   -35,  -284,  -651,  -651,  -650,
  -651,  -651,  -651,  -651,  -440,  -651,  -263,  -265,  -651,  -651,
   -71,  -259,  -260,  -433,  -651,  -651,   -73,  -434,  -314,  -641,
  -624,  -625,  -624,  -625,  -639,  -651,  -427,  -650,   -65,  -429,
  -445,  -258,  -651,  -446,  -651,  -310,  -650,  -274,  -278,  -651,
  -616,  -617,  -651,   -19,   -23,   -83,  -651,   -89,   -95,  -639,
  -624,  -625,  -650,  -628,  -106,  -651,   -91,  -651,  -211,  -223,
  -639,  -650,  -359,  -650,  -297,  -364,  -301,  -253,  -645,  -644,
  -255,  -645,  -306,  -308,  -614,  -650,  -368,  -650,   -60,  -369,
  -370,  -322,  -323,  -651,  -325,  -651,  -639,  -624,  -625,  -628,
  -303,  -650,  -118,  -119,  -120,  -651,  -651,  -650,  -328,  -544,
  -546,  -331,  -650,  -650,  -570,  -570,  -651,  -639,  -651,  -639,
  -651,  -551,  -552,  -651,  -651,  -562,  -651,  -565,  -651,  -567,
  -651,  -377,  -651,  -379,  -381,  -384,  -387,  -639,  -583,  -593,
  -603,  -607,  -651,  -650,  -481,  -483,  -487,  -493,  -495,  -651,
  -132,  -282,  -651,  -639,  -624,  -625,  -625,  -624,   -50,  -257,
  -651,  -642,  -650,   -44,  -207,   -45,  -208,   -72,   -46,  -210,
   -47,  -209,   -74,  -651,  -651,  -651,  -651,  -440,  -651,  -409,
  -410,  -639,  -412,  -650,  -431,  -430,  -651,  -442,  -650,  -444,
  -269,  -279,  -619,   -87,  -440,   -99,  -313,   -13,   -15,  -360,
  -362,  -650,  -467,  -461,  -650,  -462,  -463,  -643,  -651,  -363,
  -371,  -651,  -373,  -650,  -651,   -61,  -324,  -451,  -651,  -651,
  -440,  -651,  -118,  -119,  -122,  -639,  -650,  -651,  -651,  -651,
  -651,  -639,  -651,  -340,  -612,  -422,  -650,  -650,  -414,  -639,
  -609,  -590,  -608,  -554,  -555,  -555,  -581,  -555,  -555,  -600,
  -555,  -578,  -595,  -639,  -651,  -651,  -386,  -579,  -504,  -507,
  -508,  -509,  -510,  -651,   -12,  -283,  -440,   -43,  -206,  -264,
  -651,  -243,  -609,  -609,  -391,  -650,  -650,  -650,  -408,  -651,
  -639,  -578,  -586,  -587,  -597,  -450,   -67,  -650,  -650,  -466,
  -651,  -651,  -465,  -254,  -320,  -651,  -374,  -321,  -452,  -651,
  -650,  -326,  -440,  -651,  -651,  -332,  -336,  -338,  -547,  -549,
  -548,  -651,  -651,  -651,  -423,  -550,  -651,  -558,  -651,  -560,
  -651,  -563,  -651,  -566,  -568,  -378,  -380,  -382,  -385,  -506,
  -651,  -389,  -390,  -399,  -393,  -401,  -651,  -404,  -651,  -406,
  -411,  -651,  -651,  -585,  -651,  -447,  -650,  -650,  -538,  -539,
  -651,  -651,  -294,  -464,  -650,  -453,  -651,  -650,  -329,  -545,
  -650,  -650,  -425,  -426,  -639,  -416,  -418,  -419,  -555,  -555,
  -555,  -555,  -651,  -651,  -609,  -588,  -392,  -650,  -650,  -650,
  -650,  -598,  -650,  -413,  -596,  -651,  -304,   -14,  -460,  -650,
  -651,  -651,  -304,  -650,  -454,  -456,  -457,  -458,  -651,  -651,
  -415,  -651,  -651,  -556,  -559,  -561,  -564,  -383,  -388,  -651,
  -396,  -651,  -398,  -651,  -402,  -651,  -405,  -407,  -303,  -628,
  -459,  -639,  -624,  -625,  -628,  -303,  -372,  -333,  -341,  -417,
  -555,  -650,  -650,  -650,  -650,  -440,  -557,  -651,  -394,  -397,
  -400,  -403,  -650,  -395 ]

clist = [
'6,449,318,233,295,295,295,131,144,144,228,381,456,462,277,555,9,4,279',
'351,353,354,9,721,358,574,139,220,566,569,345,332,332,433,434,519,317',
'128,147,147,598,409,763,356,357,281,289,291,440,446,420,440,771,772',
'848,467,510,440,700,781,335,664,505,605,697,724,332,697,787,339,127',
'858,144,131,503,509,347,899,286,290,896,741,742,692,744,754,415,416',
'417,418,889,864,926,390,833,392,394,397,400,403,406,314,144,390,297',
'297,297,727,730,132,1015,389,734,978,976,1031,1,640,352,352,643,407',
'352,1017,2,138,296,296,296,588,316,590,652,847,938,236,359,703,530,219',
'368,429,9,422,738,545,865,293,306,307,278,419,929,690,654,343,561,689',
'385,562,366,758,382,775,777,779,592,346,348,556,349,350,19,369,447,876',
'589,878,19,1010,468,371,762,591,352,352,352,352,1031,766,960,519,977',
'237,928,930,1014,596,1079,295,885,387,237,237,237,700,19,323,323,768',
'512,1017,513,697,697,838,869,687,1045,613,745,427,854,940,388,450,466',
'781,473,413,1057,906,19,976,391,393,903,237,237,743,396,237,363,399',
'1027,937,317,402,405,684,769,991,908,866,295,295,874,456,462,792,793',
'836,408,877,295,894,891,899,1025,700,595,,,605,,444,445,457,896,,450',
',,,469,470,,,,896,,,,,518,518,827,,19,,390,546,,237,237,237,237,19,570',
'542,131,694,709,332,539,317,432,432,524,,317,844,,712,,529,,,,1037,332',
'549,,712,428,439,,,439,,528,535,,965,439,707,,558,563,781,781,746,,716',
'578,297,571,572,870,543,131,1046,712,332,297,332,,,944,,,896,,527,947',
'981,982,296,286,1076,314,951,290,,,314,296,,,956,957,19,237,437,237',
'237,437,237,511,,,,437,237,237,943,352,514,890,531,,1011,,,537,916,19',
'881,882,144,,560,564,573,,468,,447,660,613,665,879,880,803,840,,,653',
',,605,605,704,559,456,462,,295,,147,518,518,237,237,671,967,969,700',
'971,973,,974,237,1008,817,,697,781,781,923,822,466,670,450,,,,1058,676',
',,19,685,440,,19,,952,,323,19,813,815,440,440,718,,818,820,440,440,546',
'935,671,,672,323,1070,,546,295,677,,,,843,19,,,,,688,457,,,237,19,19',
',,332,875,,,855,,450,466,332,586,712,586,,,950,953,,466,,295,840,,,',
'672,751,962,,1077,1078,,,,,,,735,,,737,,,739,,,450,466,,,1053,1054,1055',
'1056,,,895,760,897,457,696,,,,,,,613,613,457,,,,,,720,635,613,637,613',
'898,641,900,,641,,997,814,816,1024,,1004,923,819,821,923,,923,457,,',
',295,,917,,440,,,,,761,1086,927,835,,237,767,,,,6,144,,,,,,450,466,',
',,,931,925,665,9,799,,800,,546,,1047,,,808,834,,1048,1049,147,845,1085',
',829,,,,,665,,,,518,,,923,19,923,332,923,883,923,,,323,,237,457,671',
'332,932,,323,,,,,852,,856,,237,,923,,665,,295,,,,862,,862,19,,812,19',
',,,,,,,237,,,888,871,466,,,450,,,918,237,,672,,144,677,237,,,,,439,814',
'816,821,819,,,1018,,,439,439,,,665,,439,439,,,,,,913,1028,,,1029,613',
'1019,857,1020,,1021,,457,,,,,518,,888,1071,945,931,,432,931,1030,,1032',
'19,,712,,,,437,237,954,,19,,,,829,,437,437,,29,,,437,437,,29,,,,939',
'942,,795,,665,795,,,,932,29,946,932,,,932,918,932,1081,29,29,29,,29',
'323,,430,443,955,,,,959,1080,961,323,,,,931,1082,,1083,,1084,,,,,29',
',,,,29,29,,,29,888,352,,,,,,,,1092,19,439,984,984,984,332,237,352,,',
',19,19,471,332,,995,996,,932,,932,,932,,932,,,,1007,,,,,521,1009,523',
',,525,526,,19,,,,29,932,,,,29,29,29,29,29,,,,437,,,,,,332,,,,,1040,515',
',852,1050,,1038,,,,,,19,1043,862,565,,,,,295,,,892,,532,892,,,,19,,',
',984,984,984,984,,984,237,466,19,985,987,989,450,466,,,862,,,,,19,237',
'557,,,,665,,,,19,19,,,29,29,29,29,29,29,29,,,,,29,29,29,,924,,,,984',
'984,984,984,,,29,,656,,457,984,,,,,,,,,,,,993,,,,,19,19,,,1000,,,,,',
',,,19,29,29,,,,,,,,,29,,,,,1060,1062,1064,1066,,1067,,,,,,,,,29,,,,29',
',,,,29,,,1034,,,,,19,,,678,,,698,19,,565,,701,,19,19,,,,29,,,,,1088',
'1089,1090,1091,29,29,29,,,,,1093,,,,,,,,237,691,,,,695,,,,,32,,,,,892',
'32,,924,,,924,705,924,,,,,708,,,32,,,,,,,,,32,32,32,,32,,,726,,,,,,',
',,,,,,,,,,788,,,,,,32,,,,,32,32,,,32,,,,,,,,,,,,,,,924,,924,,924,,924',
',,,801,29,,,,,,,,698,565,,,,,,,,924,,,,,,,,,,,,,,32,,,,,32,32,32,32',
'32,841,,,842,,,,,,,,,29,,,,,,,,,,29,,853,,,,,698,,,565,,,,,29,,,,,,',
',,867,,,,29,,,29,,,,,,,,29,,,,846,,,,,,,,29,,,,,,29,,902,,32,32,32,32',
'32,32,32,,,,,32,32,32,,,,,,,915,,,,,32,,,,884,,,,,,,,,,,,,,,,,,,,907',
',,,29,,,,,,29,29,32,32,29,,,,,,29,29,32,,,,29,29,,,,,,,,,,948,,,,32',
',,,32,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,32,32,32,565,,,,,,958',
',,,,,,,964,29,,,,,,29,,,,,29,29,975,,1005,,,,,,,,,,,,,,,,,,,,,,,,,,',
'29,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,1044,,,,,,,,,,29,,,,,,,,,,,,,,,,,',
'29,,32,,,,,,,,29,,29,,,,,,,,,,,,,29,29,,244,,,,,,,29,29,294,294,294',
',,,,,,,,,,341,342,,344,,32,,,,,,,,,,32,,,,,,,,,,,,,,,32,,,,,,29,29,',
',,,,32,,,32,,,29,,,,16,32,,,,,16,,,,,,,32,,,,,,32,,,,,,,,,,,,,,,16,',
',,,,,,,29,,,,,,,29,,,,,,29,29,,,16,,,,,,,,,,367,,,,,,32,,,,,,32,32,',
'29,32,,,,,,32,32,,,,,32,32,,,,,,,,,,,,,,,,,,,,,,,,,294,442,16,,448,294',
',,,,448,16,,,,18,,,,,,18,,244,,,480,481,482,483,484,485,486,487,488',
'489,490,491,492,493,494,495,496,497,498,499,500,501,,18,,32,502,,,,',
'32,,,294,294,32,32,,,,,,,294,,,,,18,,294,,294,,,294,294,,,,,,,,,,32',
',16,,435,,,435,,,,,,435,,,,32,,,,,,,,,,16,551,,552,,,,294,294,,,,,32',
',,,,,,,18,,,,,,,,,18,32,,,,,,,,,,32,,32,,,,,,,,,,,,,32,32,,,,,,,,16',
'32,32,,16,,,,,16,,,,,,,,,,,,,,,294,,,,,,,,,,,16,,,,,,,,,,16,16,,,18',
',18,32,32,18,,,,,,18,,,,,32,,,294,,448,448,448,,18,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,294,,32,294,,294,,,,32,,,,,,32,32,,,,,294,,,,,,,,18',
'448,719,,18,,,,,18,,,,,,32,,,,,,,20,,,,,,20,,,294,,,,18,,,,,,,,,,18',
'18,,,,,,,,,,20,325,325,,,,,,,,,,,,,294,,,,,,,16,,,,20,,,,,,,,,,365,',
',,,,,,,,,,,,,,,,,294,448,294,,,16,809,,16,294,294,448,448,,,,,448,448',
',,,,,,,,,,,,,,,,,,20,,,,,294,,,294,20,,,,,,,,,,,,,,,,,,,,294,,,,,294',
',,294,,,,,,,,,,,,,,294,,,16,,,,,,435,,,294,16,,,,,18,435,435,,,,,435',
'435,,,,,,,,,294,,,,,,,20,,438,,,438,,,,,,438,,,18,294,,18,,,,,,448,',
'20,,,,,,,,,,,448,448,448,448,,921,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,,16',
'16,,,,,,,,,294,,,,,,,,,20,,,,20,41,,,325,20,18,41,16,,,,18,,,,18,,,',
',325,18,18,,435,,,18,18,,20,,,,41,321,321,294,448,,20,20,,,,,,16,,,',
',,587,,587,,,,,41,,,,,16,,294,,,361,,,383,,,,16,,,,,,,,,,,,,16,,,,,',
',,,,16,16,,,18,,,,,,,,,,,18,18,,,,,,,,294,,41,,,,,,,,,41,,,,,,,,,,,18',
',,,,16,16,,,1003,,294,,,,,,18,16,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,',
',,,,,,18,,,,,,,16,20,,,,18,,16,41,325,,,,16,16,,,325,18,,,,,,,,,,18',
'18,,,,41,,,,,,20,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,18,,,,',
',,,,,,,18,,,,,,41,,,,41,,,,321,41,,,,,,,,,,,,,,,,321,,20,,,,,,438,,41',
',20,,,,18,,438,438,41,41,,18,438,438,,,,18,18,,,383,,383,,,,,,,,,,,',
',,42,,,,,,42,325,,,,,,,,,,,325,,,,,,,,,,,,,,,,42,322,322,,,,,,,,,,,',
',,,,20,,,,,,,,42,,,20,20,,,,,,362,,,384,,,,,,,,,,,,,,,,,,,,912,20,,',
',,,,,,,,,,,,,,438,,,,,,,,,,,,,,,42,,,,,,,,20,42,,,,,,,,41,,,,,,,,321',
'20,,,,,,,321,,,,,20,,,,,,,,,,,,,20,,,,41,,,41,,,20,20,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,587,,,,,20,20,,,1002,,42,,,,,,,20,,',
',,,,,,,,,,,,,41,,,,,,,,,,41,,,,,,,,,,,,,,,,587,,,,,20,,,,,,,20,,,,42',
',20,20,42,,,,322,42,,,321,,,,,,,,,,,321,,322,,,,,,,,,,42,,,,,,,,,,42',
'42,,,,,,,,,,,41,384,,384,,,,,,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,41,,,,,,',
',,,,,41,,,,,,,,,,,,,41,,,,,,,,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,42,,,,',
',,,322,,,,,,,,322,,,,,383,,,,,41,41,,,998,,,,,,,,42,41,,42,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,383,,,,,41,,,,,,,41,,,,,,41,41,,,,,,,',
',,,,,,,,,,,,,,,,42,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,322,,,,,,,,,,,322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,',
',,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,42,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,42,,,,,,,,,,,,,42,,,,,',
',,,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,384,,,,,42,42',
',,999,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,384,,,,,42',
',,,,,,42,,,,,,42,42' ]
        racc_goto_table = arr = ::Array.new(3970, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,36,63,40,46,46,46,118,71,71,38,70,50,50,171,12,9,2,38,102,24,24,9',
'15,24,113,22,22,106,106,40,78,78,29,29,87,14,8,73,73,170,70,121,42,42',
'51,51,51,25,33,10,25,153,153,17,33,36,25,220,146,64,37,50,204,88,100',
'78,88,147,76,5,107,71,118,172,52,9,215,85,85,210,100,100,53,100,68,24',
'24,24,24,162,109,158,6,160,6,6,6,6,6,6,59,71,6,84,84,84,83,83,7,164',
'188,83,148,145,216,1,192,31,31,192,188,31,165,3,11,82,82,82,69,60,69',
'13,16,18,27,5,20,21,23,26,30,9,32,43,65,45,58,58,58,49,9,162,55,74,79',
'81,86,98,101,115,117,122,207,207,207,123,124,125,126,127,128,35,129',
'75,130,131,132,35,133,75,134,135,136,31,31,31,31,216,137,138,87,149',
'35,150,156,163,166,164,46,167,168,35,35,35,220,35,35,35,169,174,165',
'175,88,88,177,178,180,181,209,182,14,183,184,187,6,71,146,38,7,148,146',
'35,145,189,190,147,35,35,113,191,35,35,194,158,160,14,195,196,36,170',
'162,197,100,46,46,68,50,50,198,199,53,202,203,46,208,212,215,213,220',
'219,,,204,,31,31,85,210,,6,,,,31,31,,,,210,,,,,6,6,37,,35,,6,63,,35',
'35,35,35,35,24,40,118,172,36,78,38,14,82,82,188,,14,37,,50,,9,,,,17',
'78,38,,50,27,27,,,27,,8,64,,153,27,65,,6,6,146,146,36,,65,38,84,14,14',
'37,76,118,109,50,78,84,78,,,100,,,210,,5,100,153,153,82,85,107,59,100',
'85,,,59,82,,,100,100,35,35,35,35,35,35,35,58,,,,35,35,35,83,31,58,152',
'60,,121,,,60,37,35,170,170,71,,84,84,5,,75,,75,38,209,40,12,12,36,87',
',,22,,,204,204,10,82,50,50,,46,,73,6,6,35,35,6,207,207,220,207,207,',
'207,35,100,52,,88,146,146,152,52,71,51,6,,,,153,51,,,35,40,25,,35,,37',
',35,35,33,33,25,25,75,,33,33,25,25,63,12,6,,85,35,15,,63,46,85,,,,65',
'35,,,,,51,85,,,35,35,35,,,78,36,,,29,,6,71,78,35,50,35,,,106,12,,71',
',46,87,,,,85,42,12,,100,100,,,,,,,14,,,14,,,118,,,6,71,,,207,207,207',
'207,,,159,6,159,85,84,,,,,,,209,209,85,,,,,,31,193,209,193,209,157,193',
'157,,193,,106,75,75,152,,106,152,75,75,152,,152,85,,,,46,,33,,25,,,',
',31,207,159,102,,35,31,,,,6,71,,,,,,6,71,,,,,209,157,40,9,2,,22,,63',
',113,,,9,171,,12,12,73,63,37,,6,,,,,40,,,,6,,,152,35,152,78,152,70,152',
',,35,,35,85,6,78,211,,35,,,,,6,,6,,35,,152,,40,,46,,,,6,,6,35,,84,35',
',,,,,,,35,,,40,14,71,,,6,,,75,35,,85,,71,85,35,,,,,27,75,75,75,75,,',
'159,,,27,27,,,40,,27,27,,,,,,14,159,,,159,209,157,84,157,,157,,85,,',
',,6,,40,36,24,209,,82,209,157,,157,35,,50,,,,35,35,24,,35,,,,6,,35,35',
',54,,,35,35,,54,,,,14,6,,193,,40,193,,,,211,54,14,211,,,211,75,211,159',
'54,54,54,,54,35,,80,80,118,,,,118,157,14,35,,,,209,157,,157,,157,,,',
',54,,,,,54,54,,,54,40,31,,,,,,,,157,35,27,6,6,6,78,35,31,,,,35,35,61',
'78,,14,14,,211,,211,,211,,211,,,,14,,,,,80,118,80,,,80,80,,35,,,,54',
'211,,,,54,54,54,54,54,,,,35,,,,,,78,,,,,38,61,,6,40,,14,,,,,,35,14,6',
'80,,,,,46,,,154,,61,154,,,,35,,,,6,6,6,6,,6,35,71,35,155,155,155,6,71',
',,6,,,,,35,35,61,,,,40,,,,35,35,,,54,54,54,54,54,54,54,,,,,54,54,54',
',154,,,,6,6,6,6,,,54,,80,,85,6,,,,,,,,,,,,35,,,,,35,35,,,35,,,,,,,,',
'35,54,54,,,,,,,,,54,,,,,155,155,155,155,,155,,,,,,,,,54,,,,54,,,,,54',
',,35,,,,,35,,,61,,,80,35,,80,,80,,35,35,,,,54,,,,,155,155,155,155,54',
'54,54,,,,,155,,,,,,,,35,61,,,,61,,,,,57,,,,,154,57,,154,,,154,61,154',
',,,,61,,,57,,,,,,,,,57,57,57,,57,,,61,,,,,,,,,,,,,,,,,80,,,,,,57,,,',
',57,57,,,57,,,,,,,,,,,,,,,154,,154,,154,,154,,,,80,54,,,,,,,,80,80,',
',,,,,,154,,,,,,,,,,,,,,57,,,,,57,57,57,57,57,80,,,80,,,,,,,,,54,,,,',
',,,,,54,,80,,,,,80,,,80,,,,,54,,,,,,,,,80,,,,54,,,54,,,,,,,,54,,,,61',
',,,,,,,54,,,,,,54,,80,,57,57,57,57,57,57,57,,,,,57,57,57,,,,,,,80,,',
',,57,,,,61,,,,,,,,,,,,,,,,,,,,61,,,,54,,,,,,54,54,57,57,54,,,,,,54,54',
'57,,,,54,54,,,,,,,,,,80,,,,57,,,,57,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,',
'57,,,,,,,,,57,57,57,80,,,,,,61,,,,,,,,61,54,,,,,,54,,,,,54,54,61,,80',
',,,,,,,,,,,,,,,,,,,,,,,,,,54,,,,,,,,,,,,,,,,,54,,,,,,,,,,,,,80,,,,,',
',,,,54,,,,,,,,,,,,,,,,,,54,,57,,,,,,,,54,,54,,,,,,,,,,,,,54,54,,41,',
',,,,,54,54,41,41,41,,,,,,,,,,,41,41,,41,,57,,,,,,,,,,57,,,,,,,,,,,,',
',,57,,,,,,54,54,,,,,,57,,,57,,,54,,,,28,57,,,,,28,,,,,,,57,,,,,,57,',
',,,,,,,,,,,,,28,,,,,,,,,54,,,,,,,54,,,,,,54,54,,,28,,,,,,,,,,28,,,,',
',57,,,,,,57,57,,54,57,,,,,,57,57,,,,,57,57,,,,,,,,,,,,,,,,,,,,,,,,,41',
'41,28,,41,41,,,,,41,28,,,,34,,,,,,34,,41,,,41,41,41,41,41,41,41,41,41',
'41,41,41,41,41,41,41,41,41,41,41,41,41,,34,,57,41,,,,,57,,,41,41,57',
'57,,,,,,,41,,,,,34,,41,,41,,,41,41,,,,,,,,,,57,,28,,28,,,28,,,,,,28',
',,,57,,,,,,,,,,28,41,,41,,,,41,41,,,,,57,,,,,,,,34,,,,,,,,,34,57,,,',
',,,,,,57,,57,,,,,,,,,,,,,57,57,,,,,,,,28,57,57,,28,,,,,28,,,,,,,,,,',
',,,,41,,,,,,,,,,,28,,,,,,,,,,28,28,,,34,,34,57,57,34,,,,,,34,,,,,57',
',,41,,41,41,41,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,57,41,,41',
',,,57,,,,,,57,57,,,,,41,,,,,,,,34,41,41,,34,,,,,34,,,,,,57,,,,,,,39',
',,,,,39,,,41,,,,34,,,,,,,,,,34,34,,,,,,,,,,39,39,39,,,,,,,,,,,,,41,',
',,,,,28,,,,39,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,41,41,41,,,28,41,,28,41',
'41,41,41,,,,,41,41,,,,,,,,,,,,,,,,,,,39,,,,,41,,,41,39,,,,,,,,,,,,,',
',,,,,,41,,,,,41,,,41,,,,,,,,,,,,,,41,,,28,,,,,,28,,,41,28,,,,,34,28',
'28,,,,,28,28,,,,,,,,,41,,,,,,,39,,39,,,39,,,,,,39,,,34,41,,34,,,,,,41',
',39,,,,,,,,,,,41,41,41,41,,41,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,28,28,',
',,,,,,,41,,,,,,,,,39,,,,39,66,,,39,39,34,66,28,,,,34,,,,34,,,,,39,34',
'34,,28,,,34,34,,39,,,,66,66,66,41,41,,39,39,,,,,,28,,,,,,39,,39,,,,',
'66,,,,,28,,41,,,66,,,66,,,,28,,,,,,,,,,,,,28,,,,,,,,,,28,28,,,34,,,',
',,,,,,,34,34,,,,,,,,41,,66,,,,,,,,,66,,,,,,,,,,,34,,,,,28,28,,,28,,41',
',,,,,34,28,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,34,,,,,,,28,39,',
',,34,,28,66,39,,,,28,28,,,39,34,,,,,,,,,,34,34,,,,66,,,,,,39,,,39,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,,,,34,,,,,,66,,,,66',
',,,66,66,,,,,,,,,,,,,,,,66,,39,,,,,,39,,66,,39,,,,34,,39,39,66,66,,34',
'39,39,,,,34,34,,,66,,66,,,,,,,,,,,,,,67,,,,,,67,39,,,,,,,,,,,39,,,,',
',,,,,,,,,,,67,67,67,,,,,,,,,,,,,,,,39,,,,,,,,67,,,39,39,,,,,,67,,,67',
',,,,,,,,,,,,,,,,,,,39,39,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,67,,,,,,,',
'39,67,,,,,,,,66,,,,,,,,66,39,,,,,,,66,,,,,39,,,,,,,,,,,,,39,,,,66,,',
'66,,,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,39,,,,,39,39',
',,39,,67,,,,,,,39,,,,,,,,,,,,,,,,66,,,,,,,,,,66,,,,,,,,,,,,,,,,39,,',
',,39,,,,,,,39,,,,67,,39,39,67,,,,67,67,,,66,,,,,,,,,,,66,,67,,,,,,,',
',,67,,,,,,,,,,67,67,,,,,,,,,,,66,67,,67,,,,,,,,66,66,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,',
',,,,,,,,66,,,,,,,,,,,,66,,,,,,,,,,,,,66,,,,,,,,,,66,66,,,,,,,,,,,,,',
',,,,,,,,,,67,,,,,,,,67,,,,,,,,67,,,,,66,,,,,66,66,,,66,,,,,,,,67,66',
',67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,66,,,,,,,66,,,,,,66',
'66,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,67,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67',
',,,,,,,,,,67,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,67,,,,,,,,,,,,',
'67,,,,,,,,,,67,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,',
',67,67,,,67,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,',
',,,67,,,,,,,67,,,,,,67,67' ]
        racc_goto_check = arr = ::Array.new(3970, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   116,    15,   124,   nil,    65,    -2,   101,    32,    14,
   -88,   115,  -331,  -289,     0,  -531,  -588,  -667,  -713,   nil,
  -391,  -175,    15,   127,   -47,  -175,    68,   112,  1791,  -189,
   -81,    51,     4,  -177,  1930,   170,  -226,  -388,    -9,  2261,
   -19,  1695,   -26,  -426,   nil,  -592,   -28,   nil,   nil,   123,
  -216,    16,  -206,  -429,   839,  -355,   nil,  1217,   115,    65,
    94,   700,   nil,   -35,    22,  -191,  2575,  2958,  -499,  -240,
   -64,    -3,   nil,    27,  -272,   -52,    25,   nil,    -6,   108,
   656,  -193,    94,  -452,    72,    49,  -348,  -262,  -453,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    83,   nil,
  -490,  -191,   -46,   nil,   nil,   nil,  -325,  -664,   nil,  -646,
   nil,   nil,   nil,  -334,   nil,    88,   nil,  -427,     2,   nil,
   nil,  -549,    87,  -216,   106,   106,  -178,   107,   107,   100,
  -583,  -194,  -584,  -776,   107,  -408,  -198,  -403,  -693,   nil,
   nil,   nil,   nil,   nil,   nil,  -790,  -555,  -546,  -792,  -712,
  -637,   nil,  -362,  -547,   244,   109,  -636,  -167,  -739,  -189,
  -593,   nil,  -679,  -767,  -853,  -840,  -190,  -568,   112,  -387,
  -347,   -11,  -202,   nil,   -77,   -76,   nil,  -478,  -529,   nil,
  -287,  -789,  -356,  -501,  -631,   nil,   nil,   132,    16,   137,
   137,   141,  -279,   214,   143,   146,   146,  -540,  -373,  -373,
   nil,   nil,   157,  -496,  -324,   nil,   nil,  -439,  -509,  -168,
  -694,  -119,  -504,  -712,   nil,  -699,  -871,   nil,   nil,  -116,
  -462 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   309,     7,   360,   312,
   nil,   nil,   nil,   nil,   554,   nil,   nil,   nil,   nil,   308,
   310,   nil,   nil,   nil,   nil,    14,    15,    21,   242,   nil,
   nil,    17,   nil,   436,   243,   340,   nil,   nil,   756,   241,
   472,    24,   nil,   nil,   355,   nil,    25,    26,    27,   nil,
   715,   nil,   nil,   nil,   329,   nil,    28,   326,   451,    35,
   nil,   nil,    37,    40,    39,   nil,   238,   239,   585,   nil,
   146,   459,   145,    91,   nil,   441,   107,    47,    50,   274,
   300,   nil,   452,   nil,   453,   464,   673,   516,   298,   283,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
   nil,   nil,   284,    65,    66,    67,   nil,   nil,    68,   860,
    69,    70,    71,   nil,    72,   nil,    73,   nil,   567,    74,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   288,
   276,   723,   851,   576,   861,   783,   612,   nil,   784,   785,
  1026,   922,   600,   nil,   601,   nil,   nil,   602,   nil,   604,
   nil,   830,   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   463,   nil,   nil,   693,   nil,   nil,   504,
   nil,   nil,   nil,   nil,   nil,    90,    92,    94,   nil,   nil,
   nil,   nil,   nil,   630,   nil,   nil,   nil,   nil,   nil,   nil,
   103,   104,   nil,   nil,   893,   765,   599,   nil,   603,   901,
   615,   617,   618,   933,   621,   622,   934,   625,   628,   nil,
   303 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  3, 151, :_reduce_6,
  2, 151, :_reduce_none,
  1, 154, :_reduce_none,
  0, 158, :_reduce_9,
  3, 154, :_reduce_10,
  0, 160, :_reduce_11,
  4, 157, :_reduce_12,
  0, 165, :_reduce_13,
  6, 159, :_reduce_14,
  3, 159, :_reduce_15,
  2, 161, :_reduce_16,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  3, 166, :_reduce_19,
  2, 166, :_reduce_20,
  1, 167, :_reduce_none,
  0, 168, :_reduce_22,
  3, 167, :_reduce_23,
  0, 179, :_reduce_24,
  4, 156, :_reduce_25,
  3, 156, :_reduce_26,
  3, 156, :_reduce_27,
  3, 156, :_reduce_28,
  2, 156, :_reduce_29,
  3, 156, :_reduce_30,
  3, 156, :_reduce_31,
  3, 156, :_reduce_32,
  3, 156, :_reduce_33,
  3, 156, :_reduce_34,
  4, 156, :_reduce_35,
  1, 156, :_reduce_none,
  3, 156, :_reduce_37,
  3, 156, :_reduce_38,
  3, 156, :_reduce_39,
  1, 156, :_reduce_none,
  3, 172, :_reduce_41,
  3, 172, :_reduce_42,
  6, 172, :_reduce_43,
  5, 172, :_reduce_44,
  5, 172, :_reduce_45,
  5, 172, :_reduce_46,
  5, 172, :_reduce_47,
  3, 172, :_reduce_48,
  1, 180, :_reduce_49,
  3, 180, :_reduce_50,
  1, 180, :_reduce_none,
  1, 178, :_reduce_none,
  3, 178, :_reduce_53,
  3, 178, :_reduce_54,
  3, 178, :_reduce_55,
  2, 178, :_reduce_56,
  1, 178, :_reduce_none,
  1, 171, :_reduce_58,
  0, 191, :_reduce_59,
  0, 192, :_reduce_60,
  4, 189, :_reduce_61,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 194, :_reduce_none,
  4, 194, :_reduce_65,
  0, 202, :_reduce_66,
  4, 199, :_reduce_67,
  1, 201, :_reduce_68,
  2, 193, :_reduce_69,
  3, 193, :_reduce_70,
  4, 193, :_reduce_71,
  5, 193, :_reduce_72,
  4, 193, :_reduce_73,
  5, 193, :_reduce_74,
  2, 193, :_reduce_75,
  2, 193, :_reduce_76,
  2, 193, :_reduce_77,
  2, 193, :_reduce_78,
  2, 193, :_reduce_79,
  1, 173, :_reduce_none,
  3, 173, :_reduce_81,
  1, 207, :_reduce_none,
  3, 207, :_reduce_83,
  1, 206, :_reduce_84,
  2, 206, :_reduce_85,
  3, 206, :_reduce_86,
  5, 206, :_reduce_87,
  2, 206, :_reduce_88,
  4, 206, :_reduce_89,
  2, 206, :_reduce_90,
  4, 206, :_reduce_91,
  1, 206, :_reduce_92,
  3, 206, :_reduce_93,
  1, 210, :_reduce_none,
  3, 210, :_reduce_95,
  2, 209, :_reduce_96,
  3, 209, :_reduce_97,
  1, 212, :_reduce_98,
  3, 212, :_reduce_99,
  1, 211, :_reduce_100,
  1, 211, :_reduce_101,
  4, 211, :_reduce_102,
  3, 211, :_reduce_103,
  3, 211, :_reduce_104,
  3, 211, :_reduce_105,
  3, 211, :_reduce_106,
  2, 211, :_reduce_107,
  1, 211, :_reduce_108,
  1, 175, :_reduce_109,
  1, 175, :_reduce_110,
  4, 175, :_reduce_111,
  3, 175, :_reduce_112,
  3, 175, :_reduce_113,
  3, 175, :_reduce_114,
  3, 175, :_reduce_115,
  2, 175, :_reduce_116,
  1, 175, :_reduce_117,
  1, 215, :_reduce_118,
  1, 215, :_reduce_none,
  2, 216, :_reduce_120,
  1, 216, :_reduce_121,
  3, 216, :_reduce_122,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_126,
  1, 217, :_reduce_none,
  1, 169, :_reduce_128,
  1, 169, :_reduce_none,
  1, 170, :_reduce_130,
  0, 221, :_reduce_131,
  4, 170, :_reduce_132,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 188, :_reduce_204,
  3, 188, :_reduce_205,
  6, 188, :_reduce_206,
  5, 188, :_reduce_207,
  5, 188, :_reduce_208,
  5, 188, :_reduce_209,
  5, 188, :_reduce_210,
  4, 188, :_reduce_211,
  3, 188, :_reduce_212,
  3, 188, :_reduce_213,
  3, 188, :_reduce_214,
  2, 188, :_reduce_215,
  2, 188, :_reduce_216,
  3, 188, :_reduce_217,
  3, 188, :_reduce_218,
  3, 188, :_reduce_219,
  3, 188, :_reduce_220,
  3, 188, :_reduce_221,
  3, 188, :_reduce_222,
  4, 188, :_reduce_223,
  2, 188, :_reduce_224,
  2, 188, :_reduce_225,
  3, 188, :_reduce_226,
  3, 188, :_reduce_227,
  3, 188, :_reduce_228,
  3, 188, :_reduce_229,
  1, 188, :_reduce_none,
  3, 188, :_reduce_231,
  3, 188, :_reduce_232,
  3, 188, :_reduce_233,
  3, 188, :_reduce_234,
  3, 188, :_reduce_235,
  2, 188, :_reduce_236,
  2, 188, :_reduce_237,
  3, 188, :_reduce_238,
  3, 188, :_reduce_239,
  3, 188, :_reduce_240,
  3, 188, :_reduce_241,
  3, 188, :_reduce_242,
  6, 188, :_reduce_243,
  1, 188, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  3, 224, :_reduce_249,
  3, 224, :_reduce_250,
  1, 227, :_reduce_251,
  1, 228, :_reduce_none,
  2, 228, :_reduce_253,
  4, 228, :_reduce_254,
  2, 228, :_reduce_255,
  1, 222, :_reduce_none,
  3, 222, :_reduce_257,
  3, 232, :_reduce_258,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_263,
  4, 183, :_reduce_264,
  2, 183, :_reduce_265,
  1, 205, :_reduce_266,
  2, 205, :_reduce_267,
  2, 205, :_reduce_268,
  4, 205, :_reduce_269,
  1, 205, :_reduce_270,
  0, 236, :_reduce_271,
  2, 198, :_reduce_272,
  2, 235, :_reduce_273,
  2, 234, :_reduce_274,
  1, 234, :_reduce_none,
  1, 229, :_reduce_276,
  2, 229, :_reduce_277,
  3, 229, :_reduce_278,
  4, 229, :_reduce_279,
  1, 177, :_reduce_280,
  1, 177, :_reduce_281,
  3, 176, :_reduce_282,
  4, 176, :_reduce_283,
  2, 176, :_reduce_284,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_295,
  0, 271, :_reduce_296,
  4, 225, :_reduce_297,
  0, 272, :_reduce_298,
  3, 225, :_reduce_299,
  0, 273, :_reduce_300,
  4, 225, :_reduce_301,
  3, 225, :_reduce_302,
  3, 225, :_reduce_303,
  2, 225, :_reduce_304,
  0, 274, :_reduce_305,
  4, 225, :_reduce_306,
  0, 275, :_reduce_307,
  4, 225, :_reduce_308,
  1, 225, :_reduce_309,
  4, 225, :_reduce_310,
  3, 225, :_reduce_311,
  1, 225, :_reduce_312,
  5, 225, :_reduce_313,
  4, 225, :_reduce_314,
  3, 225, :_reduce_315,
  2, 225, :_reduce_316,
  1, 225, :_reduce_none,
  2, 225, :_reduce_318,
  1, 225, :_reduce_319,
  6, 225, :_reduce_320,
  6, 225, :_reduce_321,
  4, 225, :_reduce_322,
  4, 225, :_reduce_323,
  5, 225, :_reduce_324,
  4, 225, :_reduce_325,
  6, 225, :_reduce_326,
  0, 276, :_reduce_327,
  0, 277, :_reduce_328,
  7, 225, :_reduce_329,
  0, 278, :_reduce_330,
  0, 279, :_reduce_331,
  0, 280, :_reduce_332,
  9, 225, :_reduce_333,
  0, 281, :_reduce_334,
  0, 282, :_reduce_335,
  6, 225, :_reduce_336,
  0, 283, :_reduce_337,
  6, 225, :_reduce_338,
  0, 284, :_reduce_339,
  0, 285, :_reduce_340,
  9, 225, :_reduce_341,
  1, 225, :_reduce_342,
  1, 225, :_reduce_343,
  1, 225, :_reduce_344,
  1, 225, :_reduce_345,
  1, 182, :_reduce_346,
  1, 246, :_reduce_none,
  1, 252, :_reduce_none,
  1, 255, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 261, :_reduce_none,
  1, 263, :_reduce_354,
  1, 266, :_reduce_355,
  1, 267, :_reduce_356,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 163, :_reduce_none,
  1, 291, :_reduce_none,
  1, 247, :_reduce_none,
  1, 204, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 253, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 254, :_reduce_none,
  5, 254, :_reduce_372,
  1, 256, :_reduce_none,
  2, 256, :_reduce_374,
  1, 262, :_reduce_none,
  1, 262, :_reduce_376,
  1, 292, :_reduce_none,
  3, 292, :_reduce_378,
  1, 295, :_reduce_379,
  3, 295, :_reduce_380,
  1, 294, :_reduce_381,
  3, 294, :_reduce_382,
  5, 294, :_reduce_383,
  1, 294, :_reduce_384,
  3, 294, :_reduce_385,
  2, 296, :_reduce_386,
  1, 296, :_reduce_387,
  4, 297, :_reduce_388,
  2, 297, :_reduce_389,
  2, 297, :_reduce_390,
  1, 297, :_reduce_391,
  2, 302, :_reduce_392,
  1, 302, :_reduce_none,
  6, 303, :_reduce_394,
  8, 303, :_reduce_395,
  4, 303, :_reduce_396,
  6, 303, :_reduce_397,
  4, 303, :_reduce_398,
  2, 303, :_reduce_399,
  6, 303, :_reduce_400,
  2, 303, :_reduce_401,
  4, 303, :_reduce_402,
  6, 303, :_reduce_403,
  2, 303, :_reduce_404,
  4, 303, :_reduce_405,
  2, 303, :_reduce_406,
  4, 303, :_reduce_407,
  1, 303, :_reduce_408,
  1, 307, :_reduce_409,
  1, 307, :_reduce_410,
  3, 308, :_reduce_411,
  1, 308, :_reduce_412,
  4, 308, :_reduce_413,
  1, 309, :_reduce_none,
  4, 309, :_reduce_415,
  1, 310, :_reduce_416,
  3, 310, :_reduce_417,
  1, 311, :_reduce_418,
  1, 311, :_reduce_none,
  0, 315, :_reduce_420,
  0, 316, :_reduce_421,
  5, 251, :_reduce_422,
  4, 313, :_reduce_423,
  1, 313, :_reduce_424,
  3, 314, :_reduce_425,
  3, 314, :_reduce_426,
  3, 318, :_reduce_427,
  2, 195, :_reduce_428,
  4, 195, :_reduce_429,
  5, 195, :_reduce_430,
  5, 195, :_reduce_431,
  2, 250, :_reduce_432,
  4, 250, :_reduce_433,
  4, 250, :_reduce_434,
  3, 250, :_reduce_435,
  3, 250, :_reduce_436,
  3, 250, :_reduce_437,
  2, 250, :_reduce_438,
  1, 250, :_reduce_439,
  4, 250, :_reduce_440,
  0, 321, :_reduce_441,
  4, 249, :_reduce_442,
  0, 322, :_reduce_443,
  4, 249, :_reduce_444,
  0, 323, :_reduce_445,
  0, 324, :_reduce_446,
  4, 200, :_reduce_447,
  0, 326, :_reduce_448,
  0, 327, :_reduce_449,
  4, 319, :_reduce_450,
  1, 325, :_reduce_451,
  2, 325, :_reduce_452,
  3, 325, :_reduce_453,
  4, 325, :_reduce_454,
  0, 329, :_reduce_455,
  6, 260, :_reduce_456,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  6, 162, :_reduce_459,
  0, 162, :_reduce_460,
  1, 330, :_reduce_461,
  1, 330, :_reduce_none,
  1, 330, :_reduce_none,
  2, 331, :_reduce_464,
  1, 331, :_reduce_none,
  2, 164, :_reduce_466,
  1, 164, :_reduce_none,
  1, 237, :_reduce_468,
  1, 237, :_reduce_none,
  1, 238, :_reduce_470,
  1, 333, :_reduce_471,
  1, 333, :_reduce_none,
  2, 333, :_reduce_473,
  3, 334, :_reduce_474,
  1, 334, :_reduce_475,
  3, 239, :_reduce_476,
  3, 240, :_reduce_477,
  3, 241, :_reduce_478,
  3, 241, :_reduce_479,
  1, 338, :_reduce_480,
  3, 338, :_reduce_481,
  1, 339, :_reduce_none,
  2, 339, :_reduce_483,
  3, 243, :_reduce_484,
  3, 243, :_reduce_485,
  1, 341, :_reduce_486,
  3, 341, :_reduce_487,
  3, 242, :_reduce_488,
  3, 242, :_reduce_489,
  3, 244, :_reduce_490,
  3, 244, :_reduce_491,
  1, 342, :_reduce_492,
  3, 342, :_reduce_493,
  1, 343, :_reduce_494,
  3, 343, :_reduce_495,
  1, 335, :_reduce_496,
  2, 335, :_reduce_497,
  1, 336, :_reduce_498,
  2, 336, :_reduce_499,
  1, 337, :_reduce_500,
  2, 337, :_reduce_501,
  1, 340, :_reduce_502,
  0, 345, :_reduce_503,
  3, 340, :_reduce_504,
  0, 346, :_reduce_505,
  4, 340, :_reduce_506,
  1, 344, :_reduce_507,
  1, 344, :_reduce_508,
  1, 344, :_reduce_509,
  1, 344, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 347, :_reduce_513,
  1, 347, :_reduce_514,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  3, 348, :_reduce_519,
  1, 332, :_reduce_none,
  2, 332, :_reduce_521,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_531,
  1, 214, :_reduce_532,
  1, 214, :_reduce_533,
  1, 214, :_reduce_534,
  1, 214, :_reduce_535,
  1, 214, :_reduce_536,
  1, 214, :_reduce_537,
  1, 245, :_reduce_538,
  1, 245, :_reduce_539,
  1, 181, :_reduce_540,
  1, 181, :_reduce_541,
  1, 186, :_reduce_542,
  1, 186, :_reduce_543,
  0, 350, :_reduce_544,
  4, 264, :_reduce_545,
  1, 264, :_reduce_546,
  3, 268, :_reduce_547,
  0, 352, :_reduce_548,
  3, 268, :_reduce_549,
  4, 351, :_reduce_550,
  2, 351, :_reduce_551,
  2, 351, :_reduce_552,
  1, 351, :_reduce_none,
  2, 354, :_reduce_554,
  0, 354, :_reduce_555,
  6, 317, :_reduce_556,
  8, 317, :_reduce_557,
  4, 317, :_reduce_558,
  6, 317, :_reduce_559,
  4, 317, :_reduce_560,
  6, 317, :_reduce_561,
  2, 317, :_reduce_562,
  4, 317, :_reduce_563,
  6, 317, :_reduce_564,
  2, 317, :_reduce_565,
  4, 317, :_reduce_566,
  2, 317, :_reduce_567,
  4, 317, :_reduce_568,
  1, 317, :_reduce_569,
  0, 317, :_reduce_570,
  1, 312, :_reduce_571,
  1, 312, :_reduce_572,
  1, 312, :_reduce_573,
  1, 312, :_reduce_574,
  1, 293, :_reduce_none,
  1, 293, :_reduce_576,
  1, 356, :_reduce_none,
  1, 357, :_reduce_none,
  3, 357, :_reduce_579,
  1, 304, :_reduce_580,
  3, 304, :_reduce_581,
  1, 358, :_reduce_none,
  2, 359, :_reduce_583,
  1, 359, :_reduce_584,
  2, 360, :_reduce_585,
  1, 360, :_reduce_586,
  1, 298, :_reduce_none,
  3, 298, :_reduce_588,
  1, 353, :_reduce_none,
  3, 353, :_reduce_590,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 299, :_reduce_593,
  1, 299, :_reduce_594,
  3, 362, :_reduce_595,
  3, 363, :_reduce_596,
  1, 305, :_reduce_597,
  3, 305, :_reduce_598,
  1, 355, :_reduce_599,
  3, 355, :_reduce_600,
  1, 364, :_reduce_none,
  1, 364, :_reduce_none,
  2, 306, :_reduce_603,
  1, 306, :_reduce_604,
  1, 365, :_reduce_none,
  1, 365, :_reduce_none,
  2, 301, :_reduce_607,
  2, 300, :_reduce_608,
  0, 300, :_reduce_609,
  1, 269, :_reduce_none,
  0, 366, :_reduce_611,
  4, 269, :_reduce_612,
  1, 248, :_reduce_613,
  2, 248, :_reduce_none,
  1, 231, :_reduce_none,
  3, 231, :_reduce_616,
  3, 367, :_reduce_617,
  2, 367, :_reduce_618,
  4, 367, :_reduce_619,
  2, 367, :_reduce_620,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 208, :_reduce_none,
  2, 184, :_reduce_none,
  0, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 265, :_reduce_646,
  1, 265, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_649,
  0, 153, :_reduce_650 ]

racc_reduce_n = 651

racc_shift_n = 1094

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tLONELY => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tLOWEST => 145,
  :tEQL => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tBDOT2",
  "tBDOT3",
  "tLOWEST",
  "tEQL",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "@5",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@6",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@7",
  "@8",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@9",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@10",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "@28",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "case_args",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "ssym",
  "dsym",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 11
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      # TODO: move down to main match so I can just use val

                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug 12

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      result = val[2] # wtf?

    result
end

def _reduce_24(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_27(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_28(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_29(val, _values, result)
                      result = val[1]

    result
end

def _reduce_30(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_31(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_33(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_34(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_35(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug 13
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_38(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_43(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_44(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_45(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_47(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_48(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_49(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

def _reduce_50(val, _values, result)
                      expr, (_, line), resbody = val

                      expr = value_expr expr
                      ary  = s(:array).line line
                      result = new_rescue(expr, new_resbody(ary, resbody))

    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_55(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_56(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_60(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_61(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

def _reduce_65(val, _values, result)
                      blk, _, (msg, _line), args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_66(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_67(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      # self.env.unextend

    result
end

def _reduce_68(val, _values, result)
                      (msg, line), = val
                      result = new_call(nil, msg.to_sym).line line

    result
end

def _reduce_69(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_70(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_71(val, _values, result)
                      lhs, callop, (op, _), args = val

                      result = new_call lhs, op.to_sym, args, callop
                      result.line lhs.line

    result
end

def _reduce_72(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_73(val, _values, result)
                      lhs, _, (id, line), args = val

                      result = new_call lhs, id.to_sym, args
                      result.line line

    result
end

def _reduce_74(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_75(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_76(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_78(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_79(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      result = val[1]

    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_84(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_85(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_86(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_87(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_88(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_89(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_90(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_91(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_92(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_93(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 94 omitted

def _reduce_95(val, _values, result)
                      result = val[1]

    result
end

def _reduce_96(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_97(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_98(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_99(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_102(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_103(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_104(val, _values, result)
                      recv, _, (id, _line) = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_105(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 14
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, (id, _line) = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_107(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 15
                        yyerror "dynamic constant assignment"
                      end

                      _, (id, l) = val

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_108(val, _values, result)
                      ref, = val

                      self.backref_assign_error ref

    result
end

def _reduce_109(val, _values, result)
                      var, = val

                      result = self.assignable var

    result
end

def _reduce_110(val, _values, result)
                      var, = val

                      result = self.assignable var

                      debug 16

    result
end

def _reduce_111(val, _values, result)
                      lhs, _, args, _ = val

                      result = self.aryset lhs, args

    result
end

def _reduce_112(val, _values, result)
                      lhs, op, (id, _line) = val

                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_113(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_attrasgn lhs, id

    result
end

def _reduce_114(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_115(val, _values, result)
                      expr, _, (id, _line) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 17
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      _, (id, l) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 18
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_117(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_118(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      _, (name, line) = val
                      result = s(:colon3, name.to_sym).line line

    result
end

def _reduce_121(val, _values, result)
                      (id, line), = val
                      result = [id.to_sym, line] # TODO: sexp?

    result
end

def _reduce_122(val, _values, result)
                      pval, _, (name, _line) = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

def _reduce_126(val, _values, result)
                      lexer.lex_state = EXPR_END

    result
end

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      (id, line), = val

                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

def _reduce_204(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_205(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_209(val, _values, result)
                      lhs, _, (id, _line), (op, _), rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_210(val, _values, result)
                      lhs1, _, (lhs2, _line), op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_211(val, _values, result)
                      _, (lhs, line), op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_212(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_213(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_214(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_215(val, _values, result)
                      v1, _ = val
                      v2 = nil

                      result = s(:dot2, v1, v2).line v1.line

    result
end

def _reduce_216(val, _values, result)
                      v1, _ = val
                      v2 = nil

                      result = s(:dot3, v1, v2).line v1.line

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      _, (num, line), _, arg = val
                      lit = s(:lit, num).line line
                      result = new_call(new_call(lit, :"**", argl(arg)), :"-@")


    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_235(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_236(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_242(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_243(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, (op, _), rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_250(val, _values, result)
                      lhs, (op, _), rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_258(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = args val

    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_267(val, _values, result)
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_270(val, _values, result)
                      result = call_args val

    result
end

def _reduce_271(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_272(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_273(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_274(val, _values, result)
                      result = val[1]

    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_277(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_278(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_279(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_283(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_284(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      (msg, line), = val
                      result = new_call nil, msg.to_sym
                      result.line line

    result
end

def _reduce_296(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_298(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_299(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_301(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_303(val, _values, result)
                      expr, _, (id, _line) = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_304(val, _values, result)
                      _, (id, line) = val

                      result = s(:colon3, id.to_sym).line line

    result
end

def _reduce_305(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_306(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_308(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_310(val, _values, result)
                      (_, line), _, args, _ = val

                      result = new_yield(args).line line

    result
end

def _reduce_311(val, _values, result)
                      (_, line), _, _ = val

                      result = new_yield.line line

    result
end

def _reduce_312(val, _values, result)
                      (_, line), = val

                      result = new_yield.line line

    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_314(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_315(val, _values, result)
                      debug 20

    result
end

def _reduce_316(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 317 omitted

def _reduce_318(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_319(val, _values, result)
                      expr, = val
                      result = expr

    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_325(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_326(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_329(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_330(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_331(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_334(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_335(val, _values, result)
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_336(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

    result
end

def _reduce_338(val, _values, result)
                      result, in_def = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.ignore_body_comments

    result
end

def _reduce_339(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_340(val, _values, result)
                      result = self.in_def

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL

    result
end

def _reduce_341(val, _values, result)
                      # [kdef, recv, _, _, (name, line), in_def, args, body, kend]
                      # =>
                      # [kdef, recv, (name, line), in_def, args, body, kend]

                      val.delete_at 3
                      val.delete_at 2

                      result, in_def = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.ignore_body_comments

    result
end

def _reduce_342(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_343(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_346(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_355(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_356(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 373 omitted

def _reduce_374(val, _values, result)
                      result = val[1]

    result
end

# reduce 375 omitted

def _reduce_376(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = val[1]

    result
end

def _reduce_379(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_380(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_381(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_382(val, _values, result)
                      args, _, rest = val

                      result = block_var args, rest

    result
end

def _reduce_383(val, _values, result)
                      lhs, _, splat, _, rhs = val

                      result = block_var lhs, splat, rhs

    result
end

def _reduce_384(val, _values, result)
                      rest, = val

                      result = block_var rest

    result
end

def _reduce_385(val, _values, result)
                      splat, _, rest = val

                      result = block_var splat, rest

    result
end

def _reduce_386(val, _values, result)
                      _, (id, line) = val

                      result = args ["*#{id}".to_sym]
                      result.line line

    result
end

def _reduce_387(val, _values, result)
                      result = args [:*]
                      result.line lexer.lineno # FIX: tSTAR -> line

    result
end

def _reduce_388(val, _values, result)
                      result = call_args val

    result
end

def _reduce_389(val, _values, result)
                      result = call_args val

    result
end

def _reduce_390(val, _values, result)
                      result = call_args val

    result
end

def _reduce_391(val, _values, result)
                      (id, line), = val
                      result = call_args [id]
                      result.line line

    result
end

def _reduce_392(val, _values, result)
                      result = args val

    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

def _reduce_396(val, _values, result)
                      result = args val

    result
end

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args val

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
 result = 0
    result
end

def _reduce_410(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_411(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_412(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_413(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 414 omitted

def _reduce_415(val, _values, result)
                      result = args val

    result
end

def _reduce_416(val, _values, result)
                      result = args val

    result
end

def _reduce_417(val, _values, result)
                      result = args val

    result
end

def _reduce_418(val, _values, result)
                      (id, line), = val
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 419 omitted

def _reduce_420(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_421(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_422(val, _values, result)
                      _, (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_423(val, _values, result)
                      result = args val

    result
end

def _reduce_424(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_425(val, _values, result)
                      result = val[1]

    result
end

def _reduce_426(val, _values, result)
                      result = val[1]

    result
end

def _reduce_427(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_428(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      cmd, blk = val

                      syntax_error "Both block arg and actual block given." if
                        cmd.block_pass?

                      if inverted? val then
                        val = invert_block_call val
                        cmd, blk = val
                      end

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_429(val, _values, result)
                      lhs, _, (id, _line), args = val

                      result = new_call lhs, id.to_sym, args

    result
end

def _reduce_430(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_431(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_432(val, _values, result)
                      call, args = val

                      result = call.concat args.sexp_body if args

    result
end

def _reduce_433(val, _values, result)
                      recv, call_op, (op, _line), args = val

                      result = new_call recv, op.to_sym, args, call_op

    result
end

def _reduce_434(val, _values, result)
                      recv, _, (op, _line), args = val

                      result = new_call recv, op.to_sym, args

    result
end

def _reduce_435(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_call lhs, id.to_sym

    result
end

def _reduce_436(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_438(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_439(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_440(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_441(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_442(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_443(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_444(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_445(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_446(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_447(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_448(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_449(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_450(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_451(val, _values, result)
                      arg, = val

                      result = s(:array, arg).line arg.line

    result
end

def _reduce_452(val, _values, result)
                      _, arg = val

                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_453(val, _values, result)
                      args, _, id = val

                      result = self.list_append args, id

    result
end

def _reduce_454(val, _values, result)
                      args, _, _, id = val

                      result = self.list_append args, s(:splat, id).line(id.line)

    result
end

def _reduce_455(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_456(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line val[1]
                      result << val[5] if val[5]

    result
end

# reduce 457 omitted

# reduce 458 omitted

def _reduce_459(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_460(val, _values, result)
                      result = nil

    result
end

def _reduce_461(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = val[1]

    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      (lit, line), = val
                      result = s(:lit, lit).line line

    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_471(val, _values, result)
                      debug 37

    result
end

# reduce 472 omitted

def _reduce_473(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_474(val, _values, result)
                      (_, line), str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_DEDENT

                      result = str.line line

    result
end

def _reduce_475(val, _values, result)
                      result = new_string val

    result
end

def _reduce_476(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_477(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_478(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_479(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_480(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_481(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 482 omitted

def _reduce_483(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_484(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_485(val, _values, result)
                      (_, line), list, _, = val
                      list.line line
                      result = list

    result
end

def _reduce_486(val, _values, result)
                      result = new_symbol_list

    result
end

def _reduce_487(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_488(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_489(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_490(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_491(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_492(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_493(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_494(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_495(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_496(val, _values, result)
                      line = prev_value_to_lineno _values.last
                      result = s(:str, +"").line line

    result
end

def _reduce_497(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_498(val, _values, result)
                      result = nil

    result
end

def _reduce_499(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_500(val, _values, result)
                      result = nil

    result
end

def _reduce_501(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_502(val, _values, result)
                      result = new_string val

    result
end

def _reduce_503(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_504(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_505(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_506(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.pop
                      lexer.cmdarg.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug 38
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_507(val, _values, result)
                      (id, line), = val
                      result = s(:gvar, id.to_sym).line line

    result
end

def _reduce_508(val, _values, result)
                      (id, line), = val
                      result = s(:ivar, id.to_sym).line line

    result
end

def _reduce_509(val, _values, result)
                      (id, line), = val
                      result = s(:cvar, id.to_sym).line line

    result
end

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      _, (id, line) = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

def _reduce_514(val, _values, result)
                      (id, line), = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug 39
                      end

    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      _, (num, line) = val
                      result = [-num, line]

    result
end

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

def _reduce_531(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_536(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_537(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_538(val, _values, result)
                      raise "NO: #{val.inspect}" if Sexp === val.first
                      (var, line), = val
                      result = Sexp === var ? var : self.gettable(var)
                      result.line line

    result
end

def _reduce_539(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_540(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_541(val, _values, result)
                      result = self.assignable val[0]
                      debug 40

    result
end

def _reduce_542(val, _values, result)
                      (ref, line), = val
                      result = s(:nth_ref, ref).line line

    result
end

def _reduce_543(val, _values, result)
                      (ref, line), = val
                      result = s(:back_ref, ref).line line

    result
end

def _reduce_544(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_545(val, _values, result)
                      result = val[2]

    result
end

def _reduce_546(val, _values, result)
                      result = nil

    result
end

def _reduce_547(val, _values, result)
                      result = end_args val

    result
end

def _reduce_548(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_549(val, _values, result)
                      result = end_args val

    result
end

def _reduce_550(val, _values, result)
                      result = args val

    result
end

def _reduce_551(val, _values, result)
                      result = args val

    result
end

def _reduce_552(val, _values, result)
                      result = args val

    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]

    result
end

def _reduce_555(val, _values, result)
                      result = nil

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val
                      # result.line lexer.lineno

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_573(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_574(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      (id, line), = val
                      identifier = id.to_sym
                      self.env[identifier] = :lvar

                      result = [identifier, line]

    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      _, margs, _ = val

                      result = margs

    result
end

def _reduce_580(val, _values, result)
                      result = new_arg val

    result
end

def _reduce_581(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << (Sexp === item ? item : item.first)

    result
end

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_584(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_585(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_586(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      result = args val

    result
end

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      _, (id, line) = val

                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"**#{name}", line]

    result
end

def _reduce_594(val, _values, result)
                      id = :"**"
                      self.env[id] = :lvar # TODO: needed?!?
                      result = [id, lexer.lineno] # TODO: tPOW/tDSTAR include lineno

    result
end

def _reduce_595(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs
                      # TODO: detect duplicate names

    result
end

def _reduce_596(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs

    result
end

def _reduce_597(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_598(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_599(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_600(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      _, (id, line) = val
                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"*#{name}", line]

    result
end

def _reduce_604(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = [name, lexer.lineno] # FIX: tSTAR to include lineno

    result
end

# reduce 605 omitted

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      _, (id, line) = val
                      identifier = id.to_sym

                      self.env[identifier] = :lvar
                      result = ["&#{identifier}".to_sym, line]

    result
end

def _reduce_608(val, _values, result)
                      _, arg = val
                      result = arg

    result
end

def _reduce_609(val, _values, result)
                      result = nil

    result
end

# reduce 610 omitted

def _reduce_611(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_612(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_613(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 614 omitted

# reduce 615 omitted

def _reduce_616(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_617(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_618(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_619(val, _values, result)
                      (_, line), sym, _, value = val

                      sym.sexp_type = :dsym

                      result = s(:array, sym, value).line line

    result
end

def _reduce_620(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

# reduce 645 omitted

def _reduce_646(val, _values, result)
 yyerrok
    result
end

# reduce 647 omitted

# reduce 648 omitted

def _reduce_649(val, _values, result)
 yyerrok
    result
end

def _reduce_650(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby26Parser
