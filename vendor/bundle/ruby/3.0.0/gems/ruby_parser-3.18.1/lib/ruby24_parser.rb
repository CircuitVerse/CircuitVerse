#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby24Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-524,631,568,224,225,-109,-95,-524,-524,-524,-110,568,-524,-524,-524',
'-103,-524,-117,568,224,225,-81,568,647,-524,285,-524,-524,-524,-116',
'234,-109,-538,650,3,-539,-524,-524,230,-524,-524,-524,-524,-524,-112',
'280,729,224,225,728,-110,95,-105,-114,568,887,740,-104,729,96,126,731',
'633,632,629,-111,235,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524',
'-524,-524,-524,-524,-117,-103,-524,-524,-524,646,-524,-524,-109,282',
'-524,-110,235,-524,-524,649,-524,285,-524,221,-524,231,-524,-524,-524',
'-524,-524,-524,-524,-100,-524,287,-524,222,-101,130,-103,-116,-105,-103',
'129,-108,-622,-104,130,-524,-524,-524,-524,129,-524,130,-524,-107,-103',
'130,129,-524,-527,-112,129,-524,-114,-524,-109,-527,-527,-527,-103,-109',
'-527,-527,-527,-105,-527,130,-105,-105,-104,886,129,-104,-527,-110,-527',
'-527,-527,130,-110,-102,949,-105,129,-111,-527,-527,-104,-527,-527,-527',
'-527,-527,-113,-102,287,-115,-113,285,-115,-524,832,224,225,832,-117',
'-527,-524,-534,232,-117,224,225,-527,223,-534,-527,-527,-527,-527,-527',
'-527,-527,-527,-527,-527,-527,-527,-527,-527,108,109,-527,-527,-527',
'831,-527,-527,831,849,-527,285,-116,-527,-527,850,-527,-116,-527,226',
'-527,-108,-527,-527,-527,-527,-527,-527,-527,477,-527,-102,-527,-622',
'-112,-623,-117,-114,631,-112,631,-622,-114,275,-623,-527,-527,-527,-527',
'232,-527,-301,-527,337,547,287,823,-527,-301,-301,-301,-527,235,-527',
'-301,-301,-102,-301,-111,-102,616,235,-104,-111,-106,-538,282,-113,110',
'111,-115,619,-113,824,-102,-115,-117,-301,-301,668,-301,-301,-301,-301',
'-301,108,109,-533,287,633,632,633,632,338,-533,631,-117,130,794,235',
'796,-116,129,-112,627,626,-619,-100,-301,-301,-301,-301,-301,-301,-301',
'-301,-301,-301,-301,-301,-301,-301,-109,370,-301,-301,-301,230,674,752',
'-114,669,-301,753,229,-301,-112,-620,620,863,-301,575,-301,227,-301',
'-301,-301,-301,-301,-301,-301,616,-301,-344,-301,395,633,632,629,-524',
'-344,-539,619,110,111,547,-524,-301,-301,-344,-106,-619,-301,-626,920',
'-524,702,810,398,-301,-626,-626,-626,-301,401,-115,-626,-626,-114,-626',
'-527,231,-535,-619,404,627,626,-527,-626,-535,631,255,-620,-101,230',
'421,-527,-107,631,-626,-626,474,-626,-626,-626,-626,-626,-344,-110,-536',
'475,-532,-116,-524,-620,-529,-536,631,-532,620,426,-111,-529,252,-111',
'-536,729,254,253,731,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,-626,-527,476,-626,-626,-626,-537,675,633,632,634,-626',
'478,-537,-626,231,633,632,639,-626,631,-626,-537,-626,-626,-626,-626',
'-626,-626,-626,-536,-626,-626,-626,668,633,632,644,479,611,234,608,607',
'606,616,609,-626,-626,508,-104,-530,-626,517,230,-531,619,593,-530,-626',
'-626,540,-531,-626,594,-113,520,-626,-626,-626,538,-537,-626,-626,-626',
'255,-626,-103,614,272,273,522,633,632,651,-626,-626,-626,-626,627,626',
'729,-112,-626,731,235,-626,-626,1051,-626,-626,-626,-626,-626,130,-80',
'-292,252,235,129,230,254,253,-292,271,270,631,550,231,636,130,533,-292',
'620,534,129,475,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,859,863,-626,-626,-626,-626,825,-626,224,225,-626,669',
'-626,-626,-626,541,-626,-622,-626,292,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,-292,-626,-626,-626,231,235,423,633,632,130,-626,425',
'424,282,129,230,-626,-626,-626,-626,810,-626,579,-626,-105,130,627,626',
'-626,-301,129,577,-626,544,-113,548,-301,-301,-301,-114,-626,-301,-301',
'-301,611,-301,608,607,606,616,609,230,859,863,130,-301,-301,-301,661',
'129,619,255,-102,235,575,-301,-301,659,-301,-301,-301,-301,-301,414',
'580,581,638,-111,642,231,645,648,614,597,611,655,608,607,606,-274,609',
'624,623,627,626,657,-301,-301,-301,-301,-301,-301,-301,-301,-301,-301',
'-301,-301,-301,-301,658,662,-301,-301,-301,231,826,-301,235,666,-301',
'667,782,-301,-301,282,-301,620,-301,679,-301,786,-301,-301,-301,-301',
'-301,-301,-301,255,-301,255,-301,611,255,608,607,606,616,609,133,134',
'135,136,137,-301,-301,-301,-301,619,-301,-301,-301,255,686,235,235,-301',
'-301,-301,-301,-301,421,-115,-301,-301,235,-301,-302,230,-95,614,706',
'235,553,-302,755,717,722,-302,624,623,627,626,-302,757,-302,-301,-301',
'-301,-301,-301,-301,-301,-301,-302,-301,-301,725,235,732,-623,733,522',
'-301,-301,736,725,611,-623,608,607,606,-301,609,725,620,575,-301,-301',
'-301,-301,-301,-301,-301,-301,-301,-301,-301,-301,-301,-301,-302,231',
'-301,-301,-301,725,674,759,764,770,-301,-302,773,-301,782,774,776,255',
'-301,778,-301,-301,-301,-301,-301,-301,-301,-301,-301,-301,-301,611',
'-301,608,607,606,616,609,611,780,608,607,606,789,609,-301,-301,619,-301',
'252,-301,-626,790,254,253,250,251,-301,-626,-626,-626,-301,791,-115',
'-626,-626,797,-626,230,614,133,134,135,136,137,1035,-626,798,624,623',
'627,626,230,-275,757,811,508,-626,-626,1041,-626,-626,-626,-626,-626',
'909,910,230,1039,911,124,125,508,235,1035,828,611,275,608,607,606,837',
'609,757,620,839,520,522,-626,-626,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,-626,-626,231,717,-626,-626,-626,611,675,608,607,606',
'-626,609,782,-626,231,235,282,255,-626,282,-626,786,-626,-626,-626,-626',
'-626,-626,-626,231,-626,-626,-626,265,266,1016,717,608,607,606,255,609',
'863,782,725,-626,-626,235,-626,252,-626,258,786,254,253,250,251,-626',
'-437,235,904,-626,905,-113,235,-437,-437,-437,914,-276,-437,-437,-437',
'611,-437,608,607,606,616,609,255,235,919,-437,-437,-437,936,717,-274',
'619,941,725,725,725,-437,-437,235,-437,-437,-437,-437,-437,611,725,608',
'607,606,725,609,235,963,614,252,235,773,966,254,253,250,251,624,623',
'627,626,968,-437,-437,-437,-437,-437,-437,-437,-437,-437,-437,-437,-437',
'-437,-437,970,782,-437,-437,-437,972,972,-437,235,282,-437,979,-277',
'-437,-437,980,-437,620,-437,773,-437,983,-437,-437,-437,-437,-437,-437',
'-437,986,-437,-437,-437,611,988,608,607,606,616,609,133,134,135,136',
'137,-437,-437,990,-437,619,-437,-310,133,134,135,136,137,-437,-310,-310',
'-310,-437,235,-310,-310,-310,992,-310,255,725,611,614,608,607,606,764',
'609,-310,-310,1012,624,623,627,626,265,266,1013,-310,-310,1022,-310',
'-310,-310,-310,-310,1016,1023,608,607,606,252,609,258,1033,254,253,250',
'251,782,1036,256,849,257,1042,1052,972,620,972,-310,-310,-310,-310,-310',
'-310,-310,-310,-310,-310,-310,-310,-310,-310,972,773,-310,-310,-310',
'1059,1061,-310,1063,292,-310,1065,1065,-310,-310,722,-310,725,-310,725',
'-310,1023,-310,-310,-310,-310,-310,-310,-310,-623,-310,-622,-310,611',
'235,608,607,606,616,609,972,1087,1065,1065,1065,-310,-310,1065,-310',
'619,-310,-293,,,,,,-310,-293,-293,-293,-310,,-293,-293,-293,,-293,255',
',,614,,,,,,-293,-293,-293,624,623,627,626,265,266,,-293,-293,,-293,-293',
'-293,-293,-293,,,,,,252,,258,,254,253,250,251,,,256,,257,,,,620,,-293',
'-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,,,-293',
'-293,-293,,,-293,,,-293,,,-293,-293,,-293,,-293,,-293,,-293,-293,-293',
'-293,-293,-293,-293,,-293,,-293,611,,608,607,606,616,609,,,,,,-293,-293',
'-293,-293,619,-293,-648,-293,,,,,-293,-648,-648,-648,-293,,-648,-648',
'-648,,-648,255,,,614,,,,,-648,-648,-648,,624,623,627,626,265,266,,-648',
'-648,,-648,-648,-648,-648,-648,,,,,,252,,258,,254,253,250,251,235,,',
',,,,,620,,-648,-648,-648,-648,-648,-648,-648,-648,-648,-648,-648,-648',
'-648,-648,,,-648,-648,-648,,,-648,,282,-648,,,-648,-648,,-648,,-648',
',-648,,-648,-648,-648,-648,-648,-648,-648,,-648,-648,-648,611,,608,607',
'606,616,609,,,,,,-648,-648,,-648,619,-648,-627,,,,,,-648,-627,-627,-627',
'-648,,-627,-627,-627,,-627,255,,,614,,,,,-627,-627,-627,-627,624,623',
'627,626,265,266,,-627,-627,,-627,-627,-627,-627,-627,,,,,,252,,,,254',
'253,250,251,,,,,,,,,620,,-627,-627,-627,-627,-627,-627,-627,-627,-627',
'-627,-627,-627,-627,-627,,,-627,-627,-627,,,-627,,,-627,,,-627,-627',
',-627,,-627,,-627,,-627,-627,-627,-627,-627,-627,-627,,-627,-627,-627',
'611,,608,607,606,616,609,,,,,,-627,-627,-627,-627,619,-627,-628,-627',
',,,,-627,-628,-628,-628,-627,,-628,-628,-628,,-628,,,,614,,,,,-628,-628',
'-628,-628,,,627,626,,,,-628,-628,,-628,-628,-628,-628,-628,,,,,,,,,',
',,,,,,,,,,,,620,,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628',
'-628,-628,-628,,,-628,-628,-628,,,-628,,,-628,,,-628,-628,,-628,,-628',
',-628,,-628,-628,-628,-628,-628,-628,-628,,-628,-628,-628,,,,,,,,,,',
',,-628,-628,-628,-628,,-628,-648,-628,,,,,-628,-648,-648,-648,-628,',
'-648,-648,-648,,-648,,,,,,,,,-648,-648,,,,,,,,,,-648,-648,,-648,-648',
'-648,-648,-648,,,,,,,,506,458,,,507,,,,,,,,,173,174,,169,151,152,153',
'160,157,159,,,154,155,-648,,,175,176,161,162,-648,,,,,282,-648,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,-648,-648,177',
',,,,,,,,,,,-648,,,,,-648,,,170,,,,-648,,,,-648,8,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,663,11,49,10,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,105,95,97,98,99,101,,,,96,106,,269,,-249,,,89,,,93,100,102',
',110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,663,11,49,313,13,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,248,249,,,265,266,,43,,,315,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,',
',96,106,,269,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
'11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,105,95,97,98,99,101,,,,96,106,,269,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,269',
',,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255,259',
'260,261,262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,315,,,62',
'63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95',
'97,98,99,101,,,,96,106,235,269,,,,,89,,,93,100,102,,110,111,311,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,',
'248,249,,,265,266,,43,,,315,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,269,,,,,89',
',,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255,259,260,261',
'262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64',
',38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99',
'101,,,,96,106,,269,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,',
',265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270',
'256,23,257,,,,105,95,97,98,99,101,,,,96,106,,269,,,,,89,,,93,100,102',
',110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,-649,-649,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,255,259,260,261,262,272,273,267,268,263,264,,-649,-649,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,255,-649,-649,-649,-649,272,273,,,-649',
'-649,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,10,13,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,255,-649,-649,-649,-649',
'272,273,,,-649,-649,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313',
'13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255',
'-649,-649,-649,-649,272,273,,,-649,-649,,,,,,265,266,,43,,,36,,,62,63',
',,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,255,-649,-649,-649,-649,272,273,,,-649,-649,,,,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,255,-649,-649,-649,-649,272,273,,,-649',
'-649,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93',
'100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,255,-649,-649,-649',
'-649,272,273,,,-649,-649,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,105,95,97,98,99,101,,',
',96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46',
'44,255,259,260,261,262,272,273,,,263,264,,,,,,265,266,,43,,,36,,,62',
'63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,',
'108,109,,45,46,44,255,259,260,261,262,272,273,267,,263,264,,,,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,',
'11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313',
'13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,',
'108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,311,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,313,13',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,311,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,11,49,313,13,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49,10,13,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99',
'101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,',
',49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245',
',,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89',
',305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99',
'101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,,',
'334,,,,,,611,,608,607,606,616,609,,,,,,,,324,,619,320,,,62,63,,,64,',
'319,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,611,,608,607,606',
'616,609,,,,,,,,324,,619,246,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95',
'97,98,99,101,627,626,,96,106,,,,336,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,620,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,',
'83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11',
'49,,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,',
',22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,130,,,,,129,89,',
',93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,611,,608,607,606,616',
'609,,,,,,,,364,,619,36,,,62,63,,,64,,38,,,,,,,,,,,,614,,,,,105,95,97',
'98,99,101,627,626,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12',
'78,,,,79,80,,,,83,620,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,22,,,,,,11,49,10,13,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,414,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,',
',,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,11,49',
',13,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431,,,,48,,,,,',
',,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431',
',,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,',
',122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,235,,,,',
',89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96',
'106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105',
'302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48',
',,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,235,,,,,,89,,305,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,11,49,,13,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,,,334,,,,,,611,,608,607,606,616,609,,,,,',
',,324,,619,246,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95,97,98,99,101',
'627,626,,96,106,,,,536,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,620,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',,,334,,,,,,611,,608,607,606,616,609,,,,,,,,324,,619,320,,,62,63,,,64',
',,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96,106,,,,,,,89,,',
'93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,553,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,,,48,,,,,,',
',245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115',
'304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,',
'89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122',
'121,123,582,60,114,113,583,,116,124,125,,108,109,,,,334,,,,,,611,,608',
'607,606,616,609,,,,,,,,584,,619,246,,,62,63,,,64,,,,,,,,,,,,,,614,,',
',,105,95,97,98,99,101,627,626,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,620,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,328,,,122,121,123,582,60,114,113,583,,116',
'124,125,,108,109,,,,334,,,,,,611,,608,607,606,616,609,,,,,,,,584,,619',
'246,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81',
'82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,',
',122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,',
',,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,699,,299,,48,,,',
',,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106',
',,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,',
',,,11,49,313,13,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,414,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,,,334,,,,,,611,,608,607,606,616,609,,,,,,,,324,,619',
'320,,,62,63,,,64,,,,,,,,,,,,,,614,,,,,105,95,97,98,99,101,627,626,,96',
'106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,620,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105',
'302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119',
'120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117',
'119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,',
'110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113',
'115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97',
'98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,',
'22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117',
'119,120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125',
',108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112',
'60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,802,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,',
'96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122',
'121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,',
',,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245',
',,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118',
'117,119,120,,,22,,,,,,11,49,,13,122,121,123,112,60,114,113,115,,116',
'124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,699,,299,,48,,,,,,,,245,,,,,105,302,97',
'98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299,,48,',
',,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102',
',110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,',
',93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60',
'114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106',
',,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,',
',122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95',
'97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89',
',,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,328,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,,,334,,,,,,,,,,,,,,,,,,,,324',
',,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,',
',,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121',
'123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,431,,,,48,,,,,,,,245,,,,,105,95,97,98',
'99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,304,116,124,125,,108,109,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,699,,,,48,,,,,,',
',245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115',
'304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,',
'89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,868,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,',
',122,121,123,112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,105,302,97,98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118',
'117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124',
'125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119,120,,,22,,,,,,,49,,',
'122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,118,117,119',
'120,,,22,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108',
'109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114,113,115,304',
'116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,299,,48,,,,,,,,245,,,,,105,302,97,98,99,101,,,,96,106,,,,,,',
'89,,305,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101',
',,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247,,,,,,',
'328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,,,334,,',
',,,,,,,,,,,,,,,,,994,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105,95,97',
'98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120,,,247',
',,,,,,328,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109,,,',
'334,,,,,,,,,,,,,,,,,,,,1001,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,105',
'95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110,111,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,118,117,119,120',
',,247,,,,,,,49,,,122,121,123,112,60,114,113,115,,116,124,125,,108,109',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,1006,,,,48,,,,',
',,,245,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100,102,,110',
'111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,118,117,119,120,,,247,,,,,,,328,,,122,121,123,112,60,114,113,115',
',116,124,125,,108,109,,,,334,,,,,,,,,,,,,,,,,,,,994,,,246,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,105,95,97,98,99,101,,,,96,106,,,,,,,89,,,93,100',
'102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,',
',,88,327,333,118,117,119,120,,,247,,,,,,,49,,,122,121,123,112,60,114',
'113,115,,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,105,95,97,98,99,101,,,,96,106,,',
',,,,89,,,93,100,102,,110,111,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,118,117,119,120,,,247,,,,,,,49,,,122,121,123',
'112,60,114,113,115,304,116,124,125,,108,109,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,105,302,97',
'98,99,101,,,,96,106,,,,,,,89,,305,93,100,102,,110,111,188,199,189,212',
'185,205,195,194,215,216,210,193,192,187,213,217,218,197,186,200,204',
'206,198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,,183,190',
'181,182,178,179,180,141,143,140,,142,,,,,,,,,173,174,,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170',
'188,199,189,212,185,205,195,194,215,216,210,193,192,187,213,217,218',
'197,186,200,204,206,198,191,,,,207,214,209,208,201,211,196,184,203,202',
',,,,,183,190,181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,105,,,,,,,,,',
'106,,,,,,,,,170,188,199,189,212,185,205,195,194,215,216,210,193,192',
'187,213,217,218,197,186,200,204,206,198,191,,,,207,214,209,379,378,380',
'377,184,203,202,,,,,,183,190,181,182,374,375,376,372,143,114,113,373',
',116,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176',
'161,162,,,,,,386,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,,,,,,,,,,,,,,,,170,188,199,189,212,185,205,195,194',
'215,216,210,193,192,187,213,217,218,197,186,200,204,206,198,191,,,,207',
'214,209,208,201,211,196,184,203,202,,,,,,183,190,181,182,178,179,180',
'141,143,411,410,142,,412,,,,,,,173,174,,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,188,199,189,212',
'185,205,195,194,215,216,210,193,192,187,213,217,218,197,186,200,204',
'206,198,191,,,,207,214,209,208,201,211,196,184,203,202,,,,,,183,190',
'181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,105,,,,,,,,,,106,,,,,,,,,170,188',
'199,189,212,185,205,195,194,215,216,210,193,192,187,213,217,218,197',
'186,200,204,206,198,191,,,,207,214,209,208,201,211,196,184,203,202,',
',,,,183,190,181,182,178,179,180,141,143,,,142,,,,,,,,,173,174,,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,105,,,,,,,,,,106',
',,,,,,,,170,188,199,189,212,185,205,195,194,215,216,210,193,192,187',
'213,217,218,197,186,200,204,206,198,191,,,,207,214,209,208,201,211,196',
'184,203,202,,,,,,183,190,181,182,178,179,180,141,143,,,142,,,,,,,,,173',
'174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,454,458,,,455,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,461,465,,,460,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'680,458,,,681,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,682,465,,,683,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'710,458,,,711,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,713,465,,,714,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'680,458,,,681,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,682,465,,,683,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'747,458,,,748,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,749,465,,,750,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'804,458,,,805,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,807,465,,,806,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
'872,465,,,873,,,,,,,,,173,174,170,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,506,458,,,507,,,,,,,,,173,174,170',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,282,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,611,177,608',
'607,606,616,609,611,,608,607,606,616,609,,,619,,,,,170,,619,,,,,,,,',
',,,,,,614,,,,,,,614,,624,623,627,626,,,,624,623,627,626,,,,,,,,,,,,',
',,,,,1069,465,,,1068,,,,620,,,,,173,174,620,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,1072,458,,,1073,,,,,,,,,173',
'174,170,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,',
',,282,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,,,,,1074,465,,,1075,,,,,,,,,173,174,170,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,282,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,611,177,608,607,606,616,609,,,,,,,',
',,619,,,,,170,,,,,,,,,,,,,,,,,614,,,,,,,,,624,623,627,626,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,620' ]
        racc_action_table = arr = ::Array.new(26228, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'112,389,353,470,470,361,705,112,112,112,362,354,112,112,112,710,112',
'365,940,17,17,705,945,402,112,29,112,112,112,580,22,998,238,405,1,239',
'112,112,27,112,112,112,112,112,747,27,559,352,352,559,999,92,711,748',
'869,768,570,713,560,92,3,560,389,389,389,870,22,112,112,112,112,112',
'112,112,112,112,112,112,112,112,112,1002,710,112,112,112,402,112,112',
'238,29,112,239,470,112,112,405,112,65,112,13,112,27,112,112,112,112',
'112,112,112,361,112,29,112,15,362,353,710,1042,711,710,353,365,713,713',
'354,112,112,112,112,354,112,940,112,580,710,945,940,112,115,1072,945',
'112,1073,112,998,115,115,115,747,998,115,115,115,711,115,570,711,748',
'713,768,570,713,115,999,115,115,115,869,999,870,869,711,869,1085,115',
'115,713,115,115,115,115,115,1074,844,65,1075,749,689,750,372,687,720',
'720,838,1002,373,372,374,20,1002,767,767,373,16,374,115,115,115,115',
'115,115,115,115,115,115,115,115,115,115,44,44,115,115,115,687,115,115',
'838,721,115,329,1042,115,115,721,115,1042,115,18,115,20,115,115,115',
'115,115,115,115,241,115,844,115,749,1072,750,20,1073,640,1072,643,1074',
'1073,25,1075,115,115,115,115,438,115,460,115,40,476,689,680,115,460',
'460,460,115,720,115,460,460,844,460,1085,844,770,767,749,1085,750,41',
'329,1074,44,44,1075,770,1074,681,844,1075,241,460,460,804,460,460,460',
'460,460,334,334,375,329,640,640,643,643,43,375,524,438,5,640,49,643',
'476,5,680,770,770,582,41,460,460,460,460,460,460,460,460,460,460,460',
'460,460,460,41,73,460,460,460,19,460,584,681,805,460,584,19,460,804',
'583,770,1007,460,1007,460,19,460,460,460,460,460,460,460,980,460,50',
'460,99,524,524,524,582,50,42,980,334,334,338,582,460,460,50,460,582',
'460,461,827,582,524,916,100,460,461,461,461,460,101,460,461,461,805',
'461,583,19,376,582,102,980,980,583,461,376,391,482,583,42,237,138,583',
'338,396,461,461,237,461,461,461,461,461,50,42,321,237,377,338,582,583',
'378,321,399,377,980,219,827,378,482,916,321,564,482,482,564,461,461',
'461,461,461,461,461,461,461,461,461,461,461,461,583,240,461,461,461',
'322,461,391,391,391,461,242,322,461,237,396,396,396,461,407,461,322',
'461,461,461,461,461,461,461,321,461,461,461,454,399,399,399,243,778',
'247,778,778,778,778,778,461,461,281,461,379,461,296,323,380,778,382',
'379,461,682,323,380,461,382,461,297,682,682,682,323,322,682,682,682',
'483,682,454,778,47,47,300,407,407,407,682,682,682,682,778,778,857,454',
'872,857,1014,682,682,1014,682,682,682,682,682,308,314,325,483,316,308',
'340,483,483,325,47,47,393,340,323,393,358,317,325,778,318,358,340,682',
'682,682,682,682,682,682,682,682,682,682,682,682,682,735,735,682,682',
'682,872,682,682,761,761,682,455,872,682,682,324,682,872,682,327,682',
'872,682,682,682,682,682,682,682,325,682,682,682,340,328,140,393,393',
'878,872,140,140,333,878,363,682,682,682,682,664,682,363,682,455,882',
'773,773,682,683,882,363,682,335,682,339,683,683,683,455,872,683,683',
'683,387,683,387,387,387,387,387,437,1043,1043,954,683,683,683,437,954',
'387,342,664,348,359,683,683,437,683,683,683,683,683,360,364,366,395',
'664,398,363,401,404,387,387,614,427,614,614,614,430,614,387,387,387',
'387,432,683,683,683,683,683,683,683,683,683,683,683,683,683,683,435',
'439,683,683,683,437,683,683,449,452,683,453,614,683,683,462,683,387',
'683,472,683,614,683,683,683,683,683,683,683,484,683,485,683,597,486',
'597,597,597,597,597,9,9,9,9,9,683,683,683,683,597,683,806,683,487,503',
'510,514,683,806,806,806,683,530,683,806,806,531,806,541,586,532,597',
'535,537,542,541,586,545,554,753,597,597,597,597,541,586,753,806,806',
'714,806,806,806,806,806,753,714,873,555,556,561,714,562,565,873,714',
'567,571,905,873,905,905,905,873,905,572,597,573,806,806,806,806,806',
'806,806,806,806,806,806,806,806,806,541,586,806,806,806,574,806,588',
'591,599,806,753,600,806,905,602,603,497,806,604,806,714,806,806,806',
'806,806,806,806,873,806,764,806,764,764,764,764,764,786,613,786,786',
'786,621,786,806,806,764,806,497,806,807,625,497,497,497,497,806,807',
'807,807,806,628,806,807,807,647,807,993,764,312,312,312,312,312,993',
'807,650,764,764,764,764,1000,656,993,665,670,807,807,1000,807,807,807',
'807,807,792,792,1034,1000,792,792,792,676,684,1034,685,782,688,782,782',
'782,692,782,1034,764,694,696,698,807,807,807,807,807,807,807,807,807',
'807,807,807,807,807,993,707,807,807,807,904,807,904,904,904,807,904',
'782,807,1000,709,712,488,807,715,807,782,807,807,807,807,807,807,807',
'1034,807,807,807,488,488,963,716,963,963,963,719,963,737,904,743,807',
'807,746,807,488,807,488,904,488,488,488,488,807,30,769,784,807,785,807',
'787,30,30,30,799,801,30,30,30,765,30,765,765,765,765,765,498,803,812',
'30,30,30,836,843,853,765,854,858,864,871,30,30,875,30,30,30,30,30,1022',
'879,1022,1022,1022,880,1022,881,888,765,498,889,890,894,498,498,498',
'498,765,765,765,765,895,30,30,30,30,30,30,30,30,30,30,30,30,30,30,897',
'1022,30,30,30,898,900,30,903,30,30,913,915,30,30,922,30,765,30,923,30',
'925,30,30,30,30,30,30,30,926,30,30,30,774,927,774,774,774,774,774,347',
'347,347,347,347,30,30,929,30,774,30,31,529,529,529,529,529,30,31,31',
'31,30,930,31,31,31,931,31,502,953,1023,774,1023,1023,1023,960,1023,31',
'31,961,774,774,774,774,502,502,962,31,31,977,31,31,31,31,31,1051,978',
'1051,1051,1051,502,1051,502,991,502,502,502,502,1023,994,502,996,502',
'1001,1018,1019,774,1020,31,31,31,31,31,31,31,31,31,31,31,31,31,31,1021',
'1024,31,31,31,1027,1028,31,1029,31,31,1030,1032,31,31,1038,31,1048,31',
'1049,31,1057,31,31,31,31,31,31,31,1068,31,1069,31,776,1071,776,776,776',
'776,776,1080,1081,1082,1083,1084,31,31,1092,31,776,31,60,,,,,,31,60',
'60,60,31,,60,60,60,,60,551,,,776,,,,,,60,60,60,776,776,776,776,551,551',
',60,60,,60,60,60,60,60,,,,,,551,,551,,551,551,551,551,,,551,,551,,,',
'776,,60,60,60,60,60,60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,,,60',
',,60,60,,60,,60,,60,,60,60,60,60,60,60,60,,60,,60,831,,831,831,831,831',
'831,,,,,,60,60,60,60,831,60,456,60,,,,,60,456,456,456,60,,456,456,456',
',456,489,,,831,,,,,456,456,456,,831,831,831,831,489,489,,456,456,,456',
'456,456,456,456,,,,,,489,,489,,489,489,489,489,831,,,,,,,,831,,456,456',
'456,456,456,456,456,456,456,456,456,456,456,456,,,456,456,456,,,456',
',456,456,,,456,456,,456,,456,,456,,456,456,456,456,456,456,456,,456',
'456,456,966,,966,966,966,966,966,,,,,,456,456,,456,966,456,465,,,,,',
'456,465,465,465,456,,465,465,465,,465,490,,,966,,,,,465,465,465,465',
'966,966,966,966,490,490,,465,465,,465,465,465,465,465,,,,,,490,,,,490',
'490,490,490,,,,,,,,,966,,465,465,465,465,465,465,465,465,465,465,465',
'465,465,465,,,465,465,465,,,465,,,465,,,465,465,,465,,465,,465,,465',
'465,465,465,465,465,465,,465,465,465,968,,968,968,968,968,968,,,,,,465',
'465,465,465,968,465,466,465,,,,,465,466,466,466,465,,466,466,466,,466',
',,,968,,,,,466,466,466,466,,,968,968,,,,466,466,,466,466,466,466,466',
',,,,,,,,,,,,,,,,,,,,,968,,466,466,466,466,466,466,466,466,466,466,466',
'466,466,466,,,466,466,466,,,466,,,466,,,466,466,,466,,466,,466,,466',
'466,466,466,466,466,466,,466,466,466,,,,,,,,,,,,,466,466,466,466,,466',
'505,466,,,,,466,505,505,505,466,,505,505,505,,505,,,,,,,,,505,505,,',
',,,,,,,505,505,,505,505,505,505,505,,,,,,,,278,278,,,278,,,,,,,,,278',
'278,,278,278,278,278,278,278,278,,,278,278,505,,,278,278,278,278,505',
',,,,505,505,,,,,,,278,278,,278,278,278,278,278,278,278,278,278,278,278',
'505,505,278,,,,,,,,,,,,505,,,,,505,,,278,,,,505,,,,505,2,2,2,2,2,2,',
',,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,442,2,2,2,2,2,2',
'2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,442,442,442,442,442,442,442,442,442,442',
'442,,442,442,,,442,442,,2,,,2,,,2,2,,,2,,2,442,,442,2,442,442,442,442',
'442,442,442,2,442,,,,2,2,2,2,2,2,,,,2,2,,442,,442,,,2,,,2,2,2,,2,2,36',
'36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36',
'36,36,36,,,36,,,,,448,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36',
',36,36,,36,36,36,448,448,448,448,448,448,448,448,448,448,448,,448,448',
',,448,448,,36,,,36,,,36,36,,,36,,36,448,,448,36,448,448,448,448,448',
'448,448,36,448,,,,36,36,36,36,36,36,,,,36,36,,448,,,,,36,,,36,36,36',
',36,36,221,221,221,221,221,221,,,,221,221,,,,221,,221,221,221,221,221',
'221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,221,221,221,221',
'221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221,24',
'24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,221,,,221,,,221,221,,',
'221,,221,24,,24,221,24,24,24,24,24,24,24,221,24,,,,221,221,221,221,221',
'221,,,,221,221,,24,,,,,221,,,221,221,221,,221,221,246,246,246,246,246',
'246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246',
'246,246,246,246,,,246,,,,,,246,246,246,246,246,246,246,246,246,246,246',
'246,,246,246,246,,246,246,,246,246,246,294,294,294,294,294,294,294,294',
'294,294,294,,294,294,,,294,294,,246,,,246,,,246,246,,,246,,246,294,',
'294,246,294,294,294,294,294,294,294,246,294,,,,246,246,246,246,246,246',
',,,246,246,,294,,,,,246,,,246,246,246,,246,246,315,315,315,315,315,315',
',,,315,315,,,,315,,315,315,315,315,315,315,315,,,,,,315,315,315,315',
'315,315,315,,,315,,,,,,315,315,315,315,315,315,315,315,315,315,315,315',
',315,315,315,,315,315,,315,315,315,501,501,501,501,501,501,501,501,501',
'501,501,,501,501,,,501,501,,315,,,315,,,315,315,,,315,,315,501,,501',
'315,501,501,501,501,501,501,501,315,501,,,,315,315,315,315,315,315,',
',,315,315,501,501,,,,,315,,,315,315,315,,315,315,320,320,320,320,320',
'320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320',
'320,320,320,320,,,320,,,,,,320,320,320,320,320,320,320,320,320,320,320',
'320,,320,320,320,,320,320,,320,320,320,552,552,552,552,552,552,552,552',
'552,552,552,,552,552,,,552,552,,320,,,320,,,320,320,,,320,,320,552,',
'552,320,552,552,552,552,552,552,552,320,552,,,,320,320,320,320,320,320',
',,,320,320,,552,,,,,320,,,320,320,320,,320,320,346,346,346,346,346,346',
',,,346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346,346,346',
'346,346,346,,,346,,,,,,346,346,346,346,346,346,346,346,346,346,346,346',
',346,346,346,,346,346,,346,346,346,809,809,809,809,809,809,809,809,809',
'809,809,,809,809,,,809,809,,346,,,346,,,346,346,,,346,,346,809,,809',
'346,809,809,809,809,809,809,809,346,809,,,,346,346,346,346,346,346,',
',,346,346,,809,,,,,346,,,346,346,346,,346,346,356,356,356,356,356,356',
',,,356,356,,,,356,,356,356,356,356,356,356,356,,,,,,356,356,356,356',
'356,356,356,,,356,,,,,,356,356,356,356,356,356,356,356,356,356,356,356',
',356,356,356,,356,356,,356,356,356,921,921,921,921,921,921,921,921,921',
'921,921,,921,921,,,921,921,,356,,,356,,,356,356,,,356,,356,921,,921',
'356,921,921,921,921,921,921,921,356,921,,,,356,356,356,356,356,356,',
',,356,356,,921,,,,,356,,,356,356,356,,356,356,357,357,357,357,357,357',
',,,357,357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357,357,357',
'357,357,357,,,357,,,,,,357,357,357,357,357,357,357,357,357,357,357,357',
',357,357,357,,357,357,,357,357,357,480,480,480,480,480,480,480,480,480',
'480,480,,480,480,,,480,480,,357,,,357,,,357,357,,,357,,357,480,,480',
'357,480,480,480,480,480,480,480,357,480,,,,357,357,357,357,357,357,',
',,357,357,,,,,,,357,,,357,357,357,,357,357,566,566,566,566,566,566,',
',,566,566,,,,566,,566,566,566,566,566,566,566,,,,,,566,566,566,566,566',
'566,566,,,566,,,,,,566,566,566,566,566,566,566,566,566,566,566,566,',
'566,566,566,,566,566,,566,566,566,481,481,481,481,481,481,481,481,481',
'481,481,,481,481,,,481,481,,566,,,566,,,566,566,,,566,,566,481,,481',
'566,481,481,481,481,481,481,481,566,481,,,,566,566,566,566,566,566,',
',,566,566,,,,,,,566,,,566,566,566,,566,566,569,569,569,569,569,569,',
',,569,569,,,,569,,569,569,569,569,569,569,569,,,,,,569,569,569,569,569',
'569,569,,,569,,,,,,569,569,569,569,569,569,569,569,569,569,569,569,',
'569,569,569,,569,569,,569,569,569,491,491,491,491,491,491,491,,,491',
'491,,,,,,491,491,,569,,,569,,,569,569,,,569,,569,491,,491,569,491,491',
'491,491,491,491,491,569,491,,,,569,569,569,569,569,569,,,,569,569,,',
',,,,569,,,569,569,569,,569,569,652,652,652,652,652,652,,,,652,652,,',
',652,,652,652,652,652,652,652,652,,,,,,652,652,652,652,652,652,652,',
',652,,,,,,652,652,652,652,652,652,652,652,652,652,652,652,,652,652,652',
',652,652,,652,652,652,492,492,492,492,492,492,492,,,492,492,,,,,,492',
'492,,652,,,652,,,652,652,,,652,,652,492,,492,652,492,492,492,492,492',
'492,492,652,492,,,,652,652,652,652,652,652,,,,652,652,,,,,,,652,,,652',
'652,652,,652,652,751,751,751,751,751,751,,,,751,751,,,,751,,751,751',
'751,751,751,751,751,,,,,,751,751,751,751,751,751,751,,,751,,,,,,751',
'751,751,751,751,751,751,751,751,751,751,751,,751,751,751,,751,751,,751',
'751,751,493,493,493,493,493,493,493,,,493,493,,,,,,493,493,,751,,,751',
',,751,751,,,751,,751,493,,493,751,493,493,493,493,493,493,493,751,493',
',,,751,751,751,751,751,751,,,,751,751,,,,,,,751,,,751,751,751,,751,751',
'762,762,762,762,762,762,,,,762,762,,,,762,,762,762,762,762,762,762,762',
',,,,,762,762,762,762,762,762,762,,,762,,,,,,762,762,762,762,762,762',
'762,762,762,762,762,762,,762,762,762,,762,762,,762,762,762,494,494,494',
'494,494,494,494,,,494,494,,,,,,494,494,,762,,,762,,,762,762,,,762,,762',
'494,,494,762,494,494,494,494,494,494,494,762,494,,,,762,762,762,762',
'762,762,,,,762,762,,,,,,,762,,,762,762,762,,762,762,763,763,763,763',
'763,763,,,,763,763,,,,763,,763,763,763,763,763,763,763,,,,,,763,763',
'763,763,763,763,763,,,763,,,,,,763,763,763,763,763,763,763,763,763,763',
'763,763,,763,763,763,,763,763,,763,763,763,495,495,495,495,495,495,495',
',,495,495,,,,,,495,495,,763,,,763,,,763,763,,,763,,763,495,,495,763',
'495,495,495,495,495,495,495,763,495,,,,763,763,763,763,763,763,,,,763',
'763,,,,,,,763,,,763,763,763,,763,763,793,793,793,793,793,793,,,,793',
'793,,,,793,,793,793,793,793,793,793,793,,,,,,793,793,793,793,793,793',
'793,,,793,,,,,,793,793,793,793,793,793,793,793,793,793,793,793,,793',
'793,793,,793,793,,793,793,793,496,496,496,496,496,496,496,,,496,496',
',,,,,496,496,,793,,,793,,,793,793,,,793,,793,496,,496,793,496,496,496',
'496,496,496,496,793,496,,,,793,793,793,793,793,793,,,,793,793,,,,,,',
'793,,,793,793,793,,793,793,833,833,833,833,833,833,,,,833,833,,,,833',
',833,833,833,833,833,833,833,,,,,,833,833,833,833,833,833,833,,,833',
',,,,,833,833,833,833,833,833,833,833,833,833,833,833,,833,833,833,,833',
'833,,833,833,833,499,499,499,499,499,499,499,,,499,499,,,,,,499,499',
',833,,,833,,,833,833,,,833,,833,499,,499,833,499,499,499,499,499,499',
'499,833,499,,,,833,833,833,833,833,833,,,,833,833,,,,,,,833,,,833,833',
'833,,833,833,851,851,851,851,851,851,,,,851,851,,,,851,,851,851,851',
'851,851,851,851,,,,,,851,851,851,851,851,851,851,,,851,,,,,,851,851',
'851,851,851,851,851,851,851,851,851,851,,851,851,851,,851,851,,851,851',
'851,500,500,500,500,500,500,500,500,,500,500,,,,,,500,500,,851,,,851',
',,851,851,,,851,,851,500,,500,851,500,500,500,500,500,500,500,851,500',
',,,851,851,851,851,851,851,,,,851,851,,,,,,,851,,,851,851,851,,851,851',
'863,863,863,863,863,863,,,,863,863,,,,863,,863,863,863,863,863,863,863',
',,,,,863,863,863,863,863,863,863,,,863,,,,,,863,863,863,863,863,863',
'863,863,863,863,863,863,,863,863,863,,863,863,,863,863,863,,,,,,,,,',
',,,,,,,,,,863,,,863,,,863,863,,,863,,863,,,,863,,,,,,,,863,,,,,863,863',
'863,863,863,863,,,,863,863,,,,,,,863,,,863,863,863,,863,863,876,876',
'876,876,876,876,,,,876,876,,,,876,,876,876,876,876,876,876,876,,,,,',
'876,876,876,876,876,876,876,,,876,,,,,,876,876,876,876,876,876,876,876',
'876,876,876,876,,876,876,876,,876,876,,876,876,876,,,,,,,,,,,,,,,,,',
',,876,,,876,,,876,876,,,876,,876,,,,876,,,,,,,,876,,,,,876,876,876,876',
'876,876,,,,876,876,,,,,,,876,,,876,876,876,,876,876,886,886,886,886',
'886,886,,,,886,886,,,,886,,886,886,886,886,886,886,886,,,,,,886,886',
'886,886,886,886,886,,,886,,,,,,886,886,886,886,886,886,886,886,886,886',
'886,886,,886,886,886,,886,886,,886,886,886,,,,,,,,,,,,,,,,,,,,886,,',
'886,,,886,886,,,886,,886,,,,886,,,,,,,,886,,,,,886,886,886,886,886,886',
',,,886,886,,,,,,,886,,,886,886,886,,886,886,887,887,887,887,887,887',
',,,887,887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887',
'887,887,887,,,887,,,,,,887,887,887,887,887,887,887,887,887,887,887,887',
',887,887,887,,887,887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887',
'887,,,887,,887,,,,887,,,,,,,,887,,,,,887,887,887,887,887,887,,,,887',
'887,,,,,,,887,,,887,887,887,,887,887,937,937,937,937,937,937,,,,937',
'937,,,,937,,937,937,937,937,937,937,937,,,,,,937,937,937,937,937,937',
'937,,,937,,,,,,937,937,937,937,937,937,937,937,937,937,937,937,,937',
'937,937,,937,937,,937,937,937,,,,,,,,,,,,,,,,,,,,937,,,937,,,937,937',
',,937,,937,,,,937,,,,,,,,937,,,,,937,937,937,937,937,937,,,,937,937',
',,,,,,937,,,937,937,937,,937,937,938,938,938,938,938,938,,,,938,938',
',,,938,,938,938,938,938,938,938,938,,,,,,938,938,938,938,938,938,938',
',,938,,,,,,938,938,938,938,938,938,938,938,938,938,938,938,,938,938',
'938,,938,938,,938,938,938,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,938,,,938',
',938,,,,938,,,,,,,,938,,,,,938,938,938,938,938,938,,,,938,938,,,,,,',
'938,,,938,938,938,,938,938,950,950,950,950,950,950,,,,950,950,,,,950',
',950,950,950,950,950,950,950,,,,,,950,950,950,950,950,950,950,,,950',
',,,,,950,950,950,950,950,950,950,950,950,950,950,950,,950,950,950,,950',
'950,,950,950,950,,,,,,,,,,,,,,,,,,,,950,,,950,,,950,950,,,950,,950,',
',,950,,,,,,,,950,,,,,950,950,950,950,950,950,,,,950,950,,,,,,,950,,',
'950,950,950,,950,950,997,997,997,997,997,997,,,,997,997,,,,997,,997',
'997,997,997,997,997,997,,,,,,997,997,997,997,997,997,997,,,997,,,,,',
'997,997,997,997,997,997,997,997,997,997,997,997,,997,997,997,,997,997',
',997,997,997,,,,,,,,,,,,,,,,,,,,997,,,997,,,997,997,,,997,,997,,,,997',
',,,,,,,997,,,,,997,997,997,997,997,997,,,,997,997,,,,,,,997,,,997,997',
'997,,997,997,1004,1004,1004,1004,1004,1004,,,,1004,1004,,,,1004,,1004',
'1004,1004,1004,1004,1004,1004,,,,,,1004,1004,1004,1004,1004,1004,1004',
',,1004,,,,,,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004',
',1004,1004,1004,,1004,1004,,1004,1004,1004,,,,,,,,,,,,,,,,,,,,1004,',
',1004,,,1004,1004,,,1004,,1004,,,,1004,,,,,,,,1004,,,,,1004,1004,1004',
'1004,1004,1004,,,,1004,1004,,,,,,,1004,,,1004,1004,1004,,1004,1004,1010',
'1010,1010,1010,1010,1010,,,,1010,1010,,,,1010,,1010,1010,1010,1010,1010',
'1010,1010,,,,,,1010,1010,1010,1010,1010,1010,1010,,,1010,,,,,,1010,1010',
'1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,,1010,1010,1010,,1010',
'1010,,1010,1010,1010,,,,,,,,,,,,,,,,,,,,1010,,,1010,,,1010,1010,,,1010',
',1010,,,,1010,,,,,,,,1010,,,,,1010,1010,1010,1010,1010,1010,,,,1010',
'1010,,,,,,,1010,,,1010,1010,1010,,1010,1010,1011,1011,1011,1011,1011',
'1011,,,,1011,1011,,,,1011,,1011,1011,1011,1011,1011,1011,1011,,,,,,1011',
'1011,1011,1011,1011,1011,1011,,,1011,,,,,,1011,1011,1011,1011,1011,1011',
'1011,1011,1011,1011,1011,1011,,1011,1011,1011,,1011,1011,,1011,1011',
'1011,,,,,,,,,,,,,,,,,,,,1011,,,1011,,,1011,1011,,,1011,,1011,,,,1011',
',,,,,,,1011,,,,,1011,1011,1011,1011,1011,1011,,,,1011,1011,,,,,,,1011',
',,1011,1011,1011,,1011,1011,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,',
',,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8',
',,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8',
',,,8,8,,,,,,,8,,,8,8,8,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,',
'32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32',
'32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32',
',32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,',
'32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33',
'33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33',
'33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,',
',,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,33,33,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,34,34,37,37,37,,37',
',,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37',
',,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,970,',
'970,970,970,970,970,,,,,,,,37,,970,37,,,37,37,,,37,,37,,,,,,,,,,,,970',
',,,,37,37,37,37,37,37,970,970,,37,37,,,,,,,37,,,37,37,37,,37,37,38,38',
'38,,38,,,,38,38,,,,38,970,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38',
'38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,',
',,,972,,972,972,972,972,972,,,,,,,,38,,972,38,,,38,38,,,38,,,,,,,,,',
',,,,972,,,,,38,38,38,38,38,38,972,972,,38,38,,,,38,,,38,,,38,38,38,',
'38,38,45,45,45,,45,,,,45,45,,,,45,972,45,45,45,45,45,45,45,,,,,,45,45',
'45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45',
'45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,',
'45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,45,45,46,46,46',
',46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,',
',46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,',
',,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46',
'46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,46,46,48,48,48,,48,,,,48,48,',
',,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,',
',48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,',
',,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48,,,,48',
'48,,,,,,,48,,,48,48,48,,48,48,62,62,62,62,62,,,,62,62,,,,62,,62,62,62',
'62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,62,62,,62,62,62,62,62',
'62,62,62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,',
'62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,',
'62,,,62,62,62,,62,62,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67',
'67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67',
',67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,',
',,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67',
',67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68',
'68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68',
'68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,',
'68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68,,68,68,71,71,71',
',71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,',
',71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,',
',,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71',
'71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,71,71,72,72,72,,72,,,,72',
'72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,',
'72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,988,,988,988',
'988,988,988,,,,,,,,72,,988,72,,,72,72,,,72,,72,,,,,,,,,,,,988,,,,,72',
'72,72,72,72,72,988,988,,72,72,,,,,,,72,,,72,72,72,,72,72,128,128,128',
'128,128,,,,128,128,,,,128,988,128,128,128,128,128,128,128,,,,,,128,128',
'128,128,128,128,128,,,128,,,,,,128,128,128,128,128,128,128,128,128,128',
'128,128,,128,128,128,,128,128,,128,128,128,,,,,,,,,,,,,,,,,,,,128,,',
'128,,,128,128,,,128,,128,,,,128,,,,,,,,128,,,,,128,128,128,128,128,128',
',,,128,128,,,,,,128,128,,,128,128,128,,128,128,133,133,133,,133,,,,133',
'133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133,133,133,133',
'133,,,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133,133,133,',
'133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,',
',,,133,,,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,,,,,,,133,',
',133,133,133,,133,133,134,134,134,,134,,,,134,134,,,,134,,134,134,134',
'134,134,134,134,,,,,,134,134,134,134,134,134,134,,,134,,,,,,,134,,,134',
'134,134,134,134,134,134,134,,134,134,134,,134,134,,134,134,134,,,,,',
',,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134',
'134,134,134,134,134,,,,134,134,,,,,,,134,,,134,134,134,,134,134,135',
'135,135,,135,,,,135,135,,,,135,,135,135,135,135,135,135,135,,,,,,135',
'135,135,135,135,135,135,,,135,,,,,,,135,,,135,135,135,135,135,135,135',
'135,,135,135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135',
',,135,135,,,135,,,,,,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135',
'135,,,,,,,135,,,135,135,135,,135,135,136,136,136,,136,,,,136,136,,,',
'136,,136,136,136,136,136,136,136,,,,,,136,136,136,136,136,136,136,,',
'136,,,,,,,136,,,136,136,136,136,136,136,136,136,,136,136,136,,136,136',
',136,136,136,,,,,,,,,,,,,,,,,,,,136,,,136,,,136,136,,,136,,,,,,136,',
',,,,,,136,,,,,136,136,136,136,136,136,,,,136,136,,,,,,,136,,,136,136',
'136,,136,136,137,137,137,137,137,,,,137,137,,,,137,,137,137,137,137',
'137,137,137,,,,,,137,137,137,137,137,137,137,,,137,,,,,,137,137,,137',
'137,137,137,137,137,137,137,137,,137,137,137,,137,137,,137,137,137,',
',,,,,,,,,,,,,,,,,,137,,,137,,,137,137,,,137,,137,,,,137,,,,,,,,137,',
',,,137,137,137,137,137,137,,,,137,137,,,,,,,137,,,137,137,137,,137,137',
'222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,',
',222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222',
'222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,',
'222,,,222,222,,,222,,222,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222',
',,,222,222,,,,,,,222,,,222,222,222,,222,222,223,223,223,,223,,,,223',
'223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223',
'223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,',
'223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,223',
',,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,',
',223,223,223,,223,223,224,224,224,,224,,,,224,224,,,,224,,224,224,224',
'224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224',
'224,224,224,224,224,224,224,,224,224,224,,224,224,,224,224,224,,,,,',
',,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224',
'224,224,224,224,224,,,,224,224,,,,,,,224,,,224,224,224,,224,224,225',
'225,225,,225,,,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225',
'225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225',
'225,,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225',
',,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225',
'225,,,,,,,225,,,225,225,225,,225,225,226,226,226,,226,,,,226,226,,,',
'226,,226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,',
'226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226',
',226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,',
',,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,,226,,,226,226',
'226,,226,226,227,227,227,,227,,,,227,227,,,,227,,227,227,227,227,227',
'227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227',
'227,227,227,227,227,227,227,227,227,,227,227,,227,227,227,,,,,,,,,,',
',,,,,,,,,227,,,227,,,227,227,,,227,,227,,227,,227,,,,,,,,227,,,,,227',
'227,227,227,227,227,,,,227,227,,,,,,,227,,227,227,227,227,,227,227,232',
'232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232',
'232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232',
'232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232',
',,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232',
'232,,,,,,,232,,,232,232,232,,232,232,233,233,233,,233,,,,233,233,,,',
'233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,',
'233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233',
',233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,',
',,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233,,,233,233',
'233,,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234',
'234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,',
',,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234',
'234,234,234,,,,234,234,234,,,,,,234,,,234,234,234,,234,234,245,245,245',
',245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245',
'245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245',
',,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,',
',,,245,,,245,245,245,,245,245,248,248,248,,248,,,,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248',
',,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,,248',
'248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249',
',,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249',
',,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249',
',,,249,249,,,,,,,249,,,249,249,249,,249,249,250,250,250,,250,,,,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250,',
'250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250,',
',250,250,250,,250,250,251,251,251,,251,,,,251,251,,,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,',
',,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251',
'251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,251,251,252',
'252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252',
'252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252',
'252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252',
',,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252',
'252,,,,,,,252,,,252,252,252,,252,252,253,253,253,,253,,,,253,253,,,',
'253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,',
'253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253',
',253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,',
',,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253',
'253,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,',
',,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254',
'254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,254,254,255,255,255',
',255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255',
'255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,',
',,,255,,,255,255,255,,255,255,256,256,256,,256,,,,256,256,,,,256,,256',
'256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,',
',256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,,256,256',
'256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256',
',,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,256',
'256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257',
',,,257,257,,,,,,,257,,,257,257,257,,257,257,258,258,258,,258,,,,258',
'258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258',
'258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,',
'258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,',
',258,258,258,,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,',
',,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259',
'259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,259,259,260',
'260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260,,,,,,260',
'260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260',
'260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260',
',,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260',
'260,,,,,,,260,,,260,260,260,,260,260,261,261,261,,261,,,,261,261,,,',
'261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,',
'261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261',
',261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,',
',,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261',
'261,,261,261,262,262,262,,262,,,,262,262,,,,262,,262,262,262,262,262',
'262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262',
'262,262,262,262,262,,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,',
',,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262,262,262',
'262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,262,262,263,263,263',
',263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263',
'263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263',
'263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263',
',,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,',
',,,263,,,263,263,263,,263,263,264,264,264,,264,,,,264,264,,,,264,,264',
'264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,',
',264,,,264,264,264,264,264,264,264,264,,264,264,264,,264,264,,264,264',
'264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264',
',,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,,,264,264,264,,264',
'264,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265,265',
',,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265',
'265,265,265,,265,265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265',
',,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265',
',,,265,265,,,,,,,265,,,265,265,265,,265,265,266,266,266,,266,,,,266',
'266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266',
'266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266,,266,266,266,',
'266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,',
',,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,',
',266,266,266,,266,266,267,267,267,,267,,,,267,267,,,,267,,267,267,267',
'267,267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267',
'267,267,267,267,267,267,267,,267,267,267,,267,267,,267,267,267,,,,,',
',,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267',
'267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267,267,,267,267,268',
'268,268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268',
'268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268',
'268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268',
',,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268',
'268,,,,,,,268,,,268,268,268,,268,268,269,269,269,,269,,,,269,269,,,',
'269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269,,',
'269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269,269,269,,269,269',
',269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,',
',,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,,,269,269',
'269,,269,269,274,274,274,,274,,,,274,274,,,,274,,274,274,274,274,274',
'274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274',
'274,274,274,274,274,,274,274,274,,274,274,,274,274,274,,,,,,,,,,,,,',
',,,,,,274,,,274,,,274,274,,,274,,,,,,274,,,,,,,,274,,,,,274,274,274',
'274,274,274,,,,274,274,,,,,,,274,,,274,274,274,,274,274,282,282,282',
',282,,,,282,282,,,,282,,282,282,282,282,282,282,282,,,,,,282,282,282',
'282,282,282,282,,,282,,,,,,,282,,,282,282,282,282,282,282,282,282,282',
'282,282,282,,282,282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282',
'282,,,282,,282,,282,,282,,,,,,,,282,,,,,282,282,282,282,282,282,,,,282',
'282,,,,,,,282,,282,282,282,282,,282,282,283,283,283,,283,,,,283,283',
',,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283,283,283',
',,283,,,,,,,283,,,283,283,283,283,283,283,283,283,283,283,283,283,,283',
'283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,283,',
'283,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,,,,,,,283',
',283,283,283,283,,283,283,292,292,292,,292,,,,292,292,,,,292,,292,292',
'292,292,292,292,292,,,,,,292,292,292,292,292,292,292,,,292,,,,,,,292',
',,292,292,292,292,292,292,292,292,292,292,292,292,,292,292,,292,292',
'292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,292,,292,,292,,,,',
',,,292,,,,,292,292,292,292,292,292,,,,292,292,292,,,,,,292,,292,292',
'292,292,,292,292,299,299,299,,299,,,,299,299,,,,299,,299,299,299,299',
'299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,,,299,,,299,299',
'299,299,299,299,299,299,,299,299,299,,299,299,,299,299,299,,,,,,,,,',
',,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,299,,,,,,,,299,,,,,299,299',
'299,299,299,299,,,,299,299,,,,,,,299,,,299,299,299,,299,299,301,301',
'301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301',
'301,301,301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301,301',
',301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301',
'301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301',
',,,,,,301,,,301,301,301,,301,301,304,304,304,,304,,,,304,304,,,,304',
',304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304',
',,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304,,304,304,,304',
'304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,304,,,,,,',
',304,,,,,304,304,304,304,304,304,,,,304,304,,,,,,,304,,,304,304,304',
',304,304,305,305,305,,305,,,,305,305,,,,305,,305,305,305,305,305,305',
'305,,,,,,305,305,305,305,305,305,305,,,305,,,,,,,305,,,305,305,305,305',
'305,305,305,305,,305,305,305,,305,305,,305,305,305,,,,,,,,,,,,,,,,,',
',,305,,,305,,,305,305,,,305,,,,,,305,,,,,,,,305,,,,,305,305,305,305',
'305,305,,,,305,305,,,,,,,305,,,305,305,305,,305,305,311,311,311,311',
'311,,,,311,311,,,,311,,311,311,311,311,311,311,311,,,,,,311,311,311',
'311,311,311,311,,,311,,,,,,311,311,,311,311,311,311,311,311,311,311',
'311,,311,311,311,,311,311,,311,311,311,,,,,,,,,,,,,,,,,,,,311,,,311',
',,311,311,,,311,,311,,,,311,,,,,,,,311,,,,,311,311,311,311,311,311,',
',,311,311,,,,,,,311,,,311,311,311,,311,311,319,319,319,,319,,,,319,319',
',,,319,,319,319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319',
',,319,,,,,,,319,,,319,319,319,319,319,319,319,319,,319,319,319,,319',
'319,,,,319,,,,,,1052,,1052,1052,1052,1052,1052,,,,,,,,319,,1052,319',
',,319,319,,,319,,,,,,,,,,,,,,1052,,,,,319,319,319,319,319,319,1052,1052',
',319,319,,,,319,,,319,,,319,319,319,,319,319,336,336,336,,336,,,,336',
'336,,,,336,1052,336,336,336,336,336,336,336,,,,,,336,336,336,336,336',
'336,336,,,336,,,,,,,336,,,336,336,336,336,336,336,336,336,,336,336,336',
',336,336,,,,336,,,,,,1061,,1061,1061,1061,1061,1061,,,,,,,,336,,1061',
'336,,,336,336,,,336,,,,,,,,,,,,,,1061,,,,,336,336,336,336,336,336,1061',
'1061,,336,336,,,,,,,336,,,336,336,336,,336,336,343,343,343,,343,,,,343',
'343,,,,343,1061,343,343,343,343,343,343,343,,,,,,343,343,343,343,343',
'343,343,,,343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343',
',343,343,,343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,',
',,,,343,,,,,,,,343,,,,,343,343,343,343,343,343,,,,343,343,,,,,,,343',
',,343,343,343,,343,343,345,345,345,,345,,,,345,345,,,,345,,345,345,345',
'345,345,345,345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,,345,,,345',
'345,345,345,345,345,345,345,,345,345,345,,345,345,,345,345,345,,,,,',
',,,,,,,,,,,,,,345,,,345,345,,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345',
'345,345,345,345,345,,,,345,345,,,,,,,345,,,345,345,345,,345,345,349',
'349,349,,349,,,,349,349,,,,349,,349,349,349,349,349,349,349,,,,,,349',
'349,349,349,349,349,349,,,349,,,,,,,349,,,349,349,349,349,349,349,349',
'349,349,349,349,349,,349,349,,349,349,349,,,,,,,,,,,,,,,,,,,,349,,,349',
',,349,349,,,349,,349,,,,349,,,,,,,,349,,,,,349,349,349,349,349,349,',
',,349,349,,,,,,,349,,349,349,349,349,,349,349,350,350,350,,350,,,,350',
'350,,,,350,,350,350,350,350,350,350,350,,,,,,350,350,350,350,350,350',
'350,,,350,,,,,,,350,,,350,350,350,350,350,350,350,350,350,350,350,350',
',350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,,,350,350,,,350,',
',,,,350,,,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,,,,,,,350',
',350,350,350,350,,350,350,355,355,355,,355,,,,355,355,,,,355,,355,355',
'355,355,355,355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,,,355',
',,355,355,355,355,355,355,355,355,,355,355,355,,355,355,,355,355,355',
',,,,,,,,,,,,,,,,,,,355,,,355,,,355,355,,,355,,,,,,355,,,,,,,,355,,,',
',355,355,355,355,355,355,,,,355,355,,,,,,,355,,,355,355,355,,355,355',
'369,369,369,,369,,,,369,369,,,,369,,369,369,369,369,369,369,369,,,,',
',369,369,369,369,369,369,369,,,369,,,,,,,369,,,369,369,369,369,369,369',
'369,369,,369,369,369,,369,369,,,,369,,,,,,1063,,1063,1063,1063,1063',
'1063,,,,,,,,369,,1063,369,,,369,369,,,369,,,,,,,,,,,,,,1063,,,,,369',
'369,369,369,369,369,1063,1063,,369,369,,,,,,,369,,,369,369,369,,369',
'369,371,371,371,,371,,,,371,371,,,,371,1063,371,371,371,371,371,371',
'371,,,,,,371,371,371,371,371,371,371,,,371,,,,,,,371,,,371,371,371,371',
'371,371,371,371,,371,371,371,,371,371,,,,371,,,,,,1065,,1065,1065,1065',
'1065,1065,,,,,,,,371,,1065,371,,,371,371,,,371,,,,,,,,,,,,,,1065,,,',
',371,371,371,371,371,371,1065,1065,,371,371,,,,,,,371,,,371,371,371',
',371,371,431,431,431,,431,,,,431,431,,,,431,1065,431,431,431,431,431',
'431,431,,,,,,431,431,431,431,431,431,431,,,431,,,,,,,431,,,431,431,431',
'431,431,431,431,431,,431,431,431,,431,431,,431,431,431,,,,,,,,,,,,,',
',,,,,,431,,,431,,,431,431,,,431,,,,,,431,,,,,,,,431,,,,,431,431,431',
'431,431,431,,,,431,431,,,,,,,431,,,431,431,431,,431,431,475,475,475',
',475,,,,475,475,,,,475,,475,475,475,475,475,475,475,,,,,,475,475,475',
'475,475,475,475,,,475,,,,,,,475,,,475,475,475,475,475,475,475,475,475',
'475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475,,,475',
'475,,,475,,475,,475,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475',
'475,,,,,,,475,,475,475,475,475,,475,475,477,477,477,,477,,,,477,477',
',,,477,,477,477,477,477,477,477,477,,,,,,477,477,477,477,477,477,477',
',,477,,,,,,,477,,,477,477,477,477,477,477,477,477,,477,477,477,,477',
'477,,477,477,477,,,,,,,,,,,,,,,,,,,,477,,,477,,,477,477,,,477,,,,,,477',
',,,,,,,477,,,,,477,477,477,477,477,477,,,,477,477,,,,,,,477,,,477,477',
'477,,477,477,478,478,478,,478,,,,478,478,,,,478,,478,478,478,478,478',
'478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478,478',
'478,478,478,478,478,,478,478,478,,478,478,,478,478,478,,,,,,,,,,,,,',
',,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,,,478,,,,,478,478,478',
'478,478,478,,,,478,478,,,,,,,478,,,478,478,478,,478,478,479,479,479',
',479,,,,479,479,,,,479,,479,479,479,479,479,479,479,,,,,,479,479,479',
'479,479,479,479,,,479,,,,,,,479,,,479,479,479,479,479,479,479,479,,479',
'479,479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479,479',
',,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479,479,479,,,,479,479,,,',
',,,479,,,479,479,479,,479,479,517,517,517,,517,,,,517,517,,,,517,,517',
'517,517,517,517,517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,',
',517,,,517,517,517,517,517,517,517,517,517,517,517,517,,517,517,,517',
'517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517,,517,,517,,517',
',,,,,,,517,,,,,517,517,517,517,517,517,,,,517,517,,,,,,,517,,517,517',
'517,517,,517,517,520,520,520,,520,,,,520,520,,,,520,,520,520,520,520',
'520,520,520,,,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520',
'520,520,520,520,520,520,520,520,520,520,,520,520,,520,520,520,,,,,,',
',,,,,,,,,,,,,520,,,520,,,520,520,,,520,,,,520,,520,,,,,,,,520,,,,,520',
'520,520,520,520,520,,,,520,520,,,,,,,520,,520,520,520,520,,520,520,522',
'522,522,,522,,,,522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522',
'522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522',
'522,,522,522,522,,522,522,,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522',
',,522,522,,,522,,,,,,522,,,,,,,,522,,,,,522,522,522,522,522,522,,,,522',
'522,,,,,,,522,,,522,522,522,,522,522,528,528,528,528,528,,,,528,528',
',,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528',
',,528,,,,,,528,528,528,528,528,528,528,528,528,528,528,528,,528,528',
'528,,528,528,,528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528',
',528,,,,528,,,,,,,,528,,,,,528,528,528,528,528,528,,,,528,528,,,,,,528',
'528,,,528,528,528,,528,528,536,536,536,,536,,,,536,536,,,,536,,536,536',
'536,536,536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536',
',,536,536,536,536,536,536,536,536,,536,536,536,,536,536,,,,536,,,,,',
'1087,,1087,1087,1087,1087,1087,,,,,,,,536,,1087,536,,,536,536,,,536',
',,,,,,,,,,,,,1087,,,,,536,536,536,536,536,536,1087,1087,,536,536,,,',
',,,536,,,536,536,536,,536,536,538,538,538,,538,,,,538,538,,,,538,1087',
'538,538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538,,,538,',
',,,,,538,,,538,538,538,538,538,538,538,538,538,538,538,538,,538,538',
',538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538,,538,,538',
',538,,,,,,,,538,,,,,538,538,538,538,538,538,,,,538,538,,,,,,,538,,538',
'538,538,538,,538,538,544,544,544,,544,,,,544,544,,,,544,,544,544,544',
'544,544,544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,,,544,,,544',
'544,544,544,544,544,544,544,,544,544,544,,544,544,,,,544,,,,,,,,,,,',
',,,,,,,,544,,,544,,,544,544,,,544,,,,,,,,,,,,,,,,,,,544,544,544,544',
'544,544,,,,544,544,,,,,,,544,,,544,544,544,,544,544,547,547,547,,547',
',,,547,547,,,,547,,547,547,547,547,547,547,547,,,,,,547,547,547,547',
'547,547,547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,547,,547,547',
'547,,547,547,,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,547,,,547',
',,,,,547,,,,,,,,547,,,,,547,547,547,547,547,547,,,,547,547,,,,,,,547',
',,547,547,547,,547,547,548,548,548,,548,,,,548,548,,,,548,,548,548,548',
'548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548,,,,,,,548,,,548',
'548,548,548,548,548,548,548,,548,548,548,,548,548,,548,548,548,,,,,',
',,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,,,,,548,,,,,,,,548,,,,,548',
'548,548,548,548,548,,,,548,548,,,,,,,548,,,548,548,548,,548,548,553',
'553,553,,553,,,,553,553,,,,553,,553,553,553,553,553,553,553,,,,,,553',
'553,553,553,553,553,553,,,553,,,,,,,553,,,553,553,553,553,553,553,553',
'553,,553,553,553,,553,553,,553,553,553,,,,,,,,,,,,,,,,,,,,553,,,553',
',,553,553,,,553,,,,,,553,,,,,,,,553,,,,,553,553,553,553,553,553,,,,553',
'553,,,,,,,553,,,553,553,553,,553,553,577,577,577,,577,,,,577,577,,,',
'577,,577,577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,',
'577,,,,,,,577,,,577,577,577,577,577,577,577,577,577,577,577,577,,577',
'577,,577,577,577,,,,,,,,,,,,,,,,,,,,577,,,577,,,577,577,,,577,,577,',
'577,,577,,,,,,,,577,,,,,577,577,577,577,577,577,,,,577,577,,,,,,,577',
',577,577,577,577,,577,577,589,589,589,,589,,,,589,589,,,,589,,589,589',
'589,589,589,589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,,,589',
',,589,589,589,589,589,589,589,589,,589,589,589,,589,589,,589,589,589',
',,,,,,,,,,,,,,,,,,,589,,,589,,,589,589,,,589,,,,,,589,,,,,,,,589,,,',
',589,589,589,589,589,589,,,,589,589,,,,,,,589,,,589,589,589,,589,589',
'595,595,595,,595,,,,595,595,,,,595,,595,595,595,595,595,595,595,,,,',
',595,595,595,595,595,595,595,,,595,,,,,,,595,,,595,595,595,595,595,595',
'595,595,,595,595,595,,595,595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,',
'595,,,595,595,,,595,,,,,,595,,,,,,,,595,,,,,595,595,595,595,595,595',
',,,595,595,,,,,,,595,,,595,595,595,,595,595,617,617,617,,617,,,,617',
'617,,,,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617,617,617',
'617,,,617,,,,,,,617,,,617,617,617,617,617,617,617,617,,617,617,617,',
'617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,,',
',,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,,,,,,,617,',
',617,617,617,,617,617,657,657,657,,657,,,,657,657,,,,657,,657,657,657',
'657,657,657,657,,,,,,657,657,657,657,657,657,657,,,657,,,,,,,657,,,657',
'657,657,657,657,657,657,657,,657,657,657,,657,657,,657,657,657,,,,,',
',,,,,,,,,,,,,,657,,,657,,,657,657,,,657,,657,,,,657,,,,,,,,657,,,,,657',
'657,657,657,657,657,,,,657,657,,,,,,,657,,,657,657,657,,657,657,658',
'658,658,,658,,,,658,658,,,,658,,658,658,658,658,658,658,658,,,,,,658',
'658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658,658,658',
'658,,658,658,658,,658,658,,658,658,658,,,,,,,,,,,,,,,,,,,,658,,,658',
',,658,658,,,658,,,,,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658',
'658,,,,,,,658,,,658,658,658,,658,658,659,659,659,,659,,,,659,659,,,',
'659,,659,659,659,659,659,659,659,,,,,,659,659,659,659,659,659,659,,',
'659,,,,,,,659,,,659,659,659,659,659,659,659,659,659,659,659,659,,659',
'659,,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,659,',
'659,,659,,,,,,,,659,,,,,659,659,659,659,659,659,,,,659,659,,,,,,,659',
',659,659,659,659,,659,659,662,662,662,662,662,,,,662,662,,,,662,,662',
'662,662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,',
'662,662,,662,662,662,662,662,662,662,662,662,,662,662,662,,662,662,',
'662,662,662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,662,,,,662',
',,,,,,,662,,,,,662,662,662,662,662,662,,,,662,662,,,,,,,662,,,662,662',
'662,,662,662,663,663,663,,663,,,,663,663,,,,663,,663,663,663,663,663',
'663,663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,,663,,,663,663,663',
'663,663,663,663,663,,663,663,663,,663,663,,663,663,663,,,,,,,,,,,,,',
',,,,,,663,,,663,,,663,663,,,663,,,,,,663,,,,,,,,663,,,,,663,663,663',
'663,663,663,,,,663,663,,,,,,,663,,,663,663,663,,663,663,666,666,666',
',666,,,,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666,666,666',
'666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666,666,666',
'666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666',
'666,,,666,,666,,666,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666',
'666,,,,,,,666,,666,666,666,666,,666,666,667,667,667,,667,,,,667,667',
',,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667,667',
',,667,,,,,,,667,,,667,667,667,667,667,667,667,667,667,667,667,667,,667',
'667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,,,667',
',667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667,,667',
'667,667,667,,667,667,668,668,668,,668,,,,668,668,,,,668,,668,668,668',
'668,668,668,668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668,,,668',
'668,668,668,668,668,668,668,,668,668,668,,668,668,,668,668,668,,,,,',
',,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,,,668,,,,,,,,668,,,,,668',
'668,668,668,668,668,,,,668,668,,,,,,,668,,,668,668,668,,668,668,669',
'669,669,,669,,,,669,669,,,,669,,669,669,669,669,669,669,669,,,,,,669',
'669,669,669,669,669,669,,,669,,,,,,,669,,,669,669,669,669,669,669,669',
'669,,669,669,669,,669,669,,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669',
',,669,669,,,669,,,,,,669,,,,,,,,669,,,,,669,669,669,669,669,669,,,,669',
'669,,,,,,,669,,,669,669,669,,669,669,674,674,674,,674,,,,674,674,,,',
'674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674,,',
'674,,,,,,,674,,,674,674,674,674,674,674,674,674,,674,674,674,,674,674',
',674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,,,,,674,',
',,,,,,674,,,,,674,674,674,674,674,674,,,,674,674,,,,,,,674,,,674,674',
'674,,674,674,675,675,675,,675,,,,675,675,,,,675,,675,675,675,675,675',
'675,675,,,,,,675,675,675,675,675,675,675,,,675,,,,,,,675,,,675,675,675',
'675,675,675,675,675,,675,675,675,,675,675,,675,675,675,,,,,,,,,,,,,',
',,,,,,675,,,675,,,675,675,,,675,,,,,,675,,,,,,,,675,,,,,675,675,675',
'675,675,675,,,,675,675,,,,,,,675,,,675,675,675,,675,675,699,699,699',
',699,,,,699,699,,,,699,,699,699,699,699,699,699,699,,,,,,699,699,699',
'699,699,699,699,,,699,,,,,,,699,,,699,699,699,699,699,699,699,699,,699',
'699,699,,699,699,,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699,,,699,699',
',,699,,,,,,699,,,,,,,,699,,,,,699,699,699,699,699,699,,,,699,699,,,',
',,,699,,,699,699,699,,699,699,702,702,702,,702,,,,702,702,,,,702,,702',
'702,702,702,702,702,702,,,,,,702,702,702,702,702,702,702,,,702,,,,,',
',702,,,702,702,702,702,702,702,702,702,,702,702,702,,702,702,,702,702',
'702,,,,,,,,,,,,,,,,,,,,702,,,702,,,702,702,,,702,,,,,,702,,,,,,,,702',
',,,,702,702,702,702,702,702,,,,702,702,,,,,,,702,,,702,702,702,,702',
'702,706,706,706,,706,,,,706,706,,,,706,,706,706,706,706,706,706,706',
',,,,,706,706,706,706,706,706,706,,,706,,,,,,,706,,,706,706,706,706,706',
'706,706,706,,706,706,706,,706,706,,,,706,,,,,,,,,,,,,,,,,,,,706,,,706',
',,706,706,,,706,,,,,,,,,,,,,,,,,,,706,706,706,706,706,706,,,,706,706',
',,,,,,706,,,706,706,706,,706,706,717,717,717,,717,,,,717,717,,,,717',
',717,717,717,717,717,717,717,,,,,,717,717,717,717,717,717,717,,,717',
',,,,,,717,,,717,717,717,717,717,717,717,717,,717,717,717,,717,717,,',
',717,,,,,,,,,,,,,,,,,,,,717,,,717,,,717,717,,,717,,,,,,,,,,,,,,,,,,',
'717,717,717,717,717,717,,,,717,717,,,,,,,717,,,717,717,717,,717,717',
'723,723,723,,723,,,,723,723,,,,723,,723,723,723,723,723,723,723,,,,',
',723,723,723,723,723,723,723,,,723,,,,,,,723,,,723,723,723,723,723,723',
'723,723,,723,723,723,,723,723,,723,723,723,,,,,,,,,,,,,,,,,,,,723,,',
'723,,,723,723,,,723,,723,,,,723,,,,,,,,723,,,,,723,723,723,723,723,723',
',,,723,723,,,,,,,723,,,723,723,723,,723,723,728,728,728,,728,,,,728',
'728,,,,728,,728,728,728,728,728,728,728,,,,,,728,728,728,728,728,728',
'728,,,728,,,,,,,728,,,728,728,728,728,728,728,728,728,728,728,728,728',
',728,728,,728,728,728,,,,,,,,,,,,,,,,,,,,728,,,728,,,728,728,,,728,',
'728,,,,728,,,,,,,,728,,,,,728,728,728,728,728,728,,,,728,728,,,,,,,728',
',728,728,728,728,,728,728,731,731,731,,731,,,,731,731,,,,731,,731,731',
'731,731,731,731,731,,,,,,731,731,731,731,731,731,731,,,731,,,,,,,731',
',,731,731,731,731,731,731,731,731,731,731,731,731,,731,731,,731,731',
'731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731,731,,,731,,,,,,731,,,,,,,,731',
',,,,731,731,731,731,731,731,,,,731,731,,,,,,,731,,731,731,731,731,,731',
'731,745,745,745,,745,,,,745,745,,,,745,,745,745,745,745,745,745,745',
',,,,,745,745,745,745,745,745,745,,,745,,,,,,,745,,,745,745,745,745,745',
'745,745,745,,745,745,745,,745,745,,745,745,745,,,,,,,,,,,,,,,,,,,,745',
',,745,,,745,745,,,745,,745,,,,745,,,,,,,,745,,,,,745,745,745,745,745',
'745,,,,745,745,,,,,,,745,,,745,745,745,,745,745,757,757,757,,757,,,',
'757,757,,,,757,,757,757,757,757,757,757,757,,,,,,757,757,757,757,757',
'757,757,,,757,,,,,,,757,,,757,757,757,757,757,757,757,757,757,757,757',
'757,,757,757,,757,757,757,,,,,,,,,,,,,,,,,,,,757,,,757,,,757,757,,,757',
',757,,757,,757,,,,,,,,757,,,,,757,757,757,757,757,757,,,,757,757,,,',
',,,757,,757,757,757,757,,757,757,780,780,780,,780,,,,780,780,,,,780',
',780,780,780,780,780,780,780,,,,,,780,780,780,780,780,780,780,,,780',
',,,,,,780,,,780,780,780,780,780,780,780,780,,780,780,780,,780,780,,780',
'780,780,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,780,,,780,,,,,,780,,,,,,',
',780,,,,,780,780,780,780,780,780,,,,780,780,,,,,,,780,,,780,780,780',
',780,780,802,802,802,,802,,,,802,802,,,,802,,802,802,802,802,802,802',
'802,,,,,,802,802,802,802,802,802,802,,,802,,,,,,,802,,,802,802,802,802',
'802,802,802,802,,802,802,802,,802,802,,802,802,802,,,,,,,,,,,,,,,,,',
',,802,,,802,,,802,802,,,802,,,,,,802,,,,,,,,802,,,,,802,802,802,802',
'802,802,,,,802,802,,,,,,,802,,,802,802,802,,802,802,810,810,810,,810',
',,,810,810,,,,810,,810,810,810,810,810,810,810,,,,,,810,810,810,810',
'810,810,810,,,810,,,,,,,810,,,810,810,810,810,810,810,810,810,,810,810',
'810,,810,810,,810,810,810,,,,,,,,,,,,,,,,,,,,810,,,810,,,810,810,,,810',
',,,,,810,,,,,,,,810,,,,,810,810,810,810,810,810,,,,810,810,,,,,,,810',
',,810,810,810,,810,810,823,823,823,,823,,,,823,823,,,,823,,823,823,823',
'823,823,823,823,,,,,,823,823,823,823,823,823,823,,,823,,,,,,,823,,,823',
'823,823,823,823,823,823,823,,823,823,823,,823,823,,823,823,823,,,,,',
',,,,,,,,,,,,,,823,,,823,,,823,823,,,823,,,,,,823,,,,,,,,823,,,,,823',
'823,823,823,823,823,,,,823,823,,,,,,,823,,,823,823,823,,823,823,824',
'824,824,,824,,,,824,824,,,,824,,824,824,824,824,824,824,824,,,,,,824',
'824,824,824,824,824,824,,,824,,,,,,,824,,,824,824,824,824,824,824,824',
'824,,824,824,824,,824,824,,824,824,824,,,,,,,,,,,,,,,,,,,,824,,,824',
',,824,824,,,824,,,,,,824,,,,,,,,824,,,,,824,824,824,824,824,824,,,,824',
'824,,,,,,,824,,,824,824,824,,824,824,825,825,825,,825,,,,825,825,,,',
'825,,825,825,825,825,825,825,825,,,,,,825,825,825,825,825,825,825,,',
'825,,,,,,,825,,,825,825,825,825,825,825,825,825,,825,825,825,,825,825',
',825,825,825,,,,,,,,,,,,,,,,,,,,825,,,825,,,825,825,,,825,,,,,,825,',
',,,,,,825,,,,,825,825,825,825,825,825,,,,825,825,,,,,,,825,,,825,825',
'825,,825,825,826,826,826,,826,,,,826,826,,,,826,,826,826,826,826,826',
'826,826,,,,,,826,826,826,826,826,826,826,,,826,,,,,,,826,,,826,826,826',
'826,826,826,826,826,,826,826,826,,826,826,,826,826,826,,,,,,,,,,,,,',
',,,,,,826,,,826,,,826,826,,,826,,,,,,826,,,,,,,,826,,,,,826,826,826',
'826,826,826,,,,826,826,,,,,,,826,,,826,826,826,,826,826,828,828,828',
',828,,,,828,828,,,,828,,828,828,828,828,828,828,828,,,,,,828,828,828',
'828,828,828,828,,,828,,,,,,,828,,,828,828,828,828,828,828,828,828,,828',
'828,828,,828,828,,828,828,828,,,,,,,,,,,,,,,,,,,,828,,,828,,,828,828',
',,828,,,,,,828,,,,,,,,828,,,,,828,828,828,828,828,828,,,,828,828,,,',
',,,828,,,828,828,828,,828,828,861,861,861,,861,,,,861,861,,,,861,,861',
'861,861,861,861,861,861,,,,,,861,861,861,861,861,861,861,,,861,,,,,',
',861,,,861,861,861,861,861,861,861,861,,861,861,861,,861,861,,861,861',
'861,,,,,,,,,,,,,,,,,,,,861,,,861,,,861,861,,,861,,,,,,861,,,,,,,,861',
',,,,861,861,861,861,861,861,,,,861,861,,,,,,,861,,,861,861,861,,861',
'861,868,868,868,,868,,,,868,868,,,,868,,868,868,868,868,868,868,868',
',,,,,868,868,868,868,868,868,868,,,868,,,,,,,868,,,868,868,868,868,868',
'868,868,868,,868,868,868,,868,868,,868,868,868,,,,,,,,,,,,,,,,,,,,868',
',,868,,,868,868,,,868,,,,,,868,,,,,,,,868,,,,,868,868,868,868,868,868',
',,,868,868,,,,,,,868,,,868,868,868,,868,868,877,877,877,,877,,,,877',
'877,,,,877,,877,877,877,877,877,877,877,,,,,,877,877,877,877,877,877',
'877,,,877,,,,,,,877,,,877,877,877,877,877,877,877,877,,877,877,877,',
'877,877,,877,877,877,,,,,,,,,,,,,,,,,,,,877,,,877,,,877,877,,,877,,',
',,,877,,,,,,,,877,,,,,877,877,877,877,877,877,,,,877,877,,,,,,,877,',
',877,877,877,,877,877,919,919,919,,919,,,,919,919,,,,919,,919,919,919',
'919,919,919,919,,,,,,919,919,919,919,919,919,919,,,919,,,,,,,919,,,919',
'919,919,919,919,919,919,919,919,919,919,919,,919,919,,919,919,919,,',
',,,,,,,,,,,,,,,,,919,,,919,,,919,919,,,919,,,,919,,919,,,,,,,,919,,',
',,919,919,919,919,919,919,,,,919,919,,,,,,,919,,919,919,919,919,,919',
'919,920,920,920,,920,,,,920,920,,,,920,,920,920,920,920,920,920,920',
',,,,,920,920,920,920,920,920,920,,,920,,,,,,,920,,,920,920,920,920,920',
'920,920,920,,920,920,920,,920,920,,920,920,920,,,,,,,,,,,,,,,,,,,,920',
',,920,,,920,920,,,920,,,,,,920,,,,,,,,920,,,,,920,920,920,920,920,920',
',,,920,920,,,,,,,920,,,920,920,920,,920,920,932,932,932,,932,,,,932',
'932,,,,932,,932,932,932,932,932,932,932,,,,,,932,932,932,932,932,932',
'932,,,932,,,,,,,932,,,932,932,932,932,932,932,932,932,,932,932,932,',
'932,932,,,,932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932,932,,,932,,,,,,,,',
',,,,,,,,,,932,932,932,932,932,932,,,,932,932,,,,,,,932,,,932,932,932',
',932,932,941,941,941,,941,,,,941,941,,,,941,,941,941,941,941,941,941',
'941,,,,,,941,941,941,941,941,941,941,,,941,,,,,,,941,,,941,941,941,941',
'941,941,941,941,,941,941,941,,941,941,,,,941,,,,,,,,,,,,,,,,,,,,941',
',,941,,,941,941,,,941,,,,,,,,,,,,,,,,,,,941,941,941,941,941,941,,,,941',
'941,,,,,,,941,,,941,941,941,,941,941,949,949,949,,949,,,,949,949,,,',
'949,,949,949,949,949,949,949,949,,,,,,949,949,949,949,949,949,949,,',
'949,,,,,,,949,,,949,949,949,949,949,949,949,949,,949,949,949,,949,949',
',949,949,949,,,,,,,,,,,,,,,,,,,,949,,,949,,,949,949,,,949,,949,,,,949',
',,,,,,,949,,,,,949,949,949,949,949,949,,,,949,949,,,,,,,949,,,949,949',
'949,,949,949,992,992,992,,992,,,,992,992,,,,992,,992,992,992,992,992',
'992,992,,,,,,992,992,992,992,992,992,992,,,992,,,,,,,992,,,992,992,992',
'992,992,992,992,992,,992,992,992,,992,992,,,,992,,,,,,,,,,,,,,,,,,,',
'992,,,992,,,992,992,,,992,,,,,,,,,,,,,,,,,,,992,992,992,992,992,992',
',,,992,992,,,,,,,992,,,992,992,992,,992,992,1006,1006,1006,,1006,,,',
'1006,1006,,,,1006,,1006,1006,1006,1006,1006,1006,1006,,,,,,1006,1006',
'1006,1006,1006,1006,1006,,,1006,,,,,,,1006,,,1006,1006,1006,1006,1006',
'1006,1006,1006,,1006,1006,1006,,1006,1006,,1006,1006,1006,,,,,,,,,,',
',,,,,,,,,1006,,,1006,,,1006,1006,,,1006,,,,,,1006,,,,,,,,1006,,,,,1006',
'1006,1006,1006,1006,1006,,,,1006,1006,,,,,,,1006,,,1006,1006,1006,,1006',
'1006,1039,1039,1039,,1039,,,,1039,1039,,,,1039,,1039,1039,1039,1039',
'1039,1039,1039,,,,,,1039,1039,1039,1039,1039,1039,1039,,,1039,,,,,,',
'1039,,,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,',
'1039,1039,,1039,1039,1039,,,,,,,,,,,,,,,,,,,,1039,,,1039,,,1039,1039',
',,1039,,1039,,1039,,1039,,,,,,,,1039,,,,,1039,1039,1039,1039,1039,1039',
',,,1039,1039,,,,,,,1039,,1039,1039,1039,1039,,1039,1039,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11',
'11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,',
',,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11',
'11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12',
',,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,',
',,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12',
',,,,,,,,12,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,,,,,75,75,75,75,75',
'75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75,75,75,75,,,75,75,',
',,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75,75,75,75,75,75,75',
',,75,,,,,,,,,,,,,,,,,,,,75,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,,,,105,105,105,105',
'105,105,105,105,105,105,,,,,,105,105,105,105,105,105,105,105,105,105',
'105,105,,105,,,,,,,105,105,,105,105,105,105,105,105,105,,,105,105,,',
',105,105,105,105,,,,,,,,,,,,,,105,105,,105,105,105,105,105,105,105,105',
'105,105,105,,,105,,,,,,,,,,,,,,,,,,,,105,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
',,,422,422,422,422,422,422,422,422,422,422,,,,,,422,422,422,422,422',
'422,422,422,422,,,422,,,,,,,,,422,422,,422,422,422,422,422,422,422,',
',422,422,,,,422,422,422,422,,,,,,,,,,,,,,422,422,,422,422,422,422,422',
'422,422,422,422,422,422,,,422,422,,,,,,,,,,422,,,,,,,,,422,654,654,654',
'654,654,654,654,654,654,654,654,654,654,654,654,654,654,654,654,654',
'654,654,654,654,,,,654,654,654,654,654,654,654,654,654,654,,,,,,654',
'654,654,654,654,654,654,654,654,,,654,,,,,,,,,654,654,,654,654,654,654',
'654,654,654,,,654,654,,,,654,654,654,654,,,,,,,,,,,,,,654,654,,654,654',
'654,654,654,654,654,654,654,654,654,,,654,654,,,,,,,,,,654,,,,,,,,,654',
'766,766,766,766,766,766,766,766,766,766,766,766,766,766,766,766,766',
'766,766,766,766,766,766,766,,,,766,766,766,766,766,766,766,766,766,766',
',,,,,766,766,766,766,766,766,766,766,766,,,766,,,,,,,,,766,766,,766',
'766,766,766,766,766,766,,,766,766,,,,766,766,766,766,,,,,,,,,,,,,,766',
'766,,766,766,766,766,766,766,766,766,766,766,766,,,766,,,,,228,228,',
',228,,,,,,,,,228,228,766,228,228,228,228,228,228,228,,,228,228,,,,228',
'228,228,228,,,,,,228,,,,,,,,228,228,,228,228,228,228,228,228,228,228',
'228,228,228,,,228,,,,,229,229,,,229,,,,,,,,,229,229,228,229,229,229',
'229,229,229,229,,,229,229,,,,229,229,229,229,,,,,,229,,,,,,,,229,229',
',229,229,229,229,229,229,229,229,229,229,229,,,229,,,,,473,473,,,473',
',,,,,,,,473,473,229,473,473,473,473,473,473,473,,,473,473,,,,473,473',
'473,473,,,,,,473,,,,,,,,473,473,,473,473,473,473,473,473,473,473,473',
'473,473,,,473,,,,,474,474,,,474,,,,,,,,,474,474,473,474,474,474,474',
'474,474,474,,,474,474,,,,474,474,474,474,,,,,,474,,,,,,,,474,474,,474',
'474,474,474,474,474,474,474,474,474,474,,,474,,,,,539,539,,,539,,,,',
',,,,539,539,474,539,539,539,539,539,539,539,,,539,539,,,,539,539,539',
'539,,,,,,539,,,,,,,,539,539,,539,539,539,539,539,539,539,539,539,539',
'539,,,539,,,,,540,540,,,540,,,,,,,,,540,540,539,540,540,540,540,540',
'540,540,,,540,540,,,,540,540,540,540,,,,,,540,,,,,,,,540,540,,540,540',
'540,540,540,540,540,540,540,540,540,,,540,,,,,549,549,,,549,,,,,,,,',
'549,549,540,549,549,549,549,549,549,549,,,549,549,,,,549,549,549,549',
',,,,,549,,,,,,,,549,549,,549,549,549,549,549,549,549,549,549,549,549',
',,549,,,,,550,550,,,550,,,,,,,,,550,550,549,550,550,550,550,550,550',
'550,,,550,550,,,,550,550,550,550,,,,,,550,,,,,,,,550,550,,550,550,550',
'550,550,550,550,550,550,550,550,,,550,,,,,578,578,,,578,,,,,,,,,578',
'578,550,578,578,578,578,578,578,578,,,578,578,,,,578,578,578,578,,,',
',,578,,,,,,,,578,578,,578,578,578,578,578,578,578,578,578,578,578,,',
'578,,,,,579,579,,,579,,,,,,,,,579,579,578,579,579,579,579,579,579,579',
',,579,579,,,,579,579,579,579,,,,,,579,,,,,,,,579,579,,579,579,579,579',
'579,579,579,579,579,579,579,,,579,,,,,660,660,,,660,,,,,,,,,660,660',
'579,660,660,660,660,660,660,660,,,660,660,,,,660,660,660,660,,,,,,660',
',,,,,,,660,660,,660,660,660,660,660,660,660,660,660,660,660,,,660,,',
',,661,661,,,661,,,,,,,,,661,661,660,661,661,661,661,661,661,661,,,661',
'661,,,,661,661,661,661,,,,,,661,,,,,,,,661,661,,661,661,661,661,661',
'661,661,661,661,661,661,,,661,,,,,755,755,,,755,,,,,,,,,755,755,661',
'755,755,755,755,755,755,755,,,755,755,,,,755,755,755,755,,,,,,755,,',
',,,,,755,755,,755,755,755,755,755,755,755,755,755,755,755,,,755,,,,',
'756,756,,,756,,,,,,,,,756,756,755,756,756,756,756,756,756,756,,,756',
'756,,,,756,756,756,756,,,,,,756,,,,,,,,756,756,,756,756,756,756,756',
'756,756,756,756,756,756,,983,756,983,983,983,983,983,986,,986,986,986',
'986,986,,,983,,,,,756,,986,,,,,,,,,,,,,,,983,,,,,,,986,,983,983,983',
'983,,,,986,986,986,986,,,,,,,,,,,,,,,,,,1035,1035,,,1035,,,,983,,,,',
'1035,1035,986,1035,1035,1035,1035,1035,1035,1035,,,1035,1035,,,,1035',
'1035,1035,1035,,,,,,1035,,,,,,,,1035,1035,,1035,1035,1035,1035,1035',
'1035,1035,1035,1035,1035,1035,,,1035,,,,,1040,1040,,,1040,,,,,,,,,1040',
'1040,1035,1040,1040,1040,1040,1040,1040,1040,,,1040,1040,,,,1040,1040',
'1040,1040,,,,,,1040,,,,,,,,1040,1040,,1040,1040,1040,1040,1040,1040',
'1040,1040,1040,1040,1040,,,1040,,,,,1041,1041,,,1041,,,,,,,,,1041,1041',
'1040,1041,1041,1041,1041,1041,1041,1041,,,1041,1041,,,,1041,1041,1041',
'1041,,,,,,1041,,,,,,,,1041,1041,,1041,1041,1041,1041,1041,1041,1041',
'1041,1041,1041,1041,,1059,1041,1059,1059,1059,1059,1059,,,,,,,,,,1059',
',,,,1041,,,,,,,,,,,,,,,,,1059,,,,,,,,,1059,1059,1059,1059,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,1059' ]
        racc_action_check = arr = ::Array.new(26228, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    34,  2018,    60,   nil,   201,   nil,   nil,  6077,   763,
   nil, 24008, 24141,   -12,   nil,   -30,    60,   -17,   152,   279,
   112,   nil,   -60,  6216,  2298,   236,   nil,   -40,   nil,     0,
  1084,  1216,  6355,  6494,  6633,   nil,  2158,  6772,  6911,   nil,
   144,   208,   304,   268,   159,  7050,  7189,   489,  7328,   203,
   305,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1348,   nil,  7467,   nil,   nil,    73,   nil,  7606,  7745,   nil,
   nil,  7884,  8023,   270,   nil, 24274,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -65,   nil,   nil,   nil,   nil,   nil,   nil,   255,
   278,   284,   294,   nil,   nil, 24407,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   nil,   nil,   139,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  8162,   nil,
   nil,   nil,   nil,  8301,  8440,  8579,  8718,  8857,   323,   nil,
   605,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   331,
   nil,  2298,  8996,  9135,  9274,  9413,  9552,  9691, 24874, 24942,
   nil,   nil,  9830,  9969, 10108,   nil,   nil,   356,   -55,   -52,
   430,   162,   351,   434,   nil, 10247,  2438,   433, 10386, 10525,
 10664, 10803, 10942, 11081, 11220, 11359, 11498, 11637, 11776, 11915,
 12054, 12193, 12332, 12471, 12610, 12749, 12888, 13027, 13166, 13305,
   nil,   nil,   nil,   nil, 13444,   nil,   nil,   nil,  1876,   nil,
   nil,   434, 13583, 13722,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 13861,   nil,  2438,   nil,   406,   419,   nil, 14000,
   475, 14139,   nil,   nil, 14278, 14417,   nil,   nil,   460,   nil,
   nil, 14556,   925,   nil,   443,  2578,   464,   512,   477, 14695,
  2718,   371,   411,   458,   583,   510,   nil,   552,   531,   206,
   nil,   nil,   nil,   575,   254,   556, 14834,   nil,   308,   620,
   514,   nil,   646, 14973,   nil, 15112,  2858,  1166,   589, 15251,
 15390,   nil,    11,   -10,    -1, 15529,  2998,  3138,   476,   700,
   594,   -19,   -14,   589,   671,    -7,   703,   nil,   nil, 15668,
   nil, 15807,   112,   118,   120,   239,   344,   373,   377,   455,
   459,   nil,   461,   nil,   nil,   nil,   nil,   645,   nil,   -59,
   nil,   370,   nil,   538,   nil,   605,   378,   nil,   607,   397,
   nil,   609,   -37,   nil,   610,   -27,   nil,   443,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 24540,   nil,   nil,   nil,   nil,   624,   nil,   nil,
   612, 15946,   618,   nil,   nil,   618,   nil,   625,   182,   720,
   nil,   nil,  2018,   nil,   nil,   nil,   nil,   nil,  2158,   644,
   nil,   nil,   642,   644,   430,   547,  1480,   nil,   nil,   nil,
   271,   403,   687,   nil,   nil,  1612,  1744,   nil,   nil,   nil,
   -33,   nil,   690, 25010, 25078, 16085,   187, 16224, 16363, 16502,
  3138,  3278,   364,   490,   724,   726,   729,   748,   976,  1430,
  1562,  3418,  3558,  3698,  3838,  3978,  4118,   844,  1039,  4258,
  4398,  2578,  1166,   807,   nil,  1876,   nil,   nil,   nil,   nil,
   691,   nil,   nil,   nil,   692,   nil,   nil, 16641,   nil,   nil,
 16780,   nil, 16919,   nil,   265,   nil,   nil,   nil, 17058,  1178,
   712,   702,   703,   nil,   nil,   705, 17197,   709, 17336, 25146,
 25214,   752,   746,   nil, 17475,   710,   nil, 17614, 17753, 25282,
 25350,  1298,  2718, 17892,   833,   851,   735,   nil,   nil,   -80,
   -68,   767,   751,   nil,   340,   777,  3278,   856,   nil,  3418,
    30,   860,   868,   863,   890,   nil,   nil, 18031, 25418, 25486,
     5,   nil,   311,   342,   308,   nil,   753,   nil,   794, 18170,
   nil,   812,   nil,   nil,   nil, 18309,   nil,   744,   nil,   774,
   777,   nil,   780,   781,   784,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   789,   685,   nil,   nil, 18448,   nil,   nil,
   nil,   886,   nil,   nil,   nil,   895,   nil,   nil,   905,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   198,   nil,   nil,   200,   nil,   nil,   nil,   830,   nil,   nil,
   841,   nil,  3558,   nil, 24673,   nil,   848, 18587, 18726, 18865,
 25554, 25622, 19004, 19143,   585,   884, 19282, 19421, 19560, 19699,
   883,   nil,   nil,   nil, 19838, 19977,   899,   nil,   nil,   nil,
   189,   216,   542,   681,   871,   871,   nil,   116,   974,   163,
   nil,   nil,   892,   nil,  1000,   nil,   881,   nil,   923, 20116,
   nil,   nil, 20255,   nil,   nil,  -123, 20394,   898,   nil,   915,
    -9,    28,   952,    33,   773,   955,   933, 20533,   nil,   999,
   156,   221,   nil, 20672,   nil,   nil,   nil,   nil, 20811,   nil,
   nil, 20950,   nil,   nil,   nil,   610,   nil,  1054,   nil,   nil,
   nil,   nil,   nil,  1061,   nil, 21089,   947,    20,    29,   163,
   165,  3698,   nil,   763,   nil, 25690, 25758, 21228,   nil,   nil,
   nil,   595,  3838,  3978,   874,  1048, 24806,   165,    27,   959,
   234,   nil,   nil,   578,  1147,   nil,  1279,   nil,   471,   nil,
 21367,   nil,   949,   nil,   957,   959,   881,   964,   nil,   nil,
   nil,   nil,   936,  4118,   nil,   nil,   nil,   nil,   nil,   981,
   nil,   966, 21506,   981,   222,   274,   813,   945,   nil,  2858,
 21645,   nil,   979,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 21784, 21923, 22062, 22201,   317, 22340,   nil,
   nil,  1411,   nil,  4258,   nil,   nil,   999,   nil,   119,   nil,
   nil,   nil,   nil,   984,   160,   nil,   nil,   nil,   nil,   nil,
   nil,  4398,   nil,   985,  1028,   nil,   nil,   447,  1108,   nil,
   nil, 22479,   nil,  4538,  1109,   nil,   nil,   nil, 22618,    42,
    41,  1110,   550,   781,   nil,   996,  4678, 22757,   535,  1120,
  1124,  1009,   551,   nil,   nil,   nil,  4818,  4958,  1005,  1013,
  1011,   nil,   nil,   nil,  1012,  1021,   nil,  1036,  1041,   nil,
  1042,   nil,   nil,  1047,   980,   819,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1038,   nil,  1048,   320,   nil,   nil, 22896,
 23035,  2998,  1051,  1055,   nil,  1057,  1065,  1070,   nil,  1103,
  1101,  1087, 23174,   nil,   nil,   nil,   nil,  5098,  5238,   nil,
     6, 23313,   nil,   nil,   nil,    10,   nil,   nil,   nil, 23452,
  5378,   nil,   nil,  1225,   580,   nil,   nil,   nil,   nil,   nil,
  1150,  1131,  1242,  1010,   nil,   nil,  1543,   nil,  1675,   nil,
  6793,   nil,  6932,   nil,   nil,   nil,   nil,  1125,  1132,   nil,
   325,   nil,   nil, 25820,   nil,   nil, 25827,   nil,  8044,   nil,
   nil,  1159, 23591,   884,  1219,   nil,  1268,  5518,    19,    38,
   898,  1223,    69,   nil,  5658,   nil, 23730,   355,   nil,   nil,
  5798,  5938,   nil,   nil,   451,   nil,   nil,   nil,  1150,  1151,
  1153,  1168,  1077,  1184,  1169,   nil,   nil,  1173,  1174,  1176,
  1179,   nil,  1180,   nil,   913, 25895,   nil,   nil,  1305, 23869,
 25963, 26031,   106,   691,   nil,   nil,   nil,   nil,  1305,  1307,
   nil,  1209, 14716,   nil,   nil,   nil,   nil,  1189,   nil, 26093,
   nil, 14855,   nil, 15689,   nil, 15828,   nil,   nil,  1236,  1238,
   nil,  1205,   128,   131,   171,   174,   nil,   nil,   nil,   nil,
  1208,  1209,  1210,  1211,  1212,   162,   nil, 17218,   nil,   nil,
   nil,   nil,  1215,   nil ]

racc_action_default = [
    -1,  -649,  -648,  -649,    -2,  -635,    -4,    -5,  -649,    -8,
    -9,  -649,  -649,  -649,   -36,  -649,  -649,   -40,  -649,  -649,
  -292,   -52,  -637,  -649,   -57,   -62,   -63,   -64,   -68,  -269,
  -269,  -269,  -307,  -340,  -341,   -80,  -648,   -84,   -92,   -94,
  -649,  -536,  -537,  -649,  -649,  -649,  -649,  -228,  -649,  -637,
  -242,  -283,  -284,  -285,  -286,  -287,  -288,  -289,  -290,  -291,
  -621,  -294,  -296,  -303,  -305,  -315,  -317,  -649,  -649,   -59,
   -59,  -635,  -649,  -325,  -332,  -649,  -342,  -343,  -345,  -346,
  -347,  -348,  -349,  -350,  -351,  -352,  -353,  -354,  -363,  -418,
  -466,  -467,  -468,  -469,  -470,  -648,  -473,  -648,  -648,  -648,
  -648,  -648,  -648,  -509,  -510,  -648,  -512,  -518,  -520,  -521,
  -522,  -523,  -619,  -525,  -526,  -620,  -528,  -529,  -530,  -531,
  -532,  -533,  -534,  -535,  -540,  -541,  1094,    -3,  -636,  -644,
  -645,  -646,    -7,  -649,  -649,  -649,  -649,  -649,  -649,   -24,
  -649,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,   -29,
  -130,  -648,  -649,  -649,  -649,  -649,  -649,  -648,  -649,  -649,
  -631,  -632,  -649,  -649,  -637,  -638,   -56,  -649,  -536,  -537,
  -649,  -292,  -649,  -649,  -234,  -649,  -648,  -649,  -649,  -649,
  -649,  -649,  -649,  -649,  -649,  -649,  -649,  -649,  -649,  -649,
  -649,  -649,  -649,  -649,  -649,  -649,  -649,  -649,  -649,  -649,
  -243,  -244,  -245,  -246,  -649,  -356,  -446,  -426,  -649,  -633,
  -634,   -69,  -648,  -649,  -314,  -355,  -430,  -439,  -441,   -75,
  -436,   -76,  -637,   -77,  -249,  -264,  -648,  -648,  -268,  -649,
  -274,  -649,  -648,  -613,  -649,  -649,   -78,   -79,  -635,   -17,
   -18,  -649,   -21,   -22,   -82,  -648,  -637,  -649,   -85,   -88,
  -648,  -100,  -101,  -649,  -649,  -108,  -307,  -310,  -637,  -649,
  -340,  -341,  -344,  -437,  -649,   -90,  -649,   -96,  -302,  -519,
  -649,  -222,  -223,  -649,  -235,  -649,  -648,  -298,  -637,  -648,
  -648,  -316,   -58,  -649,  -649,  -649,  -648,  -648,  -635,  -649,
  -636,  -536,  -537,  -649,  -649,  -292,  -649,  -373,  -374,  -649,
  -328,  -649,  -123,  -124,  -163,  -164,  -165,  -181,  -186,  -193,
  -196,  -335,  -649,  -536,  -537,  -608,  -609,  -568,  -471,  -649,
  -494,  -649,  -496,  -649,  -498,  -649,  -649,  -478,  -649,  -649,
  -484,  -649,  -649,  -490,  -649,  -649,  -492,  -649,  -511,  -513,
  -514,  -515,  -516,    -6,  -647,   -30,   -31,   -32,   -33,   -34,
   -10,   -11,  -649,   -26,   -27,   -28,  -131,  -649,   -37,   -39,
  -279,  -649,  -649,  -278,   -38,  -649,   -41,  -649,  -292,   -49,
   -51,  -204,  -254,  -274,   -53,   -54,   -42,  -205,  -254,  -637,
  -259,  -260,  -648,  -648,  -622,  -623,  -269,  -434,  -624,  -625,
  -623,  -622,  -269,  -433,  -435,  -624,  -625,   -48,  -212,   -55,
  -637,  -313,  -649,  -649,  -649,  -648,  -302,  -649,  -649,  -649,
  -213,  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -224,  -225,
  -226,  -227,  -229,  -230,  -231,  -232,  -233,  -236,  -237,  -238,
  -239,  -637,  -247,  -649,  -447,  -269,  -622,  -623,   -66,   -70,
  -637,  -270,  -443,  -446,  -637,  -309,  -265,  -649,  -273,  -266,
  -649,  -271,  -649,  -275,  -649,  -616,  -618,   -16,  -636,   -20,
  -649,  -637,   -81,  -300,   -97,   -86,  -649,  -637,  -648,  -649,
  -649,  -107,  -649,  -519,  -649,   -93,   -98,  -649,  -649,  -649,
  -649,  -248,  -240,  -649,  -458,  -649,  -637,  -297,  -250,  -641,
  -641,  -649,  -649,  -611,  -641,  -649,  -648,  -364,  -365,  -648,
  -649,  -649,  -649,  -649,  -649,  -359,  -453,  -648,  -649,  -649,
  -302,   -59,  -118,  -119,  -649,  -121,  -649,  -292,  -648,  -649,
  -333,  -546,  -337,  -629,  -630,  -649,  -419,  -568,  -422,  -607,
  -607,  -551,  -553,  -553,  -553,  -567,  -569,  -570,  -571,  -572,
  -573,  -574,  -575,  -576,  -649,  -578,  -580,  -582,  -587,  -589,
  -590,  -592,  -597,  -599,  -600,  -602,  -603,  -604,  -649,  -472,
  -495,  -500,  -501,  -503,  -474,  -497,  -475,  -499,  -476,  -477,
  -649,  -480,  -482,  -649,  -483,  -486,  -487,  -649,  -488,  -489,
  -649,  -517,  -648,   -25,  -649,   -35,  -282,  -649,  -649,  -648,
  -649,  -649,  -649,  -649,  -438,  -649,  -261,  -263,  -649,  -649,
   -71,  -257,  -258,  -431,  -649,  -649,   -73,  -432,  -312,  -639,
  -622,  -623,  -622,  -623,  -637,  -649,  -425,  -648,   -65,  -427,
  -443,  -256,  -649,  -444,  -649,  -308,  -648,  -272,  -276,  -649,
  -614,  -615,  -649,   -19,   -23,   -83,  -649,   -89,   -95,  -637,
  -622,  -623,  -648,  -626,  -106,  -649,   -91,  -649,  -211,  -221,
  -637,  -648,  -357,  -648,  -295,  -362,  -299,  -251,  -643,  -642,
  -253,  -643,  -304,  -306,  -612,  -648,  -366,  -648,   -60,  -367,
  -368,  -320,  -321,  -649,  -323,  -649,  -637,  -622,  -623,  -626,
  -301,  -648,  -118,  -119,  -120,  -649,  -649,  -648,  -326,  -542,
  -544,  -329,  -648,  -648,  -568,  -568,  -649,  -637,  -649,  -637,
  -649,  -549,  -550,  -649,  -649,  -560,  -649,  -563,  -649,  -565,
  -649,  -375,  -649,  -377,  -379,  -382,  -385,  -637,  -581,  -591,
  -601,  -605,  -649,  -648,  -479,  -481,  -485,  -491,  -493,  -649,
  -132,  -280,  -649,  -637,  -622,  -623,  -623,  -622,   -50,  -255,
  -649,  -640,  -648,   -44,  -207,   -45,  -208,   -72,   -46,  -210,
   -47,  -209,   -74,  -649,  -649,  -649,  -649,  -438,  -649,  -407,
  -408,  -637,  -410,  -648,  -429,  -428,  -649,  -440,  -648,  -442,
  -267,  -277,  -617,   -87,  -438,   -99,  -311,   -13,   -15,  -358,
  -360,  -648,  -465,  -459,  -648,  -460,  -461,  -641,  -649,  -361,
  -369,  -649,  -371,  -648,  -649,   -61,  -322,  -449,  -649,  -649,
  -438,  -649,  -118,  -119,  -122,  -637,  -648,  -649,  -649,  -649,
  -649,  -637,  -649,  -338,  -610,  -420,  -648,  -648,  -412,  -637,
  -607,  -588,  -606,  -552,  -553,  -553,  -579,  -553,  -553,  -598,
  -553,  -576,  -593,  -637,  -649,  -649,  -384,  -577,  -502,  -505,
  -506,  -507,  -508,  -649,   -12,  -281,  -438,   -43,  -206,  -262,
  -649,  -241,  -607,  -607,  -389,  -648,  -648,  -648,  -406,  -649,
  -637,  -576,  -584,  -585,  -595,  -448,   -67,  -648,  -648,  -464,
  -649,  -649,  -463,  -252,  -318,  -649,  -372,  -319,  -450,  -649,
  -648,  -324,  -438,  -649,  -649,  -330,  -334,  -336,  -545,  -547,
  -546,  -649,  -649,  -649,  -421,  -548,  -649,  -556,  -649,  -558,
  -649,  -561,  -649,  -564,  -566,  -376,  -378,  -380,  -383,  -504,
  -649,  -387,  -388,  -397,  -391,  -399,  -649,  -402,  -649,  -404,
  -409,  -649,  -649,  -583,  -649,  -445,  -648,  -648,  -536,  -537,
  -649,  -649,  -292,  -462,  -648,  -451,  -649,  -648,  -327,  -543,
  -648,  -648,  -423,  -424,  -637,  -414,  -416,  -417,  -553,  -553,
  -553,  -553,  -649,  -649,  -607,  -586,  -390,  -648,  -648,  -648,
  -648,  -596,  -648,  -411,  -594,  -649,  -302,   -14,  -458,  -648,
  -649,  -649,  -302,  -648,  -452,  -454,  -455,  -456,  -649,  -649,
  -413,  -649,  -649,  -554,  -557,  -559,  -562,  -381,  -386,  -649,
  -394,  -649,  -396,  -649,  -400,  -649,  -403,  -405,  -301,  -626,
  -457,  -637,  -622,  -623,  -626,  -301,  -370,  -331,  -339,  -415,
  -553,  -648,  -648,  -648,  -648,  -438,  -555,  -649,  -392,  -395,
  -398,  -401,  -648,  -393 ]

clist = [
'6,449,318,233,295,295,295,131,144,144,228,381,456,462,277,555,9,4,279',
'351,353,354,9,721,358,574,139,220,566,569,345,332,332,433,434,519,317',
'858,147,147,598,409,763,356,357,281,289,291,440,446,420,440,771,772',
'848,467,510,440,700,781,335,664,505,605,697,724,332,697,128,339,127',
'899,144,131,503,509,347,754,286,290,389,741,742,787,744,833,415,416',
'417,418,407,864,692,390,978,392,394,397,400,403,406,314,144,390,297',
'297,297,727,730,132,926,889,734,1015,976,1031,1,640,352,352,643,1017',
'352,588,2,590,296,296,296,138,316,652,545,847,938,236,359,703,530,219',
'368,429,9,422,896,738,865,293,306,307,278,419,690,654,343,561,689,385',
'562,366,758,382,592,775,777,779,346,348,556,349,350,369,19,929,447,876',
'589,878,19,1010,468,371,762,591,352,352,352,352,1031,766,960,519,977',
'237,928,930,1014,596,885,295,387,1079,237,237,237,700,19,323,323,1017',
'768,1057,512,697,697,513,838,869,687,613,1045,427,745,854,940,450,466',
'781,473,413,388,906,19,976,391,393,937,237,237,743,396,237,363,399,402',
'405,317,908,874,684,769,903,792,866,295,295,793,456,462,408,877,899',
'1027,635,295,637,894,891,641,700,836,641,991,605,1025,444,445,457,595',
',450,,,,469,470,,524,,,,,,,518,518,827,,19,,390,546,,237,237,237,237',
'19,570,542,131,694,709,332,539,317,432,432,,,317,844,,712,,529,,,,1037',
'332,549,707,712,428,439,,,439,,716,535,896,965,439,1076,,558,563,781',
'781,746,,896,578,297,571,572,870,543,131,1046,712,332,297,332,,,944',
',,528,,527,947,981,982,296,286,,314,951,290,,,314,296,,,956,957,19,237',
'437,237,237,437,237,511,,,,437,237,237,943,352,514,890,531,,1011,,,537',
'916,19,881,882,144,,560,564,573,,468,,447,660,613,665,879,880,803,840',
'896,,653,,,605,605,704,559,456,462,,295,,147,518,518,237,237,671,967',
'969,700,971,973,,974,237,1008,817,,697,781,781,923,822,466,670,450,',
',,1058,676,,,19,685,440,,19,,952,,323,19,813,815,440,440,718,,818,820',
'440,440,546,843,671,,672,323,1070,,546,295,677,795,,,795,19,,,,,688',
'457,,,237,19,19,,,332,875,,,855,,450,466,332,586,712,586,,,950,953,',
'466,,295,840,,,,672,751,962,,1077,1078,,,,,,,735,,,737,,,739,,,450,466',
',,1053,1054,1055,1056,,,895,760,897,457,696,,,,,,,613,613,457,,,,,,720',
',613,,613,898,,900,,,,997,814,816,1024,,1004,923,819,821,923,,923,457',
',,,295,,917,,440,,,,,761,1086,927,835,,237,767,,,,6,144,,,,,,450,466',
',,,,931,925,665,9,799,,800,,546,,1047,,,808,834,,1048,1049,147,845,1085',
',829,,,,,665,,,,518,,,923,19,923,332,923,883,923,,,323,,237,457,671',
'332,932,,323,,,,,852,,856,,237,,923,,665,,295,,,,862,,862,19,,812,19',
',,,,,,,237,,,888,871,466,,,450,,,918,237,,672,,144,677,237,,,,,439,814',
'816,821,819,,,1018,,,439,439,,,665,,439,439,,,,,,913,1028,,,1029,613',
'1019,857,1020,,1021,,457,,,,,518,,888,1071,945,931,,432,931,1030,,1032',
'19,,712,,,,437,237,954,,19,935,,,829,,437,437,,29,,,437,437,,29,,,,939',
'942,,,,665,,,,,932,29,946,932,,,932,918,932,1081,29,29,29,,29,323,,430',
'443,955,,,,959,1080,961,323,,,,931,1082,,1083,,1084,,,,,29,,,,,29,29',
',,29,888,352,,,,,,,,1092,19,439,984,984,984,332,237,352,,,,19,19,471',
'332,,995,996,,932,,932,,932,,932,,,,1007,,,,,521,1009,523,,,525,526',
',19,,,,29,932,,,,29,29,29,29,29,,,,437,,,,,,332,,,,,1040,515,,852,1050',
',1038,,,,,,19,1043,862,565,,,,,295,,,892,,532,892,,,,19,,,,984,984,984',
'984,,984,237,466,19,985,987,989,450,466,,,862,,,,,19,237,557,,,,665',
',,,19,19,,,29,29,29,29,29,29,29,,,,,29,29,29,,924,,,,984,984,984,984',
',,29,,656,,457,984,,,,,,,,,,,,993,,,,,19,19,,,1000,,,,,,,,,19,29,29',
',,,,,,,,29,,,,,1060,1062,1064,1066,,1067,,,,,,,,,29,,,,29,,,,,29,,,1034',
',,,,19,,,678,,,698,19,,565,,701,,19,19,,,,29,,,,,1088,1089,1090,1091',
'29,29,29,,,,,1093,,,,,,,,237,691,,,,695,,,,,32,,,,,892,32,,924,,,924',
'705,924,,,,,708,,,32,,,,,,,,,32,32,32,,32,,,726,,,,,,,,,,,,,,,,,788',
',,,,,32,,,,,32,32,,,32,,,,,,,,,,,,,,,924,,924,,924,,924,,,,801,29,,',
',,,,,698,565,,,,,,,,924,,,,,,,,,,,,,,32,,,,,32,32,32,32,32,841,,,842',
',,,,,,,,29,,,,,,,,,,29,,853,,,,,698,,,565,,,,,29,,,,,,,,,867,,,,29,',
',29,,,,,,,,29,,,,846,,,,,,,,29,,,,,,29,,902,,32,32,32,32,32,32,32,,',
',,32,32,32,,,,,,,915,,,,,32,,,,884,,,,,,,,,,,,,,,,,,,,907,,,,29,,,,',
',29,29,32,32,29,,,,,,29,29,32,,,,29,29,,,,,,,,,,948,,,,32,,,,32,,,,',
'32,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,32,32,32,565,,,,,,958,,,,,,,',
'964,29,,,,,,29,,,,,29,29,975,,1005,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,',
',,,,,,,,,,,,29,,,,,,,,,,,,,1044,,,,,,,,,,29,,,,,,,,,,,,,,,,,,29,,32',
',,,,,,,29,,29,,,,,,,,,,,,,29,29,,244,,,,,,,29,29,294,294,294,,,,,,,',
',,,341,342,,344,,32,,,,,,,,,,32,,,,,,,,,,,,,,,32,,,,,,29,29,,,,,,32',
',,32,,,29,,,,16,32,,,,,16,,,,,,,32,,,,,,32,,,,,,,,,,,,,,,16,,,,,,,,',
'29,,,,,,,29,,,,,,29,29,,,16,,,,,,,,,,367,,,,,,32,,,,,,32,32,,29,32,',
',,,,32,32,,,,,32,32,,,,,,,,,,,,,,,,,,,,,,,,,294,442,16,,448,294,,,,',
'448,16,,,,18,,,,,,18,,244,,,480,481,482,483,484,485,486,487,488,489',
'490,491,492,493,494,495,496,497,498,499,500,501,,18,,32,502,,,,,32,',
',294,294,32,32,,,,,,,294,,,,,18,,294,,294,,,294,294,,,,,,,,,,32,,16',
',435,,,435,,,,,,435,,,,32,,,,,,,,,,16,551,,552,,,,294,294,,,,,32,,,',
',,,,18,,,,,,,,,18,32,,,,,,,,,,32,,32,,,,,,,,,,,,,32,32,,,,,,,,16,32',
'32,,16,,,,,16,,,,,,,,,,,,,,,294,,,,,,,,,,,16,,,,,,,,,,16,16,,,18,,18',
'32,32,18,,,,,,18,,,,,32,,,294,,448,448,448,,18,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,294,,32,294,,294,,,,32,,,,,,32,32,,,,,294,,,,,,,,18,448',
'719,,18,,,,,18,,,,,,32,,,,,,,20,,,,,,20,,,294,,,,18,,,,,,,,,,18,18,',
',,,,,,,,20,325,325,,,,,,,,,,,,,294,,,,,,,16,,,,20,,,,,,,,,,365,,,,,',
',,,,,,,,,,,,,294,448,294,,,16,809,,16,294,294,448,448,,,,,448,448,,',
',,,,,,,,,,,,,,,,20,,,,,294,,,294,20,,,,,,,,,,,,,,,,,,,,294,,,,,294,',
',294,,,,,,,,,,,,,,294,,,16,,,,,,435,,,294,16,,,,,18,435,435,,,,,435',
'435,,,,,,,,,294,,,,,,,20,,438,,,438,,,,,,438,,,18,294,,18,,,,,,448,',
'20,,,,,,,,,,,448,448,448,448,,921,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,,16',
'16,,,,,,,,,294,,,,,,,,,20,,,,20,41,,,325,20,18,41,16,,,,18,,,,18,,,',
',325,18,18,,435,,,18,18,,20,,,,41,321,321,294,448,,20,20,,,,,,16,,,',
',,587,,587,,,,,41,,,,,16,,294,,,361,,,383,,,,16,,,,,,,,,,,,,16,,,,,',
',,,,16,16,,,18,,,,,,,,,,,18,18,,,,,,,,294,,41,,,,,,,,,41,,,,,,,,,,,18',
',,,,16,16,,,1003,,294,,,,,,18,16,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,',
',,,,,,18,,,,,,,16,20,,,,18,,16,41,325,,,,16,16,,,325,18,,,,,,,,,,18',
'18,,,,41,,,,,,20,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,18,,,,',
',,,,,,,18,,,,,,41,,,,41,,,,321,41,,,,,,,,,,,,,,,,321,,20,,,,,,438,,41',
',20,,,,18,,438,438,41,41,,18,438,438,,,,18,18,,,383,,383,,,,,,,,,,,',
',,42,,,,,,42,325,,,,,,,,,,,325,,,,,,,,,,,,,,,,42,322,322,,,,,,,,,,,',
',,,,20,,,,,,,,42,,,20,20,,,,,,362,,,384,,,,,,,,,,,,,,,,,,,,912,20,,',
',,,,,,,,,,,,,,438,,,,,,,,,,,,,,,42,,,,,,,,20,42,,,,,,,,41,,,,,,,,321',
'20,,,,,,,321,,,,,20,,,,,,,,,,,,,20,,,,41,,,41,,,20,20,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,587,,,,,20,20,,,1002,,42,,,,,,,20,,',
',,,,,,,,,,,,,41,,,,,,,,,,41,,,,,,,,,,,,,,,,587,,,,,20,,,,,,,20,,,,42',
',20,20,42,,,,322,42,,,321,,,,,,,,,,,321,,322,,,,,,,,,,42,,,,,,,,,,42',
'42,,,,,,,,,,,41,384,,384,,,,,,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,41,,,,,,',
',,,,,41,,,,,,,,,,,,,41,,,,,,,,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,42,,,,',
',,,322,,,,,,,,322,,,,,383,,,,,41,41,,,998,,,,,,,,42,41,,42,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,383,,,,,41,,,,,,,41,,,,,,41,41,,,,,,,',
',,,,,,,,,,,,,,,,42,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,322,,,,,,,,,,,322,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,',
',,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,42,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,42,,,,,,,,,,,,,42,,,,,',
',,,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,384,,,,,42,42',
',,999,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,384,,,,,42',
',,,,,,42,,,,,,42,42' ]
        racc_goto_table = arr = ::Array.new(3970, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,36,63,40,46,46,46,118,71,71,38,70,50,50,171,12,9,2,38,102,24,24,9',
'15,24,113,22,22,106,106,40,78,78,29,29,87,14,107,73,73,170,70,121,42',
'42,51,51,51,25,33,10,25,153,153,17,33,36,25,220,146,64,37,50,204,88',
'100,78,88,8,76,5,215,71,118,172,52,9,68,85,85,188,100,100,147,100,160',
'24,24,24,24,188,109,53,6,148,6,6,6,6,6,6,59,71,6,84,84,84,83,83,7,158',
'162,83,164,145,216,1,192,31,31,192,165,31,69,3,69,82,82,82,11,60,13',
'65,16,18,27,5,20,21,23,26,30,9,32,210,43,45,58,58,58,49,9,55,74,79,81',
'86,98,101,115,117,122,123,207,207,207,124,125,126,127,128,129,35,162',
'75,130,131,132,35,133,75,134,135,136,31,31,31,31,216,137,138,87,149',
'35,150,156,163,166,167,46,168,164,35,35,35,220,35,35,35,165,169,148',
'174,88,88,175,177,178,180,209,181,14,182,183,184,6,71,146,38,7,187,146',
'35,145,189,190,160,35,35,113,191,35,35,194,195,196,14,197,68,36,170',
'147,198,100,46,46,199,50,50,202,203,215,158,193,46,193,208,212,193,220',
'53,193,162,204,213,31,31,85,219,,6,,,,31,31,,188,,,,,,,6,6,37,,35,,6',
'63,,35,35,35,35,35,24,40,118,172,36,78,38,14,82,82,,,14,37,,50,,9,,',
',17,78,38,65,50,27,27,,,27,,65,64,210,153,27,107,,6,6,146,146,36,,210',
'38,84,14,14,37,76,118,109,50,78,84,78,,,100,,,8,,5,100,153,153,82,85',
',59,100,85,,,59,82,,,100,100,35,35,35,35,35,35,35,58,,,,35,35,35,83',
'31,58,152,60,,121,,,60,37,35,170,170,71,,84,84,5,,75,,75,38,209,40,12',
'12,36,87,210,,22,,,204,204,10,82,50,50,,46,,73,6,6,35,35,6,207,207,220',
'207,207,,207,35,100,52,,88,146,146,152,52,71,51,6,,,,153,51,,,35,40',
'25,,35,,37,,35,35,33,33,25,25,75,,33,33,25,25,63,65,6,,85,35,15,,63',
'46,85,193,,,193,35,,,,,51,85,,,35,35,35,,,78,36,,,29,,6,71,78,35,50',
'35,,,106,12,,71,,46,87,,,,85,42,12,,100,100,,,,,,,14,,,14,,,118,,,6',
'71,,,207,207,207,207,,,159,6,159,85,84,,,,,,,209,209,85,,,,,,31,,209',
',209,157,,157,,,,106,75,75,152,,106,152,75,75,152,,152,85,,,,46,,33',
',25,,,,,31,207,159,102,,35,31,,,,6,71,,,,,,6,71,,,,,209,157,40,9,2,',
'22,,63,,113,,,9,171,,12,12,73,63,37,,6,,,,,40,,,,6,,,152,35,152,78,152',
'70,152,,,35,,35,85,6,78,211,,35,,,,,6,,6,,35,,152,,40,,46,,,,6,,6,35',
',84,35,,,,,,,,35,,,40,14,71,,,6,,,75,35,,85,,71,85,35,,,,,27,75,75,75',
'75,,,159,,,27,27,,,40,,27,27,,,,,,14,159,,,159,209,157,84,157,,157,',
'85,,,,,6,,40,36,24,209,,82,209,157,,157,35,,50,,,,35,35,24,,35,14,,',
'6,,35,35,,54,,,35,35,,54,,,,14,6,,,,40,,,,,211,54,14,211,,,211,75,211',
'159,54,54,54,,54,35,,80,80,118,,,,118,157,14,35,,,,209,157,,157,,157',
',,,,54,,,,,54,54,,,54,40,31,,,,,,,,157,35,27,6,6,6,78,35,31,,,,35,35',
'61,78,,14,14,,211,,211,,211,,211,,,,14,,,,,80,118,80,,,80,80,,35,,,',
'54,211,,,,54,54,54,54,54,,,,35,,,,,,78,,,,,38,61,,6,40,,14,,,,,,35,14',
'6,80,,,,,46,,,154,,61,154,,,,35,,,,6,6,6,6,,6,35,71,35,155,155,155,6',
'71,,,6,,,,,35,35,61,,,,40,,,,35,35,,,54,54,54,54,54,54,54,,,,,54,54',
'54,,154,,,,6,6,6,6,,,54,,80,,85,6,,,,,,,,,,,,35,,,,,35,35,,,35,,,,,',
',,,35,54,54,,,,,,,,,54,,,,,155,155,155,155,,155,,,,,,,,,54,,,,54,,,',
',54,,,35,,,,,35,,,61,,,80,35,,80,,80,,35,35,,,,54,,,,,155,155,155,155',
'54,54,54,,,,,155,,,,,,,,35,61,,,,61,,,,,57,,,,,154,57,,154,,,154,61',
'154,,,,,61,,,57,,,,,,,,,57,57,57,,57,,,61,,,,,,,,,,,,,,,,,80,,,,,,57',
',,,,57,57,,,57,,,,,,,,,,,,,,,154,,154,,154,,154,,,,80,54,,,,,,,,80,80',
',,,,,,,154,,,,,,,,,,,,,,57,,,,,57,57,57,57,57,80,,,80,,,,,,,,,54,,,',
',,,,,,54,,80,,,,,80,,,80,,,,,54,,,,,,,,,80,,,,54,,,54,,,,,,,,54,,,,61',
',,,,,,,54,,,,,,54,,80,,57,57,57,57,57,57,57,,,,,57,57,57,,,,,,,80,,',
',,57,,,,61,,,,,,,,,,,,,,,,,,,,61,,,,54,,,,,,54,54,57,57,54,,,,,,54,54',
'57,,,,54,54,,,,,,,,,,80,,,,57,,,,57,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,',
'57,,,,,,,,,57,57,57,80,,,,,,61,,,,,,,,61,54,,,,,,54,,,,,54,54,61,,80',
',,,,,,,,,,,,,,,,,,,,,,,,,,54,,,,,,,,,,,,,,,,,54,,,,,,,,,,,,,80,,,,,',
',,,,54,,,,,,,,,,,,,,,,,,54,,57,,,,,,,,54,,54,,,,,,,,,,,,,54,54,,41,',
',,,,,54,54,41,41,41,,,,,,,,,,,41,41,,41,,57,,,,,,,,,,57,,,,,,,,,,,,',
',,57,,,,,,54,54,,,,,,57,,,57,,,54,,,,28,57,,,,,28,,,,,,,57,,,,,,57,',
',,,,,,,,,,,,,28,,,,,,,,,54,,,,,,,54,,,,,,54,54,,,28,,,,,,,,,,28,,,,',
',57,,,,,,57,57,,54,57,,,,,,57,57,,,,,57,57,,,,,,,,,,,,,,,,,,,,,,,,,41',
'41,28,,41,41,,,,,41,28,,,,34,,,,,,34,,41,,,41,41,41,41,41,41,41,41,41',
'41,41,41,41,41,41,41,41,41,41,41,41,41,,34,,57,41,,,,,57,,,41,41,57',
'57,,,,,,,41,,,,,34,,41,,41,,,41,41,,,,,,,,,,57,,28,,28,,,28,,,,,,28',
',,,57,,,,,,,,,,28,41,,41,,,,41,41,,,,,57,,,,,,,,34,,,,,,,,,34,57,,,',
',,,,,,57,,57,,,,,,,,,,,,,57,57,,,,,,,,28,57,57,,28,,,,,28,,,,,,,,,,',
',,,,41,,,,,,,,,,,28,,,,,,,,,,28,28,,,34,,34,57,57,34,,,,,,34,,,,,57',
',,41,,41,41,41,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,57,41,,41',
',,,57,,,,,,57,57,,,,,41,,,,,,,,34,41,41,,34,,,,,34,,,,,,57,,,,,,,39',
',,,,,39,,,41,,,,34,,,,,,,,,,34,34,,,,,,,,,,39,39,39,,,,,,,,,,,,,41,',
',,,,,28,,,,39,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,41,41,41,,,28,41,,28,41',
'41,41,41,,,,,41,41,,,,,,,,,,,,,,,,,,,39,,,,,41,,,41,39,,,,,,,,,,,,,',
',,,,,,41,,,,,41,,,41,,,,,,,,,,,,,,41,,,28,,,,,,28,,,41,28,,,,,34,28',
'28,,,,,28,28,,,,,,,,,41,,,,,,,39,,39,,,39,,,,,,39,,,34,41,,34,,,,,,41',
',39,,,,,,,,,,,41,41,41,41,,41,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,28,28,',
',,,,,,,41,,,,,,,,,39,,,,39,66,,,39,39,34,66,28,,,,34,,,,34,,,,,39,34',
'34,,28,,,34,34,,39,,,,66,66,66,41,41,,39,39,,,,,,28,,,,,,39,,39,,,,',
'66,,,,,28,,41,,,66,,,66,,,,28,,,,,,,,,,,,,28,,,,,,,,,,28,28,,,34,,,',
',,,,,,,34,34,,,,,,,,41,,66,,,,,,,,,66,,,,,,,,,,,34,,,,,28,28,,,28,,41',
',,,,,34,28,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,34,,,,,,,28,39,',
',,34,,28,66,39,,,,28,28,,,39,34,,,,,,,,,,34,34,,,,66,,,,,,39,,,39,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,,,,34,,,,,,66,,,,66',
',,,66,66,,,,,,,,,,,,,,,,66,,39,,,,,,39,,66,,39,,,,34,,39,39,66,66,,34',
'39,39,,,,34,34,,,66,,66,,,,,,,,,,,,,,67,,,,,,67,39,,,,,,,,,,,39,,,,',
',,,,,,,,,,,67,67,67,,,,,,,,,,,,,,,,39,,,,,,,,67,,,39,39,,,,,,67,,,67',
',,,,,,,,,,,,,,,,,,,39,39,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,67,,,,,,,',
'39,67,,,,,,,,66,,,,,,,,66,39,,,,,,,66,,,,,39,,,,,,,,,,,,,39,,,,66,,',
'66,,,39,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,39,,,,,39,39',
',,39,,67,,,,,,,39,,,,,,,,,,,,,,,,66,,,,,,,,,,66,,,,,,,,,,,,,,,,39,,',
',,39,,,,,,,39,,,,67,,39,39,67,,,,67,67,,,66,,,,,,,,,,,66,,67,,,,,,,',
',,67,,,,,,,,,,67,67,,,,,,,,,,,66,67,,67,,,,,,,,66,66,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,',
',,,,,,,,66,,,,,,,,,,,,66,,,,,,,,,,,,,66,,,,,,,,,,66,66,,,,,,,,,,,,,',
',,,,,,,,,,67,,,,,,,,67,,,,,,,,67,,,,,66,,,,,66,66,,,66,,,,,,,,67,66',
',67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,66,,,,,,,66,,,,,,66',
'66,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,67,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67',
',,,,,,,,,,67,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,67,,,,,,,,,,,,',
'67,,,,,,,,,,67,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,',
',67,67,,,67,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,',
',,,67,,,,,,,67,,,,,,67,67' ]
        racc_goto_check = arr = ::Array.new(3970, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   116,    15,   124,   nil,    65,    -2,   101,    63,    14,
   -88,   119,  -331,  -290,     0,  -531,  -588,  -667,  -713,   nil,
  -391,  -175,    15,   127,   -47,  -175,    68,   112,  1791,  -189,
   -81,    51,     4,  -177,  1930,   170,  -226,  -388,    -9,  2261,
   -19,  1695,   -26,  -425,   nil,  -592,   -28,   nil,   nil,   123,
  -216,    16,  -206,  -420,   839,  -356,   nil,  1217,   115,    65,
    94,   700,   nil,   -35,    22,  -204,  2575,  2958,  -507,  -246,
   -64,    -3,   nil,    27,  -273,   -52,    25,   nil,    -6,   107,
   656,  -194,    94,  -452,    72,    49,  -349,  -262,  -453,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,   nil,
  -490,  -192,   -46,   nil,   nil,   nil,  -325,  -698,   nil,  -646,
   nil,   nil,   nil,  -334,   nil,    87,   nil,  -428,     2,   nil,
   nil,  -549,    86,  -220,   105,   105,  -179,   106,   106,    98,
  -583,  -194,  -584,  -776,   107,  -408,  -198,  -403,  -693,   nil,
   nil,   nil,   nil,   nil,   nil,  -790,  -555,  -531,  -811,  -712,
  -637,   nil,  -362,  -547,   244,   109,  -636,  -167,  -721,  -189,
  -602,   nil,  -658,  -767,  -850,  -842,  -190,  -570,   111,  -386,
  -347,   -11,  -202,   nil,   -75,   -73,   nil,  -477,  -528,   nil,
  -286,  -787,  -354,  -500,  -630,   nil,   nil,   138,   -15,   137,
   137,   141,  -279,  -128,   143,   143,   143,  -545,  -380,  -377,
   nil,   nil,   154,  -499,  -324,   nil,   nil,  -439,  -508,  -168,
  -630,  -119,  -503,  -706,   nil,  -705,  -871,   nil,   nil,  -108,
  -462 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   309,     7,   360,   312,
   nil,   nil,   nil,   nil,   554,   nil,   nil,   nil,   nil,   308,
   310,   nil,   nil,   nil,   nil,    14,    15,    21,   242,   nil,
   nil,    17,   nil,   436,   243,   340,   nil,   nil,   756,   241,
   472,    24,   nil,   nil,   355,   nil,    25,    26,    27,   nil,
   715,   nil,   nil,   nil,   329,   nil,    28,   326,   451,    35,
   nil,   nil,    37,    40,    39,   nil,   238,   239,   585,   nil,
   146,   459,   145,    91,   nil,   441,   107,    47,    50,   274,
   300,   nil,   452,   nil,   453,   464,   673,   516,   298,   283,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
   nil,   nil,   284,    65,    66,    67,   nil,   nil,    68,   860,
    69,    70,    71,   nil,    72,   nil,    73,   nil,   567,    74,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   288,
   276,   723,   851,   576,   861,   783,   612,   nil,   784,   785,
  1026,   922,   600,   nil,   601,   nil,   nil,   602,   nil,   604,
   nil,   830,   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   463,   nil,   nil,   693,   nil,   nil,   504,
   nil,   nil,   nil,   nil,   nil,    90,    92,    94,   nil,   nil,
   nil,   nil,   nil,   630,   nil,   nil,   nil,   nil,   nil,   nil,
   103,   104,   nil,   nil,   893,   765,   599,   nil,   603,   901,
   615,   617,   618,   933,   621,   622,   934,   625,   628,   nil,
   303 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  3, 151, :_reduce_6,
  2, 151, :_reduce_none,
  1, 154, :_reduce_none,
  0, 158, :_reduce_9,
  3, 154, :_reduce_10,
  0, 160, :_reduce_11,
  4, 157, :_reduce_12,
  0, 165, :_reduce_13,
  6, 159, :_reduce_14,
  3, 159, :_reduce_15,
  2, 161, :_reduce_16,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  3, 166, :_reduce_19,
  2, 166, :_reduce_20,
  1, 167, :_reduce_none,
  0, 168, :_reduce_22,
  3, 167, :_reduce_23,
  0, 179, :_reduce_24,
  4, 156, :_reduce_25,
  3, 156, :_reduce_26,
  3, 156, :_reduce_27,
  3, 156, :_reduce_28,
  2, 156, :_reduce_29,
  3, 156, :_reduce_30,
  3, 156, :_reduce_31,
  3, 156, :_reduce_32,
  3, 156, :_reduce_33,
  3, 156, :_reduce_34,
  4, 156, :_reduce_35,
  1, 156, :_reduce_none,
  3, 156, :_reduce_37,
  3, 156, :_reduce_38,
  3, 156, :_reduce_39,
  1, 156, :_reduce_none,
  3, 172, :_reduce_41,
  3, 172, :_reduce_42,
  6, 172, :_reduce_43,
  5, 172, :_reduce_44,
  5, 172, :_reduce_45,
  5, 172, :_reduce_46,
  5, 172, :_reduce_47,
  3, 172, :_reduce_48,
  1, 180, :_reduce_49,
  3, 180, :_reduce_50,
  1, 180, :_reduce_none,
  1, 178, :_reduce_none,
  3, 178, :_reduce_53,
  3, 178, :_reduce_54,
  3, 178, :_reduce_55,
  2, 178, :_reduce_56,
  1, 178, :_reduce_none,
  1, 171, :_reduce_58,
  0, 191, :_reduce_59,
  0, 192, :_reduce_60,
  4, 189, :_reduce_61,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 194, :_reduce_none,
  4, 194, :_reduce_65,
  0, 202, :_reduce_66,
  4, 199, :_reduce_67,
  1, 201, :_reduce_68,
  2, 193, :_reduce_69,
  3, 193, :_reduce_70,
  4, 193, :_reduce_71,
  5, 193, :_reduce_72,
  4, 193, :_reduce_73,
  5, 193, :_reduce_74,
  2, 193, :_reduce_75,
  2, 193, :_reduce_76,
  2, 193, :_reduce_77,
  2, 193, :_reduce_78,
  2, 193, :_reduce_79,
  1, 173, :_reduce_none,
  3, 173, :_reduce_81,
  1, 207, :_reduce_none,
  3, 207, :_reduce_83,
  1, 206, :_reduce_84,
  2, 206, :_reduce_85,
  3, 206, :_reduce_86,
  5, 206, :_reduce_87,
  2, 206, :_reduce_88,
  4, 206, :_reduce_89,
  2, 206, :_reduce_90,
  4, 206, :_reduce_91,
  1, 206, :_reduce_92,
  3, 206, :_reduce_93,
  1, 210, :_reduce_none,
  3, 210, :_reduce_95,
  2, 209, :_reduce_96,
  3, 209, :_reduce_97,
  1, 212, :_reduce_98,
  3, 212, :_reduce_99,
  1, 211, :_reduce_100,
  1, 211, :_reduce_101,
  4, 211, :_reduce_102,
  3, 211, :_reduce_103,
  3, 211, :_reduce_104,
  3, 211, :_reduce_105,
  3, 211, :_reduce_106,
  2, 211, :_reduce_107,
  1, 211, :_reduce_108,
  1, 175, :_reduce_109,
  1, 175, :_reduce_110,
  4, 175, :_reduce_111,
  3, 175, :_reduce_112,
  3, 175, :_reduce_113,
  3, 175, :_reduce_114,
  3, 175, :_reduce_115,
  2, 175, :_reduce_116,
  1, 175, :_reduce_117,
  1, 215, :_reduce_118,
  1, 215, :_reduce_none,
  2, 216, :_reduce_120,
  1, 216, :_reduce_121,
  3, 216, :_reduce_122,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_126,
  1, 217, :_reduce_none,
  1, 169, :_reduce_128,
  1, 169, :_reduce_none,
  1, 170, :_reduce_130,
  0, 221, :_reduce_131,
  4, 170, :_reduce_132,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 188, :_reduce_204,
  3, 188, :_reduce_205,
  6, 188, :_reduce_206,
  5, 188, :_reduce_207,
  5, 188, :_reduce_208,
  5, 188, :_reduce_209,
  5, 188, :_reduce_210,
  4, 188, :_reduce_211,
  3, 188, :_reduce_212,
  3, 188, :_reduce_213,
  3, 188, :_reduce_214,
  3, 188, :_reduce_215,
  3, 188, :_reduce_216,
  3, 188, :_reduce_217,
  3, 188, :_reduce_218,
  3, 188, :_reduce_219,
  3, 188, :_reduce_220,
  4, 188, :_reduce_221,
  2, 188, :_reduce_222,
  2, 188, :_reduce_223,
  3, 188, :_reduce_224,
  3, 188, :_reduce_225,
  3, 188, :_reduce_226,
  3, 188, :_reduce_227,
  1, 188, :_reduce_none,
  3, 188, :_reduce_229,
  3, 188, :_reduce_230,
  3, 188, :_reduce_231,
  3, 188, :_reduce_232,
  3, 188, :_reduce_233,
  2, 188, :_reduce_234,
  2, 188, :_reduce_235,
  3, 188, :_reduce_236,
  3, 188, :_reduce_237,
  3, 188, :_reduce_238,
  3, 188, :_reduce_239,
  3, 188, :_reduce_240,
  6, 188, :_reduce_241,
  1, 188, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  3, 224, :_reduce_247,
  3, 224, :_reduce_248,
  1, 227, :_reduce_249,
  1, 228, :_reduce_none,
  2, 228, :_reduce_251,
  4, 228, :_reduce_252,
  2, 228, :_reduce_253,
  1, 222, :_reduce_none,
  3, 222, :_reduce_255,
  3, 232, :_reduce_256,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_261,
  4, 183, :_reduce_262,
  2, 183, :_reduce_263,
  1, 205, :_reduce_264,
  2, 205, :_reduce_265,
  2, 205, :_reduce_266,
  4, 205, :_reduce_267,
  1, 205, :_reduce_268,
  0, 236, :_reduce_269,
  2, 198, :_reduce_270,
  2, 235, :_reduce_271,
  2, 234, :_reduce_272,
  1, 234, :_reduce_none,
  1, 229, :_reduce_274,
  2, 229, :_reduce_275,
  3, 229, :_reduce_276,
  4, 229, :_reduce_277,
  1, 177, :_reduce_278,
  1, 177, :_reduce_279,
  3, 176, :_reduce_280,
  4, 176, :_reduce_281,
  2, 176, :_reduce_282,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_293,
  0, 271, :_reduce_294,
  4, 225, :_reduce_295,
  0, 272, :_reduce_296,
  3, 225, :_reduce_297,
  0, 273, :_reduce_298,
  4, 225, :_reduce_299,
  3, 225, :_reduce_300,
  3, 225, :_reduce_301,
  2, 225, :_reduce_302,
  0, 274, :_reduce_303,
  4, 225, :_reduce_304,
  0, 275, :_reduce_305,
  4, 225, :_reduce_306,
  1, 225, :_reduce_307,
  4, 225, :_reduce_308,
  3, 225, :_reduce_309,
  1, 225, :_reduce_310,
  5, 225, :_reduce_311,
  4, 225, :_reduce_312,
  3, 225, :_reduce_313,
  2, 225, :_reduce_314,
  1, 225, :_reduce_none,
  2, 225, :_reduce_316,
  1, 225, :_reduce_317,
  6, 225, :_reduce_318,
  6, 225, :_reduce_319,
  4, 225, :_reduce_320,
  4, 225, :_reduce_321,
  5, 225, :_reduce_322,
  4, 225, :_reduce_323,
  6, 225, :_reduce_324,
  0, 276, :_reduce_325,
  0, 277, :_reduce_326,
  7, 225, :_reduce_327,
  0, 278, :_reduce_328,
  0, 279, :_reduce_329,
  0, 280, :_reduce_330,
  9, 225, :_reduce_331,
  0, 281, :_reduce_332,
  0, 282, :_reduce_333,
  6, 225, :_reduce_334,
  0, 283, :_reduce_335,
  6, 225, :_reduce_336,
  0, 284, :_reduce_337,
  0, 285, :_reduce_338,
  9, 225, :_reduce_339,
  1, 225, :_reduce_340,
  1, 225, :_reduce_341,
  1, 225, :_reduce_342,
  1, 225, :_reduce_343,
  1, 182, :_reduce_344,
  1, 246, :_reduce_none,
  1, 252, :_reduce_none,
  1, 255, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 261, :_reduce_none,
  1, 263, :_reduce_352,
  1, 266, :_reduce_353,
  1, 267, :_reduce_354,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 163, :_reduce_none,
  1, 291, :_reduce_none,
  1, 247, :_reduce_none,
  1, 204, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 253, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 254, :_reduce_none,
  5, 254, :_reduce_370,
  1, 256, :_reduce_none,
  2, 256, :_reduce_372,
  1, 262, :_reduce_none,
  1, 262, :_reduce_374,
  1, 292, :_reduce_none,
  3, 292, :_reduce_376,
  1, 295, :_reduce_377,
  3, 295, :_reduce_378,
  1, 294, :_reduce_379,
  3, 294, :_reduce_380,
  5, 294, :_reduce_381,
  1, 294, :_reduce_382,
  3, 294, :_reduce_383,
  2, 296, :_reduce_384,
  1, 296, :_reduce_385,
  4, 297, :_reduce_386,
  2, 297, :_reduce_387,
  2, 297, :_reduce_388,
  1, 297, :_reduce_389,
  2, 302, :_reduce_390,
  1, 302, :_reduce_none,
  6, 303, :_reduce_392,
  8, 303, :_reduce_393,
  4, 303, :_reduce_394,
  6, 303, :_reduce_395,
  4, 303, :_reduce_396,
  2, 303, :_reduce_397,
  6, 303, :_reduce_398,
  2, 303, :_reduce_399,
  4, 303, :_reduce_400,
  6, 303, :_reduce_401,
  2, 303, :_reduce_402,
  4, 303, :_reduce_403,
  2, 303, :_reduce_404,
  4, 303, :_reduce_405,
  1, 303, :_reduce_406,
  1, 307, :_reduce_407,
  1, 307, :_reduce_408,
  3, 308, :_reduce_409,
  1, 308, :_reduce_410,
  4, 308, :_reduce_411,
  1, 309, :_reduce_none,
  4, 309, :_reduce_413,
  1, 310, :_reduce_414,
  3, 310, :_reduce_415,
  1, 311, :_reduce_416,
  1, 311, :_reduce_none,
  0, 315, :_reduce_418,
  0, 316, :_reduce_419,
  5, 251, :_reduce_420,
  4, 313, :_reduce_421,
  1, 313, :_reduce_422,
  3, 314, :_reduce_423,
  3, 314, :_reduce_424,
  3, 318, :_reduce_425,
  2, 195, :_reduce_426,
  4, 195, :_reduce_427,
  5, 195, :_reduce_428,
  5, 195, :_reduce_429,
  2, 250, :_reduce_430,
  4, 250, :_reduce_431,
  4, 250, :_reduce_432,
  3, 250, :_reduce_433,
  3, 250, :_reduce_434,
  3, 250, :_reduce_435,
  2, 250, :_reduce_436,
  1, 250, :_reduce_437,
  4, 250, :_reduce_438,
  0, 321, :_reduce_439,
  4, 249, :_reduce_440,
  0, 322, :_reduce_441,
  4, 249, :_reduce_442,
  0, 323, :_reduce_443,
  0, 324, :_reduce_444,
  4, 200, :_reduce_445,
  0, 326, :_reduce_446,
  0, 327, :_reduce_447,
  4, 319, :_reduce_448,
  1, 325, :_reduce_449,
  2, 325, :_reduce_450,
  3, 325, :_reduce_451,
  4, 325, :_reduce_452,
  0, 329, :_reduce_453,
  6, 260, :_reduce_454,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  6, 162, :_reduce_457,
  0, 162, :_reduce_458,
  1, 330, :_reduce_459,
  1, 330, :_reduce_none,
  1, 330, :_reduce_none,
  2, 331, :_reduce_462,
  1, 331, :_reduce_none,
  2, 164, :_reduce_464,
  1, 164, :_reduce_none,
  1, 237, :_reduce_466,
  1, 237, :_reduce_none,
  1, 238, :_reduce_468,
  1, 333, :_reduce_469,
  1, 333, :_reduce_none,
  2, 333, :_reduce_471,
  3, 334, :_reduce_472,
  1, 334, :_reduce_473,
  3, 239, :_reduce_474,
  3, 240, :_reduce_475,
  3, 241, :_reduce_476,
  3, 241, :_reduce_477,
  1, 338, :_reduce_478,
  3, 338, :_reduce_479,
  1, 339, :_reduce_none,
  2, 339, :_reduce_481,
  3, 243, :_reduce_482,
  3, 243, :_reduce_483,
  1, 341, :_reduce_484,
  3, 341, :_reduce_485,
  3, 242, :_reduce_486,
  3, 242, :_reduce_487,
  3, 244, :_reduce_488,
  3, 244, :_reduce_489,
  1, 342, :_reduce_490,
  3, 342, :_reduce_491,
  1, 343, :_reduce_492,
  3, 343, :_reduce_493,
  1, 335, :_reduce_494,
  2, 335, :_reduce_495,
  1, 336, :_reduce_496,
  2, 336, :_reduce_497,
  1, 337, :_reduce_498,
  2, 337, :_reduce_499,
  1, 340, :_reduce_500,
  0, 345, :_reduce_501,
  3, 340, :_reduce_502,
  0, 346, :_reduce_503,
  4, 340, :_reduce_504,
  1, 344, :_reduce_505,
  1, 344, :_reduce_506,
  1, 344, :_reduce_507,
  1, 344, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 347, :_reduce_511,
  1, 347, :_reduce_512,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  3, 348, :_reduce_517,
  1, 332, :_reduce_none,
  2, 332, :_reduce_519,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_529,
  1, 214, :_reduce_530,
  1, 214, :_reduce_531,
  1, 214, :_reduce_532,
  1, 214, :_reduce_533,
  1, 214, :_reduce_534,
  1, 214, :_reduce_535,
  1, 245, :_reduce_536,
  1, 245, :_reduce_537,
  1, 181, :_reduce_538,
  1, 181, :_reduce_539,
  1, 186, :_reduce_540,
  1, 186, :_reduce_541,
  0, 350, :_reduce_542,
  4, 264, :_reduce_543,
  1, 264, :_reduce_544,
  3, 268, :_reduce_545,
  0, 352, :_reduce_546,
  3, 268, :_reduce_547,
  4, 351, :_reduce_548,
  2, 351, :_reduce_549,
  2, 351, :_reduce_550,
  1, 351, :_reduce_none,
  2, 354, :_reduce_552,
  0, 354, :_reduce_553,
  6, 317, :_reduce_554,
  8, 317, :_reduce_555,
  4, 317, :_reduce_556,
  6, 317, :_reduce_557,
  4, 317, :_reduce_558,
  6, 317, :_reduce_559,
  2, 317, :_reduce_560,
  4, 317, :_reduce_561,
  6, 317, :_reduce_562,
  2, 317, :_reduce_563,
  4, 317, :_reduce_564,
  2, 317, :_reduce_565,
  4, 317, :_reduce_566,
  1, 317, :_reduce_567,
  0, 317, :_reduce_568,
  1, 312, :_reduce_569,
  1, 312, :_reduce_570,
  1, 312, :_reduce_571,
  1, 312, :_reduce_572,
  1, 293, :_reduce_none,
  1, 293, :_reduce_574,
  1, 356, :_reduce_none,
  1, 357, :_reduce_none,
  3, 357, :_reduce_577,
  1, 304, :_reduce_578,
  3, 304, :_reduce_579,
  1, 358, :_reduce_none,
  2, 359, :_reduce_581,
  1, 359, :_reduce_582,
  2, 360, :_reduce_583,
  1, 360, :_reduce_584,
  1, 298, :_reduce_none,
  3, 298, :_reduce_586,
  1, 353, :_reduce_none,
  3, 353, :_reduce_588,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 299, :_reduce_591,
  1, 299, :_reduce_592,
  3, 362, :_reduce_593,
  3, 363, :_reduce_594,
  1, 305, :_reduce_595,
  3, 305, :_reduce_596,
  1, 355, :_reduce_597,
  3, 355, :_reduce_598,
  1, 364, :_reduce_none,
  1, 364, :_reduce_none,
  2, 306, :_reduce_601,
  1, 306, :_reduce_602,
  1, 365, :_reduce_none,
  1, 365, :_reduce_none,
  2, 301, :_reduce_605,
  2, 300, :_reduce_606,
  0, 300, :_reduce_607,
  1, 269, :_reduce_none,
  0, 366, :_reduce_609,
  4, 269, :_reduce_610,
  1, 248, :_reduce_611,
  2, 248, :_reduce_none,
  1, 231, :_reduce_none,
  3, 231, :_reduce_614,
  3, 367, :_reduce_615,
  2, 367, :_reduce_616,
  4, 367, :_reduce_617,
  2, 367, :_reduce_618,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 208, :_reduce_none,
  2, 184, :_reduce_none,
  0, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 265, :_reduce_644,
  1, 265, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_647,
  0, 153, :_reduce_648 ]

racc_reduce_n = 649

racc_shift_n = 1094

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tLONELY => 142,
  :tLOWEST => 143,
  :tEQL => 144,
  :tBDOT2 => 145,
  :tBDOT3 => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tLOWEST",
  "tEQL",
  "tBDOT2",
  "tBDOT3",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "@5",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@6",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@7",
  "@8",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@9",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@10",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "@28",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "case_args",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "ssym",
  "dsym",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 11
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      # TODO: move down to main match so I can just use val

                      warn "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug 12

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      result = val[2] # wtf?

    result
end

def _reduce_24(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_27(val, _values, result)
                      (_, line), (lhs, _), (rhs, _) = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_28(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_29(val, _values, result)
                      result = val[1]

    result
end

def _reduce_30(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_31(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_33(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_34(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_35(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug 13
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_38(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_43(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_44(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_45(val, _values, result)
                      prim, (call_op, _), (id, _), (op_asgn, _), rhs = val

                      result = s(:op_asgn, prim, rhs, id.to_sym, op_asgn.to_sym)
                      result.sexp_type = :safe_op_asgn if call_op == '&.'
                      result.line prim.line

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_47(val, _values, result)
                      lhs1, _, (lhs2, line), (id, _), rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, id.to_sym).line line

    result
end

def _reduce_48(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_49(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

def _reduce_50(val, _values, result)
                      expr, (_, line), resbody = val

                      expr = value_expr expr
                      ary  = s(:array).line line
                      result = new_rescue(expr, new_resbody(ary, resbody))

    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_55(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_56(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_60(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_61(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

def _reduce_65(val, _values, result)
                      blk, _, (msg, _line), args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_66(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_67(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      # self.env.unextend

    result
end

def _reduce_68(val, _values, result)
                      (msg, line), = val
                      result = new_call(nil, msg.to_sym).line line

    result
end

def _reduce_69(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_70(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_71(val, _values, result)
                      lhs, callop, (op, _), args = val

                      result = new_call lhs, op.to_sym, args, callop
                      result.line lhs.line

    result
end

def _reduce_72(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_73(val, _values, result)
                      lhs, _, (id, line), args = val

                      result = new_call lhs, id.to_sym, args
                      result.line line

    result
end

def _reduce_74(val, _values, result)
                      recv, _, (msg, _line), args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_75(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_76(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_78(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_79(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      result = val[1]

    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_84(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_85(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_86(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_87(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_88(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_89(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_90(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_91(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_92(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_93(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 94 omitted

def _reduce_95(val, _values, result)
                      result = val[1]

    result
end

def _reduce_96(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_97(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_98(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_99(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_102(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_103(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_104(val, _values, result)
                      recv, _, (id, _line) = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_105(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 14
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, (id, _line) = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_107(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug 15
                        yyerror "dynamic constant assignment"
                      end

                      _, (id, l) = val

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_108(val, _values, result)
                      ref, = val

                      self.backref_assign_error ref

    result
end

def _reduce_109(val, _values, result)
                      var, = val

                      result = self.assignable var

    result
end

def _reduce_110(val, _values, result)
                      var, = val

                      result = self.assignable var

                      debug 16

    result
end

def _reduce_111(val, _values, result)
                      lhs, _, args, _ = val

                      result = self.aryset lhs, args

    result
end

def _reduce_112(val, _values, result)
                      lhs, op, (id, _line) = val

                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_113(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_attrasgn lhs, id

    result
end

def _reduce_114(val, _values, result)
                      lhs, call_op, (id, _line) = val

                      result = new_attrasgn lhs, id, call_op

    result
end

def _reduce_115(val, _values, result)
                      expr, _, (id, _line) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 17
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      _, (id, l) = val

                      if (self.in_def || self.in_single > 0) then
                        debug 18
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_117(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_118(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      _, (name, line) = val
                      result = s(:colon3, name.to_sym).line line

    result
end

def _reduce_121(val, _values, result)
                      (id, line), = val
                      result = [id.to_sym, line] # TODO: sexp?

    result
end

def _reduce_122(val, _values, result)
                      pval, _, (name, _line) = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

def _reduce_126(val, _values, result)
                      lexer.lex_state = EXPR_END

    result
end

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      (id, line), = val

                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

def _reduce_204(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_205(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_209(val, _values, result)
                      lhs, _, (id, _line), (op, _), rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_210(val, _values, result)
                      lhs1, _, (lhs2, _line), op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_211(val, _values, result)
                      _, (lhs, line), op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_212(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_213(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_214(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.sexp_type == :lit and v2.sexp_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      _, (num, line), _, arg = val
                      lit = s(:lit, num).line line
                      result = new_call(new_call(lit, :"**", argl(arg)), :"-@")


    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 228 omitted

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_233(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_234(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_235(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_237(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_238(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_239(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_240(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_241(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      lhs, (op, _), rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_248(val, _values, result)
                      lhs, (op, _), rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_249(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_252(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_253(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_256(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = args val

    result
end

def _reduce_262(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_263(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_264(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_265(val, _values, result)
                      result = call_args val

    result
end

def _reduce_266(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_267(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_268(val, _values, result)
                      result = call_args val

    result
end

def _reduce_269(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_270(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_271(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_272(val, _values, result)
                      result = val[1]

    result
end

# reduce 273 omitted

def _reduce_274(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_275(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_276(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_277(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_278(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_279(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_280(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_281(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_282(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

def _reduce_293(val, _values, result)
                      (msg, line), = val
                      result = new_call nil, msg.to_sym
                      result.line line

    result
end

def _reduce_294(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_295(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_296(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_297(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_298(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_299(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_300(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_301(val, _values, result)
                      expr, _, (id, _line) = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_302(val, _values, result)
                      _, (id, line) = val

                      result = s(:colon3, id.to_sym).line line

    result
end

def _reduce_303(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_304(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_305(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_306(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_307(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_308(val, _values, result)
                      (_, line), _, args, _ = val

                      result = new_yield(args).line line

    result
end

def _reduce_309(val, _values, result)
                      (_, line), _, _ = val

                      result = new_yield.line line

    result
end

def _reduce_310(val, _values, result)
                      (_, line), = val

                      result = new_yield.line line

    result
end

def _reduce_311(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_312(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_313(val, _values, result)
                      debug 20

    result
end

def _reduce_314(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 315 omitted

def _reduce_316(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_317(val, _values, result)
                      expr, = val
                      result = expr

    result
end

def _reduce_318(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_319(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_320(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_321(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_322(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_323(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_324(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_325(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_326(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_327(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_328(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_329(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_330(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_331(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_332(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_333(val, _values, result)
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_334(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.ignore_body_comments

    result
end

def _reduce_335(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

    result
end

def _reduce_336(val, _values, result)
                      result, in_def = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.ignore_body_comments

    result
end

def _reduce_337(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_338(val, _values, result)
                      result = self.in_def

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL

    result
end

def _reduce_339(val, _values, result)
                      # [kdef, recv, _, _, (name, line), in_def, args, body, kend]
                      # =>
                      # [kdef, recv, (name, line), in_def, args, body, kend]

                      val.delete_at 3
                      val.delete_at 2

                      result, in_def = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.ignore_body_comments

    result
end

def _reduce_340(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_341(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_342(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_343(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_344(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_353(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

def _reduce_354(val, _values, result)
                      self.comments.push self.lexer.comments

    result
end

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

def _reduce_370(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      result = val[1]

    result
end

# reduce 373 omitted

def _reduce_374(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 375 omitted

def _reduce_376(val, _values, result)
                      result = val[1]

    result
end

def _reduce_377(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_378(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_379(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_380(val, _values, result)
                      args, _, rest = val

                      result = block_var args, rest

    result
end

def _reduce_381(val, _values, result)
                      lhs, _, splat, _, rhs = val

                      result = block_var lhs, splat, rhs

    result
end

def _reduce_382(val, _values, result)
                      rest, = val

                      result = block_var rest

    result
end

def _reduce_383(val, _values, result)
                      splat, _, rest = val

                      result = block_var splat, rest

    result
end

def _reduce_384(val, _values, result)
                      _, (id, line) = val

                      result = args ["*#{id}".to_sym]
                      result.line line

    result
end

def _reduce_385(val, _values, result)
                      result = args [:*]
                      result.line lexer.lineno # FIX: tSTAR -> line

    result
end

def _reduce_386(val, _values, result)
                      result = call_args val

    result
end

def _reduce_387(val, _values, result)
                      result = call_args val

    result
end

def _reduce_388(val, _values, result)
                      result = call_args val

    result
end

def _reduce_389(val, _values, result)
                      (id, line), = val
                      result = call_args [id]
                      result.line line

    result
end

def _reduce_390(val, _values, result)
                      result = args val

    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      result = args val

    result
end

def _reduce_393(val, _values, result)
                      result = args val

    result
end

def _reduce_394(val, _values, result)
                      result = args val

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

def _reduce_396(val, _values, result)
                      result = args val

    result
end

def _reduce_397(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args val

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
 result = 0
    result
end

def _reduce_408(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_409(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_411(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 412 omitted

def _reduce_413(val, _values, result)
                      result = args val

    result
end

def _reduce_414(val, _values, result)
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = args val

    result
end

def _reduce_416(val, _values, result)
                      (id, line), = val
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_419(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_420(val, _values, result)
                      _, (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_421(val, _values, result)
                      result = args val

    result
end

def _reduce_422(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_423(val, _values, result)
                      result = val[1]

    result
end

def _reduce_424(val, _values, result)
                      result = val[1]

    result
end

def _reduce_425(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_426(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      cmd, blk = val

                      syntax_error "Both block arg and actual block given." if
                        cmd.block_pass?

                      if inverted? val then
                        val = invert_block_call val
                        cmd, blk = val
                      end

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_427(val, _values, result)
                      lhs, _, (id, _line), args = val

                      result = new_call lhs, id.to_sym, args

    result
end

def _reduce_428(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_429(val, _values, result)
                      iter1, _, (name, _line), args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_430(val, _values, result)
                      call, args = val

                      result = call.concat args.sexp_body if args

    result
end

def _reduce_431(val, _values, result)
                      recv, call_op, (op, _line), args = val

                      result = new_call recv, op.to_sym, args, call_op

    result
end

def _reduce_432(val, _values, result)
                      recv, _, (op, _line), args = val

                      result = new_call recv, op.to_sym, args

    result
end

def _reduce_433(val, _values, result)
                      lhs, _, (id, _line) = val

                      result = new_call lhs, id.to_sym

    result
end

def _reduce_434(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_435(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_436(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_437(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_438(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_439(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_440(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_441(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_442(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line line

                      self.env.unextend

    result
end

def _reduce_443(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_444(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_445(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_446(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_447(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_448(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_449(val, _values, result)
                      arg, = val

                      result = s(:array, arg).line arg.line

    result
end

def _reduce_450(val, _values, result)
                      _, arg = val

                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_451(val, _values, result)
                      args, _, id = val

                      result = self.list_append args, id

    result
end

def _reduce_452(val, _values, result)
                      args, _, _, id = val

                      result = self.list_append args, s(:splat, id).line(id.line)

    result
end

def _reduce_453(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_454(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line val[1]
                      result << val[5] if val[5]

    result
end

# reduce 455 omitted

# reduce 456 omitted

def _reduce_457(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_458(val, _values, result)
                      result = nil

    result
end

def _reduce_459(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = val[1]

    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (lit, line), = val
                      result = s(:lit, lit).line line

    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_469(val, _values, result)
                      debug 37

    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_472(val, _values, result)
                      (_, line), str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_DEDENT

                      result = str.line line

    result
end

def _reduce_473(val, _values, result)
                      result = new_string val

    result
end

def _reduce_474(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_475(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_476(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_477(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_478(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_479(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 480 omitted

def _reduce_481(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_482(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_483(val, _values, result)
                      (_, line), list, _, = val
                      list.line line
                      result = list

    result
end

def _reduce_484(val, _values, result)
                      result = new_symbol_list

    result
end

def _reduce_485(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_486(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_487(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_488(val, _values, result)
                      (_, line), _, _ = val

                      result = s(:array).line line

    result
end

def _reduce_489(val, _values, result)
                      (_, line), list, _ = val

                      result = list.line line

    result
end

def _reduce_490(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_491(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_492(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_493(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_494(val, _values, result)
                      line = prev_value_to_lineno _values.last
                      result = s(:str, +"").line line

    result
end

def _reduce_495(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_496(val, _values, result)
                      result = nil

    result
end

def _reduce_497(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_498(val, _values, result)
                      result = nil

    result
end

def _reduce_499(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_500(val, _values, result)
                      result = new_string val

    result
end

def _reduce_501(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_502(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_503(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_504(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.pop
                      lexer.cmdarg.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug 38
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_505(val, _values, result)
                      (id, line), = val
                      result = s(:gvar, id.to_sym).line line

    result
end

def _reduce_506(val, _values, result)
                      (id, line), = val
                      result = s(:ivar, id.to_sym).line line

    result
end

def _reduce_507(val, _values, result)
                      (id, line), = val
                      result = s(:cvar, id.to_sym).line line

    result
end

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

def _reduce_511(val, _values, result)
                      _, (id, line) = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

def _reduce_512(val, _values, result)
                      (id, line), = val

                      lexer.lex_state = EXPR_END
                      result = s(:lit, id.to_sym).line line

    result
end

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

# reduce 516 omitted

def _reduce_517(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug 39
                      end

    result
end

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, (num, line) = val
                      result = [-num, line]

    result
end

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

def _reduce_529(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_530(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_531(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_536(val, _values, result)
                      raise "NO: #{val.inspect}" if Sexp === val.first
                      (var, line), = val
                      result = Sexp === var ? var : self.gettable(var)
                      result.line line

    result
end

def _reduce_537(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_539(val, _values, result)
                      result = self.assignable val[0]
                      debug 40

    result
end

def _reduce_540(val, _values, result)
                      (ref, line), = val
                      result = s(:nth_ref, ref).line line

    result
end

def _reduce_541(val, _values, result)
                      (ref, line), = val
                      result = s(:back_ref, ref).line line

    result
end

def _reduce_542(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_543(val, _values, result)
                      result = val[2]

    result
end

def _reduce_544(val, _values, result)
                      result = nil

    result
end

def _reduce_545(val, _values, result)
                      result = end_args val

    result
end

def _reduce_546(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_547(val, _values, result)
                      result = end_args val

    result
end

def _reduce_548(val, _values, result)
                      result = args val

    result
end

def _reduce_549(val, _values, result)
                      result = args val

    result
end

def _reduce_550(val, _values, result)
                      result = args val

    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      result = val[1]

    result
end

def _reduce_553(val, _values, result)
                      result = nil

    result
end

def _reduce_554(val, _values, result)
                      result = args val

    result
end

def _reduce_555(val, _values, result)
                      result = args val

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val
                      # result.line lexer.lineno

    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 573 omitted

def _reduce_574(val, _values, result)
                      (id, line), = val
                      identifier = id.to_sym
                      self.env[identifier] = :lvar

                      result = [identifier, line]

    result
end

# reduce 575 omitted

# reduce 576 omitted

def _reduce_577(val, _values, result)
                      _, margs, _ = val

                      result = margs

    result
end

def _reduce_578(val, _values, result)
                      result = new_arg val

    result
end

def _reduce_579(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << (Sexp === item ? item : item.first)

    result
end

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_582(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_583(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_584(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      result = args val

    result
end

# reduce 589 omitted

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      _, (id, line) = val

                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"**#{name}", line]

    result
end

def _reduce_592(val, _values, result)
                      id = :"**"
                      self.env[id] = :lvar # TODO: needed?!?
                      result = [id, lexer.lineno] # TODO: tPOW/tDSTAR include lineno

    result
end

def _reduce_593(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs
                      # TODO: detect duplicate names

    result
end

def _reduce_594(val, _values, result)
                      lhs, _, rhs = val
                      result = self.assignable lhs, rhs

    result
end

def _reduce_595(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_596(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_597(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_598(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 599 omitted

# reduce 600 omitted

def _reduce_601(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      _, (id, line) = val
                      name = id.to_sym
                      self.assignable [name, line]
                      result = [:"*#{name}", line]

    result
end

def _reduce_602(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = [name, lexer.lineno] # FIX: tSTAR to include lineno

    result
end

# reduce 603 omitted

# reduce 604 omitted

def _reduce_605(val, _values, result)
                      _, (id, line) = val
                      identifier = id.to_sym

                      self.env[identifier] = :lvar
                      result = ["&#{identifier}".to_sym, line]

    result
end

def _reduce_606(val, _values, result)
                      _, arg = val
                      result = arg

    result
end

def _reduce_607(val, _values, result)
                      result = nil

    result
end

# reduce 608 omitted

def _reduce_609(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_610(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_611(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 612 omitted

# reduce 613 omitted

def _reduce_614(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_615(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_616(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_617(val, _values, result)
                      (_, line), sym, _, value = val

                      sym.sexp_type = :dsym

                      result = s(:array, sym, value).line line

    result
end

def _reduce_618(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

def _reduce_644(val, _values, result)
 yyerrok
    result
end

# reduce 645 omitted

# reduce 646 omitted

def _reduce_647(val, _values, result)
 yyerrok
    result
end

def _reduce_648(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby24Parser
