{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.1",
    "title": "Swagger Petstore",
    "description": "A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification",
    "termsOfService": "http://helloreverb.com/terms/",
    "contact": {
      "name": "Wordnik API Team"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v1",
      "description": "Petstore API"
    },
    {
      "url": "https://{subdomain}.site.com/{version}",
      "description": "The main prod server",
      "variables": {
        "subdomain": {
          "default": "production"
        },
        "version": {
          "enum": [
            "v1",
            "v2"
          ],
          "default": "v2"
        }
      }
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2": [
        "read",
        "write"
      ]
    }
  ],
  "x-tagGroups": [
    {
      "name": "Pets",
      "tags": ["dogs", "cats"]
    }
  ],
  "tags": [
    {
      "name": "dogs",
      "description": "Dogs"
    },
    {
      "name": "cats",
      "description": "Cats"
    }
  ],
  "paths": {
    "/pets": {
      "description": "Perform actions on pet resources",
      "servers": [
        {
          "url": "http://petstore.swagger.io/",
          "description": "Petstore API (without version prefix)"
        }
      ],
      "get": {
        "summary": "List all pets",
        "operationId": "listPets",
        "tags": [
          "pets"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "large": {
                "value": 100,
                "summary": "Return a maximum of 100 results"
              },
              "small": {
                "value": 5,
                "summary": "Return a maximum of 5 results"
              }
            }
          }
        ],
        "servers": [
          {
            "url": "http://petstore.swagger.io/2.1/",
            "description": "Petstore API (with version 2.1 prefix)"
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of pets",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets"
                },
                "examples": {
                  "Rabbit": {
                    "value": {
                      "id": 10,
                      "name": "Rabbit"
                    }
                  },
                  "Cat": {
                    "$ref": "#/components/examples/Cat"
                  }
                }
              }
            },
            "links": {
              "getPetById": {
                "$ref": "#/components/links/GetPetById"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a pet",
        "operationId": "createPets",
        "tags": [
          "pets"
        ],
        "requestBody": {
          "description": "Pet to add to the store",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "example": {
                  "name": "Fluffy"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New Pet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "links": {
              "getPetById": {
                "operationId": "showPetById",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `petId` parameter in `GET /pets/{petId}`."
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/pets/{petId}": {
      "parameters": [
        {
          "name": "petId",
          "in": "path",
          "required": true,
          "description": "The id of the pet to retrieve",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Info for a specific pet",
        "operationId": "showPetById",
        "tags": [
          "pets"
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update info for a specific pet",
        "operationId": "updatePetById",
        "tags": [
          "pets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PetBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatePetBodyResponse"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Replace info for a specific pet",
        "operationId": "replacePetById",
        "tags": [
          "pets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PetBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReplacePetBodyResponse"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/pets/{petId}/purchase": {
      "post": {
        "summary": "Purchase a specific pet",
        "operationId": "purchasePetById",
        "deprecated": true,
        "tags": [
          "pets"
        ],
        "parameters": [
          {"$ref": "#/components/parameters/petId"}
        ],
        "requestBody": {
          "description": "Pet order object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {"$ref": "#/components/schemas/PetOrderRequest"},
                  {"$ref": "#/components/schemas/ComplexPetOrderRequest"}
                ]
              },
              "example": {
                "id": 10,
                "name": "Fluffy"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetOrder"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "callbacks": {
          "orderUpdated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OrderUpdated"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise delivery will be reattempted."
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Pet": {
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "tag_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "example": [1, 2, 3]
          }
        }
      },
      "Pets": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        },
        "example": [{"id": 10, "name": "Rover"}, {"id": 20, "name": "Felicity"}]
      },
      "PetOrderRequest": {
        "required": [
          "phone_number"
        ],
        "properties": {
          "phone_number": {
            "type": "string"
          },
          "webhook_url": {
            "type": "string"
          }
        }
      },
      "PetOrder": {
        "required": [
          "phone_number",
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "phone_number": {
            "type": "string"
          },
          "webhook_url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "OrderUpdated": {
        "required": [
          "order_id",
          "status",
          "phone_number"
        ],
        "properties": {
          "order_id": {
            "type": "integer",
            "format": "int64"
          },
          "phone_number": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "example": {
          "order_id": 123,
          "phone_number": "3125556666",
          "status": "complete"
        }
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "requestBodies": {
      "PetBody": {
        "description": "A JSON object containing pet information",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      }
    },
    "responses" : {
      "UpdatePetBodyResponse": {
        "description": "Expected response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "ReplacePetBodyResponse": {
        "description": "Expected response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      }
    },
    "links": {
      "GetPetById": {
        "operationId": "showPetById",
        "parameters": {
          "petId": "$response.body#/id"
        }
      }
    },
    "examples": {
      "PetExample": {
        "value": {
          "id": 1,
          "name": "Rover"
        },
        "summary": "An example pet response"
      },
      "Cat": {
        "value": {
          "id": 1,
          "name": "Felicity"
        },
        "summary": "An example cat response"
      }
    },
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      },
      "OpenID": {
        "type": "openIdConnect",
        "openIdConnectUrl": "https://example.com/.well-known/openid-configuration"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
              "read": "Grants read access",
              "write": "Grants write access",
              "admin": "Grants access to admin operations"
            }
          }
        }
      }
    },
    "parameters": {
      "petId": {
        "name": "petId",
        "in": "path",
        "required": true,
        "description": "The id of the pet to retrieve",
        "schema": {
          "type": "string"
        }
      }
    }
  }
}
