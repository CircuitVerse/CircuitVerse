# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby31 < Parser::Base


  def version
    31
  end

  def default_encoding
    Encoding::UTF_8
  end

  def endless_method_name(name_t)
    if !%w[=== == != <= >=].include?(name_t[0]) && name_t[0].end_with?('=')
      diagnostic :error, :endless_setter, nil, name_t
    end
  end
##### State transition tables begin ###

clist = [
'-318,1009,618,1109,308,-119,974,-318,-318,-318,218,219,-118,-318,-318',
'-610,-318,236,-123,-116,-120,-116,-610,-117,-318,-719,661,297,-124,659',
'234,-120,1104,119,715,598,-318,-318,-117,-318,-318,-318,-318,-318,618',
'-124,618,618,-118,875,1103,-122,716,907,237,958,875,1187,237,816,-118',
'218,219,-123,-121,237,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318',
'-318,-318,-318,-318,-610,-122,-318,-318,-318,1110,685,-318,618,-124',
'-318,307,660,-318,-123,658,-706,-706,-318,1137,-318,230,-318,-318,237',
'-318,-318,-318,-318,-318,-318,-318,-119,-318,-110,973,-707,-318,-318',
'-318,123,-109,811,-318,-318,122,-318,-318,-107,907,-318,-318,-108,-113',
'-318,-318,-123,-115,-120,-116,-111,-123,-318,-120,-116,-122,-318,-318',
'-121,-318,-318,-318,-318,-318,618,237,-117,-731,-707,-110,-113,-117',
'123,-124,123,123,-118,122,-124,122,122,-118,-114,-112,132,-503,-318',
'-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,-318,218',
'219,-318,-318,-318,308,685,-318,230,-122,-318,931,230,-318,-122,-616',
'123,-719,-318,963,-318,122,-318,-318,308,-318,-318,-318,-318,-318,-318',
'-318,-617,-318,237,-110,123,-318,-318,-318,-119,122,-318,-318,-318,-119',
'-318,-318,932,-109,-318,-318,215,-318,-318,-318,-318,-318,-318,216,218',
'219,-318,308,-731,-122,-318,-318,-731,-318,-318,-318,-318,-318,-116',
'-110,-121,-319,-110,217,-111,-121,123,646,-319,520,-112,122,303,-719',
'-110,-117,307,-319,237,230,-318,-318,-318,-318,-318,-318,-318,-318,-318',
'-318,-318,-318,-318,-318,907,307,-318,-318,-318,-109,905,-318,101,102',
'-318,220,-613,-318,-318,237,-318,303,-318,-613,-318,858,-318,-318,646',
'-318,-318,-318,-318,-318,297,-318,-319,-318,-124,-706,-111,648,647,644',
'307,-731,-112,237,123,-109,358,-318,-109,122,-318,-318,-318,-318,784',
'-318,-611,-318,902,-710,-109,359,-318,-611,903,-122,-710,-710,-710,101',
'102,237,-710,-710,-612,-710,-111,-613,428,-111,-118,-612,-112,-710,-710',
'-112,103,104,648,647,644,-111,681,468,-102,-710,-710,-112,-710,-710',
'-710,-710,-710,218,219,1161,-88,488,-318,485,484,483,493,486,123,-318',
'680,-119,-623,122,-707,-611,496,-121,-318,-710,-710,-710,-710,-710,-710',
'-710,-710,-710,-710,-710,-710,-710,-710,-612,234,-710,-710,-710,491',
'686,-710,103,104,-710,646,-121,-710,501,500,504,503,-710,646,-710,497',
'-710,-710,646,-710,-710,-710,-710,-710,-602,-710,-710,-710,-318,425',
'-119,-602,-602,-602,427,426,-602,-602,-602,-605,-602,-710,-115,261,-710',
'-710,-605,-710,-602,-710,-602,-602,-602,913,-124,482,-710,-704,909,-120',
'-602,-602,910,-602,-602,-602,-602,-602,123,648,647,958,875,122,646,258',
'646,648,647,260,259,646,648,647,644,631,1161,842,508,632,-602,-602,-602',
'-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-605,-617,-602',
'-602,-602,-605,-602,-602,1135,1136,-602,625,-605,-602,-602,646,-602',
'-704,-602,816,-602,-605,-602,-602,646,-602,-602,-602,-602,-602,875,-602',
'625,-602,648,647,648,647,651,646,-704,648,647,662,844,218,219,-602,-108',
'-607,-602,-602,-602,-602,-602,-602,-607,-602,123,-710,-117,-602,-602',
'122,1021,-602,-710,-710,-710,519,-605,-710,-710,-710,496,-710,521,123',
'522,648,647,657,122,-710,-710,-710,-710,-710,648,647,653,610,-703,631',
'612,-710,-710,933,-710,-710,-710,-710,-710,648,647,649,504,503,224,-608',
'-609,224,497,236,-607,301,-608,-609,301,-602,610,927,928,612,1039,-710',
'-710,-710,-710,-710,-710,-710,-710,-710,-710,-710,-710,-710,-710,556',
'1021,-710,-710,-710,-602,904,-710,568,570,-710,496,-602,-710,-710,572',
'-710,-703,-710,123,-710,-602,-710,-710,122,-710,-710,-710,-710,-710',
'858,-710,-710,-710,225,-608,-609,225,132,488,-703,485,484,483,493,486',
'598,-710,-87,497,-710,-710,-710,-710,496,-710,631,-710,237,-710,933',
'1039,-710,583,584,-120,-710,-710,-710,591,-602,312,-710,-710,224,-710',
'491,-109,237,610,230,1176,609,-710,-710,501,500,504,503,-118,636,230',
'497,-114,87,-710,-710,303,-710,-710,-710,-710,-710,595,-616,-123,88',
'488,-318,485,484,483,493,486,610,-318,89,612,237,601,-707,261,496,237',
'-318,-710,-710,-710,-710,-710,-710,-710,-710,-710,-710,-710,-710,-710',
'-710,225,681,-710,-710,-710,491,686,-710,613,614,-710,572,-107,-710',
'501,500,504,503,-710,625,-710,497,-710,-710,-116,-710,-710,-710,-710',
'-710,-605,-710,-710,-710,-318,417,629,-605,-605,-605,630,638,-605,-605',
'-605,663,-605,-710,-112,666,-710,-710,667,-111,-605,-710,-605,-605,-605',
'-291,-121,482,-710,680,669,-120,-605,-605,670,-605,-605,-605,-605,-605',
'674,-353,237,224,678,-614,679,303,-353,692,634,693,-614,237,695,237',
'698,-353,701,636,702,-614,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,-605,-605,-605,-110,704,-605,-605,-605,706,-605,-605,-615',
'717,-605,718,-119,-605,-605,-615,-605,720,-605,723,-605,725,-605,-605',
'-615,-605,-605,-605,-605,-605,-353,-605,225,-605,-614,731,732,488,261',
'485,484,483,224,486,261,261,261,-605,237,590,-605,-605,-605,-605,772',
'-605,-309,-605,588,237,237,237,-605,-309,-102,-605,330,77,78,26,11,65',
'-309,-615,708,71,72,787,237,604,75,-710,73,74,76,35,36,79,80,126,127',
'128,129,130,81,33,32,111,110,112,113,798,488,23,485,484,483,225,486',
'10,53,332,12,115,114,116,105,64,107,106,108,-309,109,117,118,224,101',
'102,49,50,48,224,628,-710,802,224,278,279,1176,708,-710,626,600,237',
'804,-706,807,636,712,-710,45,518,812,38,813,817,66,67,224,841,68,845',
'40,846,-292,223,52,859,-710,556,261,556,277,276,221,24,871,875,896,897',
'99,87,90,91,237,92,94,93,95,900,225,237,907,88,98,908,225,907,-710,935',
'225,82,258,89,103,104,260,259,46,47,330,77,78,26,11,65,937,3,943,71',
'72,945,947,225,75,570,73,74,76,35,36,79,80,253,572,798,237,303,81,33',
'32,111,110,112,113,303,488,23,485,484,483,798,486,10,53,332,12,115,114',
'116,105,64,107,106,108,261,109,117,118,875,101,102,49,50,48,261,265',
'266,267,268,278,279,273,274,269,270,-319,254,255,960,961,271,272,-319',
'45,237,252,38,493,237,66,67,-319,971,68,237,40,258,496,264,52,260,259',
'-293,256,257,277,276,262,24,263,237,982,986,99,87,90,91,224,92,94,93',
'95,-291,990,517,237,88,98,993,275,504,503,995,518,82,497,89,103,104',
'701,-319,46,47,330,77,78,26,11,65,716,836,837,71,72,838,117,118,75,998',
'73,74,76,35,36,79,80,126,127,128,129,130,81,33,32,111,110,112,113,1000',
'1000,23,237,225,758,237,675,10,53,332,12,115,114,116,105,64,107,106',
'108,237,109,117,118,1035,101,102,49,50,48,261,265,266,267,268,278,279',
'273,274,269,270,224,254,255,1036,1037,271,272,673,45,1040,945,334,1047',
'237,66,67,671,798,68,1063,40,258,1065,264,52,260,259,1074,256,257,277',
'276,262,24,263,1075,1080,1081,99,87,90,91,224,92,94,93,95,1082,-294',
'1151,1095,88,98,1096,275,237,-264,237,1149,82,237,89,103,104,1100,225',
'46,47,330,77,78,26,11,65,237,237,237,71,72,907,1108,237,75,1116,73,74',
'76,35,36,79,80,126,127,128,129,130,81,33,32,111,110,112,113,1118,701',
'23,1121,225,1124,1126,675,10,53,332,12,115,114,116,105,64,107,106,108',
'1128,109,117,118,237,101,102,49,50,48,261,265,266,267,268,278,279,273',
'274,269,270,1130,254,255,1141,1152,271,272,1153,45,1000,1000,38,493',
'1000,66,67,907,1162,68,1164,40,258,496,264,52,260,259,1174,256,257,277',
'276,262,24,263,1177,1184,1185,99,87,90,91,692,92,94,93,95,1096,1196',
'701,1200,88,98,1202,275,504,503,1204,1206,82,497,89,103,104,1206,1213',
'46,47,330,77,78,26,11,65,237,1000,1196,71,72,-707,-706,1225,75,1206',
'73,74,76,35,36,79,80,126,127,128,129,130,81,33,32,111,110,112,113,1206',
'1206,23,1196,1206,,,901,10,53,332,12,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273,274,269',
'270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259',
',256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275',
',,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,872,10,53,332',
'12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261',
'265,266,267,268,278,279,273,274,269,270,,254,255,,,271,272,,45,,,38',
',,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330',
'77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,1146,23,485,484,483,,486,10,53,332,12,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279',
'273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264',
'52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,275,,,,,82,,89,103,104,,,46,47,7,77,78,26,11,65,,,,71,72,',
',,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,1146,23,485',
'484,483,,486,10,53,9,12,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255',
',,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277',
'276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89',
'103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79',
'80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268',
'278,279,273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40',
'258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,237,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65',
',,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,',
',23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,',
'271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276',
'262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103',
'104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80',
',,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278',
'279,273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258',
',264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71',
'72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,',
',,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,,271',
'272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262',
'24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104',
',,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,',
',81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279',
'273,274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264',
'52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72',
',,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,',
'10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49',
'50,48,261,265,266,267,268,278,279,273,274,269,270,,254,255,,,271,272',
',45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24',
'263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,275,,,,,82,,89,103,104,,',
'46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273',
'274,269,270,,254,255,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52',
'260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,',
'88,98,,275,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,',
',75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,488,23,485',
'484,483,,486,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,488,,485,484,483,,486,,708,,488,,485,484,483,,486',
'712,,45,,,38,,,66,67,,261,68,,40,,,,52,,708,,488,,485,484,483,24,486',
'712,708,,99,87,90,91,,92,94,93,95,,,258,,88,98,260,259,,256,257,,82',
',89,103,104,,708,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35',
'36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,261,,,10,53,332,12,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,-732,-732',
'-732,-732,278,279,258,,-732,-732,260,259,,256,257,271,272,,45,,,334',
',,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330',
'77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273,274,269,270',
',-732,-732,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,',
'256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,',
',,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76',
'35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266',
'267,268,278,279,273,274,269,270,,-732,-732,,,271,272,,45,,,38,,,66,67',
',,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26',
'11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112',
'113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,261,-732,-732,-732,-732,278,279,,,-732,-732,,,,,,271',
'272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262',
'24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,',
'46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273',
'274,269,270,,-732,-732,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264',
'52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,',
',75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10',
'53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,261,265,266,267,268,278,279,,,269,270,,,,,,271,272,,45,,,38,,,66',
'67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87',
'90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78',
'26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110',
'112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,261,-732,-732,-732,-732,278,279,,,-732,-732,,',
',,,271,272,,45,,,334,,,66,67,,,68,,40,258,,264,52,260,259,,256,257,277',
'276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103',
'104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80',
',,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,261,265,266,267,268,278',
'279,273,274,269,270,,-732,-732,,,271,272,,45,,,38,,,66,67,,,68,,40,258',
',264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,7,77,78,26,11,65,,,,71,72',
',,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,',
'10,53,9,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,261,,,,,,,,,,,,,,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52',
'260,259,,256,257,,,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98',
',,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,261,-732',
'-732,-732,-732,278,279,,,-732,-732,,,,,,271,272,,45,,,38,,,66,67,,,68',
',40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,,99,87,90,91,',
'92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65',
',,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,',
',23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,261,,,,,,,,,,,,,,,,271,272,,45,,,38,,,66,67,,,68,,40,258',
',264,52,260,259,,256,257,,,262,24,263,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,,,,82,,89,103,104,,,46,47,330,77,78,26,11,65,,,,71,72,,,',
'75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10',
'53,332,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,261,-732,-732,-732,-732,278,279,,,-732,-732,,,,,,271,272,,45,,,38',
',,66,67,,,68,,40,258,,264,52,260,259,,256,257,277,276,262,24,263,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,330',
'77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,261,-732,-732,-732,-732,278,279,,,-732,-732',
',,,,,271,272,,45,,,38,,,66,67,,,68,,40,258,,264,52,260,259,,256,257',
'277,276,262,24,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346',
'354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,261,265,266,267,268,278,279,273,,269',
'270,,,,,,271,272,,242,,,250,,,66,67,,,68,,,258,,264,52,260,259,,256',
'257,277,276,262,247,263,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,',
'82,,89,103,104,-433,,46,47,,,,-433,-433,-433,,,-433,-433,-433,261,-433',
',,,,,,,-433,-433,-433,-433,,,,271,272,,,,-433,-433,,-433,-433,-433,-433',
'-433,,,,258,,,,260,259,,256,257,,,,,,,,,,,-433,-433,-433,-433,-433,-433',
'-433,-433,-433,-433,-433,-433,-433,-433,,,-433,-433,-433,,,-433,,303',
'-433,,,-433,-433,,-433,,-433,,-433,,-433,-433,,-433,-433,-433,-433,-433',
',-433,-433,-433,,,,,,,,,,,,,,-433,,,-433,-433,,-433,,-433,77,78,26,',
'65,,-433,,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,261,,,,,,,,,,,,,,,,271,272,,242,,,250,,,66,67,,,68',
',,258,,264,52,260,259,,256,257,,,,247,,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,,,,,,82,,89,103,104,-325,,46,47,,,,-325,-325,-325,,,-325,-325',
'-325,261,-325,,,,,,,,-325,,-325,-325,,,,271,272,,,,-325,-325,,-325,-325',
'-325,-325,-325,,,,258,,264,,260,259,,256,257,,,,,,,,,,,-325,-325,-325',
'-325,-325,-325,-325,-325,-325,-325,-325,-325,-325,-325,,,-325,-325,-325',
',,-325,,312,-325,,,-325,-325,,-325,,-325,,-325,,-325,-325,,-325,-325',
'-325,-325,-325,,-325,,-325,,,,,,,,,,,,,,-325,,,-325,-325,,-325,,-325',
'77,78,26,,65,,-325,,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346',
'354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67',
',,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67',
',,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,',
'81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,',
',,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107',
'106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250',
',,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73',
'74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,',
',115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,',
',,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,',
',,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,781,,,,52,,,,,,',
',,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319',
',52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33',
'32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324',
'109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,',
',68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88',
'98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79',
'80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351',
'352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,',
',,,,,,,,242,,,250,,,66,67,,,68,,,,319,,52,,,325,,,,,,247,,,,,99,322',
'90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47',
',75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,',
',,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113',
',,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,123,,,,,122,82,,89,103,104,-711',
',46,47,,,,-711,-711,-711,,,-711,-711,-711,,-711,,,,,,,,-711,-711,-711',
'-711,-711,,,,,,,,-711,-711,,-711,-711,-711,-711,-711,,,,,,,,,,,,,,,',
',,,,,,,-711,-711,-711,-711,-711,-711,-711,-711,-711,-711,-711,-711,-711',
'-711,,,-711,-711,-711,,,-711,,,-711,,,-711,-711,,-711,,-711,,-711,,-711',
'-711,,-711,-711,-711,-711,-711,,-711,-711,-711,,,,,,,,,,,,,,-711,,,-711',
'-711,-711,-711,,-711,-274,-711,,,,,-711,-274,-274,-274,,,-274,-274,-274',
',-274,,,,,,,,-274,-274,-274,-274,,,,,,,,,-274,-274,,-274,-274,-274,-274',
'-274,,,,,,,,,,,,,,,,,,,,,,,-274,-274,-274,-274,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,,,-274,-274,-274,,,-274,,303,-274,,,-274,-274',
',-274,,-274,,-274,,-274,-274,,-274,-274,-274,-274,-274,,-274,-274,-274',
',,,,,,,,,,,,,-274,,,-274,-274,,-274,,-274,77,78,26,,65,,-274,,71,72',
',,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,',
',53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72',
'46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,',
'251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,',
',,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33',
'32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324',
'109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,',
',68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88',
'98,,,,77,78,26,82,65,89,103,104,71,72,46,558,,75,,73,74,76,35,36,79',
'80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64',
'107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73',
'74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115',
'114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,',
',,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,',
'99,322,90,91,,92,94,93,95,,,,,88,98,237,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,',
',,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81',
'346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80',
',,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,',
'250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352',
'79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351',
'352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73',
'74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,',
',115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,',
',,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,',
',,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52',
',,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103',
'104,,,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,',
',81,33,32,111,110,112,113,,,23,,,,,,10,53,,12,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,',
'66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88',
'98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79',
'80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351',
'352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,',
',,,,,,,,242,,,250,,,66,67,,,68,,781,,319,,52,,,325,,,,,,247,,,,,99,322',
'90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,558',
',75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,',
',,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,604,,66,67,,,68,,,,,,52,,',
',,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104',
',,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,23,,,,,,10,53,,12,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67',
',,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,',
'77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,',
',,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250',
',,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88',
'98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79',
'80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351',
'352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,',
',,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53',
',,115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,',
',,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247',
',,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,,,52,,',
',,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89',
'103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324',
'109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,',
',68,,,,,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80',
',,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64',
'107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,781,,,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74',
'76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,',
',,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75',
',73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,',
'53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,',
',,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,',
',,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,237,,,77,78,26,82,65,89,103,104,71,72',
'46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,',
'251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113',
',,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52',
',,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89',
'103,104,,,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80',
',,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,332,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45',
',,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,,,417,82,,89,103,104,,,46,47,77,78,26,,65,,,,71,72,,,,75',
',73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,',
'53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,',
',,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,',
',,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,',
',,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49',
'50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,319,,52,,,325,,,',
',,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,781',
',319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,',
'81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,',
',,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107',
'106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250',
',,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78,26,11,65,,,,71',
'72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,',
',,,10,53,9,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49',
'50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,-274,,46',
'47,,,,-274,-274,-274,,,-274,-274,-274,,-274,,,,,,,,-274,-274,-274,,',
',,,,,,,-274,-274,,-274,-274,-274,-274,-274,,,,,,,,554,459,,,555,,,,',
',,,166,167,,163,145,146,147,154,151,153,,,148,149,-274,,,168,169,155',
'156,-274,,,,,303,-274,,,,,,,160,159,,144,165,162,161,170,157,158,152',
'150,142,164,143,-274,-274,171,,,,,,,,,,,,,-274,,,-274,,77,78,26,-274',
'65,,,,71,72,-274,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,321,,319',
',52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33',
'32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,',
'109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,',
',68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67',
',,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67',
',,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81',
'33,32,111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67',
',,68,,,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,',
'81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80',
',,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,',
'250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352',
'79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,',
',,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,',
',,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,433,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48',
',,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,433,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47',
'77,78,26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,23,,,,,,10,53,,12,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40',
',,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32',
'111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32',
'111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32',
'111,110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,',
'89,103,104,-310,,46,47,,,,-310,-310,-310,,,-310,-310,-310,,-310,,,,',
',,,-310,,-310,-310,-310,,,,,,,,-310,-310,,-310,-310,-310,-310,-310,',
',,,,,,,,,,,,,,,,,,,,,-310,-310,-310,-310,-310,-310,-310,-310,-310,-310',
'-310,-310,-310,-310,,,-310,-310,-310,,,-310,,,-310,,,-310,-310,,-310',
',-310,,-310,,-310,-310,,-310,-310,-310,-310,-310,,-310,,-310,,,,,,,',
',,,,,,-310,,,-310,-310,-310,-310,,-310,,-310,,77,78,26,-310,65,,,,71',
'72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,',
',,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78',
'26,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110',
'112,113,,,23,,,,,,10,53,,12,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,',
',52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324',
'109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,',
',68,,321,,,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98',
',,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80',
',,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64',
'107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,46,47,77,78,26,11,65,,,,71',
'72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,',
',,,10,53,9,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49',
'50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,417,82,,89,103,104,,,46,47',
'77,78,26,,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,23,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,24,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,81,33,32,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89',
'103,104,-712,,46,47,,,,-712,-712,-712,,,-712,-712,-712,,-712,,,,,,,',
'-712,-712,-712,-712,-712,,,,,,,,-712,-712,,-712,-712,-712,-712,-712',
',,,,,,,,,,,,,,,,,,,,,,-712,-712,-712,-712,-712,-712,-712,-712,-712,-712',
'-712,-712,-712,-712,,,-712,-712,-712,,,-712,,,-712,,,-712,-712,,-712',
',-712,,-712,,-712,-712,,-712,-712,-712,-712,-712,,-712,-712,-712,,,',
',,,,,,,,,,-712,,,-712,-712,-712,-712,,-712,,-712,,77,78,26,-712,65,',
',,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,433,,,,52,,',
',,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89',
'103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111',
'110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,',
',52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82',
'65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68',
',,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81',
'346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35,36,79,80,,',
',,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250',
',,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88',
'98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79',
'80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242',
',,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,',
',242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73',
'74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,',
',,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75',
',73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,',
',115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,',
',,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,',
'75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,',
',,,53,,,115,114,116,105,64,107,106,108,324,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,319,,52,,,325,,,,,,247',
',,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,53,,,115,114,116,105,64,107,106,108,324,109,117,118',
',101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,781,,319',
',52,,,325,,,,,,247,,,,,99,322,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81',
'346,354,111,110,112,113,,,251,,,,,,,53,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66',
'67,,,68,,,,,,52,,,,,,,,,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,,,,82,,89,103,104,,,46,47,77,78,26,11,65,,,,71,72,,,,75,,73,74,76',
'35,36,79,80,,,,,,81,33,32,111,110,112,113,,,23,,,,,,10,53,,12,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,,,,,,,,,,,,,,',
',,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47,,75,,73,74',
'76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,,53,,,115,114',
'116,105,64,107,106,108,324,109,117,118,,101,102,49,50,48,,,,,,,,,,,',
',,,,,,,,242,,,250,,,66,67,,,68,,321,,319,,52,,,325,,,,,,247,,,,,99,322',
'90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46,47',
',75,,73,74,76,35,36,79,80,,,,,,81,33,32,111,110,112,113,,,251,,,,,,',
'53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50,48,',
',,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,46',
'47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,49,50',
'48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,,,,,52,,,,,,,,,247,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,53,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'49,50,48,,,,,,,,,,,,,,,,,,,,242,,,250,,,66,67,,,68,,850,,,,52,,,,,,',
',,247,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,46,47,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,,,355,,,,,,,,,,,,,,,,,,,,1132,,,250,,,66,67,,,68,,,,,,,,,,',
',,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68,,,,,,,,,,,,,,,,',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71',
'72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,355',
',,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,',
'73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,',
',,,,,,,,,,,,343,,,250,,,66,67,,,68,,,488,,485,484,483,493,486,,,,,,',
',,496,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,586,,491,82,,89,103,104',
'77,78,26,,65,504,503,,71,72,497,,,75,,73,74,76,351,352,79,80,,,,,,81',
'346,354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66,67',
',,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'26,82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346',
'354,111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,1132,,,250,,,66,67,,',
'68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26',
'82,65,89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354',
'111,110,112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,,,355,,,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68,,,',
',,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65',
'89,103,104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110',
'112,113,,,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,,,355,,,,,,,,,,,,,,,,,,,,392,,,38,,,66,67,,,68,,40,,,,,,,,',
',,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103',
'104,71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112',
'113,,,251,,,,,,,347,,,115,114,116,397,64,107,106,398,,109,117,118,,101',
'102,,,355,,,,,,,,,,,,,,,,,404,,,399,,,250,,,66,67,,,68,,,,,,,,,,,,,',
',,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104',
'71,72,,,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113',
',,251,,,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
',,355,,,,,,,,,,,,,,,,,,,,1088,,,250,,,66,67,,,68,,,,,,,,,,,,,,,,,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72',
',,,75,,73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251',
',,,,,,347,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,355',
',,,,,,,,,,,,,,,,,,,343,,,339,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,',
'73,74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,',
',,,,,,,,,,,,343,,,339,,,66,67,,,68,,338,,,,,,,,,,,,,,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,,73',
'74,76,351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347',
',,115,114,116,397,64,107,106,398,,109,117,118,,101,102,,,355,,,,,,,',
',,,,,,,,,,,,399,,,250,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,26,82,65,89,103,104,71,72,,,,75,,73,74,76',
'351,352,79,80,,,,,,81,346,354,111,110,112,113,,,251,,,,,,,347,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,,,355,,,,,,,,,,,,,',
',,,,,,343,,,250,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,357,,,82,,89,103,104,182,193,183,206,179,199,189,188',
'209,210,204,187,186,181,207,211,212,191,180,194,198,200,192,185,,,,201',
'208,203,202,195,205,190,178,197,196,,,,,,177,184,175,176,172,173,174',
'135,137,134,,136,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149',
',,,168,169,155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170,157,158',
'152,150,142,164,143,,,171,99,,,,,,,,,,,,,,98,182,193,183,206,179,199',
'189,188,209,210,204,187,186,181,207,211,212,191,180,194,198,200,192',
'185,,,,201,208,203,202,195,205,190,178,197,196,,,,,,177,184,175,176',
'172,173,174,135,137,,,136,,,,,,,,166,167,,163,145,146,147,154,151,153',
',,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170',
'157,158,152,150,142,164,143,,,171,99,,,,,,,,,,,,,,98,182,193,183,206',
'179,199,189,188,209,210,204,187,186,181,207,211,212,191,180,194,198',
'200,192,185,,,,201,208,203,202,195,205,190,178,197,196,,,,,,177,184',
'175,176,172,173,174,135,137,,,136,,,,,,,,166,167,,163,145,146,147,154',
'151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160,159,,144,165,162',
'161,170,157,158,152,150,142,164,143,,,171,99,,,,,,,,,,,,,,98,182,193',
'183,206,179,199,189,188,209,210,204,187,186,181,207,211,212,191,180',
'194,198,200,192,185,,,,201,208,203,202,195,205,190,178,197,196,,,,,',
'177,184,175,176,172,173,174,135,137,,,136,,,,,,,,166,167,,163,145,146',
'147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160,159,,144',
'165,162,161,170,157,158,152,150,142,164,143,,,171,99,111,110,112,113',
',,,,,,,,,98,,,115,114,116,758,,,488,761,485,484,483,493,486,101,102',
',,355,,,,496,,,,,,,,,,,,,,,,760,,,742,,,491,740,,,741,,,,,501,500,504',
'503,,,,497,,,,759,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112',
'113,,,82,,89,103,104,,,746,747,,115,114,116,758,,,,761,1021,,,,,101',
'102,,,355,496,,,,,,,,,,,,,,,,,,,760,,,742,,,,740,,,741,,922,,,,,,,497',
',,,,,,759,,,,99,1022,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,',
'82,,89,103,104,,,746,747,,115,114,116,758,,,488,761,485,484,483,493',
'486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,760,,,742,,,491,740,,,741,,',
',,,,504,503,,,,497,,,,759,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111',
'110,112,113,,,82,,89,103,104,,,746,747,,115,114,116,758,,,488,761,485',
'484,483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,760,,,742,,,491',
'740,,,741,,,,,501,500,504,503,,,,497,,,,759,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,746,747,,115,114,116',
'758,,,488,761,485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,',
',,760,,,742,,,491,740,,,741,,,,,501,500,504,503,,,,497,,,,759,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,746',
'747,,115,114,116,758,,,488,761,485,484,483,493,486,101,102,,,355,,,',
'496,,,,,,,,,,,,,,,,760,,,742,,,491,740,,,741,,,,,,,504,503,,,,497,,',
',759,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89',
'103,104,,,746,747,,115,114,116,758,,,488,761,485,484,483,493,486,101',
'102,,,355,,,,496,,,,,,,,,,,,,,,,760,,,742,,,491,740,,,741,,,,,501,500',
'504,503,,,,497,,,,759,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110',
'112,113,,,82,,89,103,104,,,746,747,,115,114,116,758,,,488,761,485,484',
'483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,760,,,742,,,491,740',
',,741,,,,,,,504,503,,,,497,,,,759,,,,99,87,90,91,,92,94,93,95,,,,,88',
'98,111,110,112,113,,,82,,89,103,104,,,746,747,,115,114,116,758,,,488',
'761,485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,760,,,742',
',,491,740,,,741,,,,,501,500,504,503,,,,497,,,,759,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,746,747,,115,114',
'116,758,,,488,761,485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,',
',,,,,,760,,,742,,,491,740,,,741,,,,,501,500,504,503,,,,497,,,,759,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104',
',,746,747,,115,114,116,758,,,488,761,485,484,483,493,486,101,102,,,355',
',,,496,,,,,,,,,,,,,,,,760,,,742,,,491,740,,,741,,922,,,,,504,503,,,',
'497,,,,759,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82',
',89,103,104,,,746,747,,115,114,116,758,,,,761,1021,,,,,101,102,,,355',
'496,,,,,,,,,,,,,,,,,,,760,,,742,,,,740,,,741,,922,,,,,,,497,,,,,,,759',
',,,99,1022,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,746,747',
'182,193,183,206,179,199,189,188,209,210,204,187,186,181,207,211,212',
'191,180,194,198,200,192,185,,,,201,208,203,291,290,292,289,178,197,196',
',,,,,177,184,175,176,286,287,288,284,137,107,106,285,,109,,,,,,166,167',
',163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,296,',
',,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,,,171',
'111,110,112,113,,,488,,485,484,483,493,486,,,,115,114,116,758,,496,',
'761,,,,,,101,102,,,355,,,,,,,,,,491,,,,,,,,,,760,504,503,742,,,497,740',
',,741,,922,,,,,,,,,,,,,,759,,,,99,87,90,91,,92,94,93,95,,,,,88,98,237',
'111,110,112,113,,82,,89,103,104,,,746,747,,,115,114,116,758,,,488,761',
'485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,,,,,,,,760,,,742,,',
'491,740,,,741,,,,,501,500,504,503,,,,497,,,,759,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,746,747,,115,114',
'116,758,,,488,761,485,484,483,493,486,101,102,,,355,,,,496,,,,,,,,,',
',,,,,,760,,,742,,,491,740,,,741,,1034,,,501,500,504,503,,,,497,,,,759',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,746,747',
'182,193,183,206,179,199,189,188,209,210,204,187,186,181,207,211,212',
'191,180,194,198,200,192,185,,,,201,208,203,202,195,205,190,178,197,196',
',,,,,177,184,175,176,172,173,174,135,137,,,136,,,,,,,,166,167,,163,145',
'146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160,159',
',144,165,162,161,170,157,158,152,150,142,164,143,,,171,111,110,112,113',
',,488,,485,484,483,493,486,,,,115,114,116,758,,496,,761,1021,,,,,101',
'102,,,355,496,,,,,,,,,491,,,,,,,,,,760,504,503,742,,,497,740,,,741,',
'922,,,,,,,497,,,,,,,759,,,,99,1022,90,91,,92,94,93,95,,,,,88,98,111',
'110,112,113,,,82,,89,103,104,,,746,747,,115,114,116,758,,,,761,,,,,',
'101,102,,,355,,,,,,,,111,110,112,113,,,,,,,,,760,,,742,115,114,116,740',
',,741,,922,,,,,101,102,,,355,,,,,759,,,,99,87,90,91,,92,94,93,95,,,',
',88,98,,,,,,,82,,89,103,104,,,746,747,488,,485,484,483,493,486,,,,,99',
'87,90,91,496,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104',
'491,642,,,,115,114,116,,501,500,504,503,,,,497,,101,102,,,355,111,110',
'112,113,,,,,,,,,,,,,115,114,116,,,,,,,,,,,101,102,,,355,,,,,,,,,,,,',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,,,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,',
',,115,114,116,462,466,,,461,,,,,,101,102,166,167,355,163,145,146,147',
'154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144',
'165,162,161,170,157,158,152,150,142,164,143,,,171,99,87,90,91,,92,94',
'93,95,,,,,88,98,791,459,,,792,,82,,89,103,104,,166,167,,163,145,146',
'147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159',
',144,165,162,161,170,157,158,152,150,142,164,143,794,466,171,,795,,',
',,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156',
',,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164',
'143,825,466,171,,826,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148',
'149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170',
'157,158,152,150,142,164,143,455,459,171,,456,,,,,,,,166,167,,163,145',
'146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160',
'159,,144,165,162,161,170,157,158,152,150,142,164,143,1210,466,171,,1209',
',,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155',
'156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142',
'164,143,852,459,171,,853,,,,,,,,166,167,,163,145,146,147,154,151,153',
',,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161',
'170,157,158,152,150,142,164,143,554,459,171,,555,,,,,,,,166,167,,163',
'145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,',
',160,159,,144,165,162,161,170,157,158,152,150,142,164,143,1190,459,171',
',1191,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169',
'155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150',
'142,164,143,726,459,171,,727,,,,,,,,166,167,,163,145,146,147,154,151',
'153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162',
'161,170,157,158,152,150,142,164,143,728,466,171,,729,,,,,,,,166,167',
',163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,',
',,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,728,466',
'171,,729,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168',
'169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152',
'150,142,164,143,1192,466,171,,1193,,,,,,,,166,167,,163,145,146,147,154',
'151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165',
'162,161,170,157,158,152,150,142,164,143,726,459,171,,727,,,,,,,,166',
'167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,303',
',,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,822',
'466,171,,823,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,',
',,168,169,155,156,,,,,,303,,,,,,,,160,159,,144,165,162,161,170,157,158',
'152,150,142,164,143,820,459,171,,821,,,,,,,,166,167,,163,145,146,147',
'154,151,153,,,148,149,,,,168,169,155,156,,,,,,303,,,,,,,,160,159,,144',
'165,162,161,170,157,158,152,150,142,164,143,855,466,171,,854,,,,,,,',
'166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,',
',,,303,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143',
',488,171,485,484,483,493,486,488,,485,484,483,493,486,488,496,485,484',
'483,493,486,,496,,,,,,,496,,,,,,,,491,,,,,,,491,,,,504,503,,491,,497',
',504,503,,,,497,,504,503,,,,497' ]
        racc_action_table = arr = ::Array.new(28775, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'461,906,1066,1034,769,820,833,461,461,461,513,513,965,461,461,289,461',
'23,1152,389,1192,1085,289,390,461,909,414,768,393,413,440,822,1023,3',
'498,519,461,461,1086,461,461,461,461,461,989,1089,381,382,1215,1212',
'1023,823,498,1068,1144,1178,1178,1144,23,1212,906,551,551,629,821,909',
'461,461,461,461,461,461,461,461,461,461,461,461,461,461,289,1193,461',
'461,461,1034,461,461,818,440,461,769,414,461,519,413,822,1192,461,1068',
'461,248,461,461,513,461,461,461,461,461,854,461,1190,461,820,833,823',
'854,854,854,1066,965,620,854,854,1066,854,461,389,914,461,461,390,461',
'854,461,1152,393,1192,1085,822,1152,461,1192,1085,461,854,854,1191,854',
'854,854,854,854,1064,551,1086,248,1193,791,823,1086,989,1089,381,382',
'1215,989,1089,381,382,1215,629,821,9,914,854,854,854,854,854,854,854',
'854,854,854,854,854,854,854,801,801,854,854,854,69,854,854,249,1193',
'854,759,20,854,1193,240,818,741,854,818,854,818,854,854,348,854,854',
'854,854,854,729,854,241,854,741,791,620,729,729,729,1190,620,729,729',
'729,1190,729,854,759,952,854,854,12,854,729,854,729,729,729,14,639,639',
'854,31,249,854,729,729,20,729,729,729,729,729,240,791,1191,632,791,15',
'794,1191,1064,574,632,243,792,1064,348,910,791,241,69,632,801,19,729',
'729,729,729,729,729,729,729,729,729,729,729,729,729,1041,348,729,729',
'729,952,729,729,355,355,729,17,288,729,729,910,729,31,729,288,729,979',
'729,729,1102,729,729,729,729,729,27,729,632,729,243,794,794,574,574',
'574,31,19,792,1041,639,952,42,729,952,639,729,729,729,729,574,729,287',
'729,726,855,952,45,729,287,727,729,855,855,855,48,48,53,855,855,286',
'855,794,288,213,794,979,286,792,855,855,792,355,355,1102,1102,1102,794',
'853,226,786,855,855,792,855,855,855,855,855,16,16,1102,786,230,826,230',
'230,230,230,230,386,826,852,726,228,386,826,287,230,727,826,855,855',
'855,855,855,855,855,855,855,855,855,855,855,855,286,21,855,855,855,230',
'855,855,48,48,855,1114,853,855,230,230,230,230,855,654,855,230,855,855',
'408,855,855,855,855,855,105,855,855,855,826,134,852,105,105,105,134',
'134,105,105,105,285,105,855,21,529,855,855,285,855,105,855,105,105,105',
'739,21,230,855,398,739,855,105,105,739,105,105,105,105,105,328,1114',
'1114,806,806,328,656,529,410,654,654,529,529,415,408,408,408,399,1114',
'654,232,399,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'285,44,105,105,105,398,105,105,1067,1067,105,623,398,105,105,412,105',
'398,105,623,105,398,105,105,411,105,105,105,105,105,1073,105,1073,105',
'656,656,410,410,410,409,398,415,415,415,656,380,380,105,44,290,105,105',
'105,105,284,105,290,105,5,728,44,284,105,5,1100,105,728,728,728,242',
'398,728,728,728,1100,728,244,506,245,412,412,412,506,728,728,728,728',
'728,411,411,411,374,397,760,374,728,728,760,728,728,728,728,728,409',
'409,409,701,701,283,291,292,29,1100,251,290,283,291,292,29,284,805,743',
'743,805,1100,728,728,728,728,728,728,728,728,728,728,728,728,728,728',
'302,923,728,728,728,397,728,728,316,317,728,923,397,728,728,320,728',
'397,728,969,728,397,728,728,969,728,728,728,728,728,676,728,728,728',
'283,291,292,29,332,945,397,945,945,945,945,945,359,728,333,923,728,728',
'728,728,945,728,913,728,335,462,913,923,728,336,337,728,462,462,462',
'343,397,346,462,462,1175,462,945,676,347,373,349,1175,373,462,462,945',
'945,945,945,676,1175,350,945,359,85,462,462,354,462,462,462,462,462',
'356,43,359,85,695,795,695,695,695,695,695,377,795,85,377,945,363,795',
'365,695,371,795,462,462,462,462,462,462,462,462,462,462,462,462,462',
'462,1175,456,462,462,462,695,462,462,375,376,462,378,43,462,695,695',
'695,695,462,387,462,695,462,462,43,462,462,462,462,462,108,462,462,462',
'795,388,392,108,108,108,394,403,108,108,108,423,108,462,456,429,462',
'462,431,462,108,462,108,108,108,432,456,695,462,455,434,462,108,108',
'437,108,108,108,108,108,441,54,451,401,453,340,454,463,54,469,401,470',
'340,473,474,475,476,54,477,401,479,340,108,108,108,108,108,108,108,108',
'108,108,108,108,108,108,455,480,108,108,108,490,108,108,341,502,108',
'505,455,108,108,341,108,507,108,509,108,515,108,108,341,108,108,108',
'108,108,54,108,401,108,340,523,524,1095,531,1095,1095,1095,342,1095',
'532,533,534,108,559,342,108,108,108,108,560,108,344,108,342,561,565',
'581,108,344,582,108,1179,1179,1179,1179,1179,1179,344,341,1095,1179',
'1179,585,587,592,1179,825,1179,1179,1179,1179,1179,1179,1179,370,370',
'370,370,370,1179,1179,1179,1179,1179,1179,1179,596,491,1179,491,491',
'491,342,491,1179,1179,1179,1179,1179,1179,1179,1179,1179,1179,1179,1179',
'344,1179,1179,1179,391,1179,1179,1179,1179,1179,1131,391,825,605,360',
'51,51,1131,491,825,391,360,606,607,825,617,1131,491,825,1179,360,621',
'1179,622,624,1179,1179,18,651,1179,659,1179,661,668,18,1179,677,825',
'682,530,687,51,51,18,1179,689,691,710,711,1179,1179,1179,1179,713,1179',
'1179,1179,1179,721,391,730,733,1179,1179,735,1131,762,825,763,360,1179',
'530,1179,1179,1179,530,530,1179,1179,619,619,619,619,619,619,766,1,774',
'619,619,775,776,18,619,778,619,619,619,619,619,619,619,25,780,788,790',
'793,619,619,619,619,619,619,619,796,712,619,712,712,712,797,712,619',
'619,619,619,619,619,619,619,619,619,619,619,800,619,619,619,808,619',
'619,619,619,619,25,25,25,25,25,25,25,25,25,25,25,591,25,25,814,815,25',
'25,591,619,819,25,619,698,828,619,619,591,832,619,834,619,25,698,25',
'619,25,25,849,25,25,25,25,25,619,25,851,860,873,619,619,619,619,239',
'619,619,619,619,876,877,239,880,619,619,882,25,698,698,883,239,619,698',
'619,619,619,885,591,619,619,339,339,339,339,339,339,887,647,647,339',
'339,647,647,647,339,889,339,339,339,339,339,339,339,331,331,331,331',
'331,339,339,339,339,339,339,339,890,892,339,895,239,907,915,444,339',
'339,339,339,339,339,339,339,339,339,339,339,916,339,339,339,920,339',
'339,339,339,339,444,444,444,444,444,444,444,444,444,444,444,439,444',
'444,921,922,444,444,439,339,925,938,339,941,942,339,339,439,951,339',
'956,339,444,959,444,339,444,444,966,444,444,444,444,444,339,444,968',
'975,976,339,339,339,339,1087,339,339,339,339,977,978,1087,1005,339,339',
'1006,444,1014,444,1015,1087,339,1016,339,339,339,1017,439,339,339,227',
'227,227,227,227,227,1026,1027,1028,227,227,1032,1033,1038,227,1044,227',
'227,227,227,227,227,227,8,8,8,8,8,227,227,227,227,227,227,227,1049,1050',
'227,1052,1087,1053,1054,450,227,227,227,227,227,227,227,227,227,227',
'227,227,1056,227,227,227,1057,227,227,227,227,227,450,450,450,450,450',
'450,450,450,450,450,450,1058,450,450,1077,1088,450,450,1091,227,1092',
'1093,227,1118,1094,227,227,1101,1109,227,1111,227,450,1118,450,227,450',
'450,1129,450,450,450,450,450,227,450,1132,1142,1143,227,227,227,227',
'1148,227,227,227,227,1158,1163,1165,1168,227,227,1169,450,1118,1118',
'1170,1171,227,1118,227,227,227,1173,1183,227,227,946,946,946,946,946',
'946,1189,1194,1195,946,946,1209,1210,1217,946,1218,946,946,946,946,946',
'946,946,579,579,579,579,579,946,946,946,946,946,946,946,1219,1220,946',
'1224,1230,,,722,946,946,946,946,946,946,946,946,946,946,946,946,,946',
'946,946,,946,946,946,946,946,722,722,722,722,722,722,722,722,722,722',
'722,,722,722,,,722,722,,946,,,946,,,946,946,,,946,,946,722,,722,946',
'722,722,,722,722,722,722,722,946,722,,,,946,946,946,946,,946,946,946',
'946,,,,,946,946,,722,,,,,946,,946,946,946,,,946,946,829,829,829,829',
'829,829,,,,829,829,,,,829,,829,829,829,829,829,829,829,,,,,,829,829',
'829,829,829,829,829,,,829,,,,,690,829,829,829,829,829,829,829,829,829',
'829,829,829,,829,829,829,,829,829,829,829,829,690,690,690,690,690,690',
'690,690,690,690,690,,690,690,,,690,690,,829,,,829,,,829,829,,,829,,829',
'690,,690,829,690,690,,690,690,690,690,690,829,690,,,,829,829,829,829',
',829,829,829,829,,,,,829,829,,690,,,,,829,,829,829,829,,,829,829,640',
'640,640,640,640,640,,,,640,640,,,,640,,640,640,640,640,640,640,640,',
',,,,640,640,640,640,640,640,640,,1080,640,1080,1080,1080,,1080,640,640',
'640,640,640,640,640,640,640,640,640,640,,640,640,640,,640,640,640,640',
'640,857,857,857,857,857,857,857,857,857,857,857,,857,857,,,857,857,',
'640,,,640,,,640,640,,,640,,640,857,,857,640,857,857,,857,857,857,857',
'857,640,857,,,,640,640,640,640,,640,640,640,640,,,,,640,640,,857,,,',
',640,,640,640,640,,,640,640,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,',
',,,,2,2,2,2,2,2,2,,1187,2,1187,1187,1187,,1187,2,2,2,2,2,2,2,2,2,2,2',
'2,,2,2,2,,2,2,2,2,2,314,314,314,314,314,314,314,314,314,314,314,,314',
'314,,,314,314,,2,,,2,,,2,2,,,2,,2,314,,314,2,314,314,,314,314,314,314',
'314,2,314,,,,2,2,2,2,,2,2,2,2,,,,,2,2,,314,,,,,2,,2,2,2,,,2,2,233,233',
'233,233,233,233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,',
'233,233,233,233,233,233,233,,,233,,,,,,233,233,233,233,233,233,233,233',
'233,233,233,233,,233,233,233,,233,233,233,233,233,548,548,548,548,548',
'548,548,548,548,548,548,,548,548,,,548,548,,233,,,233,,,233,233,,,233',
',233,548,,548,233,548,548,,548,548,548,548,548,233,548,,,,233,233,233',
'233,,233,233,233,233,,,,,233,233,548,548,,,,,233,,233,233,233,,,233',
'233,369,369,369,369,369,369,,,,369,369,,,,369,,369,369,369,369,369,369',
'369,,,,,,369,369,369,369,369,369,369,,,369,,,,,,369,369,369,369,369',
'369,369,369,369,369,369,369,,369,369,369,,369,369,369,369,369,983,983',
'983,983,983,983,983,983,983,983,983,,983,983,,,983,983,,369,,,369,,',
'369,369,,,369,,369,983,,983,369,983,983,,983,983,983,983,983,369,983',
',,,369,369,369,369,,369,369,369,369,,,,,369,369,,983,,,,,369,,369,369',
'369,,,369,369,1133,1133,1133,1133,1133,1133,,,,1133,1133,,,,1133,,1133',
'1133,1133,1133,1133,1133,1133,,,,,,1133,1133,1133,1133,1133,1133,1133',
',,1133,,,,,,1133,1133,1133,1133,1133,1133,1133,1133,1133,1133,1133,1133',
',1133,1133,1133,,1133,1133,1133,1133,1133,984,984,984,984,984,984,984',
'984,984,984,984,,984,984,,,984,984,,1133,,,1133,,,1133,1133,,,1133,',
'1133,984,,984,1133,984,984,,984,984,984,984,984,1133,984,,,,1133,1133',
'1133,1133,,1133,1133,1133,1133,,,,,1133,1133,,984,,,,,1133,,1133,1133',
'1133,,,1133,1133,964,964,964,964,964,964,,,,964,964,,,,964,,964,964',
'964,964,964,964,964,,,,,,964,964,964,964,964,964,964,,,964,,,,,,964',
'964,964,964,964,964,964,964,964,964,964,964,,964,964,964,,964,964,964',
'964,964,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,,1007',
'1007,,,1007,1007,,964,,,964,,,964,964,,,964,,964,1007,,1007,964,1007',
'1007,,1007,1007,1007,1007,1007,964,1007,,,,964,964,964,964,,964,964',
'964,964,,,,,964,964,,1007,,,,,964,,964,964,964,,,964,964,1046,1046,1046',
'1046,1046,1046,,,,1046,1046,,,,1046,,1046,1046,1046,1046,1046,1046,1046',
',,,,,1046,1046,1046,1046,1046,1046,1046,,,1046,,,,,,1046,1046,1046,1046',
'1046,1046,1046,1046,1046,1046,1046,1046,,1046,1046,1046,,1046,1046,1046',
'1046,1046,1008,1008,1008,1008,1008,1008,1008,1008,1008,1008,1008,,1008',
'1008,,,1008,1008,,1046,,,1046,,,1046,1046,,,1046,,1046,1008,,1008,1046',
'1008,1008,,1008,1008,1008,1008,1008,1046,1008,,,,1046,1046,1046,1046',
',1046,1046,1046,1046,,,,,1046,1046,,1008,,,,,1046,,1046,1046,1046,,',
'1046,1046,385,385,385,385,385,385,,,,385,385,,,,385,,385,385,385,385',
'385,385,385,,,,,,385,385,385,385,385,385,385,,,385,,,,,,385,385,385',
'385,385,385,385,385,385,385,385,385,,385,385,385,,385,385,385,385,385',
'1045,1045,1045,1045,1045,1045,1045,1045,1045,1045,1045,,1045,1045,,',
'1045,1045,,385,,,385,,,385,385,,,385,,385,1045,,1045,385,1045,1045,',
'1045,1045,1045,1045,1045,385,1045,,,,385,385,385,385,,385,385,385,385',
',,,,385,385,,1045,,,,,385,,385,385,385,,,385,385,970,970,970,970,970',
'970,,,,970,970,,,,970,,970,970,970,970,970,970,970,,,,,,970,970,970',
'970,970,970,970,,,970,,,,,,970,970,970,970,970,970,970,970,970,970,970',
'970,,970,970,970,,970,970,970,970,970,603,603,603,603,603,603,603,603',
'603,603,603,,603,603,,,603,603,,970,,,970,,,970,970,,,970,,970,603,',
'603,970,603,603,,603,603,603,603,603,970,603,,,,970,970,970,970,,970',
'970,970,970,,,,,970,970,,603,,,,,970,,970,970,970,,,970,970,384,384',
'384,384,384,384,,,,384,384,,,,384,,384,384,384,384,384,384,384,,,,,',
'384,384,384,384,384,384,384,,896,384,896,896,896,,896,384,384,384,384',
'384,384,384,384,384,384,384,384,,384,384,384,,384,384,384,384,384,708',
',708,708,708,,708,,896,,897,,897,897,897,,897,896,,384,,,384,,,384,384',
',544,384,,384,,,,384,,708,,1096,,1096,1096,1096,384,1096,708,897,,384',
'384,384,384,,384,384,384,384,,,544,,384,384,544,544,,544,544,,384,,384',
'384,384,,1096,384,384,38,38,38,38,38,38,,,,38,38,,,,38,,38,38,38,38',
'38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,545,,,38,38,38,38,38,38,38',
'38,38,38,38,38,,38,38,38,,38,38,38,38,38,539,539,539,539,539,539,539',
'545,,539,539,545,545,,545,545,539,539,,38,,,38,,,38,38,,,38,,38,539',
',539,38,539,539,,539,539,539,539,539,38,539,,,,38,38,38,38,,38,38,38',
'38,,,,,38,38,,,,,,,38,,38,38,38,,,38,38,250,250,250,250,250,250,,,,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,,250,250,250,250,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,250,250,250,528,528,528,528,528,528,528,528,528,528',
'528,,528,528,,,528,528,,250,,,250,,,250,250,,,250,,250,528,,528,250',
'528,528,,528,528,528,528,528,250,528,,,,250,250,250,250,,250,250,250',
'250,,,,,250,250,,,,,,,250,,250,250,250,,,250,250,1084,1084,1084,1084',
'1084,1084,,,,1084,1084,,,,1084,,1084,1084,1084,1084,1084,1084,1084,',
',,,,1084,1084,1084,1084,1084,1084,1084,,,1084,,,,,,1084,1084,1084,1084',
'1084,1084,1084,1084,1084,1084,1084,1084,,1084,1084,1084,,1084,1084,1084',
'1084,1084,527,527,527,527,527,527,527,527,527,527,527,,527,527,,,527',
'527,,1084,,,1084,,,1084,1084,,,1084,,1084,527,,527,1084,527,527,,527',
'527,527,527,527,1084,527,,,,1084,1084,1084,1084,,1084,1084,1084,1084',
',,,,1084,1084,,,,,,,1084,,1084,1084,1084,,,1084,1084,616,616,616,616',
'616,616,,,,616,616,,,,616,,616,616,616,616,616,616,616,,,,,,616,616',
'616,616,616,616,616,,,616,,,,,,616,616,616,616,616,616,616,616,616,616',
'616,616,,616,616,616,,616,616,616,616,616,540,540,540,540,540,540,540',
',,540,540,,,,,,540,540,,616,,,616,,,616,616,,,616,,616,540,,540,616',
'540,540,,540,540,540,540,540,616,540,,,,616,616,616,616,,616,616,616',
'616,,,,,616,616,,,,,,,616,,616,616,616,,,616,616,215,215,215,215,215',
'215,,,,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215,215',
'215,215,215,215,,,215,,,,,,215,215,215,215,215,215,215,215,215,215,215',
'215,,215,215,215,,215,215,215,215,215,361,361,361,361,361,361,361,361',
'361,361,361,,361,361,,,361,361,,215,,,215,,,215,215,,,215,,215,361,',
'361,215,361,361,,361,361,361,361,361,215,361,,,,215,215,215,215,,215',
'215,215,215,,,,,215,215,,,,,,,215,,215,215,215,,,215,215,986,986,986',
'986,986,986,,,,986,986,,,,986,,986,986,986,986,986,986,986,,,,,,986',
'986,986,986,986,986,986,,,986,,,,,,986,986,986,986,986,986,986,986,986',
'986,986,986,,986,986,986,,986,986,986,986,986,546,546,546,546,546,546',
'546,,,546,546,,,,,,546,546,,986,,,986,,,986,986,,,986,,986,546,,546',
'986,546,546,,546,546,546,546,546,986,546,,,,986,986,986,986,,986,986',
'986,986,,,,,986,986,,,,,,,986,,986,986,986,,,986,986,334,334,334,334',
'334,334,,,,334,334,,,,334,,334,334,334,334,334,334,334,,,,,,334,334',
'334,334,334,334,334,,,334,,,,,,334,334,334,334,334,334,334,334,334,334',
'334,334,,334,334,334,,334,334,334,334,334,538,538,538,538,538,538,538',
',,538,538,,,,,,538,538,,334,,,334,,,334,334,,,334,,334,538,,538,334',
'538,538,,538,538,538,538,538,334,538,,,,334,334,334,334,,334,334,334',
'334,,,,,334,334,,,,,,,334,,334,334,334,,,334,334,824,824,824,824,824',
'824,,,,824,824,,,,824,,824,824,824,824,824,824,824,,,,,,824,824,824',
'824,824,824,824,,,824,,,,,,824,824,824,824,824,824,824,824,824,824,824',
'824,,824,824,824,,824,824,824,824,824,362,362,362,362,362,362,362,362',
'362,362,362,,362,362,,,362,362,,824,,,824,,,824,824,,,824,,824,362,',
'362,824,362,362,,362,362,362,362,362,824,362,,,,824,824,824,824,,824',
'824,824,824,,,,,824,824,,,,,,,824,,824,824,824,,,824,824,132,132,132',
'132,132,132,,,,132,132,,,,132,,132,132,132,132,132,132,132,,,,,,132',
'132,132,132,132,132,132,,,132,,,,,,132,132,132,132,132,132,132,132,132',
'132,132,132,,132,132,132,,132,132,132,132,132,602,,,,,,,,,,,,,,,,602',
'602,,132,,,132,,,132,132,,,132,,132,602,,602,132,602,602,,602,602,,',
'602,132,602,,,,132,132,132,132,,132,132,132,132,,,,,132,132,,,,,,,132',
',132,132,132,,,132,132,840,840,840,840,840,840,,,,840,840,,,,840,,840',
'840,840,840,840,840,840,,,,,,840,840,840,840,840,840,840,,,840,,,,,',
'840,840,840,840,840,840,840,840,840,840,840,840,,840,840,840,,840,840',
'840,840,840,541,541,541,541,541,541,541,,,541,541,,,,,,541,541,,840',
',,840,,,840,840,,,840,,840,541,,541,840,541,541,,541,541,541,541,541',
'840,541,,,,840,840,840,840,,840,840,840,840,,,,,840,840,,,,,,,840,,840',
'840,840,,,840,840,1079,1079,1079,1079,1079,1079,,,,1079,1079,,,,1079',
',1079,1079,1079,1079,1079,1079,1079,,,,,,1079,1079,1079,1079,1079,1079',
'1079,,,1079,,,,,,1079,1079,1079,1079,1079,1079,1079,1079,1079,1079,1079',
'1079,,1079,1079,1079,,1079,1079,1079,1079,1079,549,,,,,,,,,,,,,,,,549',
'549,,1079,,,1079,,,1079,1079,,,1079,,1079,549,,549,1079,549,549,,549',
'549,,,549,1079,549,,,,1079,1079,1079,1079,,1079,1079,1079,1079,,,,,1079',
'1079,,,,,,,1079,,1079,1079,1079,,,1079,1079,1078,1078,1078,1078,1078',
'1078,,,,1078,1078,,,,1078,,1078,1078,1078,1078,1078,1078,1078,,,,,,1078',
'1078,1078,1078,1078,1078,1078,,,1078,,,,,,1078,1078,1078,1078,1078,1078',
'1078,1078,1078,1078,1078,1078,,1078,1078,1078,,1078,1078,1078,1078,1078',
'542,542,542,542,542,542,542,,,542,542,,,,,,542,542,,1078,,,1078,,,1078',
'1078,,,1078,,1078,542,,542,1078,542,542,,542,542,542,542,542,1078,542',
',,,1078,1078,1078,1078,,1078,1078,1078,1078,,,,,1078,1078,,,,,,,1078',
',1078,1078,1078,,,1078,1078,875,875,875,875,875,875,,,,875,875,,,,875',
',875,875,875,875,875,875,875,,,,,,875,875,875,875,875,875,875,,,875',
',,,,,875,875,875,875,875,875,875,875,875,875,875,875,,875,875,875,,875',
'875,875,875,875,543,543,543,543,543,543,543,,,543,543,,,,,,543,543,',
'875,,,875,,,875,875,,,875,,875,543,,543,875,543,543,,543,543,543,543',
'543,875,543,,,,875,875,875,875,,875,875,875,875,,,,,875,875,,,,266,266',
'266,875,266,875,875,875,266,266,875,875,,266,,266,266,266,266,266,266',
'266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266',
'266,266,266,266,,266,266,266,,266,266,266,266,266,547,547,547,547,547',
'547,547,547,,547,547,,,,,,547,547,,266,,,266,,,266,266,,,266,,,547,',
'547,266,547,547,,547,547,547,547,547,266,547,,,,266,266,266,266,,266',
'266,266,266,,,,,266,266,,,,,,,266,,266,266,266,32,,266,266,,,,32,32',
'32,,,32,32,32,537,32,,,,,,,,32,32,32,32,,,,537,537,,,,32,32,,32,32,32',
'32,32,,,,537,,,,537,537,,537,537,,,,,,,,,,,32,32,32,32,32,32,32,32,32',
'32,32,32,32,32,,,32,32,32,,,32,,32,32,,,32,32,,32,,32,,32,,32,32,,32',
'32,32,32,32,,32,32,32,,,,,,,,,,,,,,32,,,32,32,,32,,32,265,265,265,,265',
',32,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265',
'265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265',
'265,,265,265,265,265,265,536,,,,,,,,,,,,,,,,536,536,,265,,,265,,,265',
'265,,,265,,,536,,536,265,536,536,,536,536,,,,265,,,,,265,265,265,265',
',265,265,265,265,,,,,265,265,,,,,,,265,,265,265,265,33,,265,265,,,,33',
'33,33,,,33,33,33,535,33,,,,,,,,33,,33,33,,,,535,535,,,,33,33,,33,33',
'33,33,33,,,,535,,535,,535,535,,535,535,,,,,,,,,,,33,33,33,33,33,33,33',
'33,33,33,33,33,33,33,,,33,33,33,,,33,,33,33,,,33,33,,33,,33,,33,,33',
'33,,33,33,33,33,33,,33,,33,,,,,,,,,,,,,,33,,,33,33,,33,,33,264,264,264',
',264,,33,,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264',
'264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264',
'264,264,,264,264,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264',
',,264,,,,,,264,,,,,,,,,264,,,,,264,264,264,264,,264,264,264,264,,,,',
'264,264,,,,932,932,932,264,932,264,264,264,932,932,264,264,,932,,932',
'932,932,932,932,932,932,,,,,,932,932,932,932,932,932,932,,,932,,,,,',
',932,,,932,932,932,932,932,932,932,932,,932,932,932,,932,932,932,932',
'932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932,932,,,932,,,,,,932,,,,,,,,,932',
',,,,932,932,932,932,,932,932,932,932,,,,,932,932,,,,935,935,935,932',
'935,932,932,932,935,935,932,932,,935,,935,935,935,935,935,935,935,,',
',,,935,935,935,935,935,935,935,,,935,,,,,,,935,,,935,935,935,935,935',
'935,935,935,,935,935,935,,935,935,935,935,935,,,,,,,,,,,,,,,,,,,,935',
',,935,,,935,935,,,935,,,,,,935,,,,,,,,,935,,,,,935,935,935,935,,935',
'935,935,935,,,,,935,935,,,,34,34,34,935,34,935,935,935,34,34,935,935',
',34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,',
'34,34,34,34,34,34,34,34,34,34,34,34,,34,34,34,34,34,,,,,,,,,,,,,,,,',
',,,34,,,34,,,34,34,,,34,,34,,34,,34,,,34,,,,,,34,,,,,34,34,34,34,,34',
'34,34,34,,,,,34,34,,,,263,263,263,34,263,34,34,34,263,263,34,34,,263',
',263,263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263,,,263',
',,,,,,263,,,263,263,263,263,263,263,263,263,,263,263,263,,263,263,263',
'263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,',
',,263,,,,,263,263,263,263,,263,263,263,263,,,,,263,263,,,,732,732,732',
'263,732,263,263,263,732,732,263,263,,732,,732,732,732,732,732,732,732',
',,,,,732,732,732,732,732,732,732,,,732,,,,,,,732,,,732,732,732,732,732',
'732,732,732,,732,732,732,,732,732,732,732,732,,,,,,,,,,,,,,,,,,,,732',
',,732,,,732,732,,,732,,,,,,732,,,,,,,,,732,,,,,732,732,732,732,,732',
'732,732,732,,,,,732,732,,,,731,731,731,732,731,732,732,732,731,731,732',
'732,,731,,731,731,731,731,731,731,731,,,,,,731,731,731,731,731,731,731',
',,731,,,,,,,731,,,731,731,731,731,731,731,731,731,,731,731,731,,731',
'731,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731,731,,,731,,,,,,731',
',,,,,,,,731,,,,,731,731,731,731,,731,731,731,731,,,,,731,731,,,,958',
'958,958,731,958,731,731,731,958,958,731,731,,958,,958,958,958,958,958',
'958,958,,,,,,958,958,958,958,958,958,958,,,958,,,,,,,958,,,958,958,958',
'958,958,958,958,958,,958,958,958,,958,958,958,958,958,,,,,,,,,,,,,,',
',,,,,958,,,958,,,958,958,,,958,,,,,,958,,,,,,,,,958,,,,,958,958,958',
'958,,958,958,958,958,,,,,958,958,,,,262,262,262,958,262,958,958,958',
'262,262,958,958,,262,,262,262,262,262,262,262,262,,,,,,262,262,262,262',
'262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262,262',
'262,,262,262,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262',
',,,,,262,,,,,,,,,262,,,,,262,262,262,262,,262,262,262,262,,,,,262,262',
',,,963,963,963,262,963,262,262,262,963,963,262,262,,963,,963,963,963',
'963,963,963,963,,,,,,963,963,963,963,963,963,963,,,963,,,,,,,963,,,963',
'963,963,963,963,963,963,963,,963,963,963,,963,963,963,963,963,,,,,,',
',,,,,,,,,,,,,963,,,963,,,963,963,,,963,,963,,,,963,,,,,,,,,963,,,,,963',
'963,963,963,,963,963,963,963,,,,,963,963,,,,35,35,35,963,35,963,963',
'963,35,35,963,963,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35',
',,35,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,,35,35,35,35,35',
',,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,35,,35,,35,,,35,,,,,,35,,,',
',35,35,35,35,,35,35,35,35,,,,,35,35,,,,36,36,36,35,36,35,35,35,36,36',
'35,35,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,',
',36,,,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36,36,36,,,,,,,,,,',
',,,,,,,,,36,,,36,,,36,36,,,36,,36,,36,,36,,,36,,,,,,36,,,,,36,36,36',
'36,,36,36,36,36,,,,,36,36,,,,261,261,261,36,261,36,36,36,261,261,36',
'36,,261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261',
',,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,,261',
'261,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261',
',,,,,,,,261,,,,,261,261,261,261,,261,261,261,261,,,,,261,261,,,,260',
'260,260,261,260,261,261,261,260,260,261,261,,260,,260,260,260,260,260',
'260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260',
'260,260,260,260,260,,260,260,260,,260,260,260,260,260,,,,,,,,,,,,,,',
',,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260,260',
'260,,260,260,260,260,,,,,260,260,,,,982,982,982,260,982,260,260,260',
'982,982,260,260,,982,,982,982,982,982,982,982,982,,,,,,982,982,982,982',
'982,982,982,,,982,,,,,,,982,,,982,982,982,982,982,982,982,982,982,982',
'982,982,,982,982,982,982,982,,,,,,,,,,,,,,,,,,,,982,,,982,,,982,982',
',,982,,,,982,,982,,,982,,,,,,982,,,,,982,982,982,982,,982,982,982,982',
',,,,982,982,,,,259,259,259,982,259,982,982,982,259,259,982,982,,259',
',259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259',
',,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,259',
'259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,',
',,259,,,,,259,259,259,259,,259,259,259,259,,,,,259,259,,,,258,258,258',
'259,258,259,259,259,258,258,259,259,,258,,258,258,258,258,258,258,258',
',,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258',
'258,258,258,,258,258,258,,258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258',
',,258,,,258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258,258,258,258,,258',
'258,258,258,,,,,258,258,,,,75,75,75,258,75,258,258,258,75,75,258,258',
',75,,75,75,75,75,75,75,75,,,,,,75,75,75,75,75,75,75,,,75,,,,,,,75,,',
'75,75,75,75,75,75,75,75,,75,75,75,,75,75,75,75,75,,,,,,,,,,,,,,,,,,',
',75,,,75,,,75,75,,,75,,,,,,75,,,,,,,,,75,,,,,75,75,75,75,,75,75,75,75',
',,,,75,75,75,,,,,75,75,,75,75,75,466,,75,75,,,,466,466,466,,,466,466',
'466,,466,,,,,,,,466,466,466,466,466,,,,,,,,466,466,,466,466,466,466',
'466,,,,,,,,,,,,,,,,,,,,,,,466,466,466,466,466,466,466,466,466,466,466',
'466,466,466,,,466,466,466,,,466,,,466,,,466,466,,466,,466,,466,,466',
'466,,466,466,466,466,466,,466,466,466,,,,,,,,,,,,,,466,,,466,466,466',
'466,,466,457,466,,,,,466,457,457,457,,,457,457,457,,457,,,,,,,,457,457',
'457,457,,,,,,,,,457,457,,457,457,457,457,457,,,,,,,,,,,,,,,,,,,,,,,457',
'457,457,457,457,457,457,457,457,457,457,457,457,457,,,457,457,457,,',
'457,,457,457,,,457,457,,457,,457,,457,,457,457,,457,457,457,457,457',
',457,457,457,,,,,,,,,,,,,,457,,,457,457,,457,,457,830,830,830,,830,',
'457,,830,830,,,,830,,830,830,830,830,830,830,830,,,,,,830,830,830,830',
'830,830,830,,,830,,,,,,,830,,,830,830,830,830,830,830,830,830,,830,830',
'830,,830,830,830,830,830,,,,,,,,,,,,,,,,,,,,830,,,830,,,830,830,,,830',
',,,,,830,,,,,,,,,830,,,,,830,830,830,830,,830,830,830,830,,,,,830,830',
',,,280,280,280,830,280,830,830,830,280,280,830,830,,280,,280,280,280',
'280,280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,,,280,,,280',
'280,280,280,280,280,280,280,,280,280,280,,280,280,280,280,280,,,,,,',
',,,,,,,,,,,,,280,,,280,,,280,280,,,280,,,,,,280,,,,,,,,,280,,,,,280',
'280,280,280,,280,280,280,280,,,,,280,280,,,,296,296,296,280,296,280',
'280,280,296,296,280,280,,296,,296,296,296,296,296,296,296,,,,,,296,296',
'296,296,296,296,296,,,296,,,,,,,296,,,296,296,296,296,296,296,296,296',
',296,296,296,,296,296,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296',
'296,,,296,,,,,,296,,,,,,,,,296,,,,,296,296,296,296,,296,296,296,296',
',,,,296,296,,,,850,850,850,296,850,296,296,296,850,850,296,296,,850',
',850,850,850,850,850,850,850,,,,,,850,850,850,850,850,850,850,,,850',
',,,,,,850,,,850,850,850,850,850,850,850,850,,850,850,850,,850,850,850',
'850,850,,,,,,,,,,,,,,,,,,,,850,,,850,,,850,850,,,850,,,,,,850,,,,,,',
',,850,,,,,850,850,850,850,,850,850,850,850,,,,,850,850,,,,275,275,275',
'850,275,850,850,850,275,275,850,850,,275,,275,275,275,275,275,275,275',
',,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275,275,275,275,275',
'275,275,275,,275,275,275,,275,275,275,275,275,,,,,,,,,,,,,,,,,,,,275',
',,275,,,275,275,,,275,,,,,,275,,,,,,,,,275,,,,,275,275,275,275,,275',
'275,275,275,,,,,275,275,,,,274,274,274,275,274,275,275,275,274,274,275',
'275,,274,,274,274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274',
',,274,,,,,,,274,,,274,274,274,274,274,274,274,274,,274,274,274,,274',
'274,274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,,,,,274',
',,,,,,,,274,,,,,274,274,274,274,,274,274,274,274,,,,,274,274,,,,858',
'858,858,274,858,274,274,274,858,858,274,274,,858,,858,858,858,858,858',
'858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,,,858,,,858,858,858',
'858,858,858,858,858,,858,858,858,,858,858,858,858,858,,,,,,,,,,,,,,',
',,,,,858,,,858,,,858,858,,,858,,,,,,858,,,,,,,,,858,,,,,858,858,858',
'858,,858,858,858,858,,,,,858,858,,,,24,24,24,858,24,858,858,858,24,24',
'858,858,,24,,24,24,24,24,24,24,24,,,,,,24,24,24,24,24,24,24,,,24,,,',
',,,24,,,24,24,24,24,24,24,24,24,,24,24,24,,24,24,24,24,24,,,,,,,,,,',
',,,,,,,,,24,,,24,,,24,24,,,24,,,,,,24,,,,,,,,,24,,,,,24,24,24,24,,24',
'24,24,24,,,,,24,24,,,,871,871,871,24,871,24,24,24,871,871,24,24,,871',
',871,871,871,871,871,871,871,,,,,,871,871,871,871,871,871,871,,,871',
',,,,,,871,,,871,871,871,871,871,871,871,871,,871,871,871,,871,871,871',
'871,871,,,,,,,,,,,,,,,,,,,,871,,,871,,,871,871,,,871,,,,,,871,,,,,,',
',,871,,,,,871,871,871,871,,871,871,871,871,,,,,871,871,,,,872,872,872',
'871,872,871,871,871,872,872,871,871,,872,,872,872,872,872,872,872,872',
',,,,,872,872,872,872,872,872,872,,,872,,,,,,,872,,,872,872,872,872,872',
'872,872,872,,872,872,872,,872,872,872,872,872,,,,,,,,,,,,,,,,,,,,872',
',,872,,,872,872,,,872,,,,,,872,,,,,,,,,872,,,,,872,872,872,872,,872',
'872,872,872,,,,,872,872,,,,303,303,303,872,303,872,872,872,303,303,872',
'872,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303,303,303,303',
',,303,,,,,,,303,,,303,303,303,303,303,303,303,303,303,303,303,303,,303',
'303,303,303,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303,,303,,303',
',303,,,303,,,,,,303,,,,,303,303,303,303,,303,303,303,303,,,,,303,303',
',,,304,304,304,303,304,303,303,303,304,304,303,303,,304,,304,304,304',
'304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304,,,304',
'304,304,304,304,304,304,304,304,304,304,304,,304,304,304,304,304,,,',
',,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,304,,304,,304,,,304,,,,,',
'304,,,,,304,304,304,304,,304,304,304,304,,,,,304,304,,,,312,312,312',
'304,312,304,304,304,312,312,304,304,,312,,312,312,312,312,312,312,312',
',,,,,312,312,312,312,312,312,312,,,312,,,,,,,312,,,312,312,312,312,312',
'312,312,312,312,312,312,312,,312,312,312,312,312,,,,,,,,,,,,,,,,,,,',
'312,,,312,,,312,312,,,312,,312,,312,,312,,,312,,,,,,312,,,,,312,312',
'312,312,,312,312,312,312,,,,,312,312,312,,,784,784,784,312,784,312,312',
'312,784,784,312,312,,784,,784,784,784,784,784,784,784,,,,,,784,784,784',
'784,784,784,784,,,784,,,,,,,784,,,784,784,784,784,784,784,784,784,,784',
'784,784,,784,784,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784',
',,784,,,,,,784,,,,,,,,,784,,,,,784,784,784,784,,784,784,784,784,,,,',
'784,784,,,,319,319,319,784,319,784,784,784,319,319,784,784,,319,,319',
'319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319,,,319,,,,,',
',319,,,319,319,319,319,319,319,319,319,,319,319,319,,319,319,319,319',
'319,,,,,,,,,,,,,,,,,,,,319,,,319,,,319,319,,,319,,,,,,319,,,,,,,,,319',
',,,,319,319,319,319,,319,319,319,319,,,,,319,319,,,,321,321,321,319',
'321,319,319,319,321,321,319,319,,321,,321,321,321,321,321,321,321,,',
',,,321,321,321,321,321,321,321,,,321,,,,,,,321,,,321,321,321,321,321',
'321,321,321,,321,321,321,,321,321,321,321,321,,,,,,,,,,,,,,,,,,,,321',
',,321,,,321,321,,,321,,,,,,321,,,,,,,,,321,,,,,321,321,321,321,,321',
'321,321,321,,,,,321,321,,,,324,324,324,321,324,321,321,321,324,324,321',
'321,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324,324',
',,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324,,324',
'324,324,324,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,,,,324',
',,,,,,,,324,,,,,324,324,324,324,,324,324,324,324,,,,,324,324,,,,325',
'325,325,324,325,324,324,324,325,325,324,324,,325,,325,325,325,325,325',
'325,325,,,,,,325,325,325,325,325,325,325,,,325,,,,,,,325,,,325,325,325',
'325,325,325,325,325,,325,325,325,,325,325,325,325,325,,,,,,,,,,,,,,',
',,,,,325,,,325,,,325,325,,,325,,,,,,325,,,,,,,,,325,,,,,325,325,325',
'325,,325,325,325,325,,,,,325,325,,,,781,781,781,325,781,325,325,325',
'781,781,325,325,,781,,781,781,781,781,781,781,781,,,,,,781,781,781,781',
'781,781,781,,,781,,,,,,,781,,,781,781,781,781,781,781,781,781,,781,781',
'781,,781,781,781,781,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,781,,,781',
',,,,,781,,,,,,,,,781,,,,,781,781,781,781,,781,781,781,781,,,,,781,781',
',,,273,273,273,781,273,781,781,781,273,273,781,781,,273,,273,273,273',
'273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273',
'273,273,273,273,273,273,273,,273,273,273,,273,273,273,273,273,,,,,,',
',,,,,,,,,,,,,273,,,273,,,273,273,,,273,,,,,,273,,,,,,,,,273,,,,,273',
'273,273,273,,273,273,273,273,,,,,273,273,,,,272,272,272,273,272,273',
'273,273,272,272,273,273,,272,,272,272,272,272,272,272,272,,,,,,272,272',
'272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272,272,272,272',
',272,272,272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272',
'272,,,272,,,,,,272,,,,,,,,,272,,,,,272,272,272,272,,272,272,272,272',
',,,,272,272,,,,900,900,900,272,900,272,272,272,900,900,272,272,,900',
',900,900,900,900,900,900,900,,,,,,900,900,900,900,900,900,900,,,900',
',,,,,,900,,,900,900,900,900,900,900,900,900,,900,900,900,,900,900,900',
'900,900,,,,,,,,,,,,,,,,,,,,900,,,900,,,900,900,,,900,,,,,,900,,,,,,',
',,900,,,,,900,900,900,900,,900,900,900,900,,,,,900,900,,,,901,901,901',
'900,901,900,900,900,901,901,900,900,,901,,901,901,901,901,901,901,901',
',,,,,901,901,901,901,901,901,901,,,901,,,,,,,901,,,901,901,901,901,901',
'901,901,901,,901,901,901,,901,901,901,901,901,,,,,,,,,,,,,,,,,,,,901',
',,901,,,901,901,,,901,,,,,,901,,,,,,,,,901,,,,,901,901,901,901,,901',
'901,901,901,,,,,901,901,,,,902,902,902,901,902,901,901,901,902,902,901',
'901,,902,,902,902,902,902,902,902,902,,,,,,902,902,902,902,902,902,902',
',,902,,,,,,,902,,,902,902,902,902,902,902,902,902,,902,902,902,,902',
'902,902,902,902,,,,,,,,,,,,,,,,,,,,902,,,902,,,902,902,,,902,,,,,,902',
',,,,,,,,902,,,,,902,902,902,902,,902,902,902,902,,,,,902,902,,,,903',
'903,903,902,903,902,902,902,903,903,902,902,,903,,903,903,903,903,903',
'903,903,,,,,,903,903,903,903,903,903,903,,,903,,,,,,,903,,,903,903,903',
'903,903,903,903,903,,903,903,903,,903,903,903,903,903,,,,,,,,,,,,,,',
',,,,,903,,,903,,,903,903,,,903,,,,,,903,,,,,,,,,903,,,,,903,903,903',
'903,,903,903,903,903,,,,,903,903,,,,904,904,904,903,904,903,903,903',
'904,904,903,903,,904,,904,904,904,904,904,904,904,,,,,,904,904,904,904',
'904,904,904,,,904,,,,,,,904,,,904,904,904,904,904,904,904,904,,904,904',
'904,,904,904,904,904,904,,,,,,,,,,,,,,,,,,,,904,,,904,,,904,904,,,904',
',,,,,904,,,,,,,,,904,,,,,904,904,904,904,,904,904,904,904,,,,,904,904',
',,,905,905,905,904,905,904,904,904,905,905,904,904,,905,,905,905,905',
'905,905,905,905,,,,,,905,905,905,905,905,905,905,,,905,,,,,,,905,,,905',
'905,905,905,905,905,905,905,,905,905,905,,905,905,905,905,905,,,,,,',
',,,,,,,,,,,,,905,,,905,,,905,905,,,905,,,,,,905,,,,,,,,,905,,,,,905',
'905,905,905,,905,905,905,905,,,,,905,905,,,,271,271,271,905,271,905',
'905,905,271,271,905,905,,271,,271,271,271,271,271,271,271,,,,,,271,271',
'271,271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,271',
',271,271,271,,271,271,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271',
'271,,,271,,,,,,271,,,,,,,,,271,,,,,271,271,271,271,,271,271,271,271',
',,,,271,271,,,,,,,271,,271,271,271,,,271,271,330,330,330,330,330,,,',
'330,330,,,,330,,330,330,330,330,330,330,330,,,,,,330,330,330,330,330',
'330,330,,,330,,,,,,330,330,,330,330,330,330,330,330,330,330,330,,330',
'330,330,,330,330,330,330,330,,,,,,,,,,,,,,,,,,,,330,,,330,,,330,330',
',,330,,330,,,,330,,,,,,,,,330,,,,,330,330,330,330,,330,330,330,330,',
',,,330,330,,,,270,270,270,330,270,330,330,330,270,270,330,330,,270,',
'270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270,,,270,',
',,,,,270,,,270,270,270,270,270,270,270,270,,270,270,270,,270,270,270',
'270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,,,,,,',
',,270,,,,,270,270,270,270,,270,270,270,270,,,,,270,270,,,,269,269,269',
'270,269,270,270,270,269,269,270,270,,269,,269,269,269,269,269,269,269',
',,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269',
'269,269,269,,269,269,269,,269,269,269,269,269,,,,,,,,,,,,,,,,,,,,269',
',,269,,,269,269,,,269,,,,,,269,,,,,,,,,269,,,,,269,269,269,269,,269',
'269,269,269,,,,,269,269,,,,772,772,772,269,772,269,269,269,772,772,269',
'269,,772,,772,772,772,772,772,772,772,,,,,,772,772,772,772,772,772,772',
',,772,,,,,,,772,,,772,772,772,772,772,772,772,772,772,772,772,772,,772',
'772,772,772,772,,,,,,,,,,,,,,,,,,,,772,,,772,,,772,772,,,772,,772,,772',
',772,,,772,,,,,,772,,,,,772,772,772,772,,772,772,772,772,,,,,772,772',
',,,268,268,268,772,268,772,772,772,268,268,772,772,,268,,268,268,268',
'268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268',
'268,268,268,268,268,268,268,,268,268,268,,268,268,268,268,268,,,,,,',
',,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,,268,,,,,268',
'268,268,268,,268,268,268,268,,,,,268,268,,,,267,267,267,268,267,268',
'268,268,267,267,268,268,,267,,267,267,267,267,267,267,267,,,,,,267,267',
'267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267',
',267,267,267,,267,267,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267',
'267,,,267,,,,,,267,,,,,,,,,267,,,,,267,267,267,267,,267,267,267,267',
',,,,267,267,,,,368,368,368,267,368,267,267,267,368,368,267,267,,368',
',368,368,368,368,368,368,368,,,,,,368,368,368,368,368,368,368,,,368',
',,,,,,368,,,368,368,368,368,368,368,368,368,,368,368,368,,368,368,368',
'368,368,,,,,,,,,,,,,,,,,,,,368,,,368,368,,368,368,,,368,,,,,,368,,,',
',,,,,368,,,,,368,368,368,368,,368,368,368,368,,,,,368,368,,,,,,,368',
',368,368,368,,,368,368,667,667,667,667,667,,,,667,667,,,,667,,667,667',
'667,667,667,667,667,,,,,,667,667,667,667,667,667,667,,,667,,,,,,667',
'667,,667,667,667,667,667,667,667,667,667,,667,667,667,,667,667,667,667',
'667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,667,,,,667,,,,,,,',
',667,,,,,667,667,667,667,,667,667,667,667,,,,,667,667,,,,46,46,46,667',
'46,667,667,667,46,46,667,667,,46,,46,46,46,46,46,46,46,,,,,,46,46,46',
'46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46',
'46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,,46',
',,,,46,46,46,46,,46,46,46,46,,,,,46,46,,,,247,247,247,46,247,46,46,46',
'247,247,46,46,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247',
'247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247',
'247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247',
',,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',,,47,47,47,247,47,247,247,247,47,47,247,247,,47,,47,47,47,47,47,47',
'47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47',
',47,47,47,,47,47,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,',
',,,47,,,,,,,,,47,,,,,47,47,47,47,,47,47,47,47,,,,,47,47,,,,636,636,636',
'47,636,47,47,47,636,636,47,47,,636,,636,636,636,636,636,636,636,,,,',
',636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636',
'636,636,636,636,636,636,,636,636,636,636,636,,,,,,,,,,,,,,,,,,,,636',
',,636,,,636,636,,,636,,636,,636,,636,,,636,,,,,,636,,,,,636,636,636',
'636,,636,636,636,636,,,,,636,636,,,,626,626,626,636,626,636,636,636',
'626,626,636,636,,626,,626,626,626,626,626,626,626,,,,,,626,626,626,626',
'626,626,626,,,626,,,,,,,626,,,626,626,626,626,626,626,626,626,626,626',
'626,626,,626,626,626,626,626,,,,,,,,,,,,,,,,,,,,626,,,626,,,626,626',
',,626,,626,,626,,626,,,626,,,,,,626,,,,,626,626,626,626,,626,626,626',
'626,,,,,626,626,,,,625,625,625,626,625,626,626,626,625,625,626,626,',
'625,,625,625,625,625,625,625,625,,,,,,625,625,625,625,625,625,625,,',
'625,,,,,,,625,,,625,625,625,625,625,625,625,625,,625,625,625,,625,625',
'625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625,625,,,625,,625,,,,625',
',,,,,,,,625,,,,,625,625,625,625,,625,625,625,625,,,,,625,625,,,,49,49',
'49,625,49,625,625,625,49,49,625,625,,49,,49,49,49,49,49,49,49,,,,,,49',
'49,49,49,49,49,49,,,49,,,,,,,49,,,49,49,49,49,49,49,49,49,,49,49,49',
',49,49,49,49,49,,,,,,,,,,,,,,,,,,,,49,,,49,,,49,49,,,49,,,,,,49,,,,',
',,,,49,,,,,49,49,49,49,,49,49,49,49,,,,,49,49,,,,612,612,612,49,612',
'49,49,49,612,612,49,49,,612,,612,612,612,612,612,612,612,,,,,,612,612',
'612,612,612,612,612,,,612,,,,,,,612,,,612,612,612,612,612,612,612,612',
'612,612,612,612,,612,612,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612,,',
'612,612,,,612,,,,,,612,,,612,,,,,,612,,,,,612,612,612,612,,612,612,612',
'612,,,,,612,612,,,,609,609,609,612,609,612,612,612,609,609,612,612,',
'609,,609,609,609,609,609,609,609,,,,,,609,609,609,609,609,609,609,,',
'609,,,,,,,609,,,609,609,609,609,609,609,609,609,609,609,609,609,,609',
'609,609,609,609,,,,,,,,,,,,,,,,,,,,609,,,609,,,609,609,,,609,,609,,',
',609,,,609,,,,,,609,,,,,609,609,609,609,,609,609,609,609,,,,,609,609',
',,,383,383,383,609,383,609,609,609,383,383,609,609,,383,,383,383,383',
'383,383,383,383,,,,,,383,383,383,383,383,383,383,,,383,,,,,,,383,,,383',
'383,383,383,383,383,383,383,,383,383,383,,383,383,383,383,383,,,,,,',
',,,,,,,,,,,,,383,,,383,,,383,383,,,383,,,,,,383,,,,,,,,,383,,,,,383',
'383,383,383,,383,383,383,383,,,,,383,383,,,,604,604,604,383,604,383',
'383,383,604,604,383,383,,604,,604,604,604,604,604,604,604,,,,,,604,604',
'604,604,604,604,604,,,604,,,,,,,604,,,604,604,604,604,604,604,604,604',
',604,604,604,,604,604,604,604,604,,,,,,,,,,,,,,,,,,,,604,,,604,,,604',
'604,,,604,,,,,,604,,,,,,,,,604,,,,,604,604,604,604,,604,604,604,604',
',,,,604,604,,,,601,601,601,604,601,604,604,604,601,601,604,604,,601',
',601,601,601,601,601,601,601,,,,,,601,601,601,601,601,601,601,,,601',
',,,,,,601,,,601,601,601,601,601,601,601,601,,601,601,601,,601,601,601',
'601,601,,,,,,,,,,,,,,,,,,,,601,,,601,,,601,601,,,601,,,,,,601,,,,,,',
',,601,,,,,601,601,601,601,,601,601,601,601,,,,,601,601,,,,598,598,598',
'601,598,601,601,601,598,598,601,601,,598,,598,598,598,598,598,598,598',
',,,,,598,598,598,598,598,598,598,,,598,,,,,,,598,,,598,598,598,598,598',
'598,598,598,,598,598,598,,598,598,598,598,598,,,,,,,,,,,,,,,,,,,,598',
',,598,,,598,598,,,598,,,,,,598,,,,,,,,,598,,,,,598,598,598,598,,598',
'598,598,598,,,,,598,598,,,,236,236,236,598,236,598,598,598,236,236,598',
'598,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236',
',,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236,,236',
'236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236',
',,,,,,,,236,,,,,236,236,236,236,,236,236,236,236,,,,,236,236,236,,,50',
'50,50,236,50,236,236,236,50,50,236,236,,50,,50,50,50,50,50,50,50,,,',
',,50,50,50,50,50,50,50,,,50,,,,,,,50,,,50,50,50,50,50,50,50,50,,50,50',
'50,,50,50,50,50,50,,,,,,,,,,,,,,,,,,,,50,,,50,,,50,50,,,50,,,,,,50,',
',,,,,,,50,,,,,50,50,50,50,,50,50,50,50,,,,,50,50,,,,235,235,235,50,235',
'50,50,50,235,235,50,50,,235,,235,235,235,235,235,235,235,,,,,,235,235',
'235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235',
',235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235',
'235,,,235,,,,,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235',
',,,,235,235,,,,588,588,588,235,588,235,235,235,588,588,235,235,,588',
',588,588,588,588,588,588,588,,,,,,588,588,588,588,588,588,588,,,588',
',,,,,,588,,,588,588,588,588,588,588,588,588,588,588,588,588,,588,588',
'588,588,588,,,,,,,,,,,,,,,,,,,,588,,,588,,,588,588,,,588,,588,,588,',
'588,,,588,,,,,,588,,,,,588,588,588,588,,588,588,588,588,,,,,588,588',
',,,234,234,234,588,234,588,588,588,234,234,588,588,,234,,234,234,234',
'234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234',
'234,234,234,234,234,234,234,,234,234,234,,234,234,234,234,234,,,,,,',
',,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234',
'234,234,234,,234,234,234,234,,,,,234,234,,,,,,,234,,234,234,234,,,234',
'234,578,578,578,578,578,,,,578,578,,,,578,,578,578,578,578,578,578,578',
',,,,,578,578,578,578,578,578,578,,,578,,,,,,578,578,578,578,578,578',
'578,578,578,578,578,578,,578,578,578,,578,578,578,578,578,,,,,,,,,,',
',,,,,,,,,578,,,578,,,578,578,,,578,,578,,,,578,,,,,,,,,578,,,,,578,578',
'578,578,,578,578,578,578,,,,,578,578,,,,,,578,578,,578,578,578,,,578',
'578,572,572,572,,572,,,,572,572,,,,572,,572,572,572,572,572,572,572',
',,,,,572,572,572,572,572,572,572,,,572,,,,,,,572,,,572,572,572,572,572',
'572,572,572,,572,572,572,,572,572,572,572,572,,,,,,,,,,,,,,,,,,,,572',
',,572,,,572,572,,,572,,,,,,572,,,,,,,,,572,,,,,572,572,572,572,,572',
'572,572,572,,,,,572,572,,,,1135,1135,1135,572,1135,572,572,572,1135',
'1135,572,572,,1135,,1135,1135,1135,1135,1135,1135,1135,,,,,,1135,1135',
'1135,1135,1135,1135,1135,,,1135,,,,,,,1135,,,1135,1135,1135,1135,1135',
'1135,1135,1135,,1135,1135,1135,,1135,1135,1135,1135,1135,,,,,,,,,,,',
',,,,,,,,1135,,,1135,,,1135,1135,,,1135,,,,,,1135,,,,,,,,,1135,,,,,1135',
'1135,1135,1135,,1135,1135,1135,1135,,,,,1135,1135,,,,1136,1136,1136',
'1135,1136,1135,1135,1135,1136,1136,1135,1135,,1136,,1136,1136,1136,1136',
'1136,1136,1136,,,,,,1136,1136,1136,1136,1136,1136,1136,,,1136,,,,,,',
'1136,,,1136,1136,1136,1136,1136,1136,1136,1136,,1136,1136,1136,,1136',
'1136,1136,1136,1136,,,,,,,,,,,,,,,,,,,,1136,,,1136,,,1136,1136,,,1136',
',,,,,1136,,,,,,,,,1136,,,,,1136,1136,1136,1136,,1136,1136,1136,1136',
',,,,1136,1136,,,,570,570,570,1136,570,1136,1136,1136,570,570,1136,1136',
',570,,570,570,570,570,570,570,570,,,,,,570,570,570,570,570,570,570,',
',570,,,,,,,570,,,570,570,570,570,570,570,570,570,570,570,570,570,,570',
'570,570,570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,,,570',
',570,,,570,,,,,,570,,,,,570,570,570,570,,570,570,570,570,,,,,570,570',
',,,568,568,568,570,568,570,570,570,568,568,570,570,,568,,568,568,568',
'568,568,568,568,,,,,,568,568,568,568,568,568,568,,,568,,,,,,,568,,,568',
'568,568,568,568,568,568,568,568,568,568,568,,568,568,568,568,568,,,',
',,,,,,,,,,,,,,,,568,,,568,,,568,568,,,568,,568,,568,,568,,,568,,,,,',
'568,,,,,568,568,568,568,,568,568,568,568,,,,,568,568,,,,52,52,52,568',
'52,568,568,568,52,52,568,568,,52,,52,52,52,52,52,52,52,,,,,,52,52,52',
'52,52,52,52,,,52,,,,,,,52,,,52,52,52,52,52,52,52,52,,52,52,52,,52,52',
'52,52,52,,,,,,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,,52',
',,,,52,52,52,52,,52,52,52,52,,,,,52,52,,,,1149,1149,1149,52,1149,52',
'52,52,1149,1149,52,52,,1149,,1149,1149,1149,1149,1149,1149,1149,,,,',
',1149,1149,1149,1149,1149,1149,1149,,,1149,,,,,,,1149,,,1149,1149,1149',
'1149,1149,1149,1149,1149,1149,1149,1149,1149,,1149,1149,1149,1149,1149',
',,,,,,,,,,,,,,,,,,,1149,,,1149,,,1149,1149,,,1149,,1149,,1149,,1149',
',,1149,,,,,,1149,,,,,1149,1149,1149,1149,,1149,1149,1149,1149,,,,,1149',
'1149,,,,558,558,558,1149,558,1149,1149,1149,558,558,1149,1149,,558,',
'558,558,558,558,558,558,558,,,,,,558,558,558,558,558,558,558,,,558,',
',,,,,558,,,558,558,558,558,558,558,558,558,,558,558,558,,558,558,558',
'558,558,,,,,,,,,,,,,,,,,,,,558,,,558,,,558,558,,,558,,,,,,558,,,,,,',
',,558,,,,,558,558,558,558,,558,558,558,558,,,,,558,558,,,,,,,558,,558',
'558,558,,,558,558,7,7,7,7,7,,,,7,7,,,,7,,7,7,7,7,7,7,7,,,,,,7,7,7,7',
'7,7,7,,,7,,,,,,7,7,7,7,7,7,7,7,7,7,7,7,,7,7,7,,7,7,7,7,7,,,,,,,,,,,',
',,,,,,,,7,,,7,,,7,7,,,7,,7,,,,7,,,,,,,,,7,,,,,7,7,7,7,,7,7,7,7,,,,,7',
'7,,,,,,,7,,7,7,7,553,,7,7,,,,553,553,553,,,553,553,553,,553,,,,,,,,553',
'553,553,,,,,,,,,,553,553,,553,553,553,553,553,,,,,,,,299,299,,,299,',
',,,,,,299,299,,299,299,299,299,299,299,299,,,299,299,553,,,299,299,299',
'299,553,,,,,553,553,,,,,,,299,299,,299,299,299,299,299,299,299,299,299',
'299,299,299,553,553,299,,,,,,,,,,,,,553,,,553,,221,221,221,553,221,',
',,221,221,553,,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221',
'221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221,221,221',
'221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221',
',,221,,221,,221,,221,,,221,,,,,,221,,,,,221,221,221,221,,221,221,221',
'221,,,,,221,221,,,,220,220,220,221,220,221,221,221,220,220,221,221,',
'220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,',
'220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,,220,220',
'220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,',
',,,,,,220,,,,,220,220,220,220,,220,220,220,220,,,,,220,220,,,,404,404',
'404,220,404,220,220,220,404,404,220,220,,404,,404,404,404,404,404,404',
'404,,,,,,404,404,404,404,404,404,404,,,404,,,,,,,404,,,404,404,404,404',
'404,404,404,404,,404,404,404,,404,404,404,404,404,,,,,,,,,,,,,,,,,,',
',404,,,404,,,404,404,,,404,,,,,,404,,,,,,,,,404,,,,,404,404,404,404',
',404,404,404,404,,,,,404,404,,,,219,219,219,404,219,404,404,404,219',
'219,404,404,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219,219',
'219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219,219',
',219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,',
',,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219,,,,,219,219',
',,,218,218,218,219,218,219,219,219,218,218,219,219,,218,,218,218,218',
'218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218',
'218,218,218,218,218,218,218,,218,218,218,,218,218,218,218,218,,,,,,',
',,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218,,,,,218',
'218,218,218,,218,218,218,218,,,,,218,218,,,,522,522,522,218,522,218',
'218,218,522,522,218,218,,522,,522,522,522,522,522,522,522,,,,,,522,522',
'522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522',
',522,522,522,,522,522,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522',
'522,,,522,,,,,,522,,,,,,,,,522,,,,,522,522,522,522,,522,522,522,522',
',,,,522,522,,,,521,521,521,522,521,522,522,522,521,521,522,522,,521',
',521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,,521',
',,,,,,521,,,521,521,521,521,521,521,521,521,,521,521,521,,521,521,521',
'521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,,,,521,,,,,,',
',,521,,,,,521,521,521,521,,521,521,521,521,,,,,521,521,,,,520,520,520',
'521,520,521,521,521,520,520,521,521,,520,,520,520,520,520,520,520,520',
',,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520,520',
'520,520,520,,520,520,520,,520,520,520,520,520,,,,,,,,,,,,,,,,,,,,520',
',,520,,,520,520,,,520,,,,,,520,,,,,,,,,520,,,,,520,520,520,520,,520',
'520,520,520,,,,,520,520,,,,518,518,518,520,518,520,520,520,518,518,520',
'520,,518,,518,518,518,518,518,518,518,,,,,,518,518,518,518,518,518,518',
',,518,,,,,,,518,,,518,518,518,518,518,518,518,518,518,518,518,518,,518',
'518,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,,518,,518',
',518,,,518,,,,,,518,,,,,518,518,518,518,,518,518,518,518,,,,,518,518',
',,,217,217,217,518,217,518,518,518,217,217,518,518,,217,,217,217,217',
'217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217',
'217,217,217,217,217,217,217,,217,217,217,,217,217,217,217,217,,,,,,',
',,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,,,217,,,,,,,,,217,,,,,217',
'217,217,217,,217,217,217,217,,,,,217,217,,,,216,216,216,217,216,217',
'217,217,216,216,217,217,,216,,216,216,216,216,216,216,216,,,,,,216,216',
'216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216',
',216,216,216,,216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216',
'216,,,216,,216,,,,216,,,,,,,,,216,,,,,216,216,216,216,,216,216,216,216',
',,,,216,216,,,,508,508,508,216,508,216,216,216,508,508,216,216,,508',
',508,508,508,508,508,508,508,,,,,,508,508,508,508,508,508,508,,,508',
',,,,,,508,,,508,508,508,508,508,508,508,508,,508,508,508,,508,508,508',
'508,508,,,,,,,,,,,,,,,,,,,,508,,,508,,,508,508,,,508,,,,,,508,,,,,,',
',,508,,,,,508,508,508,508,,508,508,508,508,,,,,508,508,,,,494,494,494',
'508,494,508,508,508,494,494,508,508,,494,,494,494,494,494,494,494,494',
',,,,,494,494,494,494,494,494,494,,,494,,,,,,,494,,,494,494,494,494,494',
'494,494,494,,494,494,494,,494,494,494,494,494,,,,,,,,,,,,,,,,,,,,494',
',,494,,,494,494,,,494,,,,,,494,,,,,,,,,494,,,,,494,494,494,494,,494',
'494,494,494,,,,,494,494,,,,,,,494,,494,494,494,,,494,494,130,130,130',
'130,130,,,,130,130,,,,130,,130,130,130,130,130,130,130,,,,,,130,130',
'130,130,130,130,130,,,130,,,,,,130,130,,130,130,130,130,130,130,130',
'130,130,,130,130,130,,130,130,130,130,130,,,,,,,,,,,,,,,,,,,,130,,,130',
',,130,130,,,130,,130,,,,130,,,,,,,,,130,,,,,130,130,130,130,,130,130',
'130,130,,,,,130,130,,,,129,129,129,130,129,130,130,130,129,129,130,130',
',129,,129,129,129,129,129,129,129,,,,,,129,129,129,129,129,129,129,',
',129,,,,,,,129,,,129,129,129,129,129,129,129,129,,129,129,129,,129,129',
'129,129,129,,,,,,,,,,,,,,,,,,,,129,,,129,,,129,129,,,129,,,,,,129,,',
',,,,,,129,,,,,129,129,129,129,,129,129,129,129,,,,,129,129,,,,128,128',
'128,129,128,129,129,129,128,128,129,129,,128,,128,128,128,128,128,128',
'128,,,,,,128,128,128,128,128,128,128,,,128,,,,,,,128,,,128,128,128,128',
'128,128,128,128,,128,128,128,,128,128,128,128,128,,,,,,,,,,,,,,,,,,',
',128,,,128,,,128,128,,,128,,,,,,128,,,,,,,,,128,,,,,128,128,128,128',
',128,128,128,128,,,,,128,128,,,,127,127,127,128,127,128,128,128,127',
'127,128,128,,127,,127,127,127,127,127,127,127,,,,,,127,127,127,127,127',
'127,127,,,127,,,,,,,127,,,127,127,127,127,127,127,127,127,,127,127,127',
',127,127,127,127,127,,,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,,127,,',
',,,127,,,,,,,,,127,,,,,127,127,127,127,,127,127,127,127,,,,,127,127',
',,,,,,127,,127,127,127,64,,127,127,,,,64,64,64,,,64,64,64,,64,,,,,,',
',64,,64,64,64,,,,,,,,64,64,,64,64,64,64,64,,,,,,,,,,,,,,,,,,,,,,,64',
'64,64,64,64,64,64,64,64,64,64,64,64,64,,,64,64,64,,,64,,,64,,,64,64',
',64,,64,,64,,64,64,,64,64,64,64,64,,64,,64,,,,,,,,,,,,,,64,,,64,64,64',
'64,,64,,64,,126,126,126,64,126,,,,126,126,,,,126,,126,126,126,126,126',
'126,126,,,,,,126,126,126,126,126,126,126,,,126,,,,,,,126,,,126,126,126',
'126,126,126,126,126,,126,126,126,,126,126,126,126,126,,,,,,,,,,,,,,',
',,,,,126,,,126,,,126,126,,,126,,,,,,126,,,,,,,,,126,,,,,126,126,126',
'126,,126,126,126,126,,,,,126,126,,,,,,,126,,126,126,126,,,126,126,66',
'66,66,66,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66',
'66,66,,,66,,,,,,66,66,,66,66,66,66,66,66,66,66,66,,66,66,66,,66,66,66',
'66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,66,,,,66,,,,,,,,,66,',
',,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,67,67,67,66,67,66,66,66,67',
'67,66,66,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,',
',,,,67,,,67,67,67,67,67,67,67,67,67,67,67,67,,67,67,67,67,67,,,,,,,',
',,,,,,,,,,,,67,,,67,,,67,67,,,67,,67,,,,67,,,67,,,,,,67,,,,,67,67,67',
'67,,67,67,67,67,,,,,67,67,,,,68,68,68,67,68,67,67,67,68,68,67,67,,68',
',68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68',
'68,68,68,68,68,68,68,68,68,68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68',
',,68,,,68,68,,,68,,,,,,68,,,68,,,,,,68,,,,,68,68,68,68,,68,68,68,68',
',,,,68,68,,,,433,433,433,68,433,68,68,68,433,433,68,68,,433,,433,433',
'433,433,433,433,433,,,,,,433,433,433,433,433,433,433,,,433,,,,,,,433',
',,433,433,433,433,433,433,433,433,,433,433,433,,433,433,433,433,433',
',,,,,,,,,,,,,,,,,,,433,,,433,,,433,433,,,433,,,,,,433,,,,,,,,,433,,',
',,433,433,433,433,,433,433,433,433,,,,,433,433,,,,,,,433,,433,433,433',
',,433,433,121,121,121,121,121,,,,121,121,,,,121,,121,121,121,121,121',
'121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,121,121,121,121',
'121,121,121,121,121,121,121,121,,121,121,121,,121,121,121,121,121,,',
',,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,121,,,,121,,,,,,,,,121,',
',,,121,121,121,121,,121,121,121,121,,,,,121,121,,,,,,121,121,,121,121',
'121,,,121,121,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,',
',71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71',
'71,,71,71,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,',
',,,,,,,71,,,,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,72,72,72,71,72,71',
'71,71,72,72,71,71,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72',
',,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,72,72,72,,',
',,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,,,,,72,,,,,,,,,72,,,,,72,72,72',
'72,,72,72,72,72,,,,,72,72,,,,468,468,468,72,468,72,72,72,468,468,72',
'72,,468,,468,468,468,468,468,468,468,,,,,,468,468,468,468,468,468,468',
',,468,,,,,,,468,,,468,468,468,468,468,468,468,468,,468,468,468,,468',
'468,468,468,468,,,,,,,,,,,,,,,,,,,,468,,,468,,,468,468,,,468,,,,,,468',
',,,,,,,,468,,,,,468,468,468,468,,468,468,468,468,,,,,468,468,,,,,,,468',
',468,468,468,467,,468,468,,,,467,467,467,,,467,467,467,,467,,,,,,,,467',
'467,467,467,467,,,,,,,,467,467,,467,467,467,467,467,,,,,,,,,,,,,,,,',
',,,,,,467,467,467,467,467,467,467,467,467,467,467,467,467,467,,,467',
'467,467,,,467,,,467,,,467,467,,467,,467,,467,,467,467,,467,467,467,467',
'467,,467,467,467,,,,,,,,,,,,,,467,,,467,467,467,467,,467,,467,,706,706',
'706,467,706,,,,706,706,,,,706,,706,706,706,706,706,706,706,,,,,,706',
'706,706,706,706,706,706,,,706,,,,,,,706,,,706,706,706,706,706,706,706',
'706,,706,706,706,,706,706,706,706,706,,,,,,,,,,,,,,,,,,,,706,,,706,',
',706,706,,,706,,,,,,706,,,,,,,,,706,,,,,706,706,706,706,,706,706,706',
'706,,,,,706,706,,,,692,692,692,706,692,706,706,706,692,692,706,706,',
'692,,692,692,692,692,692,692,692,,,,,,692,692,692,692,692,692,692,,',
'692,,,,,,,692,,,692,692,692,692,692,692,692,692,,692,692,692,,692,692',
'692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692,692,,,692,,692,,,,692',
',,,,,,,,692,,,,,692,692,692,692,,692,692,692,692,,,,,692,692,,,,257',
'257,257,692,257,692,692,692,257,257,692,692,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,',
',,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257',
'257,,257,257,257,257,,,,,257,257,,,,256,256,256,257,256,257,257,257',
'256,256,257,257,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256',
'256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256',
'256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256',
',,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256,256,,,,,256,256',
',,,255,255,255,256,255,256,256,256,255,255,256,256,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,255,255,255,,,,,,',
',,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255',
'255,255,255,,255,255,255,255,,,,,255,255,,,,686,686,686,255,686,255',
'255,255,686,686,255,255,,686,,686,686,686,686,686,686,686,,,,,,686,686',
'686,686,686,686,686,,,686,,,,,,,686,,,686,686,686,686,686,686,686,686',
',686,686,686,,686,686,686,686,686,,,,,,,,,,,,,,,,,,,,686,,,686,,,686',
'686,,,686,,,,,,686,,,,,,,,,686,,,,,686,686,686,686,,686,686,686,686',
',,,,686,686,,,,1009,1009,1009,686,1009,686,686,686,1009,1009,686,686',
',1009,,1009,1009,1009,1009,1009,1009,1009,,,,,,1009,1009,1009,1009,1009',
'1009,1009,,,1009,,,,,,,1009,,,1009,1009,1009,1009,1009,1009,1009,1009',
',1009,1009,1009,,1009,1009,1009,1009,1009,,,,,,,,,,,,,,,,,,,,1009,,',
'1009,,,1009,1009,,,1009,,,,,,1009,,,,,,,,,1009,,,,,1009,1009,1009,1009',
',1009,1009,1009,1009,,,,,1009,1009,,,,685,685,685,1009,685,1009,1009',
'1009,685,685,1009,1009,,685,,685,685,685,685,685,685,685,,,,,,685,685',
'685,685,685,685,685,,,685,,,,,,,685,,,685,685,685,685,685,685,685,685',
',685,685,685,,685,685,685,685,685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685',
'685,,,685,,,,,,685,,,,,,,,,685,,,,,685,685,685,685,,685,685,685,685',
',,,,685,685,,,,254,254,254,685,254,685,685,685,254,254,685,685,,254',
',254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254',
',,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254',
'254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,',
',,254,,,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,681,681,681',
'254,681,254,254,254,681,681,254,254,,681,,681,681,681,681,681,681,681',
',,,,,681,681,681,681,681,681,681,,,681,,,,,,,681,,,681,681,681,681,681',
'681,681,681,,681,681,681,,681,681,681,681,681,,,,,,,,,,,,,,,,,,,,681',
',,681,,,681,681,,,681,,,,,,681,,,,,,,,,681,,,,,681,681,681,681,,681',
'681,681,681,,,,,681,681,,,,680,680,680,681,680,681,681,681,680,680,681',
'681,,680,,680,680,680,680,680,680,680,,,,,,680,680,680,680,680,680,680',
',,680,,,,,,,680,,,680,680,680,680,680,680,680,680,,680,680,680,,680',
'680,680,680,680,,,,,,,,,,,,,,,,,,,,680,,,680,,,680,680,,,680,,,,,,680',
',,,,,,,,680,,,,,680,680,680,680,,680,680,680,680,,,,,680,680,,,,679',
'679,679,680,679,680,680,680,679,679,680,680,,679,,679,679,679,679,679',
'679,679,,,,,,679,679,679,679,679,679,679,,,679,,,,,,,679,,,679,679,679',
'679,679,679,679,679,679,679,679,679,,679,679,679,679,679,,,,,,,,,,,',
',,,,,,,,679,,,679,,,679,679,,,679,,,,679,,679,,,679,,,,,,679,,,,,679',
'679,679,679,,679,679,679,679,,,,,679,679,,,,678,678,678,679,678,679',
'679,679,678,678,679,679,,678,,678,678,678,678,678,678,678,,,,,,678,678',
'678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678,678,678,678',
'678,678,678,678,,678,678,678,678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,',
'678,678,,,678,,678,,678,,678,,,678,,,,,,678,,,,,678,678,678,678,,678',
'678,678,678,,,,,678,678,,,,675,675,675,678,675,678,678,678,675,675,678',
'678,,675,,675,675,675,675,675,675,675,,,,,,675,675,675,675,675,675,675',
',,675,,,,,,,675,,,675,675,675,675,675,675,675,675,,675,675,675,,675',
'675,675,675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,,,,,675',
',,,,,,,,675,,,,,675,675,675,675,,675,675,675,675,,,,,675,675,,,,,,,675',
',675,675,675,,,675,675,674,674,674,674,674,,,,674,674,,,,674,,674,674',
'674,674,674,674,674,,,,,,674,674,674,674,674,674,674,,,674,,,,,,674',
'674,,674,674,674,674,674,674,674,674,674,,674,674,674,,674,674,674,674',
'674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,674,,,,674,,,,,,,',
',674,,,,,674,674,674,674,,674,674,674,674,,,,,674,674,,,,671,671,671',
'674,671,674,674,674,671,671,674,674,,671,,671,671,671,671,671,671,671',
',,,,,671,671,671,671,671,671,671,,,671,,,,,,,671,,,671,671,671,671,671',
'671,671,671,671,671,671,671,,671,671,671,671,671,,,,,,,,,,,,,,,,,,,',
'671,,,671,,,671,671,,,671,,671,,671,,671,,,671,,,,,,671,,,,,671,671',
'671,671,,671,671,671,671,,,,,671,671,,,,670,670,670,671,670,671,671',
'671,670,670,671,671,,670,,670,670,670,670,670,670,670,,,,,,670,670,670',
'670,670,670,670,,,670,,,,,,,670,,,670,670,670,670,670,670,670,670,,670',
'670,670,,670,670,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670',
',,670,,,,,,670,,,,,,,,,670,,,,,670,670,670,670,,670,670,670,670,,,,',
'670,670,,,,366,366,366,670,366,670,670,670,366,366,670,670,,366,,366',
'366,366,366,366,366,366,,,,,,366,366,366,366,366,366,366,,,366,,,,,',
',366,,,366,366,366,366,366,366,366,366,,366,366,366,,366,366,366,366',
'366,,,,,,,,,,,,,,,,,,,,366,,,366,,,366,366,,,366,,,,,,366,,,,,,,,,366',
',,,,366,366,366,366,,366,366,366,366,,,,,366,366,,,,669,669,669,366',
'669,366,366,366,669,669,366,366,,669,,669,669,669,669,669,669,669,,',
',,,669,669,669,669,669,669,669,,,669,,,,,,,669,,,669,669,669,669,669',
'669,669,669,,669,669,669,,669,669,669,669,669,,,,,,,,,,,,,,,,,,,,669',
',,669,,,669,669,,,669,,669,,,,669,,,,,,,,,669,,,,,669,669,669,669,,669',
'669,669,669,,,,,669,669,,,,1130,1130,1130,669,1130,669,669,669,1130',
'1130,669,669,,1130,,1130,1130,1130,1130,1130,1130,1130,,,,,,1130,1130',
'1130,1130,1130,1130,1130,,,1130,,,,,,,1130,,,1130,1130,1130,1130,1130',
'1130,1130,1130,,1130,1130,1130,,1130,1130,,,1130,,,,,,,,,,,,,,,,,,,',
'1130,,,1130,,,1130,1130,,,1130,,,,,,,,,,,,,,,,,,,,1130,1130,1130,1130',
',1130,1130,1130,1130,,,,,1130,1130,,,,787,787,787,1130,787,1130,1130',
'1130,787,787,,,,787,,787,787,787,787,787,787,787,,,,,,787,787,787,787',
'787,787,787,,,787,,,,,,,787,,,787,787,787,787,787,787,787,787,,787,787',
'787,,787,787,,,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,,,',
',,,,,,,,,,,,,,,787,787,787,787,,787,787,787,787,,,,,787,787,,,,586,586',
'586,787,586,787,787,787,586,586,,,,586,,586,586,586,586,586,586,586',
',,,,,586,586,586,586,586,586,586,,,586,,,,,,,586,,,586,586,586,586,586',
'586,586,586,,586,586,586,,586,586,,,586,,,,,,,,,,,,,,,,,,,,586,,,586',
',,586,586,,,586,,,,,,,,,,,,,,,,,,,,586,586,586,586,,586,586,586,586',
',,,,586,586,,,,338,338,338,586,338,586,586,586,338,338,,,,338,,338,338',
'338,338,338,338,338,,,,,,338,338,338,338,338,338,338,,,338,,,,,,,338',
',,338,338,338,338,338,338,338,338,,338,338,338,,338,338,,,338,,,,,,',
',,,,,,,,,,,,,338,,,338,,,338,338,,,338,,,1206,,1206,1206,1206,1206,1206',
',,,,,,,,1206,,338,338,338,338,,338,338,338,338,,,,,338,338,,,,338,,1206',
'338,,338,338,338,357,357,357,,357,1206,1206,,357,357,1206,,,357,,357',
'357,357,357,357,357,357,,,,,,357,357,357,357,357,357,357,,,357,,,,,',
',357,,,357,357,357,357,357,357,357,357,,357,357,357,,357,357,,,357,',
',,,,,,,,,,,,,,,,,,357,,,357,,,357,357,,,357,,,,,,,,,,,,,,,,,,,,357,357',
'357,357,,357,357,357,357,,,,,357,357,,,,1059,1059,1059,357,1059,357',
'357,357,1059,1059,,,,1059,,1059,1059,1059,1059,1059,1059,1059,,,,,,1059',
'1059,1059,1059,1059,1059,1059,,,1059,,,,,,,1059,,,1059,1059,1059,1059',
'1059,1059,1059,1059,,1059,1059,1059,,1059,1059,,,1059,,,,,,,,,,,,,,',
',,,,,1059,,,1059,,,1059,1059,,,1059,,,,,,,,,,,,,,,,,,,,1059,1059,1059',
'1059,,1059,1059,1059,1059,,,,,1059,1059,,,,595,595,595,1059,595,1059',
'1059,1059,595,595,,,,595,,595,595,595,595,595,595,595,,,,,,595,595,595',
'595,595,595,595,,,595,,,,,,,595,,,595,595,595,595,595,595,595,595,,595',
'595,595,,595,595,,,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595',
',,,,,,,,,,,,,,,,,,,595,595,595,595,,595,595,595,595,,,,,595,595,,,,76',
'76,76,595,76,595,595,595,76,76,,,,76,,76,76,76,76,76,76,76,,,,,,76,76',
'76,76,76,76,76,,,76,,,,,,,76,,,76,76,76,76,76,76,76,76,,76,76,76,,76',
'76,,,76,,,,,,,,,,,,,,,,,,,,76,,,76,,,76,76,,,76,,76,,,,,,,,,,,,,,,,',
',76,76,76,76,,76,76,76,76,,,,,76,76,,,,77,77,77,76,77,76,76,76,77,77',
',,,77,,77,77,77,77,77,77,77,,,,,,77,77,77,77,77,77,77,,,77,,,,,,,77',
',,77,77,77,77,77,77,77,77,,77,77,77,,77,77,,,77,,,,,,,,,,,,,,,,,77,',
',77,,,77,,,77,77,,,77,,,,,,,,,,,,,,,,,,,,77,77,77,77,,77,77,77,77,,',
',,77,77,,,,990,990,990,77,990,77,77,77,990,990,,,,990,,990,990,990,990',
'990,990,990,,,,,,990,990,990,990,990,990,990,,,990,,,,,,,990,,,990,990',
'990,990,990,990,990,990,,990,990,990,,990,990,,,990,,,,,,,,,,,,,,,,',
',,,990,,,990,,,990,990,,,990,,,,,,,,,,,,,,,,,,,,990,990,990,990,,990',
'990,990,990,,,,,990,990,,,,798,798,798,990,798,990,990,990,798,798,',
',,798,,798,798,798,798,798,798,798,,,,,,798,798,798,798,798,798,798',
',,798,,,,,,,798,,,798,798,798,798,798,798,798,798,,798,798,798,,798',
'798,,,798,,,,,,,,,,,,,,,,,,,,798,,,798,,,798,798,,,798,,,,,,,,,,,,,',
',,,,,,798,798,798,798,,798,798,798,798,,,,,798,798,,,,39,39,39,798,39',
'798,798,798,39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39,39,39,39,39,39',
'39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39,39,39,,39,39,,,39,,,',
',,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,39,,,,,,,,,,,,,,,,,,39,39,39,39',
',39,39,39,39,,,,,39,39,,,,78,78,78,39,78,39,39,39,78,78,,,,78,,78,78',
'78,78,78,78,78,,,,,,78,78,78,78,78,78,78,,,78,,,,,,,78,,,78,78,78,78',
'78,78,78,78,,78,78,78,,78,78,,,78,,,,,,,,,,,,,,,,,,,,78,,,78,,,78,78',
',,78,,,,,,,,,,,,,,,,,,,,78,78,78,78,,78,78,78,78,,,,,78,78,,,,40,40',
'40,78,40,78,78,78,40,40,,,,40,,40,40,40,40,40,40,40,,,,,,40,40,40,40',
'40,40,40,,,40,,,,,,,40,,,40,40,40,40,40,40,40,40,,40,40,40,,40,40,,',
'40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,40,,,40,,,,,,,,,,,,,,,,,,,,40,40',
'40,40,,40,40,40,40,,,,,40,40,,,,40,,,40,,40,40,40,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,,,,10,10,10,10',
'10,10,10,10,10,10,,,,,,10,10,10,10,10,10,10,10,10,10,,10,,,,,,,,10,10',
',10,10,10,10,10,10,10,,,10,10,,,,10,10,10,10,,,,,,,,,,,,,,10,10,,10',
'10,10,10,10,10,10,10,10,10,10,10,,,10,10,,,,,,,,,,,,,,10,665,665,665',
'665,665,665,665,665,665,665,665,665,665,665,665,665,665,665,665,665',
'665,665,665,665,,,,665,665,665,665,665,665,665,665,665,665,,,,,,665',
'665,665,665,665,665,665,665,665,,,665,,,,,,,,665,665,,665,665,665,665',
'665,665,665,,,665,665,,,,665,665,665,665,,,,,,,,,,,,,,665,665,,665,665',
'665,665,665,665,665,665,665,665,665,665,,,665,665,,,,,,,,,,,,,,665,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
',,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,,,11',
',,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,',
',,,11,11,,11,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,,,,,11',
'424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424',
'424,424,424,424,424,424,424,,,,424,424,424,424,424,424,424,424,424,424',
',,,,,424,424,424,424,424,424,424,424,424,,,424,,,,,,,,424,424,,424,424',
'424,424,424,424,424,,,424,424,,,,424,424,424,424,,,,,,,,,,,,,,424,424',
',424,424,424,424,424,424,424,424,424,424,424,424,,,424,424,1162,1162',
'1162,1162,,,,,,,,,,424,,,1162,1162,1162,1162,,,642,1162,642,642,642',
'642,642,1162,1162,,,1162,,,,642,,,,,,,,,,,,,,,,1162,,,1162,,,642,1162',
',,1162,,,,,642,642,642,642,,,,642,,,,1162,,,,1162,1162,1162,1162,,1162',
'1162,1162,1162,,,,,1162,1162,911,911,911,911,,,1162,,1162,1162,1162',
',,1162,1162,,911,911,911,911,,,,911,911,,,,,911,911,,,911,911,,,,,,',
',,,,,,,,,,,,911,,,911,,,,911,,,911,,911,,,,,,,911,,,,,,,911,,,,911,911',
'911,911,,911,911,911,911,,,,,911,911,1110,1110,1110,1110,,,911,,911',
'911,911,,,911,911,,1110,1110,1110,1110,,,1204,1110,1204,1204,1204,1204',
'1204,1110,1110,,,1110,,,,1204,,,,,,,,,,,,,,,,1110,,,1110,,,1204,1110',
',,1110,,,,,,,1204,1204,,,,1204,,,,1110,,,,1110,1110,1110,1110,,1110',
'1110,1110,1110,,,,,1110,1110,1196,1196,1196,1196,,,1110,,1110,1110,1110',
',,1110,1110,,1196,1196,1196,1196,,,720,1196,720,720,720,720,720,1196',
'1196,,,1196,,,,720,,,,,,,,,,,,,,,,1196,,,1196,,,720,1196,,,1196,,,,',
'720,720,720,720,,,,720,,,,1196,,,,1196,1196,1196,1196,,1196,1196,1196',
'1196,,,,,1196,1196,1213,1213,1213,1213,,,1196,,1196,1196,1196,,,1196',
'1196,,1213,1213,1213,1213,,,1121,1213,1121,1121,1121,1121,1121,1213',
'1213,,,1213,,,,1121,,,,,,,,,,,,,,,,1213,,,1213,,,1121,1213,,,1213,,',
',,1121,1121,1121,1121,,,,1121,,,,1213,,,,1213,1213,1213,1213,,1213,1213',
'1213,1213,,,,,1213,1213,526,526,526,526,,,1213,,1213,1213,1213,,,1213',
'1213,,526,526,526,526,,,1202,526,1202,1202,1202,1202,1202,526,526,,',
'526,,,,1202,,,,,,,,,,,,,,,,526,,,526,,,1202,526,,,526,,,,,,,1202,1202',
',,,1202,,,,526,,,,526,526,526,526,,526,526,526,526,,,,,526,526,1020',
'1020,1020,1020,,,526,,526,526,526,,,526,526,,1020,1020,1020,1020,,,1124',
'1020,1124,1124,1124,1124,1124,1020,1020,,,1020,,,,1124,,,,,,,,,,,,,',
',,1020,,,1020,,,1124,1020,,,1020,,,,,1124,1124,1124,1124,,,,1124,,,',
'1020,,,,1020,1020,1020,1020,,1020,1020,1020,1020,,,,,1020,1020,908,908',
'908,908,,,1020,,1020,1020,1020,,,1020,1020,,908,908,908,908,,,1126,908',
'1126,1126,1126,1126,1126,908,908,,,908,,,,1126,,,,,,,,,,,,,,,,908,,',
'908,,,1126,908,,,908,,,,,,,1126,1126,,,,1126,,,,908,,,,908,908,908,908',
',908,908,908,908,,,,,908,908,525,525,525,525,,,908,,908,908,908,,,908',
'908,,525,525,525,525,,,1200,525,1200,1200,1200,1200,1200,525,525,,,525',
',,,1200,,,,,,,,,,,,,,,,525,,,525,,,1200,525,,,525,,,,,1200,1200,1200',
'1200,,,,1200,,,,525,,,,525,525,525,525,,525,525,525,525,,,,,525,525',
'1036,1036,1036,1036,,,525,,525,525,525,,,525,525,,1036,1036,1036,1036',
',,993,1036,993,993,993,993,993,1036,1036,,,1036,,,,993,,,,,,,,,,,,,',
',,1036,,,1036,,,993,1036,,,1036,,,,,993,993,993,993,,,,993,,,,1036,',
',,1036,1036,1036,1036,,1036,1036,1036,1036,,,,,1036,1036,1137,1137,1137',
'1137,,,1036,,1036,1036,1036,,,1036,1036,,1137,1137,1137,1137,,,1225',
'1137,1225,1225,1225,1225,1225,1137,1137,,,1137,,,,1225,,,,,,,,,,,,,',
',,1137,,,1137,,,1225,1137,,,1137,,1137,,,,,1225,1225,,,,1225,,,,1137',
',,,1137,1137,1137,1137,,1137,1137,1137,1137,,,,,1137,1137,962,962,962',
'962,,,1137,,1137,1137,1137,,,1137,1137,,962,962,962,962,,,,962,962,',
',,,962,962,,,962,962,,,,,,,,,,,,,,,,,,,962,,,962,,,,962,,,962,,962,',
',,,,,962,,,,,,,962,,,,962,962,962,962,,962,962,962,962,,,,,962,962,',
',,,,,962,,962,962,962,,,962,962,26,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,26,26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26',
',,,,,26,26,26,26,26,26,26,26,26,26,26,26,,26,,,,,,26,26,,26,26,26,26',
'26,26,26,,,26,26,,,,26,26,26,26,,,,,,26,,,,,,,,26,26,,26,26,26,26,26',
'26,26,26,26,26,26,26,,,26,740,740,740,740,,,704,,704,704,704,704,704',
',,,740,740,740,740,,704,,740,,,,,,740,740,,,740,,,,,,,,,,704,,,,,,,',
',,740,704,704,740,,,704,740,,,740,,740,,,,,,,,,,,,,,740,,,,740,740,740',
'740,,740,740,740,740,,,,,740,740,740,926,926,926,926,,740,,740,740,740',
',,740,740,,,926,926,926,926,,,702,926,702,702,702,702,702,926,926,,',
'926,,,,702,,,,,,,,,,,,,,,,926,,,926,,,702,926,,,926,,,,,702,702,702',
'702,,,,702,,,,926,,,,926,926,926,926,,926,926,926,926,,,,,926,926,918',
'918,918,918,,,926,,926,926,926,,,926,926,,918,918,918,918,,,231,918',
'231,231,231,231,231,918,918,,,918,,,,231,,,,,,,,,,,,,,,,918,,,918,,',
'231,918,,,918,,918,,,231,231,231,231,,,,231,,,,918,,,,918,918,918,918',
',918,918,918,918,,,,,918,918,,,,,,,918,,918,918,918,,,918,918,764,764',
'764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764',
'764,764,764,764,764,,,,764,764,764,764,764,764,764,764,764,764,,,,,',
'764,764,764,764,764,764,764,764,764,,,764,,,,,,,,764,764,,764,764,764',
'764,764,764,764,,,764,764,,,,764,764,764,764,,,,,,,,,,,,,,764,764,,764',
'764,764,764,764,764,764,764,764,764,764,764,,,764,912,912,912,912,,',
'1153,,1153,1153,1153,1153,1153,,,,912,912,912,912,,1153,,912,912,,,',
',912,912,,,912,912,,,,,,,,,1153,,,,,,,,,,912,1153,1153,912,,,1153,912',
',,912,,912,,,,,,,912,,,,,,,912,,,,912,912,912,912,,912,912,912,912,',
',,,912,912,1164,1164,1164,1164,,,912,,912,912,912,,,912,912,,1164,1164',
'1164,1164,,,,1164,,,,,,1164,1164,,,1164,,,,,,,,927,927,927,927,,,,,',
',,,1164,,,1164,927,927,927,1164,,,1164,,1164,,,,,927,927,,,927,,,,,1164',
',,,1164,1164,1164,1164,,1164,1164,1164,1164,,,,,1164,1164,,,,,,,1164',
',1164,1164,1164,,,1164,1164,406,,406,406,406,406,406,,,,,927,927,927',
'927,406,927,927,927,927,,,,,927,927,928,928,928,928,,,927,,927,927,927',
'406,406,,,,928,928,928,,406,406,406,406,,,,406,,928,928,,,928,747,747',
'747,747,,,,,,,,,,,,,747,747,747,,,,,,,,,,,747,747,,,747,,,,,,,,,,,,',
',,,928,928,928,928,,928,928,928,928,,,,,928,928,,,,,,,928,,928,928,928',
',,,,,,,,747,747,747,747,,747,747,747,747,,,,,747,747,746,746,746,746',
',,747,,747,747,747,,,,,,746,746,746,223,223,,,223,,,,,,746,746,223,223',
'746,223,223,223,223,223,223,223,,,223,223,,,,223,223,223,223,,,,,,223',
',,,,,,,223,223,,223,223,223,223,223,223,223,223,223,223,223,223,,,223',
'746,746,746,746,,746,746,746,746,,,,,746,746,589,589,,,589,,746,,746',
'746,746,,589,589,,589,589,589,589,589,589,589,,,589,589,,,,589,589,589',
'589,,,,,,589,,,,,,,,589,589,,589,589,589,589,589,589,589,589,589,589',
'589,589,590,590,589,,590,,,,,,,,590,590,,590,590,590,590,590,590,590',
',,590,590,,,,590,590,590,590,,,,,,590,,,,,,,,590,590,,590,590,590,590',
'590,590,590,590,590,590,590,590,634,634,590,,634,,,,,,,,634,634,,634',
'634,634,634,634,634,634,,,634,634,,,,634,634,634,634,,,,,,634,,,,,,',
',634,634,,634,634,634,634,634,634,634,634,634,634,634,634,222,222,634',
',222,,,,,,,,222,222,,222,222,222,222,222,222,222,,,222,222,,,,222,222',
'222,222,,,,,,222,,,,,,,,222,222,,222,222,222,222,222,222,222,222,222',
'222,222,222,1176,1176,222,,1176,,,,,,,,1176,1176,,1176,1176,1176,1176',
'1176,1176,1176,,,1176,1176,,,,1176,1176,1176,1176,,,,,,1176,,,,,,,,1176',
'1176,,1176,1176,1176,1176,1176,1176,1176,1176,1176,1176,1176,1176,672',
'672,1176,,672,,,,,,,,672,672,,672,672,672,672,672,672,672,,,672,672',
',,,672,672,672,672,,,,,,672,,,,,,,,672,672,,672,672,672,672,672,672',
'672,672,672,672,672,672,635,635,672,,635,,,,,,,,635,635,,635,635,635',
'635,635,635,635,,,635,635,,,,635,635,635,635,,,,,,635,,,,,,,,635,635',
',635,635,635,635,635,635,635,635,635,635,635,635,1150,1150,635,,1150',
',,,,,,,1150,1150,,1150,1150,1150,1150,1150,1150,1150,,,1150,1150,,,',
'1150,1150,1150,1150,,,,,,1150,,,,,,,,1150,1150,,1150,1150,1150,1150',
'1150,1150,1150,1150,1150,1150,1150,1150,599,599,1150,,599,,,,,,,,599',
'599,,599,599,599,599,599,599,599,,,599,599,,,,599,599,599,599,,,,,,599',
',,,,,,,599,599,,599,599,599,599,599,599,599,599,599,599,599,599,600',
'600,599,,600,,,,,,,,600,600,,600,600,600,600,600,600,600,,,600,600,',
',,600,600,600,600,,,,,,600,,,,,,,,600,600,,600,600,600,600,600,600,600',
'600,600,600,600,600,517,517,600,,517,,,,,,,,517,517,,517,517,517,517',
'517,517,517,,,517,517,,,,517,517,517,517,,,,,,517,,,,,,,,517,517,,517',
'517,517,517,517,517,517,517,517,517,517,517,1151,1151,517,,1151,,,,',
',,,1151,1151,,1151,1151,1151,1151,1151,1151,1151,,,1151,1151,,,,1151',
'1151,1151,1151,,,,,,1151,,,,,,,,1151,1151,,1151,1151,1151,1151,1151',
'1151,1151,1151,1151,1151,1151,1151,516,516,1151,,516,,,,,,,,516,516',
',516,516,516,516,516,516,516,,,516,516,,,,516,516,516,516,,,,,,516,',
',,,,,,516,516,,516,516,516,516,516,516,516,516,516,516,516,516,628,628',
'516,,628,,,,,,,,628,628,,628,628,628,628,628,628,628,,,628,628,,,,628',
'628,628,628,,,,,,628,,,,,,,,628,628,,628,628,628,628,628,628,628,628',
'628,628,628,628,627,627,628,,627,,,,,,,,627,627,,627,627,627,627,627',
'627,627,,,627,627,,,,627,627,627,627,,,,,,627,,,,,,,,627,627,,627,627',
'627,627,627,627,627,627,627,627,627,627,673,673,627,,673,,,,,,,,673',
'673,,673,673,673,673,673,673,673,,,673,673,,,,673,673,673,673,,,,,,673',
',,,,,,,673,673,,673,673,673,673,673,673,673,673,673,673,673,673,,995',
'673,995,995,995,995,995,1000,,1000,1000,1000,1000,1000,998,995,998,998',
'998,998,998,,1000,,,,,,,998,,,,,,,,995,,,,,,,1000,,,,995,995,,998,,995',
',1000,1000,,,,1000,,998,998,,,,998' ]
        racc_action_check = arr = ::Array.new(28775, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1154,  2010,    33,   nil,   477,   nil, 16666,  1419,    62,
 25036, 25292,   130,   nil,   104,   124,   367,   225,  1018,   196,
   113,   354,   nil,   -72,  9270,  1146, 26725,   303,   nil,   583,
   nil,   228,  5306,  5581,  6108,  7025,  7156,   nil,  3306, 24635,
 24897,   nil,   213,   706,   464,   306, 13093, 13355,   308, 13879,
 14927,  1002, 16261,   241,   825,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 19186,   nil, 19466, 19597, 19728,   170,
   nil, 20145, 20276,   nil,   nil,  7942, 24111, 24242, 24766,   nil,
   nil,   nil,   nil,   nil,   nil,   666,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   469,   nil,   nil,   857,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 20002,   nil,   nil,   nil,   nil, 19323, 19045, 18914, 18783,
 18652,   nil,  4458,   nil,   421,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   245,   nil,  3882, 18247, 18116, 17461, 17330,
 17068, 16937, 27862, 27600,   nil,   nil,   248,  1434,   273,   nil,
   356, 27008,   388,  2154, 15320, 15058, 14796,   nil,   nil,  1188,
   119,   136,   563,   189,   480,   541,   nil, 13224,    12,   109,
  3450,   573,   nil,   nil, 21733, 21209, 21078, 20947,  7811,  7680,
  7418,  7287,  6763,  6239,  5715,  5440,  5165, 12688, 12557, 12295,
 12164, 11890, 10973, 10842,  9008,  8877,   nil,   nil,   nil,   nil,
  8484,   nil,   nil,   580,   526,   407,   297,   279,   235,   -62,
   521,   581,   582,   nil,   nil,   nil,  8615,   nil,   nil, 16807,
   nil,   nil,   592,  9663,  9794,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  9925,   nil,  2010,   nil,   563,   564,   nil, 10187,
   616, 10318,   nil,   nil, 10449, 10580,   nil,   nil,   383,   nil,
 12033,  1275,   614,   591,  4170,   616,   661,   619, 23579,  1290,
   829,   868,   902,   702,   916,   nil,   670,   636,   189,   679,
   690,   nil,   nil,   nil,   696,   247,   658, 23718,   nil,   648,
   995,  3882,  4314,   741,   nil,   743, 22924,   nil, 12819,  2298,
   987,   681,   nil,   637,   510,   741,   723,   672,   751,   nil,
   558,    34,    35, 14272,  3162,  2874,   284,   830,   727,    -5,
    -1,   985,   808,     4,   843,   nil,   nil,   616,   477,   479,
   nil,   827,   nil,   761, 17199,   nil, 27423,   nil,   403,   528,
   461,   513,   504,   -31,   -34,   466,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   759, 25420,   nil,   nil,   nil,   nil,   763,
   nil,   836,   753, 19859,   758,   nil,   nil,   750,   nil,  1290,
   -56,   858,   nil,   nil,  1290,   nil,   nil,   nil,   nil,   nil,
  1434,   773,   nil,   772,   774,   804,   742,  8219,   nil,   nil,
   nil,     0,   747,   819,   nil,   nil,  8083, 20548, 20407,   903,
   903,   nil,   nil,   784,   782,   786,   784,   786,   nil,   788,
   805,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   797,   988,   nil,   nil, 18509,   nil,   nil,   nil,     1,   nil,
   nil,   nil,   895,   nil,   nil,   897,   496,   821, 18378,   947,
   nil,   nil,   nil,   -26,   nil,   868, 28411, 28289, 17985,   -51,
 17854, 17723, 17592,   827,   828, 26288, 25994,  3594,  3450,   422,
  1041,   909,   915,   916,   917,  5530,  5440,  5255,  4170,  3306,
  3738,  4602,  4890,  5034,  3190,  3281,  4026,  5165,  2154,  4746,
   nil,    25,   nil, 16807,   nil,   nil,   nil,   nil, 16523,   855,
   858,   866,   nil,   nil,   nil,   867,   nil,   nil, 16130,   nil,
 15999,   nil, 15606,   nil,   213,   nil,   nil,   nil, 15463,  1563,
   nil,   868,   868,   nil,   nil,   881, 23448,   885, 15189, 27679,
 27740,  1146,   927,   nil,   nil, 23980,   905,   nil, 14665, 28167,
 28228, 14534,  4458,  3018, 14403,  1062,   950,   991,   nil, 14141,
   nil,   nil, 14010,   nil,   nil,   nil,  3738,  1071,   nil,  1146,
    96,  1080,  1082,   544,  1083, 13748, 13617, 28533, 28472,    39,
   nil,   nil,   190,   nil, 27801, 28045, 13486,   nil,   nil,   214,
  1866,   nil, 25507,   nil,   nil,   nil,   nil,  1245,   nil,   nil,
   nil,   977,   nil,   nil,   398,   nil,   459,   nil,   nil,   964,
   nil,   966,   nil,   nil,   nil, 25164,   nil, 12962,   968, 23055,
 22793, 22662, 27984, 28594, 22531, 22388,   632,  1010, 22257, 22126,
 21995, 21864,  1010,   nil,   nil, 21602, 21340,  1012,   nil,  1070,
  1722,  1100, 20816,   nil,   nil,   744,   nil,   nil,  1179,   nil,
   nil,   556, 26910,   nil, 26795,   nil, 20685,   nil,  3177,   nil,
   982,   983,  1132,   991,   nil,   nil,   nil,   nil,   nil,   nil,
 25801,  1083,  1578,   nil,   nil,   nil,   272,   278,   608,   220,
   998,  6501,  6370,  1042,   nil,  1023,   nil,   nil,   nil,   414,
 26808,    94,   nil,   592,   nil,   nil, 27600, 27502,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   150,
   591,   nil,  1047,  1004, 27148,   nil,  1144,   nil,     0,   -21,
   nil,   nil, 12426,   nil,  1042,  1049,  1150,   nil,  1029,   nil,
  1084, 10711,   nil,   nil, 10056,   nil,   261, 23317,  1039,   nil,
  1043,   135,   252,  1085,   246,   719,  1093,  1055, 24504,   nil,
  1136,   154,   nil,   nil,   nil,   539,   503,   nil,  1192,   nil,
   nil,   nil,   nil,   nil,  1217,  1218,   nil,   nil,    76,  1102,
   -19,    40,     7,    27,  4314,   993,   331,   nil,  1106,  1722,
  8353,   nil,  1231,   -22,  1112,   nil,   nil,   nil,   nil,   nil,
  4602,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1117,
  8746,  1128,   330,   306,   110,   359,   nil,  1866,  9139,   nil,
  1126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  9401,  9532,  1252,   nil,  5034,  1137,  1184,   nil,   nil,
  1143,   nil,  1143,  1147,   nil,  1154,   nil,  1246,   nil,  1173,
  1193,   nil,  1194,   nil,   nil,  1199,  3148,  3187,   nil,   nil,
 11104, 11235, 11366, 11497, 11628, 11759,   -85,  1280, 26190,   -65,
   185, 25602, 27231,   693,    42,  1202,  1216,   nil, 27005,   nil,
  1217,  1237,  1320,   633,   nil,  1263, 26907, 27370, 27468,   nil,
   nil,   nil,  5846,   nil,   nil,  5977,   nil,   nil,  1268,   nil,
   nil,  1266,  1250,   nil,   nil,   676,  1578,   nil,   nil,   nil,
   nil,  1251,   215,   nil,   nil,   nil,  1377,   nil,  6632,  1380,
   nil,   nil, 26582,  6894,  2586,   -12,  1385,   nil,  1393,   577,
  3018,   nil,   nil,   nil,   nil,  1268,  1314,  1287,  1282,   235,
   nil,   nil,  7549,  2298,  2442,   nil,  4026,   nil,   nil,    32,
 24373,   nil,   nil, 26389,   nil, 28656,   nil,   nil, 28670,   nil,
 28663,   nil,   nil,   nil,   nil,  1284,  1287,  2586,  2730, 21471,
   nil,   nil,   nil,   nil,  1292,  1294,  1297,  1298,   nil,   nil,
 26092,   nil,   nil,    -1,   nil,   nil,  1311,  1312,  1313,   nil,
   nil,   nil,  1359,  1314,   -48,   nil, 26386,   nil,  1318,   nil,
   nil,   213,   nil,   nil,  1360,  2874,  2730,   nil,   nil,  1337,
  1338,   nil,  1340,  1342,  1343,   nil,  1381,  1364,  1366, 23849,
   nil,   nil,   nil,   nil,   142,   nil,   -10,   518,   -34,   nil,
   nil,   nil,   nil,   565,   nil,   nil,   nil,  1505,  4890,  4746,
  1852,   nil,   nil,   nil,  3594,     9,    26,  1332,  1460,    33,
   nil,  1385,  1387,  1388,  1391,   923,  3216,   nil,   nil,   nil,
   557,  1440,   264,   nil,   nil,   nil,   nil,   nil,   nil,  1395,
 25700,  1397,   nil,   nil,   390,   nil,   nil,   nil,  1467,   nil,
   nil, 25899,   nil,   nil, 26095,   nil, 26193,   nil,   nil,  1429,
 23186,   991,  1491,  2442,   nil, 15737, 15868, 26484,   nil,   nil,
   nil,   nil,  1434,  1539,   -76,   nil,   nil,   nil,  1546, 16392,
 28106, 28350,     6, 27218,   nil,   nil,   nil,   nil,  1425,   nil,
   nil,   nil, 25504,  1426, 27329,  1427,   nil,   nil,  1428,  1431,
  1435,  1436,   nil,  1442,   nil,   685, 27923,   nil,    42,  1002,
   nil,   nil,   nil,  1443,   nil,   nil,   nil,  1996,   nil,  1455,
   100,   136,     8,    69,  1453,  1454, 25798,   nil,   nil,   nil,
 26291,   nil, 25997,   nil, 25703,   nil, 23626,   nil,   nil,  1501,
  1502,   nil,    35, 25896,   nil,    36,   nil,  1459,  1461,  1481,
  1482,   nil,   nil,   nil,  1484, 26487,   nil,   nil,   nil,   nil,
  1485,   nil ]

racc_action_default = [
    -1,  -732,    -4,  -732,    -2,  -717,    -5,  -732,    -8,  -732,
  -732,  -732,  -732,   -31,  -732,  -732,   -36,  -732,  -732,  -629,
  -629,  -309,   -52,  -719,  -732,   -61,  -732,   -69,   -70,   -71,
   -75,  -286,  -286,  -286,  -322,  -349,  -350,   -87,   -13,   -91,
   -99,  -101,  -732,  -614,  -615,  -732,  -732,  -732,  -732,  -732,
  -732,  -239,  -732,  -719,  -257,  -300,  -301,  -302,  -303,  -304,
  -305,  -306,  -307,  -308,  -705,  -311,  -315,  -731,  -695,  -330,
  -332,  -732,  -732,   -63,   -63,  -717,  -732,  -732,  -732,  -351,
  -352,  -354,  -411,  -554,  -555,  -556,  -557,  -578,  -560,  -561,
  -580,  -582,  -565,  -570,  -574,  -576,  -592,  -593,  -594,  -578,
  -596,  -598,  -599,  -600,  -601,  -703,  -603,  -604,  -704,  -606,
  -607,  -608,  -609,  -610,  -611,  -612,  -613,  -618,  -619,  1232,
    -3,  -718,  -727,  -728,  -729,    -7,  -732,  -732,  -732,  -732,
  -732,    -9,    -4,   -19,  -732,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,
  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,  -207,
  -208,  -209,  -210,   -24,  -137,   -13,  -732,  -732,  -732,  -732,
  -732,  -276,  -732,  -732,  -715,  -716,  -732,   -13,  -628,  -624,
  -651,  -651,  -732,   -13,  -732,  -732,  -719,  -720,   -56,  -732,
  -614,  -615,  -732,  -309,  -732,  -732,  -245,  -732,  -629,  -629,
   -13,  -732,   -57,   -59,  -222,  -223,  -732,  -732,  -732,  -732,
  -732,  -732,  -732,  -732,  -732,  -732,  -732,  -732,  -732,  -732,
  -732,  -732,  -732,  -732,  -732,  -732,  -258,  -259,  -260,  -261,
  -732,   -65,   -66,  -732,  -130,  -131,  -170,  -171,  -172,  -188,
  -193,  -200,  -203,  -614,  -615,  -693,  -732,  -420,  -422,  -732,
  -713,  -714,   -76,  -276,  -732,  -329,  -426,  -435,  -437,   -82,
  -432,   -83,  -719,   -84,  -264,  -281,  -290,  -290,  -285,  -732,
  -291,  -732,  -578,  -697,  -732,  -732,   -85,   -86,  -717,   -14,
  -732,   -17,  -732,   -89,   -13,  -719,  -732,   -92,   -95,   -13,
  -107,  -108,  -732,  -732,  -115,  -322,  -325,  -719,  -732,  -629,
  -629,  -349,  -350,  -353,  -433,  -732,   -97,  -732,  -103,  -319,
  -732,  -224,  -225,  -597,  -233,  -234,  -732,  -246,  -732,   -13,
  -313,  -719,  -265,  -724,  -724,  -732,  -732,  -724,  -732,  -331,
   -62,  -732,  -732,  -732,   -13,   -13,  -717,  -732,  -718,  -614,
  -615,  -732,  -732,  -309,  -732,  -364,  -365,  -125,  -126,  -732,
  -128,  -732,  -309,  -622,  -732,  -345,  -651,  -558,  -732,  -732,
  -732,  -732,  -732,  -732,  -732,  -732,    -6,  -730,   -25,   -26,
   -27,   -28,   -29,  -732,  -732,   -21,   -22,   -23,  -138,  -732,
   -32,   -35,  -296,  -732,  -732,  -295,   -33,  -732,   -37,  -732,
  -309,   -49,   -51,  -211,  -269,  -291,   -53,   -54,   -38,  -212,
  -269,  -719,  -277,  -290,  -290,  -706,  -707,  -286,  -430,  -708,
  -709,  -707,  -706,  -286,  -429,  -431,  -708,  -709,  -732,  -546,
  -732,  -377,  -378,  -719,  -636,  -719,  -692,  -692,  -634,  -636,
  -636,  -650,  -652,  -653,  -654,  -655,  -656,  -657,  -658,  -659,
  -660,  -732,  -662,  -664,  -666,  -671,  -673,  -674,  -677,  -682,
  -684,  -685,  -687,  -688,  -689,  -732,  -732,  -636,  -732,  -732,
   -48,  -219,   -55,  -719,  -328,  -732,  -732,  -732,  -276,  -319,
  -732,  -732,  -732,  -732,  -732,  -732,  -732,  -220,  -221,  -226,
  -227,  -228,  -229,  -230,  -231,  -235,  -236,  -237,  -238,  -240,
  -241,  -242,  -243,  -244,  -247,  -248,  -249,  -250,  -719,  -262,
   -67,  -719,  -441,  -286,  -706,  -707,   -73,   -77,  -652,  -719,
  -290,  -719,  -287,  -439,  -441,  -719,  -324,  -282,  -732,  -283,
  -732,  -288,  -732,  -292,  -732,  -700,  -702,   -12,  -718,   -16,
   -18,  -719,   -88,  -317,  -104,   -93,  -732,  -719,  -276,  -732,
  -732,  -114,  -732,  -628,  -597,  -732,  -100,  -105,  -732,  -732,
  -732,  -732,  -263,  -251,  -732,  -732,  -719,  -732,  -266,  -726,
  -725,  -268,  -726,  -320,  -321,  -696,   -13,  -355,  -356,   -13,
  -732,  -732,  -732,  -732,  -732,  -732,  -276,  -732,  -732,  -319,
   -63,  -125,  -126,  -127,  -732,  -732,  -276,  -341,  -620,  -732,
   -13,  -412,  -651,  -415,  -559,  -579,  -584,  -732,  -586,  -562,
  -581,  -732,  -583,  -564,  -732,  -567,  -732,  -569,  -572,  -732,
  -573,  -732,  -595,   -10,   -20,  -732,   -30,  -732,  -299,  -732,
  -732,  -276,  -732,  -732,  -732,  -732,  -434,  -732,  -278,  -280,
  -732,  -732,   -78,  -275,  -427,  -732,  -732,   -80,  -428,   -44,
  -253,  -731,  -731,  -347,  -625,  -732,  -643,  -627,  -732,  -632,
  -633,  -732,  -732,  -646,  -732,  -648,  -732,  -366,  -732,  -368,
  -370,  -373,  -376,  -719,  -665,  -675,  -676,  -686,  -690,  -630,
  -732,   -46,  -255,  -348,  -327,  -721,  -706,  -707,  -706,  -707,
  -719,  -732,  -732,   -58,  -461,  -463,  -465,  -468,  -469,  -526,
  -719,  -481,  -484,  -519,  -524,  -525,  -732,  -732,  -529,  -530,
  -531,  -532,  -533,  -534,  -535,  -536,  -537,  -538,  -539,  -732,
  -732,  -544,   -60,  -732,  -732,  -694,  -732,  -442,   -72,  -423,
  -439,  -271,  -278,  -273,  -732,  -401,  -732,  -323,  -290,  -289,
  -293,  -732,  -698,  -699,  -732,   -15,   -90,  -732,   -96,  -102,
  -719,  -706,  -707,  -274,  -710,  -113,  -732,   -98,  -732,  -218,
  -232,  -719,  -312,  -314,  -316,  -724,  -731,  -357,  -731,   -64,
  -358,  -359,  -335,  -336,  -732,  -732,  -447,  -338,  -732,  -719,
  -706,  -707,  -710,  -318,   -13,  -125,  -126,  -129,  -719,   -13,
  -732,  -343,  -732,  -732,  -719,  -585,  -588,  -589,  -590,  -591,
   -13,  -563,  -566,  -568,  -571,  -575,  -577,  -139,   -34,  -297,
  -732,  -719,  -706,  -707,  -707,  -706,   -50,  -270,  -732,  -722,
  -290,   -40,  -214,   -41,  -215,   -79,   -42,  -217,   -43,  -216,
   -81,  -732,  -732,  -731,  -362,   -13,  -547,  -731,  -548,  -549,
  -719,  -635,  -636,  -636,  -663,  -692,  -672,  -677,  -691,  -636,
  -636,  -683,  -636,  -660,  -678,  -719,  -732,  -732,  -375,  -661,
  -732,  -732,  -732,  -732,  -732,  -732,  -434,  -732,  -732,  -466,
  -467,  -732,  -732,  -732,  -486,  -719,  -719,  -480,  -487,  -493,
  -732,  -496,  -500,  -732,  -483,  -732,  -732,  -522,  -523,  -527,
  -528,  -540,  -732,  -126,  -542,  -732,   -68,  -421,  -401,  -425,
  -424,  -732,  -719,  -436,  -402,  -719,   -13,  -438,  -284,  -294,
  -701,   -94,  -434,  -106,  -326,  -267,  -732,  -360,  -732,  -732,
  -337,  -339,  -732,  -732,   -13,  -434,  -732,  -434,  -732,  -732,
   -13,  -346,  -413,  -416,  -418,  -405,  -732,  -732,  -298,  -434,
   -39,  -213,  -279,   -45,  -254,   -11,   -13,  -553,  -363,  -732,
  -732,  -551,  -626,  -732,  -639,  -732,  -641,  -631,  -732,  -644,
  -732,  -647,  -649,  -367,  -369,  -371,  -374,   -47,  -256,  -732,
  -462,  -464,  -473,  -477,  -719,  -719,  -719,  -505,  -507,  -508,
  -511,  -512,  -578,  -515,  -517,  -518,  -719,  -719,  -719,  -543,
  -478,  -479,  -503,  -488,  -491,  -494,  -732,  -499,  -719,  -578,
  -723,  -719,  -520,  -521,  -732,  -252,   -13,   -74,  -272,  -692,
  -692,  -382,  -384,  -384,  -384,  -400,  -732,  -719,  -660,  -668,
  -669,  -680,  -440,  -333,  -732,  -334,  -732,  -452,  -455,  -458,
  -459,  -460,  -293,  -731,  -340,  -342,  -621,  -732,   -13,   -13,
  -732,  -414,  -587,  -552,   -13,  -614,  -615,  -732,  -732,  -309,
  -550,  -636,  -636,  -636,  -636,  -732,  -732,  -470,  -471,  -472,
  -506,  -510,  -732,  -514,  -516,  -474,  -475,  -476,  -495,  -489,
  -732,  -497,  -501,  -482,  -732,  -485,  -541,  -443,  -732,  -380,
  -381,  -385,  -391,  -393,  -732,  -396,  -732,  -398,  -403,  -732,
  -732,  -667,  -732,   -13,  -448,  -732,  -732,  -456,  -444,  -445,
  -446,  -344,  -732,  -732,  -719,  -407,  -409,  -410,  -546,  -276,
  -732,  -732,  -319,  -732,  -637,  -640,  -642,  -645,  -372,  -504,
  -509,  -513,  -732,  -492,  -732,  -692,  -670,  -383,  -384,  -384,
  -384,  -384,  -681,  -384,  -404,  -679,  -732,  -319,  -731,   -13,
  -453,  -454,  -457,  -496,  -417,  -419,  -406,  -732,  -545,  -719,
  -706,  -707,  -710,  -318,  -636,  -490,  -732,  -498,  -502,  -379,
  -732,  -388,  -732,  -390,  -732,  -394,  -732,  -397,  -399,  -318,
  -710,  -361,  -731,  -732,  -408,  -434,  -638,  -384,  -384,  -384,
  -384,  -449,  -450,  -451,  -497,  -732,  -386,  -389,  -392,  -395,
  -384,  -387 ]

clist = [
'44,222,490,490,691,44,138,138,337,315,315,315,300,379,19,281,624,282',
'451,19,298,124,138,815,294,885,699,700,384,385,569,229,229,873,408,475',
'44,341,341,616,619,381,382,470,915,386,415,306,310,509,19,349,349,435',
'436,133,214,956,333,596,633,884,733,762,44,131,353,353,121,302,309,311',
'707,557,390,294,294,233,19,372,238,120,782,457,463,891,884,449,349,349',
'349,124,141,141,363,356,418,419,420,421,559,511,924,353,353,353,380',
'380,561,474,380,883,335,608,611,703,705,615,889,44,317,317,317,713,782',
'316,316,316,44,976,44,774,299,19,473,506,883,481,481,1004,916,1053,19',
'1006,19,4,313,326,327,989,959,387,1145,374,377,882,1111,946,373,1172',
'553,380,380,380,380,1183,1033,569,2,125,1016,1028,650,652,655,655,226',
'232,490,985,882,766,1038,785,1147,605,403,405,779,213,779,782,1197,776',
'593,593,315,448,396,8,654,656,431,424,8,525,526,809,283,764,770,510',
'665,44,366,1014,1026,887,375,467,769,1071,516,295,376,44,676,19,394',
'19,1163,44,19,637,369,1172,606,371,458,19,1056,829,970,640,1005,19,19',
'1055,44,1122,1057,1144,814,446,447,641,235,972,406,1214,229,229,19,370',
'833,1078,300,1079,552,574,512,513,430,441,563,423,441,914,315,315,564',
'938,1195,416,1112,1138,368,315,788,707,441,1147,1066,898,1221,827,962',
'797,779,779,1179,1067,1070,929,930,1010,233,434,434,1011,643,1015,1027',
'481,911,730,912,1168,8,923,1046,926,1159,1160,877,589,597,422,44,8,1',
'551,44,1224,407,409,341,44,941,1004,895,1158,19,599,124,410,19,411,412',
'413,349,19,1129,620,333,341,414,835,1112,333,840,1054,1069,830,306,353',
'884,44,886,349,310,1166,,,627,,891,457,463,,,19,44,44,353,790,550,511',
'580,449,317,578,779,585,560,316,19,19,317,1113,,594,124,316,577,523',
'524,233,581,1091,1112,336,1198,587,490,1139,562,843,380,843,138,934',
'672,819,565,,,,,1211,1023,1023,,828,,997,,,,639,,1182,1023,689,1198',
'1165,,,914,914,793,,,865,442,,832,442,870,,793,1112,623,1041,,799,,490',
'851,664,,442,,683,490,,964,707,707,688,,1023,,721,1042,1043,,884,793',
'951,,948,490,315,782,682,793,,,1068,880,687,,,,906,141,,,,,,,467,,917',
',,994,996,,,719,756,756,999,1001,579,1002,878,,,458,457,463,,,1169,',
',1170,,,,,955,834,862,864,481,,,867,869,1222,597,,1101,,,,,,315,597',
'952,,,,683,,,884,948,1029,,44,942,,,592,890,,892,341,824,467,,429,,19',
'768,,341,965,,467,,349,1119,1120,315,779,967,607,458,,349,,,,315,1223',
'353,44,458,1217,44,,1023,,,353,336,467,,979,,19,,467,19,,,,,810,887',
'44,801,,,,458,,968,315,1084,,,,458,19,,778,831,,861,863,,,138,866,868',
',44,,,,467,,,44,,914,,707,707,,19,,,19,1188,677,1013,19,,458,,1030,1031',
'19,19,,805,,19,19,,,,1140,,879,,,336,,,847,,336,940,,1199,818,1058,31',
',,,1133,31,1134,981,441,1154,1155,1156,1157,,,,,,441,441,756,,31,441',
'441,,756,756,,141,,,31,31,31,281,31,936,597,621,622,,138,939,,,860,490',
',953,,862,864,869,867,,,,,,,,1050,763,31,434,,341,1077,31,31,888,,31',
'888,,,,341,,,349,969,1105,1106,1107,,,,,,683,349,,688,,353,,,,,,,,44',
',1052,353,,44,,,1216,,,,,980,19,31,44,,,19,31,31,31,31,31,,31,,,,19',
',,,,,860,,,,1117,,848,380,,,,,19,856,1092,44,1093,1059,981,1094,,,,',
',,,987,,19,,991,,,,1058,,1143,1058,,,,,,1044,,,,756,442,,756,756,,,',
'441,,756,442,442,,,,442,442,756,756,756,,1064,,,31,31,31,31,31,31,31',
',,,,,31,44,,1189,,,31,31,31,31,,,,1050,,19,1050,756,1050,44,677,1215',
',31,380,44,1102,,,1058,677,925,,19,,,,,,19,,44,1076,1114,,1086,806,',
',808,380,,,,,19,,,,349,1171,,1173,,,,,,793,31,,,,,353,756,31,31,,,677',
',,,,31,,,,1194,,756,1050,1051,1050,,1050,,1050,,,44,,31,,1059,,31,1059',
'677,,1059,31,1059,294,19,,1050,677,,,,,,975,,,1150,349,,,,,44,44,,1218',
',1219,44,1220,677,31,353,,,,19,19,,,,442,19,,,31,31,31,,,1230,1180,1181',
',756,,,,,,,,,,,,31,,,,315,,,,294,,1059,44,1059,,1059,756,1059,,,,,,349',
'677,,19,,467,677,677,,,,,,1059,,353,,,756,,756,,,,458,,,,380,380,467',
',,,,44,975,,,,,,31,,,,,,,19,,,756,,,966,,18,,,,,18,,,,,888,,756,1051',
'977,,1051,,1051,,,,239,,,31,,,1123,1125,1127,,239,239,239,31,18,342',
'342,,,,17,,,,,17,,988,,,,,,,,,,,677,677,677,,18,,,,,239,239,,925,239',
'391,401,401,,17,,,,,,,,,,,,,975,1051,,1051,31,1051,,1051,,,,,,,31,17',
',,,,,,,,,,1051,,18,1062,31,,,239,239,239,239,18,,18,,,31,,,31,,1073',
',,,,31,1201,1203,1205,1207,,1208,,,,31,,,,31,,,1083,17,,,,,,,,,17,,17',
',,,,,1186,,,,,,31,,,31,31,,,31,,1226,1227,1228,1229,31,31,,,,31,31,',
',1231,,,,,,,18,239,439,239,239,439,239,,,,677,,18,,,,,,18,439,239,239',
',,,,,,,,,,,,,18,,,,1142,,,17,,17,1148,,17,,,,,,,17,,,,,,17,17,,,,,,',
',,,,,,,,,17,,,,239,,,,,,,239,239,,,,,1178,378,,239,,,,,,,,,,,,,,,,755',
'755,18,,,,18,,,,342,18,,,,31,,,,,31,31,,,,,,1212,,342,,31,,,,,,,,,,18',
',,17,,,,17,31,,,,17,,239,18,18,,,,,,,,,31,,,,,,,,,,239,,,,,,,17,,,,',
',20,,,,,20,,,,17,17,,,,,,,,,,,,,,,,,,,,,,,,31,,20,350,350,,,432,445',
',,,,,31,,,239,,,,,,,,,31,,,,20,,31,,,,,,31,,350,350,350,,,,,,,,,,,,31',
',,239,,,,,,,,,,239,,,,,,,,,,,,,,,,,,20,,,,,,,755,,20,,20,,755,755,,',
',,,,,,,,571,,573,,31,575,576,,,,,,,,,,,18,,,,,,,,342,,239,,,,,,,342',
',31,31,,,,,31,239,,,,,,,,,,,,18,,,18,17,,,,,,239,,,,20,,20,,,20,239',
',,,18,,20,,,,,,20,20,,,31,,31,31,,,17,,,17,,,,20,,18,31,,439,239,,,18',
'668,,,,,439,439,17,,,439,439,,,,,,,,,,,,31,,,,,,,,,,,17,,755,17,,755',
'755,17,,,,,755,17,17,,,,17,17,755,755,755,,,,,714,,,,,,,,,20,,,,20,',
',,350,20,,,,514,,,,,,,755,,,,,,,350,,,,,,,,,,,,20,,,342,,,,,,,,,,,342',
'20,20,,,,,,,,,,780,,378,,783,,,,,,,,,755,18,,,,,18,239,,21,,566,,,21',
',755,18,,,,,,,757,757,,,780,,,378,,,582,439,,,,,,,,17,445,21,344,344',
'17,,,,18,,,,,,,17,,,,,,,,,,,,,,21,,,,17,,,,,,393,402,402,,,849,,755',
',,,17,,,780,378,,,,,,,,,,,239,,876,,,,,,755,,,,752,752,18,,894,,,21',
',,,,,,239,,21,,21,,18,755,,755,,,18,,,,,,,,,,,,,,,,18,,17,,1087,,,20',
',694,,697,,755,,350,,,,,17,,,,350,,17,,780,,755,,,,,,,949,,,950,,17',
',,20,,,20,724,,,,,,,,,,21,18,440,,,440,,,,,20,,21,,1131,,,757,21,440',
'751,751,,757,757,,,,765,,,,,18,18,21,771,20,773,18,20,,777,17,20,,,978',
',,20,20,,,,20,20,,786,,,,,43,789,,,,43,,,,,,,17,17,,,,,17,,803,,1175',
',293,18,,239,239,,,,,,,,43,340,340,,,239,,,,,,,750,750,,752,21,,,,21',
'752,752,,344,21,,,43,,,17,,,,18,,,389,293,293,,,344,,,,,,,,,,,,21,,',
'350,,,1072,,,,,,,,350,21,21,,,,,,17,,,378,,,43,,,757,,,757,757,899,43',
',43,20,757,,,,20,,,,757,757,757,,,,,20,,,,,,,,,,,,,,,,,,20,,,,,,,751',
',,,757,,751,751,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,43,,954,,,,752,,',
'752,752,,43,,,,752,,43,,,757,,,752,752,752,,,,,,,,,43,,757,,,20,,,,',
',,,,,750,,,,,,750,750,20,,752,,,,20,,,,,,,,,,,,,,,,20,992,,,350,,,21',
',,,,,,,344,1003,,,,,,,,344,,,,,,1012,757,,,,43,,,752,43,,,,340,43,21',
',751,21,,751,751,,,752,,,751,757,,20,,340,1048,,751,751,751,,21,,,,350',
'43,,839,,,,,,,757,,757,,,,43,43,,20,20,,,21,,20,440,,751,,21,,,,15,',
'440,440,,15,,440,440,,757,,,,,,,,,,,752,,,,,,757,1097,1098,1099,750',
',,750,750,15,350,,,20,750,,,,,,,752,750,750,750,751,,,1115,,,,,,,,,15',
',,,751,,,,,752,395,752,,,,,,,,,,750,20,,,,,,,,,,,,,,,,,,,,,752,,344',
',,,,,,,,,15,344,,,,752,,,,15,,15,34,,,,,34,749,749,,,,751,750,,,21,',
',,,21,,34,,,,,,750,,,21,34,34,34,,34,,751,,,,,,,43,,,,440,,,,340,,,',
',,,,,340,751,34,751,21,,,34,34,,,34,,,,,748,748,,,15,43,437,,43,437',
',,,,,,15,,,751,,,15,437,750,,,,,43,,,,,,,751,,,15,,34,,,,,34,34,34,34',
'34,750,34,,,,43,,,21,,,,43,,,,,,,,,,,,,750,21,750,,,,,21,,,,,,,,,,,',
',,,,21,,,,1089,,,,,,,750,,,,,,,,,15,,,,15,,,,750,15,,,,,,,34,34,34,34',
'34,34,34,,749,,,,34,,749,749,,,34,34,34,34,,15,21,,,,,,,,,,,34,,402',
'15,15,,340,,,,,,,,,,,340,,,,21,21,,,,,21,,,,,,,,,,,,,,,,43,,748,34,',
'43,,,748,748,34,34,,,,,43,,,34,,,,,,,,,,,402,,,21,,,,34,,,,34,,,,,34',
',,,,43,,,,,,,,,,,,,,,,,,,,,,,,,34,,,21,,,,,,,,,,,34,34,34,,,,,,749,',
',749,749,,,,,,749,,,34,,,,,749,749,749,,,,43,,,,,,,,,,,,,,,,,,43,,,',
',,43,,,,,,749,,15,,,,,,,,43,,,,1085,,,,748,,,748,748,34,,,,,748,,,,',
',,,748,748,748,,15,,,15,,753,753,,,,,,,,,,,,749,,,,,34,15,,,,,,43,,748',
'34,749,,,,,,,,,293,,,,,,,,15,,,437,,,,15,,,246,43,43,437,437,,,43,437',
'437,314,314,314,,,,,,,,,,361,362,,364,365,,367,748,,,34,,,,,,,,754,754',
'34,314,314,748,,749,,,,,,293,,,43,,34,,,,,,,,,,,,34,,,34,749,,,,,,34',
',,,,,,,,,34,,,,34,,,,,749,,749,43,,,,,,,,,,,,,,,,,748,,34,,,34,34,,',
'34,,,,,749,34,34,,,,34,34,,,,,,748,15,,,749,,15,,,,,,,753,,,,15,,753',
'753,,,,,748,,748,,,,,,,,437,,,,,,,,,,,314,444,,,450,314,15,,,,,,,748',
',,,,450,,,,,,,,,,,,748,246,,,,,,,527,528,529,530,531,532,533,534,535',
'536,537,538,539,540,541,542,543,544,545,546,547,548,,,,754,549,,,,,754',
'754,,,,,,,15,,,,,,,,,34,314,314,,,34,34,,,15,314,,,,,15,34,314,,314',
',,314,314,,,,,,,,15,,,34,1090,,,,,,,,,,,,,,753,,34,753,753,,,,,,753',
',,,,602,,603,753,753,753,,,,,,,,,,,,,,,,,,,,,,15,,,,,,,,,,,,753,,,,',
'34,,,,,,,,,,,,,,34,15,15,,,,,15,,314,,,34,,,,,,34,,,,,754,34,,754,754',
',,,,,754,,,,,,753,34,754,754,754,690,,,,,,,,,,,753,15,,,,,,,,,,,,,,314',
',,,,,,754,,,,,,,722,,,,,,,,,,314,,450,450,450,,34,,15,,,,,,,,,,,,,,',
',,,,,,,,,,,,753,,,34,34,362,754,,,34,,,,,,314,,314,,314,,,754,,,,,753',
',,,,,,,314,,,,,,,,,,450,,,800,,,,753,,753,,314,,34,314,34,34,,,,,,,',
',,,314,314,34,,,,,,,,,314,,,753,,,,,,,,,,754,,,,,,,753,34,,,,,,,,,,',
',314,450,314,,,,857,754,,314,314,450,450,,,,450,450,,,,,,314,,,,,,,',
',754,,754,,,314,,,,,,,,,,,,,,,,,,,,,,,,,690,722,,,754,,,,,,,,,,,,,,',
',,754,,,,,,,,,,,,,,,,,,,,314,,,,,,,,,314,,,314,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,314,,,,,,,,450,,,,,,,,,',
',,,983,984,,,,,,,,,,,,,,,,,,,,,,,,,,,,1007,1008,450,450,450,450,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,1045,,,,,,,,,,,,,,,,,,,,,,,,,,,,314,,,,,,,',
',,,,,,,,,,,314,,,,,,,,,,,,,,,,,,,,,,,,,,,450,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,314' ]
        racc_goto_table = arr = ::Array.new(4506, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'71,33,222,222,12,71,74,74,67,36,36,36,33,105,34,48,110,46,31,34,151',
'114,74,111,71,128,132,132,44,44,92,85,85,13,191,90,71,71,71,108,108',
'19,19,10,168,19,191,89,89,10,34,34,34,24,24,17,17,109,63,69,72,223,41',
'41,71,9,81,81,7,55,55,55,123,56,71,71,71,115,34,85,22,5,231,54,54,227',
'223,78,34,34,34,114,76,76,79,68,19,19,19,19,31,78,180,81,81,81,26,26',
'90,137,26,139,64,87,87,220,220,87,139,71,88,88,88,124,231,86,86,86,71',
'142,71,57,50,34,150,150,139,217,217,122,169,138,34,125,34,2,62,62,62',
'199,13,5,144,88,88,221,185,140,86,228,54,26,26,26,26,186,184,92,3,6',
'171,171,207,207,207,207,35,35,222,14,221,154,171,16,145,10,73,73,93',
'18,93,231,186,154,216,216,36,28,21,8,206,206,25,27,8,42,43,45,49,51',
'59,28,77,71,82,168,168,193,84,74,91,171,33,103,104,71,32,34,112,34,185',
'71,34,113,116,228,117,118,89,34,142,119,120,121,126,34,34,130,71,135',
'136,143,110,26,26,146,40,147,148,144,85,85,34,8,149,152,33,153,155,191',
'26,26,22,22,157,2,22,41,36,36,158,161,185,6,184,162,40,36,69,123,22',
'145,163,123,164,72,165,69,93,93,166,167,170,195,195,173,115,86,86,175',
'150,169,169,217,176,31,177,138,8,181,140,182,188,189,198,33,67,8,71',
'8,1,26,71,185,202,203,71,71,57,122,124,125,34,33,114,204,34,205,208',
'209,34,34,142,19,63,71,210,211,184,63,212,139,169,215,89,81,223,71,225',
'34,89,226,,,33,,227,54,54,,,34,71,71,81,31,50,78,9,78,88,7,93,68,86',
'86,34,34,88,180,,79,114,86,5,35,35,115,64,139,184,11,184,64,222,13,62',
'207,26,207,74,72,33,31,62,,,,,109,193,193,,31,,132,,,,26,,168,193,36',
'184,128,,,41,41,54,,,56,20,,10,20,56,,54,184,5,41,,78,,222,31,17,,20',
',89,222,,108,123,123,89,,193,,36,195,195,,223,54,69,,92,222,36,231,55',
'54,,,41,90,55,,,,32,76,,,,,,,74,,32,,,220,220,,,114,71,71,220,220,8',
'220,24,,,89,54,54,,,139,,,139,,,,,87,150,78,78,217,,,78,78,13,67,,41',
',,,,,36,67,32,,,,89,,,223,92,72,,71,90,,,40,137,,137,71,44,74,,11,,34',
'55,,71,32,,74,,34,132,132,36,93,32,40,89,,34,,,,36,111,81,71,89,139',
'71,,193,,,81,11,74,,32,,34,,74,34,,,,,114,193,71,26,,,,89,,10,36,108',
',,,89,34,,88,114,,28,28,,,74,28,28,,71,,,,74,,,71,,41,,123,123,,34,',
',34,12,40,32,34,,89,,32,32,34,34,,88,,34,34,,,,110,,85,,,11,,,17,,11',
'105,,132,86,222,58,,,,108,58,108,78,22,220,220,220,220,,,,,,22,22,71',
',58,22,22,,71,71,,76,,,58,58,58,48,58,46,67,11,11,,74,151,,,88,222,',
'67,,78,78,78,78,,,,,,,,127,40,58,86,,71,10,58,58,133,,58,133,,,,71,',
',34,19,32,32,32,,,,,,89,34,,89,,81,,,,,,,,71,,137,81,,71,,,220,,,,,28',
'34,58,71,,,34,58,58,58,58,58,,58,,,,34,,,,,,88,,,,10,,8,26,,,,,34,8',
'137,71,137,224,78,137,,,,,,,,85,,34,,85,,,,222,,10,222,,,,,,19,,,,71',
'20,,71,71,,,,22,,71,20,20,,,,20,20,71,71,71,,19,,,58,58,58,58,58,58',
'58,,,,,,58,71,,31,,,58,58,58,58,,,,127,,34,127,71,127,71,40,32,,58,26',
'71,191,,,222,40,40,,34,,,,,,34,,71,114,191,,71,11,,,11,26,,,,,34,,,',
'34,137,,137,,,,,,54,58,,,,,81,71,58,58,,,40,,,,,58,,,,137,,71,127,133',
'127,,127,,127,,,71,,58,,224,,58,224,40,,224,58,224,71,34,,127,40,,,',
',,40,,,33,34,,,,,71,71,,137,,137,71,137,40,58,81,,,,34,34,,,,20,34,',
',58,58,58,,,137,19,19,,71,,,,,,,,,,,,58,,,,36,,,,71,,224,71,224,,224',
'71,224,,,,,,34,40,,34,,74,40,40,,,,,,224,,81,,,71,,71,,,,89,,,,26,26',
'74,,,,,71,40,,,,,,58,,,,,,,34,,,71,,,11,,30,,,,,30,,,,,133,,71,133,11',
',133,,133,,,,30,,,58,,,134,134,134,,30,30,30,58,30,30,30,,,,29,,,,,29',
',11,,,,,,,,,,,40,40,40,,30,,,,,30,30,,40,30,30,30,30,,29,,,,,,,,,,,',
',40,133,,133,58,133,,133,,,,,,,58,29,,,,,,,,,,,133,,30,11,58,,,30,30',
'30,30,30,,30,,,58,,,58,,11,,,,,58,134,134,134,134,,134,,,,58,,,,58,',
',11,29,,,,,,,,,29,,29,,,,,,40,,,,,,58,,,58,58,,,58,,134,134,134,134',
'58,58,,,,58,58,,,134,,,,,,,30,30,30,30,30,30,30,,,,40,,30,,,,,,30,30',
'30,30,,,,,,,,,,,,,,30,,,,11,,,29,,29,11,,29,,,,,,,29,,,,,,29,29,,,,',
',,,,,,,,,,,29,,,,30,,,,,,,30,30,,,,,11,83,,30,,,,,,,,,,,,,,,,102,102',
'30,,,,30,,,,30,30,,,,58,,,,,58,58,,,,,,11,,30,,58,,,,,,,,,,30,,,29,',
',,29,58,,,,29,,30,30,30,,,,,,,,,58,,,,,,,,,,30,,,,,,,29,,,,,,38,,,,',
'38,,,,29,29,,,,,,,,,,,,,,,,,,,,,,,,58,,38,38,38,,,83,83,,,,,,58,,,30',
',,,,,,,,58,,,,38,,58,,,,,,58,,38,38,38,,,,,,,,,,,,58,,,30,,,,,,,,,,30',
',,,,,,,,,,,,,,,,,38,,,,,,,102,,38,,38,,102,102,,,,,,,,,,,83,,83,,58',
'83,83,,,,,,,,,,,30,,,,,,,,30,,30,,,,,,,30,,58,58,,,,,58,30,,,,,,,,,',
',,30,,,30,29,,,,,,30,,,,38,,38,,,38,30,,,,30,,38,,,,,,38,38,,,58,,58',
'58,,,29,,,29,,,,38,,30,58,,30,30,,,30,83,,,,,30,30,29,,,30,30,,,,,,',
',,,,,58,,,,,,,,,,,29,,102,29,,102,102,29,,,,,102,29,29,,,,29,29,102',
'102,102,,,,,83,,,,,,,,,38,,,,38,,,,38,38,,,,65,,,,,,,102,,,,,,,38,,',
',,,,,,,,,38,,,30,,,,,,,,,,,30,38,38,,,,,,,,,,83,,83,,83,,,,,,,,,102',
'30,,,,,30,30,,39,,65,,,39,,102,30,,,,,,,107,107,,,83,,,83,,,65,30,,',
',,,,,29,83,39,39,39,29,,,,30,,,,,,,29,,,,,,,,,,,,,,39,,,,29,,,,,,39',
'39,39,,,83,,102,,,,29,,,83,83,,,,,,,,,,,30,,83,,,,,,102,,,,99,99,30',
',83,,,39,,,,,,,30,,39,,39,,30,102,,102,,,30,,,,,,,,,,,,,,,,30,,29,,30',
',,38,,65,,65,,102,,38,,,,,29,,,,38,,29,,83,,102,,,,,,,83,,,83,,29,,',
'38,,,38,65,,,,,,,,,,39,30,39,,,39,,,,,38,,39,,30,,,107,39,39,98,98,',
'107,107,,,,65,,,,,30,30,39,65,38,65,30,38,,65,29,38,,,83,,,38,38,,,',
'38,38,,65,,,,,70,65,,,,70,,,,,,,29,29,,,,,29,,65,,30,,70,30,,30,30,',
',,,,,,70,70,70,,,30,,,,,,,97,97,,99,39,,,,39,99,99,,39,39,,,70,,,29',
',,,30,,,70,70,70,,,39,,,,,,,,,,,,39,,,38,,,83,,,,,,,,38,39,39,,,,,,29',
',,83,,,70,,,107,,,107,107,65,70,,70,38,107,,,,38,,,,107,107,107,,,,',
'38,,,,,,,,,,,,,,,,,,38,,,,,,,98,,,,107,,98,98,,,38,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,70,,65,,,,99,,,99,99,,70,,,,99,,70,,,107,,,99,99,99,,,',
',,,,,70,,107,,,38,,,,,,,,,,97,,,,,,97,97,38,,99,,,,38,,,,,,,,,,,,,,',
',38,65,,,38,,,39,,,,,,,,39,65,,,,,,,,39,,,,,,65,107,,,,70,,,99,70,,',
',70,70,39,,98,39,,98,98,,,99,,,98,107,,38,,70,65,,98,98,98,,39,,,,38',
'70,,39,,,,,,,107,,107,,,,70,70,,38,38,,,39,,38,39,,98,,39,,,,23,,39',
'39,,23,,39,39,,107,,,,,,,,,,,99,,,,,,107,65,65,65,97,,,97,97,23,38,',
',38,97,,,,,,,99,97,97,97,98,,,65,,,,,,,,,23,,,,98,,,,,99,23,99,,,,,',
',,,,97,38,,,,,,,,,,,,,,,,,,,,,99,,39,,,,,,,,,,23,39,,,,99,,,,23,,23',
'61,,,,,61,96,96,,,,98,97,,,39,,,,,39,,61,,,,,,97,,,39,61,61,61,,61,',
'98,,,,,,,70,,,,39,,,,70,,,,,,,,,70,98,61,98,39,,,61,61,,,61,,,,,95,95',
',,23,70,23,,70,23,,,,,,,23,,,98,,,23,23,97,,,,,70,,,,,,,98,,,23,,61',
',,,,61,61,61,61,61,97,61,,,,70,,,39,,,,70,,,,,,,,,,,,,97,39,97,,,,,39',
',,,,,,,,,,,,,,,39,,,,39,,,,,,,97,,,,,,,,,23,,,,23,,,,97,23,,,,,,,61',
'61,61,61,61,61,61,,96,,,,61,,96,96,,,61,61,61,61,,23,39,,,,,,,,,,,61',
',39,23,23,,70,,,,,,,,,,,70,,,,39,39,,,,,39,,,,,,,,,,,,,,,,70,,95,61',
',70,,,95,95,61,61,,,,,70,,,61,,,,,,,,,,,39,,,39,,,,61,,,,61,,,,,61,',
',,,70,,,,,,,,,,,,,,,,,,,,,,,,,61,,,39,,,,,,,,,,,61,61,61,,,,,,96,,,96',
'96,,,,,,96,,,61,,,,,96,96,96,,,,70,,,,,,,,,,,,,,,,,,70,,,,,,70,,,,,',
'96,,23,,,,,,,,70,,,,70,,,,95,,,95,95,61,,,,,95,,,,,,,,95,95,95,,23,',
',23,,100,100,,,,,,,,,,,,96,,,,,61,23,,,,,,70,,95,61,96,,,,,,,,,70,,',
',,,,,23,,,23,,,,23,,,37,70,70,23,23,,,70,23,23,37,37,37,,,,,,,,,,37',
'37,,37,37,,37,95,,,61,,,,,,,,101,101,61,37,37,95,,96,,,,,,70,,,70,,61',
',,,,,,,,,,,61,,,61,96,,,,,,61,,,,,,,,,,61,,,,61,,,,,96,,96,70,,,,,,',
',,,,,,,,,,95,,61,,,61,61,,,61,,,,,96,61,61,,,,61,61,,,,,,95,23,,,96',
',23,,,,,,,100,,,,23,,100,100,,,,,95,,95,,,,,,,,23,,,,,,,,,,,37,37,,',
'37,37,23,,,,,,,95,,,,,37,,,,,,,,,,,,95,37,,,,,,,37,37,37,37,37,37,37',
'37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,,,,101,37,,,,,101,101,',
',,,,,23,,,,,,,,,61,37,37,,,61,61,,,23,37,,,,,23,61,37,,37,,,37,37,,',
',,,,,23,,,61,23,,,,,,,,,,,,,,100,,61,100,100,,,,,,100,,,,,37,,37,100',
'100,100,,,,,,,,,,,,,,,,,,,,,,23,,,,,,,,,,,,100,,,,,61,,,,,,,,,,,,,,61',
'23,23,,,,,23,,37,,,61,,,,,,61,,,,,101,61,,101,101,,,,,,101,,,,,,100',
'61,101,101,101,37,,,,,,,,,,,100,23,,,,,,,,,,,,,,37,,,,,,,101,,,,,,,37',
',,,,,,,,,37,,37,37,37,,61,,23,,,,,,,,,,,,,,,,,,,,,,,,,,,100,,,61,61',
'37,101,,,61,,,,,,37,,37,,37,,,101,,,,,100,,,,,,,,37,,,,,,,,,,37,,,37',
',,,100,,100,,37,,61,37,61,61,,,,,,,,,,,37,37,61,,,,,,,,,37,,,100,,,',
',,,,,,101,,,,,,,100,61,,,,,,,,,,,,37,37,37,,,,37,101,,37,37,37,37,,',
',37,37,,,,,,37,,,,,,,,,101,,101,,,37,,,,,,,,,,,,,,,,,,,,,,,,,37,37,',
',101,,,,,,,,,,,,,,,,,101,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,37,,,37,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,',
',,37,,,,,,,,,,,,,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,37,37,37,37,37',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,',
',,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37' ]
        racc_goto_check = arr = ::Array.new(4506, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   330,   143,   168,   nil,    76,   162,    63,   197,    56,
  -184,   373,  -465,  -658,  -694,   nil,  -395,    45,   178,   -30,
   237,   122,    56,  2703,  -163,   -14,    35,    70,   -23,  1239,
  1197,  -203,  -225,   -17,    12,   157,   -25,  3356,  1612,  2027,
   233,  -463,   -47,   -47,   -45,  -413,    -9,   nil,   -11,   182,
   103,  -341,   nil,   nil,  -139,    38,  -229,  -432,   716,  -346,
   nil,  2834,   112,    20,    74,  1719,   nil,   -31,    55,  -298,
  2303,    -2,  -339,   109,    -4,   nil,    82,  -216,  -133,    46,
   nil,    27,   163,  1439,   151,    12,    91,  -260,    86,    16,
  -195,  -333,  -287,  -380,   nil,  2389,  2317,  1828,  1737,  1616,
  2799,  2895,  1000,   197,   156,   -56,   nil,  1519,  -342,  -749,
  -371,  -600,   152,  -170,    16,    57,   169,  -134,   171,  -396,
  -589,  -162,  -757,  -419,  -368,  -754,  -652,  -165,  -673,   nil,
  -698,   nil,  -450,    91,   175,  -803,  -695,  -121,  -804,  -584,
  -618,   nil,  -705,  -829,  -928,  -896,  -151,  -576,   176,  -377,
   -96,    -7,  -708,  -707,  -371,   -29,   nil,   -33,   -28,   nil,
   nil,  -486,  -788,  -670,  -918,  -520,  -834,  -661,  -696,  -600,
  -660,  -741,   nil,  -602,   nil,  -599,  -425,  -423,   nil,   nil,
  -639,  -422,  -421,   nil,  -752,  -880,  -972,   nil,  -778,  -777,
   nil,   -53,   nil,  -481,   nil,  -443,   nil,   nil,  -368,  -728,
   nil,   nil,   249,   245,   254,   255,  -211,  -237,   255,   255,
   261,  -290,  -288,   nil,   nil,  -275,  -155,   -93,   nil,   nil,
  -364,  -540,  -228,  -634,   -70,  -330,  -747,  -617,  -965,   nil,
   nil,  -488 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,     6,   388,   331,   nil,
   nil,   469,   nil,   957,   nil,   328,   329,   nil,   nil,   nil,
    13,    14,    22,   244,   nil,   nil,    16,   nil,   438,   245,
   360,   nil,   nil,   635,   248,   nil,    27,    25,   249,   243,
   515,  1032,   nil,   nil,   nil,   nil,   nil,   383,   140,   nil,
   nil,   nil,    28,    29,   796,   nil,   nil,   nil,   348,   nil,
    30,   345,   452,    37,   nil,   nil,    39,    42,    41,   nil,
   240,   241,   400,   nil,   460,   139,    84,   nil,   443,   100,
    51,    54,   280,   320,   nil,   874,   453,   nil,   454,   465,
   nil,   684,   567,   318,   304,    55,    56,    57,    58,    59,
    60,    61,    62,    63,   nil,   305,    69,    70,   nil,   nil,
   nil,   nil,   nil,   nil,   617,   227,   nil,   nil,   nil,   nil,
   nil,   nil,   709,   489,   nil,   710,   711,   477,   471,   472,
  1167,  1049,   nil,   478,   nil,   nil,   nil,   507,   nil,   480,
   nil,   944,   nil,   nil,   nil,   487,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   464,   nil,   nil,   775,
   767,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   919,   nil,   734,   738,   735,   736,   nil,   nil,   737,   739,
   nil,   nil,   nil,   918,   920,   nil,   921,  1017,  1018,  1019,
  1020,   nil,  1024,   498,  1025,   743,   744,   745,   nil,   nil,
    83,    85,    86,   nil,   nil,   nil,   nil,   645,   nil,   nil,
   nil,   nil,   nil,    96,    97,   nil,   228,   881,   231,   476,
   696,   479,   893,   492,   494,   495,  1060,   499,  1061,   502,
   505,   323 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  0, 151, :_reduce_4,
  1, 151, :_reduce_5,
  3, 151, :_reduce_6,
  2, 151, :_reduce_7,
  1, 153, :_reduce_none,
  2, 153, :_reduce_9,
  3, 156, :_reduce_10,
  4, 157, :_reduce_11,
  2, 158, :_reduce_12,
  0, 162, :_reduce_13,
  1, 162, :_reduce_14,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  1, 163, :_reduce_none,
  2, 163, :_reduce_18,
  0, 174, :_reduce_19,
  4, 155, :_reduce_20,
  3, 155, :_reduce_21,
  3, 155, :_reduce_22,
  3, 155, :_reduce_23,
  2, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  3, 155, :_reduce_28,
  3, 155, :_reduce_29,
  4, 155, :_reduce_30,
  1, 155, :_reduce_none,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  5, 155, :_reduce_34,
  3, 155, :_reduce_35,
  1, 155, :_reduce_none,
  3, 167, :_reduce_37,
  3, 167, :_reduce_38,
  6, 167, :_reduce_39,
  5, 167, :_reduce_40,
  5, 167, :_reduce_41,
  5, 167, :_reduce_42,
  5, 167, :_reduce_43,
  4, 167, :_reduce_44,
  6, 167, :_reduce_45,
  4, 167, :_reduce_46,
  6, 167, :_reduce_47,
  3, 167, :_reduce_48,
  1, 175, :_reduce_none,
  3, 175, :_reduce_50,
  1, 175, :_reduce_none,
  1, 173, :_reduce_none,
  3, 173, :_reduce_53,
  3, 173, :_reduce_54,
  3, 173, :_reduce_55,
  2, 173, :_reduce_56,
  0, 189, :_reduce_57,
  4, 173, :_reduce_58,
  0, 190, :_reduce_59,
  4, 173, :_reduce_60,
  1, 173, :_reduce_none,
  1, 166, :_reduce_none,
  0, 194, :_reduce_63,
  3, 191, :_reduce_64,
  1, 193, :_reduce_65,
  2, 181, :_reduce_66,
  0, 198, :_reduce_67,
  5, 185, :_reduce_68,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 199, :_reduce_none,
  4, 199, :_reduce_72,
  0, 206, :_reduce_73,
  4, 203, :_reduce_74,
  1, 205, :_reduce_none,
  2, 183, :_reduce_76,
  3, 183, :_reduce_77,
  4, 183, :_reduce_78,
  5, 183, :_reduce_79,
  4, 183, :_reduce_80,
  5, 183, :_reduce_81,
  2, 183, :_reduce_82,
  2, 183, :_reduce_83,
  2, 183, :_reduce_84,
  2, 183, :_reduce_85,
  2, 183, :_reduce_86,
  1, 168, :_reduce_87,
  3, 168, :_reduce_88,
  1, 211, :_reduce_89,
  3, 211, :_reduce_90,
  1, 210, :_reduce_none,
  2, 210, :_reduce_92,
  3, 210, :_reduce_93,
  5, 210, :_reduce_94,
  2, 210, :_reduce_95,
  4, 210, :_reduce_96,
  2, 210, :_reduce_97,
  4, 210, :_reduce_98,
  1, 210, :_reduce_99,
  3, 210, :_reduce_100,
  1, 214, :_reduce_none,
  3, 214, :_reduce_102,
  2, 213, :_reduce_103,
  3, 213, :_reduce_104,
  1, 216, :_reduce_105,
  3, 216, :_reduce_106,
  1, 215, :_reduce_107,
  1, 215, :_reduce_108,
  4, 215, :_reduce_109,
  3, 215, :_reduce_110,
  3, 215, :_reduce_111,
  3, 215, :_reduce_112,
  3, 215, :_reduce_113,
  2, 215, :_reduce_114,
  1, 215, :_reduce_115,
  1, 170, :_reduce_116,
  1, 170, :_reduce_117,
  4, 170, :_reduce_118,
  3, 170, :_reduce_119,
  3, 170, :_reduce_120,
  3, 170, :_reduce_121,
  3, 170, :_reduce_122,
  2, 170, :_reduce_123,
  1, 170, :_reduce_124,
  1, 219, :_reduce_125,
  1, 219, :_reduce_none,
  2, 220, :_reduce_127,
  1, 220, :_reduce_128,
  3, 220, :_reduce_129,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 164, :_reduce_135,
  1, 164, :_reduce_none,
  1, 165, :_reduce_137,
  0, 224, :_reduce_138,
  4, 165, :_reduce_139,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  3, 184, :_reduce_211,
  3, 184, :_reduce_212,
  6, 184, :_reduce_213,
  5, 184, :_reduce_214,
  5, 184, :_reduce_215,
  5, 184, :_reduce_216,
  5, 184, :_reduce_217,
  4, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 184, :_reduce_220,
  3, 184, :_reduce_221,
  2, 184, :_reduce_222,
  2, 184, :_reduce_223,
  2, 184, :_reduce_224,
  2, 184, :_reduce_225,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  3, 184, :_reduce_230,
  3, 184, :_reduce_231,
  4, 184, :_reduce_232,
  2, 184, :_reduce_233,
  2, 184, :_reduce_234,
  3, 184, :_reduce_235,
  3, 184, :_reduce_236,
  3, 184, :_reduce_237,
  3, 184, :_reduce_238,
  1, 184, :_reduce_none,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  3, 184, :_reduce_242,
  3, 184, :_reduce_243,
  3, 184, :_reduce_244,
  2, 184, :_reduce_245,
  2, 184, :_reduce_246,
  3, 184, :_reduce_247,
  3, 184, :_reduce_248,
  3, 184, :_reduce_249,
  3, 184, :_reduce_250,
  3, 184, :_reduce_251,
  6, 184, :_reduce_252,
  4, 184, :_reduce_253,
  6, 184, :_reduce_254,
  4, 184, :_reduce_255,
  6, 184, :_reduce_256,
  1, 184, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  3, 227, :_reduce_262,
  3, 227, :_reduce_263,
  1, 230, :_reduce_none,
  1, 231, :_reduce_none,
  2, 231, :_reduce_none,
  4, 231, :_reduce_267,
  2, 231, :_reduce_268,
  1, 225, :_reduce_none,
  3, 225, :_reduce_270,
  3, 236, :_reduce_271,
  5, 236, :_reduce_272,
  3, 236, :_reduce_273,
  0, 238, :_reduce_274,
  1, 238, :_reduce_none,
  0, 178, :_reduce_276,
  1, 178, :_reduce_none,
  2, 178, :_reduce_none,
  4, 178, :_reduce_279,
  2, 178, :_reduce_280,
  1, 209, :_reduce_281,
  2, 209, :_reduce_282,
  2, 209, :_reduce_283,
  4, 209, :_reduce_284,
  1, 209, :_reduce_285,
  0, 241, :_reduce_286,
  2, 202, :_reduce_287,
  2, 240, :_reduce_288,
  2, 239, :_reduce_289,
  0, 239, :_reduce_290,
  1, 233, :_reduce_291,
  2, 233, :_reduce_292,
  3, 233, :_reduce_293,
  4, 233, :_reduce_294,
  1, 172, :_reduce_295,
  1, 172, :_reduce_none,
  3, 171, :_reduce_297,
  4, 171, :_reduce_298,
  2, 171, :_reduce_299,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_310,
  0, 263, :_reduce_311,
  4, 228, :_reduce_312,
  0, 264, :_reduce_313,
  4, 228, :_reduce_314,
  0, 265, :_reduce_315,
  4, 228, :_reduce_316,
  3, 228, :_reduce_317,
  3, 228, :_reduce_318,
  2, 228, :_reduce_319,
  3, 228, :_reduce_320,
  3, 228, :_reduce_321,
  1, 228, :_reduce_322,
  4, 228, :_reduce_323,
  3, 228, :_reduce_324,
  1, 228, :_reduce_325,
  5, 228, :_reduce_326,
  4, 228, :_reduce_327,
  3, 228, :_reduce_328,
  2, 228, :_reduce_329,
  1, 228, :_reduce_none,
  2, 228, :_reduce_331,
  1, 228, :_reduce_none,
  6, 228, :_reduce_333,
  6, 228, :_reduce_334,
  4, 228, :_reduce_335,
  4, 228, :_reduce_336,
  5, 228, :_reduce_337,
  4, 228, :_reduce_338,
  5, 228, :_reduce_339,
  6, 228, :_reduce_340,
  0, 266, :_reduce_341,
  6, 228, :_reduce_342,
  0, 267, :_reduce_343,
  7, 228, :_reduce_344,
  0, 268, :_reduce_345,
  5, 228, :_reduce_346,
  4, 228, :_reduce_347,
  4, 228, :_reduce_348,
  1, 228, :_reduce_349,
  1, 228, :_reduce_350,
  1, 228, :_reduce_351,
  1, 228, :_reduce_352,
  1, 177, :_reduce_none,
  1, 208, :_reduce_354,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  2, 255, :_reduce_357,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 256, :_reduce_none,
  5, 256, :_reduce_361,
  1, 160, :_reduce_none,
  2, 160, :_reduce_363,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 269, :_reduce_366,
  3, 269, :_reduce_367,
  1, 272, :_reduce_368,
  3, 272, :_reduce_369,
  1, 271, :_reduce_none,
  3, 271, :_reduce_371,
  5, 271, :_reduce_372,
  1, 271, :_reduce_373,
  3, 271, :_reduce_374,
  2, 273, :_reduce_375,
  1, 273, :_reduce_376,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  4, 277, :_reduce_379,
  2, 277, :_reduce_380,
  2, 277, :_reduce_381,
  1, 277, :_reduce_382,
  2, 281, :_reduce_383,
  0, 281, :_reduce_384,
  1, 282, :_reduce_none,
  6, 283, :_reduce_386,
  8, 283, :_reduce_387,
  4, 283, :_reduce_388,
  6, 283, :_reduce_389,
  4, 283, :_reduce_390,
  2, 283, :_reduce_none,
  6, 283, :_reduce_392,
  2, 283, :_reduce_393,
  4, 283, :_reduce_394,
  6, 283, :_reduce_395,
  2, 283, :_reduce_396,
  4, 283, :_reduce_397,
  2, 283, :_reduce_398,
  4, 283, :_reduce_399,
  1, 283, :_reduce_none,
  0, 287, :_reduce_401,
  1, 287, :_reduce_402,
  3, 288, :_reduce_403,
  4, 288, :_reduce_404,
  1, 289, :_reduce_405,
  4, 289, :_reduce_406,
  1, 290, :_reduce_407,
  3, 290, :_reduce_408,
  1, 291, :_reduce_409,
  1, 291, :_reduce_none,
  0, 295, :_reduce_411,
  0, 296, :_reduce_412,
  5, 254, :_reduce_413,
  4, 293, :_reduce_414,
  1, 293, :_reduce_415,
  0, 299, :_reduce_416,
  4, 294, :_reduce_417,
  0, 300, :_reduce_418,
  4, 294, :_reduce_419,
  0, 302, :_reduce_420,
  4, 298, :_reduce_421,
  2, 200, :_reduce_422,
  4, 200, :_reduce_423,
  5, 200, :_reduce_424,
  5, 200, :_reduce_425,
  2, 253, :_reduce_426,
  4, 253, :_reduce_427,
  4, 253, :_reduce_428,
  3, 253, :_reduce_429,
  3, 253, :_reduce_430,
  3, 253, :_reduce_431,
  2, 253, :_reduce_432,
  1, 253, :_reduce_433,
  4, 253, :_reduce_434,
  0, 304, :_reduce_435,
  4, 252, :_reduce_436,
  0, 305, :_reduce_437,
  4, 252, :_reduce_438,
  0, 306, :_reduce_439,
  3, 204, :_reduce_440,
  0, 307, :_reduce_441,
  0, 308, :_reduce_442,
  4, 301, :_reduce_443,
  5, 257, :_reduce_444,
  1, 309, :_reduce_445,
  1, 309, :_reduce_none,
  0, 312, :_reduce_447,
  0, 313, :_reduce_448,
  7, 258, :_reduce_449,
  1, 311, :_reduce_450,
  1, 311, :_reduce_none,
  1, 310, :_reduce_452,
  3, 310, :_reduce_453,
  3, 310, :_reduce_454,
  1, 314, :_reduce_none,
  2, 314, :_reduce_456,
  3, 314, :_reduce_457,
  1, 314, :_reduce_458,
  1, 314, :_reduce_459,
  1, 314, :_reduce_460,
  1, 188, :_reduce_none,
  3, 319, :_reduce_462,
  1, 319, :_reduce_none,
  3, 321, :_reduce_464,
  1, 321, :_reduce_none,
  1, 323, :_reduce_466,
  1, 324, :_reduce_467,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  4, 322, :_reduce_470,
  4, 322, :_reduce_471,
  4, 322, :_reduce_472,
  3, 322, :_reduce_473,
  4, 322, :_reduce_474,
  4, 322, :_reduce_475,
  4, 322, :_reduce_476,
  3, 322, :_reduce_477,
  3, 322, :_reduce_478,
  3, 322, :_reduce_479,
  2, 322, :_reduce_480,
  0, 328, :_reduce_481,
  4, 322, :_reduce_482,
  2, 322, :_reduce_483,
  0, 329, :_reduce_484,
  4, 322, :_reduce_485,
  1, 315, :_reduce_486,
  1, 315, :_reduce_487,
  2, 315, :_reduce_488,
  3, 315, :_reduce_489,
  5, 315, :_reduce_490,
  2, 315, :_reduce_491,
  4, 315, :_reduce_492,
  1, 315, :_reduce_none,
  2, 330, :_reduce_494,
  3, 330, :_reduce_495,
  1, 317, :_reduce_496,
  3, 317, :_reduce_497,
  5, 316, :_reduce_498,
  2, 333, :_reduce_499,
  1, 333, :_reduce_500,
  1, 332, :_reduce_501,
  3, 332, :_reduce_502,
  1, 331, :_reduce_none,
  3, 318, :_reduce_504,
  1, 318, :_reduce_505,
  2, 318, :_reduce_506,
  1, 318, :_reduce_507,
  1, 334, :_reduce_508,
  3, 334, :_reduce_509,
  2, 336, :_reduce_510,
  1, 336, :_reduce_511,
  1, 337, :_reduce_512,
  3, 337, :_reduce_513,
  2, 339, :_reduce_514,
  1, 339, :_reduce_515,
  2, 341, :_reduce_516,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  1, 325, :_reduce_none,
  3, 325, :_reduce_520,
  3, 325, :_reduce_521,
  2, 325, :_reduce_522,
  2, 325, :_reduce_523,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 325, :_reduce_527,
  2, 325, :_reduce_528,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_537,
  1, 342, :_reduce_none,
  1, 320, :_reduce_539,
  2, 343, :_reduce_540,
  4, 344, :_reduce_541,
  2, 326, :_reduce_542,
  3, 326, :_reduce_543,
  1, 326, :_reduce_544,
  6, 159, :_reduce_545,
  0, 159, :_reduce_546,
  1, 345, :_reduce_547,
  1, 345, :_reduce_none,
  1, 345, :_reduce_none,
  2, 346, :_reduce_550,
  1, 346, :_reduce_none,
  2, 161, :_reduce_552,
  1, 161, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 243, :_reduce_556,
  1, 348, :_reduce_557,
  2, 348, :_reduce_558,
  3, 349, :_reduce_559,
  1, 349, :_reduce_560,
  1, 349, :_reduce_561,
  3, 244, :_reduce_562,
  4, 245, :_reduce_563,
  3, 246, :_reduce_564,
  0, 352, :_reduce_565,
  3, 352, :_reduce_566,
  1, 353, :_reduce_567,
  2, 353, :_reduce_568,
  3, 248, :_reduce_569,
  0, 355, :_reduce_570,
  3, 355, :_reduce_571,
  3, 247, :_reduce_572,
  3, 249, :_reduce_573,
  0, 356, :_reduce_574,
  3, 356, :_reduce_575,
  0, 357, :_reduce_576,
  3, 357, :_reduce_577,
  0, 338, :_reduce_578,
  2, 338, :_reduce_579,
  0, 350, :_reduce_580,
  2, 350, :_reduce_581,
  0, 351, :_reduce_582,
  2, 351, :_reduce_583,
  1, 354, :_reduce_584,
  2, 354, :_reduce_585,
  0, 359, :_reduce_586,
  4, 354, :_reduce_587,
  1, 358, :_reduce_588,
  1, 358, :_reduce_589,
  1, 358, :_reduce_590,
  1, 358, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 360, :_reduce_594,
  3, 361, :_reduce_595,
  1, 347, :_reduce_596,
  2, 347, :_reduce_597,
  1, 226, :_reduce_598,
  1, 226, :_reduce_599,
  1, 226, :_reduce_600,
  1, 226, :_reduce_601,
  1, 217, :_reduce_602,
  1, 217, :_reduce_603,
  1, 217, :_reduce_604,
  1, 217, :_reduce_605,
  1, 217, :_reduce_606,
  1, 218, :_reduce_607,
  1, 218, :_reduce_608,
  1, 218, :_reduce_609,
  1, 218, :_reduce_610,
  1, 218, :_reduce_611,
  1, 218, :_reduce_612,
  1, 218, :_reduce_613,
  1, 250, :_reduce_614,
  1, 250, :_reduce_615,
  1, 176, :_reduce_616,
  1, 176, :_reduce_617,
  1, 186, :_reduce_618,
  1, 186, :_reduce_619,
  0, 362, :_reduce_620,
  4, 260, :_reduce_621,
  0, 260, :_reduce_622,
  1, 182, :_reduce_none,
  1, 182, :_reduce_624,
  3, 363, :_reduce_625,
  5, 363, :_reduce_626,
  3, 363, :_reduce_627,
  1, 262, :_reduce_none,
  0, 365, :_reduce_629,
  3, 262, :_reduce_630,
  4, 364, :_reduce_631,
  2, 364, :_reduce_632,
  2, 364, :_reduce_633,
  1, 364, :_reduce_634,
  2, 367, :_reduce_635,
  0, 367, :_reduce_636,
  6, 297, :_reduce_637,
  8, 297, :_reduce_638,
  4, 297, :_reduce_639,
  6, 297, :_reduce_640,
  4, 297, :_reduce_641,
  6, 297, :_reduce_642,
  2, 297, :_reduce_643,
  4, 297, :_reduce_644,
  6, 297, :_reduce_645,
  2, 297, :_reduce_646,
  4, 297, :_reduce_647,
  2, 297, :_reduce_648,
  4, 297, :_reduce_649,
  1, 297, :_reduce_650,
  0, 297, :_reduce_651,
  1, 237, :_reduce_652,
  1, 292, :_reduce_653,
  1, 292, :_reduce_654,
  1, 292, :_reduce_655,
  1, 292, :_reduce_656,
  1, 270, :_reduce_none,
  1, 270, :_reduce_658,
  1, 369, :_reduce_659,
  1, 370, :_reduce_660,
  3, 370, :_reduce_661,
  1, 284, :_reduce_662,
  3, 284, :_reduce_663,
  1, 371, :_reduce_664,
  2, 372, :_reduce_665,
  1, 372, :_reduce_666,
  2, 373, :_reduce_667,
  1, 373, :_reduce_668,
  1, 278, :_reduce_669,
  3, 278, :_reduce_670,
  1, 366, :_reduce_671,
  3, 366, :_reduce_672,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 276, :_reduce_675,
  2, 275, :_reduce_676,
  1, 275, :_reduce_677,
  3, 374, :_reduce_678,
  3, 375, :_reduce_679,
  1, 285, :_reduce_680,
  3, 285, :_reduce_681,
  1, 368, :_reduce_682,
  3, 368, :_reduce_683,
  1, 376, :_reduce_none,
  1, 376, :_reduce_none,
  2, 286, :_reduce_686,
  1, 286, :_reduce_687,
  1, 377, :_reduce_none,
  1, 377, :_reduce_none,
  2, 280, :_reduce_690,
  2, 279, :_reduce_691,
  0, 279, :_reduce_692,
  1, 196, :_reduce_none,
  3, 196, :_reduce_694,
  0, 251, :_reduce_695,
  2, 251, :_reduce_none,
  1, 235, :_reduce_697,
  3, 235, :_reduce_698,
  3, 378, :_reduce_699,
  2, 378, :_reduce_700,
  4, 378, :_reduce_701,
  2, 378, :_reduce_702,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 180, :_reduce_715,
  1, 180, :_reduce_716,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 212, :_reduce_721,
  2, 179, :_reduce_722,
  2, 327, :_reduce_723,
  0, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 261, :_reduce_727,
  1, 261, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 232, :_reduce_731 ]

racc_reduce_n = 732

racc_shift_n = 1232

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@2",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "defn_head",
  "f_opt_paren_args",
  "command",
  "arg",
  "defs_head",
  "backref",
  "opt_nl",
  "p_expr",
  "@3",
  "@4",
  "expr_value_do",
  "do",
  "def_name",
  "@5",
  "fname",
  "singleton",
  "dot_or_colon",
  "@6",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@7",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "op",
  "reswords",
  "symbol",
  "@8",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@9",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "f_any_kwrest",
  "f_kwrest",
  "f_no_kwarg",
  "block_args_tail",
  "f_block_kwarg",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "excessed_comma",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@16",
  "@17",
  "f_args",
  "do_block",
  "@18",
  "@19",
  "do_body",
  "@20",
  "operation3",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "cases",
  "p_top_expr",
  "p_cases",
  "@26",
  "@27",
  "p_top_expr_body",
  "p_args",
  "p_find",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@28",
  "@29",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_rest",
  "p_kwarg",
  "p_any_kwrest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "p_kwrest",
  "kwrest_mark",
  "p_kwnorest",
  "p_primitive",
  "p_var_ref",
  "p_expr_ref",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@30",
  "ssym",
  "dsym",
  "@31",
  "f_paren_args",
  "args_tail",
  "@32",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      @current_arg_stack.push(nil)
                      @max_numparam_stack.push
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]

                      @current_arg_stack.pop
                      @max_numparam_stack.pop
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = val
                    
    result
end

def _reduce_11(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_13(val, _values, result)
                      result = []
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_19(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_23(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 31 omitted

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_34(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_44(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_45(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_46(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_47(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_48(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_55(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_57(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_58(val, _values, result)
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[2]
                      result = @builder.match_pattern(val[0], val[1], val[3])
                    
    result
end

def _reduce_59(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_60(val, _values, result)
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[2]
                      result = @builder.match_pattern_p(val[0], val[1], val[3])
                    
    result
end

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_64(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

def _reduce_65(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @current_arg_stack.push(nil)

                      result = val[0]
                    
    result
end

def _reduce_66(val, _values, result)
                      @context.push(:def)

                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_67(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_68(val, _values, result)
                      @context.push(:defs)

                      result = [ val[0], val[1], val[2], val[4] ]
                    
    result
end

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 75 omitted

def _reduce_76(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_79(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 91 omitted

def _reduce_92(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 101 omitted

def _reduce_102(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_104(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_106(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_110(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_112(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_117(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_119(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_120(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_121(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_122(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_123(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_124(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_125(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 126 omitted

def _reduce_127(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_128(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_129(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

def _reduce_135(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 136 omitted

def _reduce_137(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_138(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_139(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

def _reduce_211(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_217(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_218(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_244(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_246(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_247(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_249(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_250(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_251(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_252(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

def _reduce_253(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_254(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_255(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_256(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

def _reduce_267(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_268(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 269 omitted

def _reduce_270(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val
                    
    result
end

def _reduce_272(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[3]
                      end

                      result = [val[0], [*val[1], @builder.forwarded_args(val[3])], val[4]]
                    
    result
end

def _reduce_273(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = []
                    
    result
end

# reduce 277 omitted

# reduce 278 omitted

def _reduce_279(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_280(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_284(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_286(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_287(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = []
                    
    result
end

def _reduce_291(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_292(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_293(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 296 omitted

def _reduce_297(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_298(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

def _reduce_310(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_312(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_326(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_329(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 330 omitted

def _reduce_331(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 332 omitted

def _reduce_333(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_334(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_336(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_337(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_338(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_339(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_340(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_341(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_342(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_343(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_344(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_345(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:module)
                    
    result
end

def _reduce_346(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_347(val, _values, result)
                      result = @builder.def_method(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.def_singleton(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_349(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 355 omitted

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 362 omitted

def _reduce_363(val, _values, result)
                      result = val
                    
    result
end

# reduce 364 omitted

# reduce 365 omitted

def _reduce_366(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_374(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_375(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

# reduce 377 omitted

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_384(val, _values, result)
                      result = []
                    
    result
end

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_393(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_394(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 400 omitted

def _reduce_401(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_402(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_403(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_404(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_405(val, _values, result)
                      result = []
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_407(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_409(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 410 omitted

def _reduce_411(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_412(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_413(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      begin_t, body, end_t = val[4]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop

                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_415(val, _values, result)
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_416(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_418(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_420(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_422(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_423(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_424(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_425(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_426(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_427(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_428(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_429(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_430(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_431(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_432(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_433(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_434(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_435(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_436(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_437(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_438(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_439(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_440(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_441(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_442(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_443(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_444(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_448(val, _values, result)
                      @pattern_variables.pop
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 455 omitted

def _reduce_456(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.find_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 468 omitted

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_471(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_472(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_473(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_474(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_475(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_476(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_477(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.array_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.find_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      @pattern_hash_keys.push
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = false
                    
    result
end

def _reduce_482(val, _values, result)
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_484(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_485(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_487(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_489(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_490(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 493 omitted

def _reduce_494(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_495(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_497(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [ val[0], *val[2], val[4] ]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.match_rest(val[0], val[1])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.match_rest(val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_502(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 503 omitted

def _reduce_504(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_508(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_509(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_512(val, _values, result)
                    result = [:label, val[0]]
                  
    result
end

def _reduce_513(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_514(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_515(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 517 omitted

# reduce 518 omitted

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_523(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

def _reduce_527(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

def _reduce_537(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

# reduce 538 omitted

def _reduce_539(val, _values, result)
                      result = @builder.match_var(val[0])
                    
    result
end

def _reduce_540(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_541(val, _values, result)
                      expr = @builder.begin(val[1], val[2], val[3])
                      result = @builder.pin(val[0], expr)
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_544(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_545(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = []
                    
    result
end

def _reduce_547(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 548 omitted

# reduce 549 omitted

def _reduce_550(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

# reduce 555 omitted

def _reduce_556(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_557(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_559(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_560(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_561(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_562(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_563(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_564(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_565(val, _values, result)
                      result = []
                    
    result
end

def _reduce_566(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_567(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_568(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_569(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_570(val, _values, result)
                      result = []
                    
    result
end

def _reduce_571(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = []
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = []
                    
    result
end

def _reduce_577(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = []
                    
    result
end

def _reduce_579(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_580(val, _values, result)
                      result = []
                    
    result
end

def _reduce_581(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_582(val, _values, result)
                      result = []
                    
    result
end

def _reduce_583(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_584(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_586(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_587(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_588(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_590(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 591 omitted

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_597(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_598(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_599(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_600(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_601(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_602(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_603(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_604(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_605(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_606(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_607(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_608(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_609(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_610(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_611(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_612(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_614(val, _values, result)
                      if (node = val[0]) && node.type == :ident
                        name = node.children[0]

                        if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && context.in_dynamic_block?
                          # definitely an implicit param
                          location = node.loc.expression

                          if max_numparam_stack.has_ordinary_params?
                            diagnostic :error, :ordinary_param_defined, nil, [nil, location]
                          end

                          raw_context = context.stack.dup
                          raw_max_numparam_stack = max_numparam_stack.stack.dup

                          # ignore current block scope
                          raw_context.pop
                          raw_max_numparam_stack.pop

                          raw_context.reverse_each do |outer_scope|
                            if outer_scope == :block || outer_scope == :lambda
                              outer_scope_has_numparams = raw_max_numparam_stack.pop > 0

                              if outer_scope_has_numparams
                                diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
                              else
                                # for now it's ok, but an outer scope can also be a block
                                # with numparams, so we need to continue
                              end
                            else
                              # found an outer scope that can't have numparams
                              # like def/class/etc
                              break
                            end
                          end

                          static_env.declare(name)
                          max_numparam_stack.register(name[1].to_i)
                        end
                      end

                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_615(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_616(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_617(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_618(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_620(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_621(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_622(val, _values, result)
                      result = nil
                    
    result
end

# reduce 623 omitted

def _reduce_624(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_625(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_626(val, _values, result)
                      args = [ *val[1], @builder.forward_arg(val[3]) ]
                      result = @builder.args(val[0], args, val[4])

                      @static_env.declare_forward_args
                    
    result
end

def _reduce_627(val, _values, result)
                      result = @builder.forward_only_args(val[0], val[1], val[2])
                      @static_env.declare_forward_args

                      @lexer.state = :expr_value
                    
    result
end

# reduce 628 omitted

def _reduce_629(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_630(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_631(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_632(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_633(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_634(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_635(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_636(val, _values, result)
                      result = []
                    
    result
end

def _reduce_637(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_638(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_639(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_640(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_641(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_642(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_643(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_644(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_645(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_646(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_647(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_648(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_649(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_650(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_651(val, _values, result)
                      result = []
                    
    result
end

def _reduce_652(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_653(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_654(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_655(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_656(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 657 omitted

def _reduce_658(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_659(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_660(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_661(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_662(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_663(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_664(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])

                      result = val[0]
                    
    result
end

def _reduce_665(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_666(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_667(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_668(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_669(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_670(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_671(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_672(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 673 omitted

# reduce 674 omitted

def _reduce_675(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_676(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_677(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_678(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_679(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_680(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_681(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_682(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_683(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 684 omitted

# reduce 685 omitted

def _reduce_686(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_687(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 688 omitted

# reduce 689 omitted

def _reduce_690(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_691(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_692(val, _values, result)
                      result = []
                    
    result
end

# reduce 693 omitted

def _reduce_694(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_695(val, _values, result)
                      result = []
                    
    result
end

# reduce 696 omitted

def _reduce_697(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_698(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_699(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_700(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_701(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_702(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 703 omitted

# reduce 704 omitted

# reduce 705 omitted

# reduce 706 omitted

# reduce 707 omitted

# reduce 708 omitted

# reduce 709 omitted

# reduce 710 omitted

# reduce 711 omitted

# reduce 712 omitted

# reduce 713 omitted

# reduce 714 omitted

def _reduce_715(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_716(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 717 omitted

# reduce 718 omitted

# reduce 719 omitted

# reduce 720 omitted

def _reduce_721(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_722(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_723(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 724 omitted

# reduce 725 omitted

# reduce 726 omitted

def _reduce_727(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 728 omitted

# reduce 729 omitted

# reduce 730 omitted

def _reduce_731(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby31
  end   # module Parser
