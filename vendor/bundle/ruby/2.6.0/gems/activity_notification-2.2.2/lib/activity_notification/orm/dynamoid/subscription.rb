require 'dynamoid'
require 'activity_notification/apis/subscription_api'

module ActivityNotification
  module ORM
    module Dynamoid
      # Subscription model implementation generated by ActivityNotification.
      class Subscription
        include ::Dynamoid::Document
        include ActiveModel::AttributeAssignment
        include DynamoidExtension
        include Association
        include SubscriptionApi

        table name: ActivityNotification.config.subscription_table_name, key: :id

        # Belongs to target instance of this subscription as polymorphic association using composite key.
        # @scope instance
        # @return [Object] Target instance of this subscription
        belongs_to_composite_xdb_record :target

        field :key,                       :string
        field :subscribing,               :boolean, default: ActivityNotification.config.subscribe_as_default
        field :subscribing_to_email,      :boolean, default: ActivityNotification.config.subscribe_to_email_as_default
        field :subscribed_at,             :datetime
        field :unsubscribed_at,           :datetime
        field :subscribed_to_email_at,    :datetime
        field :unsubscribed_to_email_at,  :datetime
        field :optional_targets,          :raw,     default: {}

        global_secondary_index name: :index_target_key_created_at, hash_key: :target_key, range_key: :created_at, projected_attributes: :all

        validates  :target,               presence: true
        validates  :key,                  presence: true, uniqueness: { scope: :target_key }
        validates_inclusion_of :subscribing,          in: [true, false]
        validates_inclusion_of :subscribing_to_email, in: [true, false]
        validate   :subscribing_to_email_cannot_be_true_when_subscribing_is_false
        validates  :subscribed_at,            presence: true, if:     :subscribing
        validates  :unsubscribed_at,          presence: true, unless: :subscribing
        validates  :subscribed_to_email_at,   presence: true, if:     :subscribing_to_email
        validates  :unsubscribed_to_email_at, presence: true, unless: :subscribing_to_email
        validate   :subscribing_to_optional_target_cannot_be_true_when_subscribing_is_false

        %i[ filtered_by_association filtered_by_target
            filtered_by_target_type filtered_by_key filtered_by_options
            latest_order earliest_order latest_order! earliest_order!
            latest_subscribed_order earliest_subscribed_order key_order
            reload
            uniq_keys
          ].each do |method|
          # Return a criteria chain in response to a method that will begin or end a chain.
          # For more information, see Dynamoid::Criteria::Chain.
          singleton_class.send(:define_method, method) do |*args, &block|
            # Use scan_index_forward with true as default value to convert Dynamoid::Document into Dynamoid::Criteria::Chain
            # https://github.com/Dynamoid/dynamoid/blob/master/lib/dynamoid/document.rb
            # https://github.com/Dynamoid/dynamoid/blob/master/lib/dynamoid/components.rb
            # https://github.com/Dynamoid/dynamoid/blob/master/lib/dynamoid/criteria.rb
            # https://github.com/Dynamoid/dynamoid/blob/master/lib/dynamoid/criteria/chain.rb
            scan_index_forward(true).send(method, *args, &block)
          end
        end

        %i[ with_target ].each do |method|
          singleton_class.send(:define_method, method) do |*args, &block|
            self
          end
        end

        # Initialize without options to use Dynamoid.config.store_datetime_as_string
        # https://github.com/Dynamoid/dynamoid/blob/master/lib/dynamoid/dumping.rb
        @@date_time_dumper = ::Dynamoid::Dumping::DateTimeDumper.new({})

        # Convert Time value to store in database as Hash value.
        # @param [Time] time Time value to store in database as Hash value
        # @return [Integer, String] Converted Time value
        def self.convert_time_as_hash(time)
          @@date_time_dumper.process(time)
        end
      end
    end
  end
end
