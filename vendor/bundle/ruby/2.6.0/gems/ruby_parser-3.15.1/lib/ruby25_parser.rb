#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby25Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-629,285,285,-116,587,-115,285,-629,-629,-629,-116,-110,832,-629,-629',
'590,-629,-537,861,-104,-110,832,235,236,-537,-629,1046,285,-102,273',
'274,231,-111,-113,-94,236,-629,-629,281,-629,-629,-629,-629,-629,992',
'-109,831,-114,598,597,-80,-101,-108,-103,763,831,509,-111,236,-115,850',
'602,602,-108,272,271,851,-629,-629,-629,-629,-629,-629,-629,-629,-629',
'-629,-629,-629,-629,-629,-113,591,-629,-629,-629,-104,676,287,287,235',
'-629,-436,287,-629,-102,232,225,226,-629,480,-629,602,-629,-629,-629',
'-629,-629,-629,-629,-106,-629,-629,-629,287,-107,-101,-116,-101,-625',
'-103,-104,-116,860,-104,-626,-629,-629,-304,-103,-102,-629,-112,-102',
'-110,-304,-304,-304,-629,-110,-104,-304,-304,-629,-304,-112,-111,-113',
'602,-102,-100,-111,-113,-101,128,-103,-101,-99,-103,127,602,-114,-102',
'-109,-304,-304,-114,-304,-304,-304,-304,-304,-101,-115,-103,128,128',
'-108,-115,967,127,127,-108,-112,-114,651,-104,236,225,226,225,226,225',
'226,-213,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304',
'-304,-304,479,-625,-304,-304,-304,632,675,128,637,128,-304,648,127,-304',
'127,632,106,107,-304,1004,-304,95,-304,-304,-304,-304,-304,-304,-304',
'96,-304,632,-304,106,107,729,1005,-112,728,650,-625,-626,-112,-115,-527',
'-304,-304,-629,-304,670,-304,-527,824,128,-629,-629,-629,-304,127,477',
'-629,-629,-304,-629,-114,128,634,633,-109,236,127,236,-629,-109,647',
'-623,634,633,630,-103,-105,478,729,-629,-629,731,-629,-629,-629,-629',
'-629,-104,634,633,652,108,109,703,887,582,609,579,578,577,-530,580,1017',
'-113,823,632,-113,-530,108,109,-629,-629,-629,-629,-629,-629,-629,-629',
'-629,-629,-629,-629,-629,-629,-530,231,-629,-629,-629,427,676,-530,778',
'-542,-629,-116,-623,-629,-541,632,-530,780,-629,632,-629,920,-629,-629',
'-629,-629,-629,-629,-629,422,-629,-629,-629,582,-623,579,578,577,-111',
'580,670,-622,634,633,725,-629,-629,-527,-629,1015,-629,793,598,597,-527',
'-527,-527,-629,587,-527,-527,-527,-629,-527,-112,-530,232,-109,725,590',
'787,-527,-108,-527,-527,-527,634,633,405,-110,634,633,640,-527,-527',
'913,-527,-527,-527,-527,-527,810,-539,-536,-527,225,226,-540,-113,-539',
'-536,-527,598,597,-540,632,-622,402,-539,400,-527,880,669,-540,-527',
'-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-622',
'810,-527,-527,-527,-101,-527,-527,591,1035,-527,233,128,-527,-527,397',
'-527,127,-527,632,-527,-110,-527,-527,-527,-527,-527,-527,-527,-539',
'-527,-527,-527,1038,-540,850,128,231,634,633,796,127,-111,632,613,-527',
'-527,-527,-527,669,-527,-213,-527,611,-541,128,-538,-527,-304,-110,127',
'-535,-527,-538,-527,-304,-304,-304,-535,-116,-304,-304,-304,582,-304',
'579,578,577,587,580,634,633,635,-532,-304,-304,-304,128,373,590,-532',
'-102,127,-106,-304,-304,-99,-304,-304,-304,-304,-304,232,231,634,633',
'630,-111,231,-115,541,585,-108,775,1044,230,-542,776,233,539,595,594',
'598,597,228,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304',
'-304,-304,236,-533,-304,-304,-304,-534,826,-304,-533,1047,-304,955,-534',
'-304,-304,955,-304,591,-304,-100,-304,-107,-304,-304,-304,-304,-304',
'-304,-304,232,-304,128,-304,955,232,-109,127,-116,582,1052,579,578,577',
'587,580,-304,-304,-304,-304,627,-304,1017,-304,231,590,339,628,-304',
'-530,740,475,1061,-304,1063,-114,-530,-530,-530,1065,476,-530,-530,-530',
'1067,-530,582,585,579,578,577,256,580,-530,1067,-530,-530,-530,598,597',
'231,729,-629,722,731,-530,-530,662,-530,-530,-530,-530,-530,338,-304',
'276,660,729,231,1017,731,-304,725,253,749,1043,-626,255,254,232,-304',
'725,591,752,1041,227,-530,-530,-530,-530,-530,-530,-530,-530,-530,-530',
'-530,-530,-530,-530,225,226,-530,-530,-530,-629,-530,-530,883,887,-530',
'-626,-629,-530,-530,232,-530,-625,-530,256,-530,-629,-530,-530,-530',
'-530,-530,-530,-530,-304,-530,424,-530,232,883,887,426,425,582,-629',
'579,578,577,587,580,-530,-530,-530,-530,-625,-530,253,-530,231,590,255',
'254,-530,-304,236,1037,224,-530,223,-530,-304,-304,-304,222,780,-629',
'-304,-304,955,-304,-348,585,1008,1017,579,578,577,-348,580,1090,595',
'594,598,597,-305,1067,-348,1067,1067,-304,-304,-305,-304,-304,-304,-304',
'-304,124,-305,236,-305,1067,-295,231,-94,-305,706,236,236,-295,551,236',
'687,232,-305,554,591,717,-295,476,-304,-304,-304,-304,-304,-304,-304',
'-304,-304,-304,-304,-304,-304,-304,-304,-348,-304,-304,-304,718,675',
'-304,722,725,-304,236,-626,-304,732,-305,-304,733,-304,524,-304,737',
'-304,-304,-304,-304,-304,-304,-304,-305,-304,740,-304,-295,232,231,741',
'1008,743,579,578,577,1037,580,745,-304,-304,-629,-105,747,-304,780,755',
'756,-629,-629,-629,-304,757,-629,-629,-629,-304,-629,-114,-304,131,132',
'133,134,135,759,-629,-629,-629,-629,908,909,725,725,910,122,123,-629',
'-629,609,-629,-629,-629,-629,-629,582,725,579,578,577,256,580,782,256',
'232,787,582,256,579,578,577,797,580,131,132,133,134,135,-629,-629,-629',
'-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,798,749,-629',
'-629,-629,256,825,-629,256,-278,-629,680,749,-629,-629,290,-629,256',
'-629,811,-629,752,-629,-629,-629,-629,-629,-629,-629,668,-629,-629,-629',
'266,267,667,236,253,509,663,509,255,254,251,252,-629,-629,-629,-629',
'253,-629,259,-629,255,254,251,252,-629,-444,257,659,258,-629,236,-112',
'-444,-444,-444,828,276,-444,-444,-444,582,-444,579,578,577,587,580,658',
'837,839,-444,-444,-444,522,524,-277,590,656,717,236,649,-444,-444,290',
'-444,-444,-444,-444,-444,290,717,646,643,582,256,579,578,577,585,580',
'582,639,579,578,577,236,580,595,594,598,597,878,-444,-444,-444,-444',
'-444,-444,-444,-444,-444,-444,-444,-444,-444,-444,236,256,-444,-444',
'-444,749,887,-444,725,290,-444,236,749,-444,-444,615,-444,591,-444,614',
'-444,960,-444,-444,-444,-444,-444,-444,-444,415,-444,-444,-444,253,609',
'236,256,255,254,251,252,914,-279,236,549,-444,-444,-651,-444,545,-444',
'919,3,290,-651,-651,-651,-444,236,-651,-651,-651,-444,-651,582,293,579',
'578,577,587,580,542,-651,-651,131,132,133,134,135,256,590,936,717,-651',
'-651,-277,-651,-651,-651,-651,-651,941,256,535,534,266,267,131,132,133',
'134,135,585,946,236,740,949,951,266,267,953,253,955,598,597,255,254',
'251,252,955,236,961,725,236,253,-651,259,-631,255,254,251,252,-651,-79',
'-631,-631,-631,290,-651,-631,-631,-631,725,-631,725,256,524,591,236',
'522,519,725,-631,-631,-631,-631,236,979,-280,-651,-651,266,267,-631',
'-631,290,-631,-631,-631,-631,-631,980,740,-651,983,986,988,253,-651',
'259,990,255,254,251,252,-651,,257,,258,-651,,,,-631,-631,-631,-631,-631',
'-631,-631,-631,-631,-631,-631,-631,-631,-631,,,-631,-631,-631,,,-631',
',,-631,,,-631,-631,,-631,,-631,,-631,,-631,-631,-631,-631,-631,-631',
'-631,,-631,-631,-631,582,,579,578,577,587,580,,,,,,-631,-631,-631,-631',
'590,-631,-630,-631,,,,,-631,-630,-630,-630,,-631,-630,-630,-630,,-630',
'256,,,585,,,,,-630,-630,-630,-630,,,598,597,266,267,,-630,-630,,-630',
'-630,-630,-630,-630,582,,579,578,577,253,580,259,,255,254,251,252,,582',
',579,578,577,,580,591,,-630,-630,-630,-630,-630,-630,-630,-630,-630',
'-630,-630,-630,-630,-630,,749,-630,-630,-630,,,-630,,,-630,,,-630,-630',
'749,-630,,-630,,-630,,-630,-630,-630,-630,-630,-630,-630,,-630,-630',
'-630,582,,579,578,577,587,580,,,,,,-630,-630,-630,-630,590,-630,-651',
'-630,,,,,-630,-651,-651,-651,,-630,-651,-651,-651,582,-651,579,578,577',
'585,580,,,,-651,-651,-651,,595,594,598,597,,,,-651,-651,,-651,-651,-651',
'-651,-651,,,,,,,,,,749,,,,,,,,,,,,591,,-651,-651,-651,-651,-651,-651',
'-651,-651,-651,-651,-651,-651,-651,-651,,,-651,-651,-651,,,-651,,290',
'-651,,,-651,-651,,-651,,-651,,-651,,-651,-651,-651,-651,-651,-651,-651',
',-651,-651,-651,,,,,,,,,,,,,-651,-651,-296,-651,,-651,,,,-296,-296,-296',
'-651,,-296,-296,-296,-651,-296,,,,,,,,,,-296,-296,-296,,,,,,,,-296,-296',
',-296,-296,-296,-296,-296,,,,,,,,,,,,,,,,,,,,,,,,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,,,-296,-296,-296,',
',-296,,,-296,,,-296,-296,,-296,,-296,,-296,,-296,-296,-296,-296,-296',
'-296,-296,,-296,,-296,582,,579,578,577,587,580,,,,,,-296,-296,-296,-296',
'590,-296,-313,-296,,,,,-296,-313,-313,-313,,-296,-313,-313,-313,,-313',
',,,585,,,,,,-313,-313,,595,594,598,597,,,,-313,-313,,-313,-313,-313',
'-313,-313,,,,,,,,,,,,,,,,,,,,,,591,,-313,-313,-313,-313,-313,-313,-313',
'-313,-313,-313,-313,-313,-313,-313,,,-313,-313,-313,,,-313,,293,-313',
',,-313,-313,,-313,,-313,,-313,,-313,-313,-313,-313,-313,-313,-313,,-313',
',-313,,,,,,,,,,,,,-313,-313,,-313,,-313,8,85,86,87,12,78,-313,,,79,80',
'-313,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,',
',,,664,11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,',
',266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271',
'257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,-252,,,66,,,93,100',
'102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,664,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263',
'273,274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38',
'253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101',
',,,96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,236,270,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,316,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274',
'268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
'256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43,',
',36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269',
'264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255',
'254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270',
',,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'-652,-652,-652,-652,273,274,,,-652,-652,,,,,,266,267,,43,,,36,,,62,63',
',,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,,-652,-652',
',,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272',
'271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,-652,-652,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,256,-652,-652,-652,-652,273,274,,,-652,-652,,,,,,266,267,,43,',
',36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,,264,265',
',,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272',
'271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,-652,-652,-652,-652',
'273,274,,,-652,-652,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'-652,-652,-652,-652,273,274,,,-652,-652,,,,,,266,267,,43,,,36,,,62,63',
',,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,256,260,261,262,263,273,274,,,264,265,,,,,,266,267',
',43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23',
'258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,-652,-652,-652,-652,273,274,,,-652',
'-652,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,-652,-652,-652',
'-652,273,274,,,-652,-652,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,316,,,62,63,,,64,,38,,,,48,,,,,,,,23,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'316,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,700,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331',
'332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,',
',,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302',
',300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,',
',49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246',
',,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,320',
',,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,247,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,337,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,',
'247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,',
',,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,',
',,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,128,,,,,127,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,367,,,36,,,62,63',
',,64,,38,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77',
',,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,994,,,247',
',,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,415,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,415,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,432,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,432,,',
',48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,',
',,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
'236,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'335,,,,,,,,,,,,,,,,,,,,994,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,',
',49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246',
',,,,103,303,97,98,99,101,,,,96,104,236,,,,,,66,,306,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
'305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,',
',,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115',
'117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,247,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,103,95,97,98,99,101,,,,96,104,,,,537,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325',
',,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,554,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,',
'247,,,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49',
',,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,',
',,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,616,60,112,111,617,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,618,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'329,,,120,119,121,616,60,112,111,617,,114,122,123,,106,107,,,,335,,',
',,,,,,,,,,,,,,,,,618,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,700,,,,48,,,,,,,,246',
',,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',432,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77',
',,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,',
',,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104',
',,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,241,,,247,,,62,63,,,64,,700,,300,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62',
'63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,',
'66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99',
'101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,802',
',,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325',
',,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,700,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104',
',,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'335,,,,,,,,,,,,,,,,,,,,1001,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,189,200,190,213,186,206,196,195',
'216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208',
'215,210,382,381,383,380,185,204,203,,,,,,184,191,182,183,377,378,379',
'375,141,112,111,376,,114,,,,,,,173,174,,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,389,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,',
',,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104',
',,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211,194',
'193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202',
'212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140,',
',,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,412,411,140,,413,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178',
'189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219',
'198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203',
',,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,',
'104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140',
',,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195',
'216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208',
'215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181',
'139,141,138,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154',
'155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,103,,,,,,,,,,104,,507,459,,,508,,,170,,,,',
'178,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,462,466,,,461,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,455,459,,,456',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,894,466,,,895,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',807,466,,,806,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,681,459,,,682,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,683,466,,,684,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,804,459,,,805',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,713,466,,,714,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,582,177,579,578',
'577,587,580,,,,,507,459,,,508,590,,,,,170,,,173,174,178,169,151,152',
'153,160,157,159,,,154,155,585,,,175,176,161,162,,,,,598,597,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,591,683',
'466,,,684,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,681,459,,,682,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,710,459,,,711,,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,772,466,,,773,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,770,459,,,771,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1071,466,,,1070',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,1074,459,,,1075,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,582,,579',
'578,577,587,580,,,1076,466,,,1077,,,590,,,170,,,173,174,178,169,151',
'152,153,160,157,159,,,154,155,,,585,175,176,161,162,,,,,,290,598,597',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,582,177,579',
'578,577,587,580,,,,,,591,,,,590,,,,,170,,,,582,178,579,578,577,587,580',
',,,,,,585,,582,590,579,578,577,587,580,595,594,598,597,,,,,582,590,579',
'578,577,587,580,,585,,,,,,,,590,,,598,597,,,585,568,,,,591,,,,595,594',
'598,597,,,585,582,,579,578,577,587,580,,595,594,598,597,,,591,582,590',
'579,578,577,587,580,,,,,,,,591,582,590,579,578,577,587,580,,585,,,,',
',591,,590,,,598,597,,,585,582,,579,578,577,587,580,,,,598,597,,,585',
'582,590,579,578,577,587,580,,,,598,597,,,591,582,590,579,578,577,587',
'580,,585,,,,,,591,,590,595,594,598,597,,,585,,,,,,591,,,595,594,598',
'597,,,585,582,,579,578,577,587,580,,595,594,598,597,,,591,,590,,,,,',
',,,,,,,591,,,,,,,236,,585,,,,,,591,,,,,598,597,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,591' ]
        racc_action_table = arr = ::Array.new(26358, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'462,690,65,1002,980,614,330,462,462,462,368,892,688,462,462,980,462',
'377,735,711,1088,838,22,1006,377,462,1006,29,710,47,47,27,1074,1075',
'705,930,462,462,27,462,462,462,462,462,931,365,688,1077,980,980,705',
'844,364,713,604,838,282,770,22,1044,721,964,891,998,47,47,721,462,462',
'462,462,462,462,462,462,462,462,462,462,462,462,771,980,462,462,462',
'711,462,690,65,248,462,29,330,462,710,27,790,790,462,244,462,357,462',
'462,462,462,462,462,462,614,462,462,462,29,368,892,1002,844,713,713',
'711,1002,735,711,1077,462,462,806,462,710,462,1076,710,1088,806,806',
'806,462,1088,711,806,806,462,806,462,1074,1075,940,710,365,1074,1075',
'844,604,713,844,364,713,604,356,1077,770,999,806,806,1077,806,806,806',
'806,806,844,1044,713,964,891,998,1044,891,964,891,998,772,773,406,771',
'790,720,720,471,471,784,784,477,806,806,806,806,806,806,806,806,806',
'806,806,806,806,806,243,1076,806,806,806,395,806,357,395,5,806,403,357',
'806,5,526,335,335,806,944,806,92,806,806,806,806,806,806,806,92,806',
'408,806,44,44,560,945,1076,560,406,772,773,1076,477,375,806,806,807',
'806,456,806,375,682,940,807,807,807,806,940,241,807,807,806,807,806',
'356,395,395,999,720,356,471,807,999,403,617,526,526,526,772,773,242',
'565,807,807,565,807,807,807,807,807,456,408,408,408,335,335,526,1020',
'960,1020,960,960,960,376,960,962,456,681,641,682,376,44,44,807,807,807',
'807,807,807,807,807,807,807,807,807,807,807,617,620,807,807,807,220',
'807,617,620,240,807,242,617,807,239,795,617,620,807,398,807,827,807',
'807,807,807,807,807,807,136,807,807,807,752,617,752,752,752,681,752',
'805,616,641,641,971,807,807,110,807,960,807,641,740,740,110,110,110',
'807,737,110,110,110,807,110,807,617,620,240,975,737,978,110,239,110',
'110,110,795,795,102,827,398,398,398,110,110,795,110,110,110,110,110',
'665,322,378,616,355,355,323,805,322,378,616,737,737,323,644,616,101',
'322,100,616,752,804,323,110,110,110,110,110,110,110,110,110,110,110',
'110,110,110,616,916,110,110,110,665,110,110,737,991,110,439,904,110',
'110,99,110,904,110,393,110,665,110,110,110,110,110,110,110,322,110,616',
'110,994,323,996,361,366,644,644,644,361,804,391,366,110,110,110,110',
'455,110,339,110,366,41,900,379,110,684,916,900,380,110,379,110,684,684',
'684,380,439,684,684,684,949,684,949,949,949,949,949,393,393,393,381',
'684,684,684,972,73,949,381,455,972,339,684,684,41,684,684,684,684,684',
'366,324,391,391,391,455,19,339,324,949,41,618,1001,19,42,618,20,324',
'949,949,949,949,19,684,684,684,684,684,684,684,684,684,684,684,684,684',
'684,49,382,684,684,684,383,684,684,382,1010,684,1011,383,684,684,1012',
'684,949,684,42,684,20,684,684,684,684,684,684,684,324,684,309,684,1013',
'19,42,309,20,1090,1014,1090,1090,1090,1090,1090,684,684,684,684,385',
'684,1016,684,238,1090,43,385,684,113,1026,238,1029,684,1030,684,113',
'113,113,1031,238,113,113,113,1032,113,749,1090,749,749,749,484,749,113',
'1034,113,113,113,1090,1090,438,561,894,1040,561,113,113,438,113,113',
'113,113,113,40,895,25,438,858,1000,1053,858,895,1058,484,749,1000,895',
'484,484,238,895,1059,1090,749,1000,18,113,113,113,113,113,113,113,113',
'113,113,113,113,113,113,17,17,113,113,113,894,113,113,758,758,113,1070',
'894,113,113,438,113,894,113,483,113,894,113,113,113,113,113,113,113',
'895,113,138,113,1000,1054,1054,138,138,787,894,787,787,787,787,787,113',
'113,113,113,1071,113,483,113,993,787,483,483,113,461,1073,993,16,113',
'15,113,461,461,461,13,993,894,461,461,1079,461,50,787,1046,1080,1046',
'1046,1046,50,1046,1084,787,787,787,787,542,1085,50,1086,1087,461,461',
'542,461,461,461,461,461,3,776,532,542,1095,326,341,533,776,536,538,516',
'326,341,515,504,993,776,543,787,546,326,341,461,461,461,461,461,461',
'461,461,461,461,461,461,461,461,714,50,461,461,461,548,461,714,555,556',
'461,557,714,461,562,542,714,563,461,566,461,570,461,461,461,461,461',
'461,461,776,461,571,461,326,341,1036,573,946,574,946,946,946,1036,946',
'575,461,461,683,461,584,461,1036,592,596,683,683,683,461,599,683,683',
'683,461,683,461,714,531,531,531,531,531,601,683,683,683,683,791,791',
'605,606,791,791,791,683,683,607,683,683,683,683,683,1052,608,1052,1052',
'1052,488,1052,622,487,1036,625,585,486,585,585,585,648,585,9,9,9,9,9',
'683,683,683,683,683,683,683,683,683,683,683,683,683,683,651,1052,683',
'683,683,498,683,683,485,657,683,473,585,683,683,463,683,552,683,666',
'683,585,683,683,683,683,683,683,683,454,683,683,683,552,552,453,450',
'498,671,440,677,498,498,498,498,683,683,683,683,552,683,552,683,552',
'552,552,552,683,30,552,436,552,683,685,683,30,30,30,686,689,30,30,30',
'568,30,568,568,568,568,568,433,692,694,30,30,30,697,699,431,568,428',
'707,709,405,30,30,712,30,30,30,30,30,715,716,402,400,880,719,880,880',
'880,568,880,878,397,878,878,878,736,878,568,568,568,568,751,30,30,30',
'30,30,30,30,30,30,30,30,30,30,30,753,499,30,30,30,880,760,30,766,30',
'30,769,878,30,30,369,30,568,30,367,30,878,30,30,30,30,30,30,30,363,30',
'30,30,499,362,349,343,499,499,499,499,799,801,803,340,30,30,506,30,336',
'30,812,1,334,506,506,506,30,329,506,506,506,30,506,1067,328,1067,1067',
'1067,1067,1067,325,506,506,348,348,348,348,348,491,1067,836,843,506',
'506,854,506,506,506,506,506,855,490,319,318,491,491,313,313,313,313',
'313,1067,862,863,864,868,869,490,490,871,491,872,1067,1067,491,491,491',
'491,874,877,879,882,317,490,506,490,467,490,490,490,490,506,315,467',
'467,467,506,506,467,467,467,888,467,893,503,301,1067,897,298,297,901',
'467,467,467,467,903,912,915,506,506,503,503,467,467,286,467,467,467',
'467,467,922,923,506,925,926,927,503,506,503,929,503,503,503,503,506',
',503,,503,506,,,,467,467,467,467,467,467,467,467,467,467,467,467,467',
'467,,,467,467,467,,,467,,,467,,,467,467,,467,,467,,467,,467,467,467',
'467,467,467,467,,467,467,467,951,,951,951,951,951,951,,,,,,467,467,467',
'467,951,467,466,467,,,,,467,466,466,466,,467,466,466,466,,466,489,,',
'951,,,,,466,466,466,466,,,951,951,489,489,,466,466,,466,466,466,466',
'466,1015,,1015,1015,1015,489,1015,489,,489,489,489,489,,1017,,1017,1017',
'1017,,1017,951,,466,466,466,466,466,466,466,466,466,466,466,466,466',
'466,,1015,466,466,466,,,466,,,466,,,466,466,1017,466,,466,,466,,466',
'466,466,466,466,466,466,,466,466,466,741,,741,741,741,741,741,,,,,,466',
'466,466,466,741,466,457,466,,,,,466,457,457,457,,466,457,457,457,961',
'457,961,961,961,741,961,,,,457,457,457,,741,741,741,741,,,,457,457,',
'457,457,457,457,457,,,,,,,,,,961,,,,,,,,,,,,741,,457,457,457,457,457',
'457,457,457,457,457,457,457,457,457,,,457,457,457,,,457,,457,457,,,457',
'457,,457,,457,,457,,457,457,457,457,457,457,457,,457,457,457,,,,,,,',
',,,,,457,457,60,457,,457,,,,60,60,60,457,,60,60,60,457,60,,,,,,,,,,60',
'60,60,,,,,,,,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,,,,,60,60,60,60',
'60,60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60,60,,60,,60,',
'60,,60,60,60,60,60,60,60,,60,,60,743,,743,743,743,743,743,,,,,,60,60',
'60,60,743,60,31,60,,,,,60,31,31,31,,60,31,31,31,,31,,,,743,,,,,,31,31',
',743,743,743,743,,,,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,,,743,',
'31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31',
'31,,31,,31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,,31,31,,31,',
'31,653,653,653,653,653,653,31,,,653,653,31,,,653,,653,653,653,653,653',
'653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,443,653,653,653,653',
'653,653,653,653,653,653,653,653,,653,653,653,,653,653,,653,653,653,443',
'443,443,443,443,443,443,443,443,443,443,,443,443,,,443,443,,653,,,653',
',,653,653,,,653,,653,443,,443,653,443,443,443,443,443,443,443,653,443',
',,,653,653,653,653,653,653,,,,653,653,,443,,443,,,653,,,653,653,653',
',,653,653,898,898,898,898,898,898,,,,898,898,,,,898,,898,898,898,898',
'898,898,898,,,,,,898,898,898,898,898,898,898,,,898,,,,,449,898,898,898',
'898,898,898,898,898,898,898,898,898,,898,898,898,,898,898,,898,898,898',
'449,449,449,449,449,449,449,449,449,449,449,,449,449,,,449,449,,898',
',,898,,,898,898,,,898,,898,449,,449,898,449,449,449,449,449,449,449',
'898,449,,,,898,898,898,898,898,898,,,,898,898,,449,,,,,898,,,898,898',
'898,,,898,898,222,222,222,222,222,222,,,,222,222,,,,222,,222,222,222',
'222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,222,222',
'222,222,222,222,222,222,222,222,222,222,,222,222,222,,222,222,,222,222',
'222,502,502,502,502,502,502,502,502,502,502,502,,502,502,,,502,502,',
'222,,,222,,,222,222,,,222,,222,502,,502,222,502,502,502,502,502,502',
'502,222,502,,,,222,222,222,222,222,222,,,,222,222,502,502,,,,,222,,',
'222,222,222,,,222,222,36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36',
'36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,36,36,36,36,36,36',
'36,36,36,36,,36,36,36,,36,36,,36,36,36,553,553,553,553,553,553,553,553',
'553,553,553,,553,553,,,553,553,,36,,,36,,,36,36,,,36,,36,553,,553,36',
'553,553,553,553,553,553,553,36,553,,,,36,36,36,36,36,36,,,,36,36,,553',
',,,,36,,,36,36,36,,,36,36,785,785,785,785,785,785,,,,785,785,,,,785',
',785,785,785,785,785,785,785,,,,,,785,785,785,785,785,785,785,,,785',
',,,,,785,785,785,785,785,785,785,785,785,785,785,785,,785,785,785,,785',
'785,,785,785,785,295,295,295,295,295,295,295,295,295,295,295,,295,295',
',,295,295,,785,,,785,,,785,785,,,785,,785,295,,295,785,295,295,295,295',
'295,295,295,785,295,,,,785,785,785,785,785,785,,,,785,785,,295,,,,,785',
',,785,785,785,,,785,785,1025,1025,1025,1025,1025,1025,,,,1025,1025,',
',,1025,,1025,1025,1025,1025,1025,1025,1025,,,,,,1025,1025,1025,1025',
'1025,1025,1025,,,1025,,,,,,1025,1025,1025,1025,1025,1025,1025,1025,1025',
'1025,1025,1025,,1025,1025,1025,,1025,1025,,1025,1025,1025,921,921,921',
'921,921,921,921,921,921,921,921,,921,921,,,921,921,,1025,,,1025,,,1025',
'1025,,,1025,,1025,921,,921,1025,921,921,921,921,921,921,921,1025,921',
',,,1025,1025,1025,1025,1025,1025,,,,1025,1025,,921,,,,,1025,,,1025,1025',
'1025,,,1025,1025,937,937,937,937,937,937,,,,937,937,,,,937,,937,937',
'937,937,937,937,937,,,,,,937,937,937,937,937,937,937,,,937,,,,,,937',
'937,937,937,937,937,937,937,937,937,937,937,,937,937,937,,937,937,,937',
'937,937,24,24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,937,,,937,',
',937,937,,,937,,937,24,,24,937,24,24,24,24,24,24,24,937,24,,,,937,937',
'937,937,937,937,,,,937,937,,24,,,,,937,,,937,937,937,,,937,937,247,247',
'247,247,247,247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,',
'247,247,247,247,247,247,247,,,247,,,,,,247,247,247,247,247,247,247,247',
'247,247,247,247,,247,247,247,,247,247,,247,247,247,809,809,809,809,809',
'809,809,809,809,809,809,,809,809,,,809,809,,247,,,247,,,247,247,,,247',
',247,809,,809,247,809,809,809,809,809,809,809,247,809,,,,247,247,247',
'247,247,247,,,,247,247,,809,,,,,247,,,247,247,247,,,247,247,1023,1023',
'1023,1023,1023,1023,,,,1023,1023,,,,1023,,1023,1023,1023,1023,1023,1023',
'1023,,,,,,1023,1023,1023,1023,1023,1023,1023,,,1023,,,,,,1023,1023,1023',
'1023,1023,1023,1023,1023,1023,1023,1023,1023,,1023,1023,1023,,1023,1023',
',1023,1023,1023,497,497,497,497,497,497,497,,,497,497,,,,,,497,497,',
'1023,,,1023,,,1023,1023,,,1023,,1023,497,,497,1023,497,497,497,497,497',
'497,497,1023,497,,,,1023,1023,1023,1023,1023,1023,,,,1023,1023,,,,,',
',1023,,,1023,1023,1023,,,1023,1023,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2',
'2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2',
'2,,2,2,2,482,482,482,482,482,482,482,482,482,482,482,,482,482,,,482',
'482,,2,,,2,,,2,2,,,2,,2,482,,482,2,482,482,482,482,482,482,482,2,482',
',,,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,,,2,2,938,938,938,938,938,938',
',,,938,938,,,,938,,938,938,938,938,938,938,938,,,,,,938,938,938,938',
'938,938,938,,,938,,,,,,938,938,938,938,938,938,938,938,938,938,938,938',
',938,938,938,,938,938,,938,938,938,481,481,481,481,481,481,481,481,481',
'481,481,,481,481,,,481,481,,938,,,938,,,938,938,,,938,,938,481,,481',
'938,481,481,481,481,481,481,481,938,481,,,,938,938,938,938,938,938,',
',,938,938,,,,,,,938,,,938,938,938,,,938,938,1018,1018,1018,1018,1018',
'1018,,,,1018,1018,,,,1018,,1018,1018,1018,1018,1018,1018,1018,,,,,,1018',
'1018,1018,1018,1018,1018,1018,,,1018,,,,,,1018,1018,1018,1018,1018,1018',
'1018,1018,1018,1018,1018,1018,,1018,1018,1018,,1018,1018,,1018,1018',
'1018,496,496,496,496,496,496,496,,,496,496,,,,,,496,496,,1018,,,1018',
',,1018,1018,,,1018,,1018,496,,496,1018,496,496,496,496,496,496,496,1018',
'496,,,,1018,1018,1018,1018,1018,1018,,,,1018,1018,,,,,,,1018,,,1018',
'1018,1018,,,1018,1018,833,833,833,833,833,833,,,,833,833,,,,833,,833',
'833,833,833,833,833,833,,,,,,833,833,833,833,833,833,833,,,833,,,,,',
'833,833,833,833,833,833,833,833,833,833,833,833,,833,833,833,,833,833',
',833,833,833,501,501,501,501,501,501,501,501,,501,501,,,,,,501,501,',
'833,,,833,,,833,833,,,833,,833,501,,501,833,501,501,501,501,501,501',
'501,833,501,,,,833,833,833,833,833,833,,,,833,833,,,,,,,833,,,833,833',
'833,,,833,833,774,774,774,774,774,774,,,,774,774,,,,774,,774,774,774',
'774,774,774,774,,,,,,774,774,774,774,774,774,774,,,774,,,,,,774,774',
'774,774,774,774,774,774,774,774,774,774,,774,774,774,,774,774,,774,774',
'774,495,495,495,495,495,495,495,,,495,495,,,,,,495,495,,774,,,774,,',
'774,774,,,774,,774,495,,495,774,495,495,495,495,495,495,495,774,495',
',,,774,774,774,774,774,774,,,,774,774,,,,,,,774,,,774,774,774,,,774',
'774,792,792,792,792,792,792,,,,792,792,,,,792,,792,792,792,792,792,792',
'792,,,,,,792,792,792,792,792,792,792,,,792,,,,,,792,792,792,792,792',
'792,792,792,792,792,792,792,,792,792,792,,792,792,,792,792,792,494,494',
'494,494,494,494,494,,,494,494,,,,,,494,494,,792,,,792,,,792,792,,,792',
',792,494,,494,792,494,494,494,494,494,494,494,792,494,,,,792,792,792',
'792,792,792,,,,792,792,,,,,,,792,,,792,792,792,,,792,792,600,600,600',
'600,600,600,,,,600,600,,,,600,,600,600,600,600,600,600,600,,,,,,600',
'600,600,600,600,600,600,,,600,,,,,,600,600,600,600,600,600,600,600,600',
'600,600,600,,600,600,600,,600,600,,600,600,600,500,500,500,500,500,500',
'500,,,500,500,,,,,,500,500,,600,,,600,,,600,600,,,600,,600,500,,500',
'600,500,500,500,500,500,500,500,600,500,,,,600,600,600,600,600,600,',
',,600,600,,,,,,,600,,,600,600,600,,,600,600,786,786,786,786,786,786',
',,,786,786,,,,786,,786,786,786,786,786,786,786,,,,,,786,786,786,786',
'786,786,786,,,786,,,,,,786,786,786,786,786,786,786,786,786,786,786,786',
',786,786,786,,786,786,,786,786,786,493,493,493,493,493,493,493,,,493',
'493,,,,,,493,493,,786,,,786,,,786,786,,,786,,786,493,,493,786,493,493',
'493,493,493,493,493,786,493,,,,786,786,786,786,786,786,,,,786,786,,',
',,,,786,,,786,786,786,,,786,786,852,852,852,852,852,852,,,,852,852,',
',,852,,852,852,852,852,852,852,852,,,,,,852,852,852,852,852,852,852',
',,852,,,,,,852,852,852,852,852,852,852,852,852,852,852,852,,852,852',
'852,,852,852,,852,852,852,492,492,492,492,492,492,492,,,492,492,,,,',
',492,492,,852,,,852,,,852,852,,,852,,852,492,,492,852,492,492,492,492',
'492,492,492,852,492,,,,852,852,852,852,852,852,,,,852,852,,,,,,,852',
',,852,852,852,,,852,852,321,321,321,321,321,321,,,,321,321,,,,321,,321',
'321,321,321,321,321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,',
'321,321,321,321,321,321,321,321,321,321,321,321,,321,321,321,,321,321',
',321,321,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,321,,,,321',
',,,,,,,321,,,,,321,321,321,321,321,321,,,,321,321,,,,,,,321,,,321,321',
'321,,,321,321,997,997,997,997,997,997,,,,997,997,,,,997,,997,997,997',
'997,997,997,997,,,,,,997,997,997,997,997,997,997,,,997,,,,,,997,997',
'997,997,997,997,997,997,997,997,997,997,,997,997,997,,997,997,,997,997',
'997,,,,,,,,,,,,,,,,,,,,997,,,997,,,997,997,,,997,,997,,,,997,,,,,,,',
'997,,,,,997,997,997,997,997,997,,,,997,997,,,,,,,997,,,997,997,997,',
',997,997,360,360,360,360,360,360,,,,360,360,,,,360,,360,360,360,360',
'360,360,360,,,,,,360,360,360,360,360,360,360,,,360,,,,,,360,360,360',
'360,360,360,360,360,360,360,360,360,,360,360,360,,360,360,,360,360,360',
',,,,,,,,,,,,,,,,,,,360,,,360,,,360,360,,,360,,360,,,,360,,,,,,,,360',
',,,,360,360,360,360,360,360,,,,360,360,,,,,,,360,,,360,360,360,,,360',
'360,860,860,860,860,860,860,,,,860,860,,,,860,,860,860,860,860,860,860',
'860,,,,,,860,860,860,860,860,860,860,,,860,,,,,,860,860,860,860,860',
'860,860,860,860,860,860,860,,860,860,860,,860,860,,860,860,860,,,,,',
',,,,,,,,,,,,,,860,,,860,,,860,860,,,860,,860,,,,860,,,,,,,,860,,,,,860',
'860,860,860,860,860,,,,860,860,,,,,,,860,,,860,860,860,,,860,860,861',
'861,861,861,861,861,,,,861,861,,,,861,,861,861,861,861,861,861,861,',
',,,,861,861,861,861,861,861,861,,,861,,,,,,861,861,861,861,861,861,861',
'861,861,861,861,861,,861,861,861,,861,861,,861,861,861,,,,,,,,,,,,,',
',,,,,,861,,,861,,,861,861,,,861,,861,,,,861,,,,,,,,861,,,,,861,861,861',
'861,861,861,,,,861,861,,,,,,,861,,,861,861,861,,,861,861,316,316,316',
'316,316,316,,,,316,316,,,,316,,316,316,316,316,316,316,316,,,,,,316',
'316,316,316,316,316,316,,,316,,,,,,316,316,316,316,316,316,316,316,316',
'316,316,316,,316,316,316,,316,316,,316,316,316,,,,,,,,,,,,,,,,,,,,316',
',,316,,,316,316,,,316,,316,,,,316,,,,,,,,316,,,,,316,316,316,316,316',
'316,,,,316,316,,,,,,,316,,,316,316,316,,,316,316,887,887,887,887,887',
'887,,,,887,887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887,887',
'887,887,887,887,,,887,,,,,,887,887,887,887,887,887,887,887,887,887,887',
'887,,887,887,887,,887,887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887',
',,887,887,,,887,,887,,,,887,,,,,,,,887,,,,,887,887,887,887,887,887,',
',,887,887,,,,,,,887,,,887,887,887,,,887,887,359,359,359,359,359,359',
',,,359,359,,,,359,,359,359,359,359,359,359,359,,,,,,359,359,359,359',
'359,359,359,,,359,,,,,,359,359,359,359,359,359,359,359,359,359,359,359',
',359,359,359,,359,359,,359,359,359,,,,,,,,,,,,,,,,,,,,359,,,359,,,359',
'359,,,359,,359,,,,359,,,,,,,,359,,,,,359,359,359,359,359,359,,,,359',
'359,,,,,,,359,,,359,359,359,,,359,359,347,347,347,347,347,347,,,,347',
'347,,,,347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347',
'347,,,347,,,,,,347,347,347,347,347,347,347,347,347,347,347,347,,347',
'347,347,,347,347,,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347',
',,347,,347,,,,347,,,,,,,,347,,,,,347,347,347,347,347,347,,,,347,347',
',,,,,,347,,,347,347,347,,,347,347,603,603,603,603,603,603,,,,603,603',
',,,603,,603,603,603,603,603,603,603,,,,,,603,603,603,603,603,603,603',
',,603,,,,,,603,603,603,603,603,603,603,603,603,603,603,603,,603,603',
'603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603,,,603',
',603,,,,603,,,,,,,,603,,,,,603,603,603,603,603,603,,,,603,603,,,,,,',
'603,,,603,603,603,,,603,603,968,968,968,968,968,968,,,,968,968,,,,968',
',968,968,968,968,968,968,968,,,,,,968,968,968,968,968,968,968,,,968',
',,,,,968,968,968,968,968,968,968,968,968,968,968,968,,968,968,968,,968',
'968,,968,968,968,,,,,,,,,,,,,,,,,,,,968,,,968,,,968,968,,,968,,968,',
',,968,,,,,,,,968,,,,,968,968,968,968,968,968,,,,968,968,,,,,,,968,,',
'968,968,968,,,968,968,967,967,967,,967,,,,967,967,,,,967,,967,967,967',
'967,967,967,967,,,,,,967,967,967,967,967,967,967,,,967,,,,,,,967,,,967',
'967,967,967,967,967,967,967,,967,967,967,,967,967,,967,967,967,,,,,',
',,,,,,,,,,,,,,967,,,967,,,967,967,,,967,,967,,,,967,,,,,,,,967,,,,,967',
'967,967,967,967,967,,,,967,967,,,,,,,967,,,967,967,967,,,967,967,537',
'537,537,,537,,,,537,537,,,,537,,537,537,537,537,537,537,537,,,,,,537',
'537,537,537,537,537,537,,,537,,,,,,,537,,,537,537,537,537,537,537,537',
'537,,537,537,537,,537,537,,,,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537',
'537,,,537,,,,,,,,,,,,,,,,,,,537,537,537,537,537,537,,,,537,537,,,,,',
',537,,,537,537,537,,,537,537,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,',
',,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8',
',,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8',
',,,8,8,,,,,,,8,,,8,8,8,,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,',
',32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32',
'32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,',
'32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32',
',,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33',
'33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,',
'33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33',
',,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33',
'33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34',
',34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,',
',34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37',
'37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37',
'37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,',
',,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37',
'37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,',
'38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38',
'38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,',
'38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,',
',38,,,38,38,38,,,38,38,1041,1041,1041,,1041,,,,1041,1041,,,,1041,,1041',
'1041,1041,1041,1041,1041,1041,,,,,,1041,1041,1041,1041,1041,1041,1041',
',,1041,,,,,,,1041,,,1041,1041,1041,1041,1041,1041,1041,1041,1041,1041',
'1041,1041,,1041,1041,,1041,1041,1041,,,,,,,,,,,,,,,,,,,,1041,,,1041',
',,1041,1041,,,1041,,1041,,1041,,1041,,,,,,,,1041,,,,,1041,1041,1041',
'1041,1041,1041,,,,1041,1041,,,,,,,1041,,1041,1041,1041,1041,,,1041,1041',
'45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45',
'45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45',
'45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45',
'45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,',
'46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,',
',,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,',
',,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46',
'46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,48,48,48,,48,,,,48,48,,,,48',
',48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,,,48,48',
'48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,',
',48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48,,,,48,48,,',
',,,,48,,,48,48,48,,,48,48,62,62,62,62,62,,,,62,62,,,,62,,62,62,62,62',
'62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,62,62,,62,62,62,62,62,62',
'62,62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62',
'62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62',
',,62,62,62,,,62,62,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67',
',,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67',
'67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,',
'67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67',
'67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68',
'68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,68',
'68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,',
'68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68,,,68,68,71,71,71,,71',
',,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71',
',,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,,,,,',
',,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71,71',
'71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,,71,71,72,72,72,,72,,,,72,72',
',,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72',
',,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,,,,,,,,,,,,,,',
'72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72,72,72,,,,72,72',
',,,,,,72,,,72,72,72,,,72,72,992,992,992,,992,,,,992,992,,,,992,,992',
'992,992,992,992,992,992,,,,,,992,992,992,992,992,992,992,,,992,,,,,',
',992,,,992,992,992,992,992,992,992,992,,992,992,992,,992,992,,,,992',
',,,,,,,,,,,,,,,,,,,992,,,992,,,992,992,,,992,,,,,,,,,,,,,,,,,,,992,992',
'992,992,992,992,,,,992,992,,,,,,,992,,,992,992,992,,,992,992,126,126',
'126,126,126,,,,126,126,,,,126,,126,126,126,126,126,126,126,,,,,,126',
'126,126,126,126,126,126,,,126,,,,,,126,126,126,126,126,126,126,126,126',
'126,126,126,,126,126,126,,126,126,,126,126,126,,,,,,,,,,,,,,,,,,,,126',
',,126,,,126,126,,,126,,126,,,,126,,,,,,,,126,,,,,126,126,126,126,126',
'126,,,,126,126,,,,,,126,126,,,126,126,126,,,126,126,131,131,131,,131',
',,,131,131,,,,131,,131,131,131,131,131,131,131,,,,,,131,131,131,131',
'131,131,131,,,131,,,,,,,131,,,131,131,131,131,131,131,131,131,,131,131',
'131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131',
',,,,,131,,,,,,,,131,,,,,131,131,131,131,131,131,,,,131,131,,,,,,,131',
',,131,131,131,,,131,131,132,132,132,,132,,,,132,132,,,,132,,132,132',
'132,132,132,132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,,,132',
',,132,132,132,132,132,132,132,132,,132,132,132,,132,132,,132,132,132',
',,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132,,,,,,132,,,,,,,,132,,,',
',132,132,132,132,132,132,,,,132,132,,,,,,,132,,,132,132,132,,,132,132',
'133,133,133,,133,,,,133,133,,,,133,,133,133,133,133,133,133,133,,,,',
',133,133,133,133,133,133,133,,,133,,,,,,,133,,,133,133,133,133,133,133',
'133,133,,133,133,133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,',
'133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,,,133,133,133,133,133,133',
',,,133,133,,,,,,,133,,,133,133,133,,,133,133,134,134,134,,134,,,,134',
'134,,,,134,,134,134,134,134,134,134,134,,,,,,134,134,134,134,134,134',
'134,,,134,,,,,,,134,,,134,134,134,134,134,134,134,134,,134,134,134,',
'134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,',
',,,134,,,,,,,,134,,,,,134,134,134,134,134,134,,,,134,134,,,,,,,134,',
',134,134,134,,,134,134,135,135,135,135,135,,,,135,135,,,,135,,135,135',
'135,135,135,135,135,,,,,,135,135,135,135,135,135,135,,,135,,,,,,135',
'135,,135,135,135,135,135,135,135,135,135,,135,135,135,,135,135,,135',
'135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135,,,135,,135,,,,135,,,',
',,,,135,,,,,135,135,135,135,135,135,,,,135,135,,,,,,,135,,,135,135,135',
',,135,135,530,530,530,530,530,,,,530,530,,,,530,,530,530,530,530,530',
'530,530,,,,,,530,530,530,530,530,530,530,,,530,,,,,,530,530,530,530',
'530,530,530,530,530,530,530,530,,530,530,530,,530,530,,530,530,530,',
',,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530,,530,,,,530,,,,,,,,530,',
',,,530,530,530,530,530,530,,,,530,530,,,,,,530,530,,,530,530,530,,,530',
'530,223,223,223,,223,,,,223,223,,,,223,,223,223,223,223,223,223,223',
',,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223',
'223,223,223,,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223',
',,223,,,223,223,,,223,,223,,,,223,,,,,,,,223,,,,,223,223,223,223,223',
'223,,,,223,223,,,,,,,223,,,223,223,223,,,223,223,224,224,224,,224,,',
',224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224',
'224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224',
',224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,',
'224,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224',
',,224,224,224,,,224,224,225,225,225,,225,,,,225,225,,,,225,,225,225',
'225,225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225',
',,225,225,225,225,225,225,225,225,,225,225,225,,225,225,,225,225,225',
',,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,',
',225,225,225,225,225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225,225',
'226,226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226,,,,',
',226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226',
'226,226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,',
'226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226',
',,,226,226,,,,,,,226,,,226,226,226,,,226,226,227,227,227,,227,,,,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,',
'227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,',
',,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,',
',227,227,227,,,227,227,228,228,228,,228,,,,228,228,,,,228,,228,228,228',
'228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228',
'228,228,228,228,228,228,228,228,228,228,228,,228,228,,228,228,228,,',
',,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,228,,228,,228,,,,,,,,228',
',,,,228,228,228,228,228,228,,,,228,228,,,,,,,228,,228,228,228,228,,',
'228,228,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233',
'233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233',
'233,233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,',
',,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233',
'233,233,,,,233,233,,,,,,,233,,,233,233,233,,,233,233,234,234,234,,234',
',,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234',
'234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234',
'234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234',
',,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,,,,,,,234',
',,234,234,234,,,234,234,235,235,235,,235,,,,235,235,,,,235,,235,235',
'235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235',
',,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,235',
',,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,',
',235,235,235,235,235,235,,,,235,235,235,,,,,,235,,,235,235,235,,,235',
'235,251,251,251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251',
',,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251',
'251,251,251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251',
',,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251',
',,,251,251,,,,,,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252',
'252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252',
'252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,',
'252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,',
',,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,',
',252,252,252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253',
'253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253',
'253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,',
',,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253',
'253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253,253,254',
'254,254,,254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254',
'254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254',
'254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254',
',,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254',
'254,,,,,,,254,,,254,254,254,,,254,254,255,255,255,,255,,,,255,255,,',
',255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,',
',255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255',
',255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,',
',,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255',
'255,,,255,255,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,',
',,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256',
'256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256,256,257,257,257',
',257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257',
'257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257',
'257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257',
',,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,',
',,,257,,,257,257,257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258',
'258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,',
',258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258',
'258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258',
',,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258',
'258,259,259,259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259',
',,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259',
'259,259,259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259',
',,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259',
',,,259,259,,,,,,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260',
'260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260',
'260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,',
'260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,',
',,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,',
',260,260,260,,,260,260,261,261,261,,261,,,,261,261,,,,261,,261,261,261',
'261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261',
'261,261,261,261,261,261,261,,261,261,261,,261,261,,261,261,261,,,,,',
',,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261',
'261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261,261,,,261,261,262',
'262,262,,262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262',
'262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262',
'262,,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262',
',,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262',
'262,,,,,,,262,,,262,262,262,,,262,262,263,263,263,,263,,,,263,263,,',
',263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263,',
',263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263,263,263,,263,263',
',263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,',
',,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263',
'263,,,263,263,264,264,264,,264,,,,264,264,,,,264,,264,264,264,264,264',
'264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264',
'264,264,264,264,264,,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,',
',,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264,264,264',
'264,264,264,,,,264,264,,,,,,,264,,,264,264,264,,,264,264,265,265,265',
',265,,,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265',
'265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265',
'265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265',
',,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,',
',,,265,,,265,265,265,,,265,265,266,266,266,,266,,,,266,266,,,,266,,266',
'266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,',
',266,,,266,266,266,266,266,266,266,266,,266,266,266,,266,266,,266,266',
'266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,266',
',,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,,,266,266,266,,,266',
'266,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267',
',,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267',
'267,267,267,,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267',
',,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267,267,267',
',,,267,267,,,,,,,267,,,267,267,267,,,267,267,268,268,268,,268,,,,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268',
'268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268,,268,268,268,',
'268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,',
',,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,,,,,,,268,',
',268,268,268,,,268,268,269,269,269,,269,,,,269,269,,,,269,,269,269,269',
'269,269,269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269',
'269,269,269,269,269,269,269,,269,269,269,,269,269,,269,269,269,,,,,',
',,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269',
'269,269,269,269,269,,,,269,269,,,,,,,269,,,269,269,269,,,269,269,270',
'270,270,,270,,,,270,270,,,,270,,270,270,270,270,270,270,270,,,,,,270',
'270,270,270,270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270',
'270,,270,270,270,,270,270,,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270',
',,270,270,,,270,,,,,,270,,,,,,,,270,,,,,270,270,270,270,270,270,,,,270',
'270,,,,,,,270,,,270,270,270,,,270,270,275,275,275,,275,,,,275,275,,',
',275,,275,275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,',
',275,,,,,,,275,,,275,275,275,275,275,275,275,275,,275,275,275,,275,275',
',275,275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,,,,,275,',
',,,,,,275,,,,,275,275,275,275,275,275,,,,275,275,,,,,,,275,,,275,275',
'275,,,275,275,932,932,932,,932,,,,932,932,,,,932,,932,932,932,932,932',
'932,932,,,,,,932,932,932,932,932,932,932,,,932,,,,,,,932,,,932,932,932',
'932,932,932,932,932,,932,932,932,,932,932,,,,932,,,,,,,,,,,,,,,,,,,',
'932,,,932,,,932,932,,,932,,,,,,,,,,,,,,,,,,,932,932,932,932,932,932',
',,,932,932,,,,,,,932,,,932,932,932,,,932,932,283,283,283,,283,,,,283',
'283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283,283',
'283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283,283,283,283,283',
',283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,',
'283,,283,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,,,,',
',,283,,283,283,283,283,,,283,283,920,920,920,,920,,,,920,920,,,,920',
',920,920,920,920,920,920,920,,,,,,920,920,920,920,920,920,920,,,920',
',,,,,,920,,,920,920,920,920,920,920,920,920,,920,920,920,,920,920,,920',
'920,920,,,,,,,,,,,,,,,,,,,,920,,,920,,,920,920,,,920,,,,,,920,,,,,,',
',920,,,,,920,920,920,920,920,920,,,,920,920,,,,,,,920,,,920,920,920',
',,920,920,290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290',
'290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290',
'290,290,290,290,290,290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,',
',,,,,290,,,290,,,290,290,,,290,,290,,290,,290,,,,,,,,290,,,,,290,290',
'290,290,290,290,,,,290,290,,,,,,,290,,290,290,290,290,,,290,290,293',
'293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,,,293',
'293,293,293,293,293,293,,,293,,,,,,,293,,,293,293,293,293,293,293,293',
'293,293,293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293',
',,293,293,,,293,,293,,293,,293,,,,,,,,293,,,,,293,293,293,293,293,293',
',,,293,293,293,,,,,,293,,293,293,293,293,,,293,293,919,919,919,,919',
',,,919,919,,,,919,,919,919,919,919,919,919,919,,,,,,919,919,919,919',
'919,919,919,,,919,,,,,,,919,,,919,919,919,919,919,919,919,919,919,919',
'919,919,,919,919,,919,919,919,,,,,,,,,,,,,,,,,,,,919,,,919,,,919,919',
',,919,,,,919,,919,,,,,,,,919,,,,,919,919,919,919,919,919,,,,919,919',
',,,,,,919,,919,919,919,919,,,919,919,899,899,899,,899,,,,899,899,,,',
'899,,899,899,899,899,899,899,899,,,,,,899,899,899,899,899,899,899,,',
'899,,,,,,,899,,,899,899,899,899,899,899,899,899,,899,899,899,,899,899',
',899,899,899,,,,,,,,,,,,,,,,,,,,899,,,899,,,899,899,,,899,,,,,,899,',
',,,,,,899,,,,,899,899,899,899,899,899,,,,899,899,,,,,,,899,,,899,899',
'899,,,899,899,300,300,300,,300,,,,300,300,,,,300,,300,300,300,300,300',
'300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,,,300,,,300,300,300',
'300,300,300,300,300,,300,300,300,,300,300,,300,300,300,,,,,,,,,,,,,',
',,,,,,300,,,300,,,300,300,,,300,,,,,,300,,,,,,,,300,,,,,300,300,300',
'300,300,300,,,,300,300,,,,,,,300,,,300,300,300,,,300,300,302,302,302',
',302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,,,302,302,302',
'302,302,302,302,,,302,,,,,,,302,,,302,302,302,302,302,302,302,302,,302',
'302,302,,302,302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302',
',,302,,,,,,302,,,,,,,,302,,,,,302,302,302,302,302,302,,,,302,302,,,',
',,,302,,,302,302,302,,,302,302,305,305,305,,305,,,,305,305,,,,305,,305',
'305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305,,,305,,,,,',
',305,,,305,305,305,305,305,305,305,305,,305,305,305,,305,305,,305,305',
'305,,,,,,,,,,,,,,,,,,,,305,,,305,,,305,305,,,305,,,,,,305,,,,,,,,305',
',,,,305,305,305,305,305,305,,,,305,305,,,,,,,305,,,305,305,305,,,305',
'305,306,306,306,,306,,,,306,306,,,,306,,306,306,306,306,306,306,306',
',,,,,306,306,306,306,306,306,306,,,306,,,,,,,306,,,306,306,306,306,306',
'306,306,306,,306,306,306,,306,306,,306,306,306,,,,,,,,,,,,,,,,,,,,306',
',,306,,,306,306,,,306,,,,,,306,,,,,,,,306,,,,,306,306,306,306,306,306',
',,,306,306,,,,,,,306,,,306,306,306,,,306,306,312,312,312,312,312,,,',
'312,312,,,,312,,312,312,312,312,312,312,312,,,,,,312,312,312,312,312',
'312,312,,,312,,,,,,312,312,,312,312,312,312,312,312,312,312,312,,312',
'312,312,,312,312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,312',
',,312,,312,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312,,,,312,312',
',,,,,,312,,,312,312,312,,,312,312,885,885,885,,885,,,,885,885,,,,885',
',885,885,885,885,885,885,885,,,,,,885,885,885,885,885,885,885,,,885',
',,,,,,885,,,885,885,885,885,885,885,885,885,,885,885,885,,885,885,,885',
'885,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885,,,,,,885,,,,,,',
',885,,,,,885,885,885,885,885,885,,,,885,885,,,,,,,885,,,885,885,885',
',,885,885,320,320,320,,320,,,,320,320,,,,320,,320,320,320,320,320,320',
'320,,,,,,320,320,320,320,320,320,320,,,320,,,,,,,320,,,320,320,320,320',
'320,320,320,320,,320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320',
',,320,,,320,320,,,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320',
'320,,,,320,,,320,,,320,320,320,,,320,320,828,828,828,,828,,,,828,828',
',,,828,,828,828,828,828,828,828,828,,,,,,828,828,828,828,828,828,828',
',,828,,,,,,,828,,,828,828,828,828,828,828,828,828,,828,828,828,,828',
'828,,828,828,828,,,,,,,,,,,,,,,,,,,,828,,,828,,,828,828,,,828,,,,,,828',
',,,,,,,828,,,,,828,828,828,828,828,828,,,,828,828,,,,,,,828,,,828,828',
'828,,,828,828,826,826,826,,826,,,,826,826,,,,826,,826,826,826,826,826',
'826,826,,,,,,826,826,826,826,826,826,826,,,826,,,,,,,826,,,826,826,826',
'826,826,826,826,826,,826,826,826,,826,826,,826,826,826,,,,,,,,,,,,,',
',,,,,,826,,,826,,,826,826,,,826,,,,,,826,,,,,,,,826,,,,,826,826,826',
'826,826,826,,,,826,826,,,,,,,826,,,826,826,826,,,826,826,825,825,825',
',825,,,,825,825,,,,825,,825,825,825,825,825,825,825,,,,,,825,825,825',
'825,825,825,825,,,825,,,,,,,825,,,825,825,825,825,825,825,825,825,,825',
'825,825,,825,825,,825,825,825,,,,,,,,,,,,,,,,,,,,825,,,825,,,825,825',
',,825,,,,,,825,,,,,,,,825,,,,,825,825,825,825,825,825,,,,825,825,,,',
',,,825,,,825,825,825,,,825,825,824,824,824,,824,,,,824,824,,,,824,,824',
'824,824,824,824,824,824,,,,,,824,824,824,824,824,824,824,,,824,,,,,',
',824,,,824,824,824,824,824,824,824,824,,824,824,824,,824,824,,824,824',
'824,,,,,,,,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,,,,,824,,,,,,,,824',
',,,,824,824,824,824,824,824,,,,824,824,,,,,,,824,,,824,824,824,,,824',
'824,823,823,823,,823,,,,823,823,,,,823,,823,823,823,823,823,823,823',
',,,,,823,823,823,823,823,823,823,,,823,,,,,,,823,,,823,823,823,823,823',
'823,823,823,,823,823,823,,823,823,,823,823,823,,,,,,,,,,,,,,,,,,,,823',
',,823,,,823,823,,,823,,,,,,823,,,,,,,,823,,,,,823,823,823,823,823,823',
',,,823,823,,,,,,,823,,,823,823,823,,,823,823,810,810,810,,810,,,,810',
'810,,,,810,,810,810,810,810,810,810,810,,,,,,810,810,810,810,810,810',
'810,,,810,,,,,,,810,,,810,810,810,810,810,810,810,810,,810,810,810,',
'810,810,,810,810,810,,,,,,,,,,,,,,,,,,,,810,,,810,,,810,810,,,810,,',
',,,810,,,,,,,,810,,,,,810,810,810,810,810,810,,,,810,810,,,,,,,810,',
',810,810,810,,,810,810,337,337,337,,337,,,,337,337,,,,337,,337,337,337',
'337,337,337,337,,,,,,337,337,337,337,337,337,337,,,337,,,,,,,337,,,337',
'337,337,337,337,337,337,337,,337,337,337,,337,337,,,,337,,,,,,,,,,,',
',,,,,,,,337,,,337,,,337,337,,,337,,,,,,,,,,,,,,,,,,,337,337,337,337',
'337,337,,,,337,337,,,,,,,337,,,337,337,337,,,337,337,802,802,802,,802',
',,,802,802,,,,802,,802,802,802,802,802,802,802,,,,,,802,802,802,802',
'802,802,802,,,802,,,,,,,802,,,802,802,802,802,802,802,802,802,,802,802',
'802,,802,802,,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802',
',,,,,802,,,,,,,,802,,,,,802,802,802,802,802,802,,,,802,802,,,,,,,802',
',,802,802,802,,,802,802,344,344,344,,344,,,,344,344,,,,344,,344,344',
'344,344,344,344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344',
',,344,344,344,344,344,344,344,344,,344,344,344,,344,344,,344,344,344',
',,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,,,,,344,,,,,,,,344,,,',
',344,344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,,344,344',
'346,346,346,,346,,,,346,346,,,,346,,346,346,346,346,346,346,346,,,,',
',346,346,346,346,346,346,346,,,346,,,,,,,346,,,346,346,346,346,346,346',
'346,346,,346,346,346,,346,346,,346,346,346,,,,,,,,,,,,,,,,,,,,346,,',
'346,346,,346,346,,,346,,,,,,346,,,,,,,,346,,,,,346,346,346,346,346,346',
',,,346,346,,,,,,,346,,,346,346,346,,,346,346,350,350,350,,350,,,,350',
'350,,,,350,,350,350,350,350,350,350,350,,,,,,350,350,350,350,350,350',
'350,,,350,,,,,,,350,,,350,350,350,350,350,350,350,350,350,350,350,350',
',350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,,,350,350,,,350,',
'350,,,,350,,,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,,,,,,,350',
',350,350,350,350,,,350,350,351,351,351,,351,,,,351,351,,,,351,,351,351',
'351,351,351,351,351,,,,,,351,351,351,351,351,351,351,,,351,,,,,,,351',
',,351,351,351,351,351,351,351,351,351,351,351,351,,351,351,,351,351',
'351,,,,,,,,,,,,,,,,,,,,351,,,351,,,351,351,,,351,,,,,,351,,,,,,,,351',
',,,,351,351,351,351,351,351,,,,351,351,,,,,,,351,,351,351,351,351,,',
'351,351,358,358,358,,358,,,,358,358,,,,358,,358,358,358,358,358,358',
'358,,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358,,,358,358,358,358',
'358,358,358,358,,358,358,358,,358,358,,358,358,358,,,,,,,,,,,,,,,,,',
',,358,,,358,,,358,358,,,358,,,,,,358,,,,,,,,358,,,,,358,358,358,358',
'358,358,,,,358,358,,,,,,,358,,,358,358,358,,,358,358,780,780,780,,780',
',,,780,780,,,,780,,780,780,780,780,780,780,780,,,,,,780,780,780,780',
'780,780,780,,,780,,,,,,,780,,,780,780,780,780,780,780,780,780,780,780',
'780,780,,780,780,,780,780,780,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,780',
',,780,,780,,780,,780,,,,,,,,780,,,,,780,780,780,780,780,780,,,,780,780',
',,,,,,780,,780,780,780,780,,,780,780,372,372,372,,372,,,,372,372,,,',
'372,,372,372,372,372,372,372,372,,,,,,372,372,372,372,372,372,372,,',
'372,,,,,,,372,,,372,372,372,372,372,372,372,372,,372,372,372,,372,372',
',,,372,,,,,,,,,,,,,,,,,,,,372,,,372,,,372,372,,,372,,,,,,,,,,,,,,,,',
',,372,372,372,372,372,372,,,,372,372,,,,,,,372,,,372,372,372,,,372,372',
'374,374,374,,374,,,,374,374,,,,374,,374,374,374,374,374,374,374,,,,',
',374,374,374,374,374,374,374,,,374,,,,,,,374,,,374,374,374,374,374,374',
'374,374,,374,374,374,,374,374,,,,374,,,,,,,,,,,,,,,,,,,,374,,,374,,',
'374,374,,,374,,,,,,,,,,,,,,,,,,,374,374,374,374,374,374,,,,374,374,',
',,,,,374,,,374,374,374,,,374,374,768,768,768,,768,,,,768,768,,,,768',
',768,768,768,768,768,768,768,,,,,,768,768,768,768,768,768,768,,,768',
',,,,,,768,,,768,768,768,768,768,768,768,768,,768,768,768,,768,768,,768',
'768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,768,,,,768,,,',
',,,,768,,,,,768,768,768,768,768,768,,,,768,768,,,,,,,768,,,768,768,768',
',,768,768,747,747,747,,747,,,,747,747,,,,747,,747,747,747,747,747,747',
'747,,,,,,747,747,747,747,747,747,747,,,747,,,,,,,747,,,747,747,747,747',
'747,747,747,747,,747,747,747,,747,747,,747,747,747,,,,,,,,,,,,,,,,,',
',,747,,,747,,,747,747,,,747,,,,,,747,,,,,,,,747,,,,,747,747,747,747',
'747,747,,,,747,747,,,,,,,747,,,747,747,747,,,747,747,731,731,731,,731',
',,,731,731,,,,731,,731,731,731,731,731,731,731,,,,,,731,731,731,731',
'731,731,731,,,731,,,,,,,731,,,731,731,731,731,731,731,731,731,731,731',
'731,731,,731,731,,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731,731',
',,731,,,,,,731,,,,,,,,731,,,,,731,731,731,731,731,731,,,,731,731,,,',
',,,731,,731,731,731,731,,,731,731,728,728,728,,728,,,,728,728,,,,728',
',728,728,728,728,728,728,728,,,,,,728,728,728,728,728,728,728,,,728',
',,,,,,728,,,728,728,728,728,728,728,728,728,728,728,728,728,,728,728',
',728,728,728,,,,,,,,,,,,,,,,,,,,728,,,728,,,728,728,,,728,,728,,,,728',
',,,,,,,728,,,,,728,728,728,728,728,728,,,,728,728,,,,,,,728,,728,728',
'728,728,,,728,728,723,723,723,,723,,,,723,723,,,,723,,723,723,723,723',
'723,723,723,,,,,,723,723,723,723,723,723,723,,,723,,,,,,,723,,,723,723',
'723,723,723,723,723,723,,723,723,723,,723,723,,723,723,723,,,,,,,,,',
',,,,,,,,,,723,,,723,,,723,723,,,723,,723,,,,723,,,,,,,,723,,,,,723,723',
'723,723,723,723,,,,723,723,,,,,,,723,,,723,723,723,,,723,723,718,718',
'718,,718,,,,718,718,,,,718,,718,718,718,718,718,718,718,,,,,,718,718',
'718,718,718,718,718,,,718,,,,,,,718,,,718,718,718,718,718,718,718,718',
',718,718,718,,718,718,,718,718,718,,,,,,,,,,,,,,,,,,,,718,,,718,,,718',
'718,,,718,,,,,,718,,,,,,,,718,,,,,718,718,718,718,718,718,,,,718,718',
',,,,,,718,,,718,718,718,,,718,718,717,717,717,,717,,,,717,717,,,,717',
',717,717,717,717,717,717,717,,,,,,717,717,717,717,717,717,717,,,717',
',,,,,,717,,,717,717,717,717,717,717,717,717,,717,717,717,,717,717,,',
',717,,,,,,,,,,,,,,,,,,,,717,,,717,,,717,717,,,717,,,,,,,,,,,,,,,,,,',
'717,717,717,717,717,717,,,,717,717,,,,,,,717,,,717,717,717,,,717,717',
'706,706,706,,706,,,,706,706,,,,706,,706,706,706,706,706,706,706,,,,',
',706,706,706,706,706,706,706,,,706,,,,,,,706,,,706,706,706,706,706,706',
'706,706,,706,706,706,,706,706,,,,706,,,,,,,,,,,,,,,,,,,,706,,,706,,',
'706,706,,,706,,,,,,,,,,,,,,,,,,,706,706,706,706,706,706,,,,706,706,',
',,,,,706,,,706,706,706,,,706,706,703,703,703,,703,,,,703,703,,,,703',
',703,703,703,703,703,703,703,,,,,,703,703,703,703,703,703,703,,,703',
',,,,,,703,,,703,703,703,703,703,703,703,703,,703,703,703,,703,703,,703',
'703,703,,,,,,,,,,,,,,,,,,,,703,,,703,,,703,703,,,703,,,,,,703,,,,,,',
',703,,,,,703,703,703,703,703,703,,,,703,703,,,,,,,703,,,703,703,703',
',,703,703,700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700,700',
'700,,,,,,700,700,700,700,700,700,700,,,700,,,,,,,700,,,700,700,700,700',
'700,700,700,700,,700,700,700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,',
',,700,,,700,,,700,700,,,700,,,,,,700,,,,,,,,700,,,,,700,700,700,700',
'700,700,,,,700,700,,,,,,,700,,,700,700,700,,,700,700,432,432,432,,432',
',,,432,432,,,,432,,432,432,432,432,432,432,432,,,,,,432,432,432,432',
'432,432,432,,,432,,,,,,,432,,,432,432,432,432,432,432,432,432,,432,432',
'432,,432,432,,432,432,432,,,,,,,,,,,,,,,,,,,,432,,,432,,,432,432,,,432',
',,,,,432,,,,,,,,432,,,,,432,432,432,432,432,432,,,,432,432,,,,,,,432',
',,432,432,432,,,432,432,676,676,676,,676,,,,676,676,,,,676,,676,676',
'676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,,676,,,,,,,676',
',,676,676,676,676,676,676,676,676,,676,676,676,,676,676,,676,676,676',
',,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,,,,676,,,,,,,,676,,,',
',676,676,676,676,676,676,,,,676,676,,,,,,,676,,,676,676,676,,,676,676',
'675,675,675,,675,,,,675,675,,,,675,,675,675,675,675,675,675,675,,,,',
',675,675,675,675,675,675,675,,,675,,,,,,,675,,,675,675,675,675,675,675',
'675,675,,675,675,675,,675,675,,675,675,675,,,,,,,,,,,,,,,,,,,,675,,',
'675,,,675,675,,,675,,,,,,675,,,,,,,,675,,,,,675,675,675,675,675,675',
',,,675,675,,,,,,,675,,,675,675,675,,,675,675,670,670,670,,670,,,,670',
'670,,,,670,,670,670,670,670,670,670,670,,,,,,670,670,670,670,670,670',
'670,,,670,,,,,,,670,,,670,670,670,670,670,670,670,670,,670,670,670,',
'670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670,,',
',,,670,,,,,,,,670,,,,,670,670,670,670,670,670,,,,670,670,,,,,,,670,',
',670,670,670,,,670,670,669,669,669,,669,,,,669,669,,,,669,,669,669,669',
'669,669,669,669,,,,,,669,669,669,669,669,669,669,,,669,,,,,,,669,,,669',
'669,669,669,669,669,669,669,,669,669,669,,669,669,,669,669,669,,,,,',
',,,,,,,,,,,,,,669,,,669,,,669,669,,,669,,,,,,669,,,,,,,,669,,,,,669',
'669,669,669,669,669,,,,669,669,,,,,,,669,,,669,669,669,,,669,669,668',
'668,668,,668,,,,668,668,,,,668,,668,668,668,668,668,668,668,,,,,,668',
'668,668,668,668,668,668,,,668,,,,,,,668,,,668,668,668,668,668,668,668',
'668,668,668,668,668,,668,668,,668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668',
',,668,668,,,668,,,,668,,668,,,,,,,,668,,,,,668,668,668,668,668,668,',
',,668,668,,,,,,,668,,668,668,668,668,,,668,668,667,667,667,,667,,,,667',
'667,,,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667',
'667,,,667,,,,,,,667,,,667,667,667,667,667,667,667,667,667,667,667,667',
',667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,',
'667,,667,,667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,',
',,667,,667,667,667,667,,,667,667,664,664,664,,664,,,,664,664,,,,664',
',664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,,,664',
',,,,,,664,,,664,664,664,664,664,664,664,664,,664,664,664,,664,664,,664',
'664,664,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,664,,,664,,,,,,664,,,,,,',
',664,,,,,664,664,664,664,664,664,,,,664,664,,,,,,,664,,,664,664,664',
',,664,664,663,663,663,663,663,,,,663,663,,,,663,,663,663,663,663,663',
'663,663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,663,663,,663,663',
'663,663,663,663,663,663,663,,663,663,663,,663,663,,663,663,663,,,,,',
',,,,,,,,,,,,,,663,,,663,,,663,663,,,663,,663,,,,663,,,,,,,,663,,,,,663',
'663,663,663,663,663,,,,663,663,,,,,,,663,,,663,663,663,,,663,663,476',
'476,476,,476,,,,476,476,,,,476,,476,476,476,476,476,476,476,,,,,,476',
'476,476,476,476,476,476,,,476,,,,,,,476,,,476,476,476,476,476,476,476',
'476,476,476,476,476,,476,476,,476,476,476,,,,,,,,,,,,,,,,,,,,476,,,476',
',,476,476,,,476,,476,,476,,476,,,,,,,,476,,,,,476,476,476,476,476,476',
',,,476,476,,,,,,,476,,476,476,476,476,,,476,476,478,478,478,,478,,,',
'478,478,,,,478,,478,478,478,478,478,478,478,,,,,,478,478,478,478,478',
'478,478,,,478,,,,,,,478,,,478,478,478,478,478,478,478,478,,478,478,478',
',478,478,,478,478,478,,,,,,,,,,,,,,,,,,,,478,,,478,,,478,478,,,478,',
',,,,478,,,,,,,,478,,,,,478,478,478,478,478,478,,,,478,478,,,,,,,478',
',,478,478,478,,,478,478,479,479,479,,479,,,,479,479,,,,479,,479,479',
'479,479,479,479,479,,,,,,479,479,479,479,479,479,479,,,479,,,,,,,479',
',,479,479,479,479,479,479,479,479,,479,479,479,,479,479,,479,479,479',
',,,,,,,,,,,,,,,,,,,479,,,479,,,479,479,,,479,,,,,,479,,,,,,,,479,,,',
',479,479,479,479,479,479,,,,479,479,,,,,,,479,,,479,479,479,,,479,479',
'480,480,480,,480,,,,480,480,,,,480,,480,480,480,480,480,480,480,,,,',
',480,480,480,480,480,480,480,,,480,,,,,,,480,,,480,480,480,480,480,480',
'480,480,,480,480,480,,480,480,,480,480,480,,,,,,,,,,,,,,,,,,,,480,,',
'480,,,480,480,,,480,,,,,,480,,,,,,,,480,,,,,480,480,480,480,480,480',
',,,480,480,,,,,,,480,,,480,480,480,,,480,480,660,660,660,,660,,,,660',
'660,,,,660,,660,660,660,660,660,660,660,,,,,,660,660,660,660,660,660',
'660,,,660,,,,,,,660,,,660,660,660,660,660,660,660,660,660,660,660,660',
',660,660,,660,660,660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660,660,,,660,',
'660,,660,,660,,,,,,,,660,,,,,660,660,660,660,660,660,,,,660,660,,,,',
',,660,,660,660,660,660,,,660,660,659,659,659,,659,,,,659,659,,,,659',
',659,659,659,659,659,659,659,,,,,,659,659,659,659,659,659,659,,,659',
',,,,,,659,,,659,659,659,659,659,659,659,659,,659,659,659,,659,659,,659',
'659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,,,,,659,,,,,,',
',659,,,,,659,659,659,659,659,659,,,,659,659,,,,,,,659,,,659,659,659',
',,659,659,658,658,658,,658,,,,658,658,,,,658,,658,658,658,658,658,658',
'658,,,,,,658,658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658',
'658,658,658,658,,658,658,658,,658,658,,658,658,658,,,,,,,,,,,,,,,,,',
',,658,,,658,,,658,658,,,658,,658,,,,658,,,,,,,,658,,,,,658,658,658,658',
'658,658,,,,658,658,,,,,,,658,,,658,658,658,,,658,658,629,629,629,,629',
',,,629,629,,,,629,,629,629,629,629,629,629,629,,,,,,629,629,629,629',
'629,629,629,,,629,,,,,,,629,,,629,629,629,629,629,629,629,629,,629,629',
'629,,629,629,,629,629,629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629,,,629',
',,,,,629,,,,,,,,629,,,,,629,629,629,629,629,629,,,,629,629,,,,,,,629',
',,629,629,629,,,629,629,623,623,623,,623,,,,623,623,,,,623,,623,623',
'623,623,623,623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,,623',
',,623,623,623,623,623,623,623,623,,623,623,623,,623,623,,623,623,623',
',,,,,,,,,,,,,,,,,,,623,,,623,,,623,623,,,623,,,,,,623,,,,,,,,623,,,',
',623,623,623,623,623,623,,,,623,623,,,,,,,623,,,623,623,623,,,623,623',
'611,611,611,,611,,,,611,611,,,,611,,611,611,611,611,611,611,611,,,,',
',611,611,611,611,611,611,611,,,611,,,,,,,611,,,611,611,611,611,611,611',
'611,611,611,611,611,611,,611,611,,611,611,611,,,,,,,,,,,,,,,,,,,,611',
',,611,,,611,611,,,611,,611,,611,,611,,,,,,,,611,,,,,611,611,611,611',
'611,611,,,,611,611,,,,,,,611,,611,611,611,611,,,611,611,588,588,588',
',588,,,,588,588,,,,588,,588,588,588,588,588,588,588,,,,,,588,588,588',
'588,588,588,588,,,588,,,,,,,588,,,588,588,588,588,588,588,588,588,,588',
'588,588,,588,588,,588,588,588,,,,,,,,,,,,,,,,,,,,588,,,588,,,588,588',
',,588,,,,,,588,,,,,,,,588,,,,,588,588,588,588,588,588,,,,588,588,,,',
',,,588,,,588,588,588,,,588,588,554,554,554,,554,,,,554,554,,,,554,,554',
'554,554,554,554,554,554,,,,,,554,554,554,554,554,554,554,,,554,,,,,',
',554,,,554,554,554,554,554,554,554,554,,554,554,554,,554,554,,554,554',
'554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554,,,,,,554,,,,,,,,554',
',,,,554,554,554,554,554,554,,,,554,554,,,,,,,554,,,554,554,554,,,554',
'554,549,549,549,,549,,,,549,549,,,,549,,549,549,549,549,549,549,549',
',,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549,549,549,549',
'549,549,549,,549,549,549,,549,549,,549,549,549,,,,,,,,,,,,,,,,,,,,549',
',,549,,,549,549,,,549,,,,,,549,,,,,,,,549,,,,,549,549,549,549,549,549',
',,,549,549,,,,,,,549,,,549,549,549,,,549,549,545,545,545,,545,,,,545',
'545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545,545,545',
'545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,,545,545,545,',
'545,545,,,,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,,,,,,,,',
',,,,,,,,,,545,545,545,545,545,545,,,,545,545,,,,,,,545,,,545,545,545',
',,545,545,539,539,539,,539,,,,539,539,,,,539,,539,539,539,539,539,539',
'539,,,,,,539,539,539,539,539,539,539,,,539,,,,,,,539,,,539,539,539,539',
'539,539,539,539,539,539,539,539,,539,539,,539,539,539,,,,,,,,,,,,,,',
',,,,,539,,,539,,,539,539,,,539,,539,,539,,539,,,,,,,,539,,,,,539,539',
'539,539,539,539,,,,539,539,,,,,,,539,,539,539,539,539,,,539,539,519',
'519,519,,519,,,,519,519,,,,519,,519,519,519,519,519,519,519,,,,,,519',
'519,519,519,519,519,519,,,519,,,,,,,519,,,519,519,519,519,519,519,519',
'519,519,519,519,519,,519,519,,519,519,519,,,,,,,,,,,,,,,,,,,,519,,,519',
',,519,519,,,519,,519,,519,,519,,,,,,,,519,,,,,519,519,519,519,519,519',
',,,519,519,,,,,,,519,,519,519,519,519,,,519,519,522,522,522,,522,,,',
'522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522,522,522,522',
'522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522,522,522,522',
'522,,522,522,,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522',
',,,522,,522,,,,,,,,522,,,,,522,522,522,522,522,522,,,,522,522,,,,,,',
'522,,522,522,522,522,,,522,522,524,524,524,,524,,,,524,524,,,,524,,524',
'524,524,524,524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,',
',524,,,524,524,524,524,524,524,524,524,,524,524,524,,524,524,,524,524',
'524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,,,,,524,,,,,,,,524',
',,,,524,524,524,524,524,524,,,,524,524,,,,,,,524,,,524,524,524,,,524',
'524,941,941,941,,941,,,,941,941,,,,941,,941,941,941,941,941,941,941',
',,,,,941,941,941,941,941,941,941,,,941,,,,,,,941,,,941,941,941,941,941',
'941,941,941,,941,941,941,,941,941,,,,941,,,,,,,,,,,,,,,,,,,,941,,,941',
',,941,941,,,941,,,,,,,,,,,,,,,,,,,941,941,941,941,941,941,,,,941,941',
',,,,,,941,,,941,941,941,,,941,941,246,246,246,,246,,,,246,246,,,,246',
',246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246',
',,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246',
'246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,',
',246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246',
',,246,246,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249',
'249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249',
'249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,',
',,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249',
'249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250,,250',
',,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250',
'250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250',
'250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250',
',,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250',
',,250,250,250,,,250,250,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,,,,,75',
'75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75,75,75',
'75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75,75,75',
'75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12',
'12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12',
'12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12',
'12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,,,,,12,423,423,423',
'423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,423,423,,,,423,423,423,423,423,423,423,423,423,423,,,,,,423',
'423,423,423,423,423,423,423,423,,,423,,,,,,,,,423,423,,423,423,423,423',
'423,423,423,,,423,423,,,,423,423,423,423,,,,,,,,,,,,,,423,423,,423,423',
'423,423,423,423,423,423,423,423,423,,,423,423,,,,,,,,,,423,,,,,,,,,423',
',,,,423,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,,,,103,103,103,103,103,103,103,103',
'103,103,,,,,,103,103,103,103,103,103,103,103,103,103,103,103,,103,,',
',,,,103,103,,103,103,103,103,103,103,103,,,103,103,,,,103,103,103,103',
',,,,,,,,,,,,,103,103,,103,103,103,103,103,103,103,103,103,103,103,,',
'103,,,,,,,,,,,,,,,,,,,,103,,,,,103,655,655,655,655,655,655,655,655,655',
'655,655,655,655,655,655,655,655,655,655,655,655,655,655,655,,,,655,655',
'655,655,655,655,655,655,655,655,,,,,,655,655,655,655,655,655,655,655',
'655,,,655,,,,,,,,,655,655,,655,655,655,655,655,655,655,,,655,655,,,',
'655,655,655,655,,,,,,,,,,,,,,655,655,,655,655,655,655,655,655,655,655',
'655,655,655,,,655,655,,,,,,,,,,655,,,,,,,,,655,,,,,655,789,789,789,789',
'789,789,789,789,789,789,789,789,789,789,789,789,789,789,789,789,789',
'789,789,789,,,,789,789,789,789,789,789,789,789,789,789,,,,,,789,789',
'789,789,789,789,789,789,789,,,789,,,,,,,,,789,789,,789,789,789,789,789',
'789,789,,,789,789,,,,789,789,789,789,,,,,,,,,,,,,,789,789,,789,789,789',
'789,789,789,789,789,789,789,789,,,789,,,,,,,,,,,,,,,,,,,,789,,,,,789',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11',
'11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,',
',,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,',
'11,,779,779,,,779,,,11,,,,,11,779,779,,779,779,779,779,779,779,779,',
',779,779,,,,779,779,779,779,,,,,,779,,,,,,,,779,779,,779,779,779,779',
'779,779,779,779,779,779,779,,,779,,,,,,,,,,230,230,,,230,,,,,,779,,',
'230,230,779,230,230,230,230,230,230,230,,,230,230,,,,230,230,230,230',
',,,,,230,,,,,,,,230,230,,230,230,230,230,230,230,230,230,230,230,230',
',,230,,,,,,,,,,229,229,,,229,,,,,,230,,,229,229,230,229,229,229,229',
'229,229,229,,,229,229,,,,229,229,229,229,,,,,,229,,,,,,,,229,229,,229',
'229,229,229,229,229,229,229,229,229,229,,,229,,,,,,,,,,778,778,,,778',
',,,,,229,,,778,778,229,778,778,778,778,778,778,778,,,778,778,,,,778',
'778,778,778,,,,,,778,,,,,,,,778,778,,778,778,778,778,778,778,778,778',
'778,778,778,,,778,,,,,,,,,,662,662,,,662,,,,,,778,,,662,662,778,662',
'662,662,662,662,662,662,,,662,662,,,,662,662,662,662,,,,,,662,,,,,,',
',662,662,,662,662,662,662,662,662,662,662,662,662,662,,,662,,,,,,,,',
',474,474,,,474,,,,,,662,,,474,474,662,474,474,474,474,474,474,474,,',
'474,474,,,,474,474,474,474,,,,,,474,,,,,,,,474,474,,474,474,474,474',
'474,474,474,474,474,474,474,,,474,,,,,,,,,,475,475,,,475,,,,,,474,,',
'475,475,474,475,475,475,475,475,475,475,,,475,475,,,,475,475,475,475',
',,,,,475,,,,,,,,475,475,,475,475,475,475,475,475,475,475,475,475,475',
',,475,,,,,,,,,,661,661,,,661,,,,,,475,,,661,661,475,661,661,661,661',
'661,661,661,,,661,661,,,,661,661,661,661,,,,,,661,,,,,,,,661,661,,661',
'661,661,661,661,661,661,661,661,661,661,,,661,,,,,,,,,,541,541,,,541',
',,,,,661,,,541,541,661,541,541,541,541,541,541,541,,,541,541,,,,541',
'541,541,541,,,,,,541,,,,,,,,541,541,,541,541,541,541,541,541,541,541',
'541,541,541,,1065,541,1065,1065,1065,1065,1065,,,,,279,279,,,279,1065',
',,,,541,,,279,279,541,279,279,279,279,279,279,279,,,279,279,1065,,,279',
'279,279,279,,,,,1065,1065,,,,,,,,279,279,,279,279,279,279,279,279,279',
'279,279,279,279,,,279,,,,,,,,,1065,551,551,,,551,,,,,,279,,,551,551',
'279,551,551,551,551,551,551,551,,,551,551,,,,551,551,551,551,,,,,,551',
',,,,,,,551,551,,551,551,551,551,551,551,551,551,551,551,551,,,551,,',
',,,,,,,550,550,,,550,,,,,,551,,,550,550,551,550,550,550,550,550,550',
'550,,,550,550,,,,550,550,550,550,,,,,,550,,,,,,,,550,550,,550,550,550',
'550,550,550,550,550,550,550,550,,,550,,,,,,,,,,540,540,,,540,,,,,,550',
',,540,540,550,540,540,540,540,540,540,540,,,540,540,,,,540,540,540,540',
',,,,,540,,,,,,,,540,540,,540,540,540,540,540,540,540,540,540,540,540',
',,540,,,,,,,,,,613,613,,,613,,,,,,540,,,613,613,540,613,613,613,613',
'613,613,613,,,613,613,,,,613,613,613,613,,,,,,613,,,,,,,,613,613,,613',
'613,613,613,613,613,613,613,613,613,613,,,613,,,,,,,,,,612,612,,,612',
',,,,,613,,,612,612,613,612,612,612,612,612,612,612,,,612,612,,,,612',
'612,612,612,,,,,,612,,,,,,,,612,612,,612,612,612,612,612,612,612,612',
'612,612,612,,,612,,,,,,,,,,1037,1037,,,1037,,,,,,612,,,1037,1037,612',
'1037,1037,1037,1037,1037,1037,1037,,,1037,1037,,,,1037,1037,1037,1037',
',,,,,1037,,,,,,,,1037,1037,,1037,1037,1037,1037,1037,1037,1037,1037',
'1037,1037,1037,,,1037,,,,,,,,,,1042,1042,,,1042,,,,,,1037,,,1042,1042',
'1037,1042,1042,1042,1042,1042,1042,1042,,,1042,1042,,,,1042,1042,1042',
'1042,,,,,,1042,,,,,,,,1042,1042,,1042,1042,1042,1042,1042,1042,1042',
'1042,1042,1042,1042,,,1042,745,,745,745,745,745,745,,,1043,1043,,,1043',
',,745,,,1042,,,1043,1043,1042,1043,1043,1043,1043,1043,1043,1043,,,1043',
'1043,,,745,1043,1043,1043,1043,,,,,,1043,745,745,,,,,,1043,1043,,1043',
'1043,1043,1043,1043,1043,1043,1043,1043,1043,1043,,1061,1043,1061,1061',
'1061,1061,1061,,,,,,745,,,,1061,,,,,1043,,,,953,1043,953,953,953,953',
'953,,,,,,,1061,,354,953,354,354,354,354,354,1061,1061,1061,1061,,,,',
'788,354,788,788,788,788,788,,953,,,,,,,,788,,,953,953,,,354,354,,,,1061',
',,,354,354,354,354,,,788,955,,955,955,955,955,955,,788,788,788,788,',
',953,1047,955,1047,1047,1047,1047,1047,,,,,,,,354,988,1047,988,988,988',
'988,988,,955,,,,,,788,,988,,,955,955,,,1047,986,,986,986,986,986,986',
',,,1047,1047,,,988,983,986,983,983,983,983,983,,,,988,988,,,955,831',
'983,831,831,831,831,831,,986,,,,,,1047,,831,986,986,986,986,,,983,,',
',,,988,,,983,983,983,983,,,831,1063,,1063,1063,1063,1063,1063,,831,831',
'831,831,,,986,,1063,,,,,,,,,,,,,983,,,,,,,831,,1063,,,,,,831,,,,,1063',
'1063,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1063' ]
        racc_action_check = arr = ::Array.new(26358, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1201,  3200,   845,   nil,    92,   nil,   nil,  6299,   952,
   nil, 24627, 23937,   699,   nil,   661,   659,   707,   641,   495,
   496,   nil,   -68,  6439,  2777,   681,   nil,   -47,   nil,     2,
  1068,  1800,  6579,  6719,  6859,   nil,  2354,  6999,  7139,   nil,
   577,   432,   494,   604,   181,  7419,  7559,   -43,  7699,   478,
   740,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1668,   nil,  7839,   nil,   nil,   -23,   nil,  7979,  8119,   nil,
   nil,  8259,  8399,   470,   nil, 23799,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   114,   nil,   nil,   nil,   nil,   nil,   nil,   350,
   316,   314,   285, 24213,   nil,   nil,   nil,   nil,   nil,   nil,
   384,   nil,   nil,   662,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  8679,   nil,   nil,   nil,
   nil,  8819,  8959,  9099,  9239,  9379,   254,   nil,   721,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   213,   nil,  2213,  9659,  9799,  9939, 10079, 10219, 10359, 24849,
 24776,   nil,   nil, 10499, 10639, 10779,   nil,   nil,   579,   264,
   259,   213,   203,    64,    13,   nil, 23379,  2918,     0, 23519,
 23659, 10919, 11059, 11199, 11339, 11479, 11619, 11759, 11899, 12039,
 12179, 12319, 12459, 12599, 12739, 12879, 13019, 13159, 13299, 13439,
 13579,   nil,   nil,   nil,   nil, 13719,   nil,   nil,   nil, 25360,
   nil,   nil,   -41, 13999,   nil,   nil,  1224,   nil,   nil,   nil,
 14279,   nil,   nil, 14419,   nil,  2495,   nil,  1170,  1169,   nil,
 14839,  1207, 14979,   nil,   nil, 15119, 15259,   nil,   nil,   509,
   nil,   nil, 15399,  1207,   nil,  1137,  5174,  1146,  1152,  1113,
 15679,  4469,   351,   356,   490,  1165,   772,   nil,  1124,  1081,
   -19,   nil,   nil,   nil,  1112,   164,  1069, 16659,   nil,   429,
  1126,   773,   nil,  1118, 16939,   nil, 17079,  5597,  1184,  1058,
 17219, 17359,   nil,   nil, 26046,   396,   148,    90, 17499,  5456,
  4751,   375,  1167,  1047,    28,    21,   424,  1113,   -14,  1140,
   nil,   nil, 17779,   nil, 17919,   175,   235,   -61,   352,   443,
   448,   470,   527,   531,   nil,   575,   nil,   nil,   nil,   nil,
   nil,   448,   nil,   424,   nil,   154,   nil,  1001,   296,   nil,
   992,   nil,   991,   160,   nil,   980,   125,   nil,   180,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 24075,   nil,   nil,   nil,   nil,   987,   nil,
   nil,   969, 19459,   961,   nil,   nil,   925,   nil,   615,   389,
  1006,   nil,   nil,  1931,   nil,   nil,   nil,   nil,   nil,  2072,
   920,   nil,   nil,   916,   910,   427,   171,  1540,   nil,   nil,
   nil,   801,     0,   935,   nil,   nil,  1408,  1276,   nil,   nil,
   nil,   154,   nil,   930, 25068, 25141, 20719,   107, 20859, 20999,
 21139,  3341,  3200,   695,   617,   951,   918,   914,   911,  1358,
  1174,  1161,  4328,  4187,  3905,  3764,  3482,  3059,   948,  1083,
  4046,  3623,  2213,  1227,   851,   nil,  1196,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   733,   730,   nil,   nil, 22819,
   nil,   nil, 22959,   nil, 23099,   nil,   164,   nil,   nil,   nil,
  9519,   909,   721,   723,   nil,   nil,   725,  6159,   729, 22679,
 25579, 25287,   754,   773,   nil, 22539,   736,   nil,   800, 22399,
 25506, 25433,   960,  2354, 22259,   883,   882,   767,   nil,   nil,
   118,   568,   801,   786,   nil,   165,   813,   nil,  1032,   nil,
   774,   784,   nil,   789,   791,   797,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   786,   933,   nil,   nil, 22119,   nil,
   nil,   nil,   883,   nil,   nil,   nil,   884,   nil,   nil,   889,
  4046,   941,   nil,  5738,    28,   951,   952,   951,   965,   nil,
   nil, 21979, 25725, 25652,   -19,   nil,   353,   259,   527,   nil,
   260,   nil,   873, 21839,   nil,   893,   nil,   nil,   nil, 21699,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   258,   nil,   nil,   382,   nil,   nil,   nil,   859,   nil,
   nil,   880,   nil,  1931,   nil, 24351,   nil,   890, 21559, 21419,
 21279, 25214, 24995, 20579, 20439,   341,   934, 20299, 20159, 20019,
 19879,   951,   nil,   nil,   nil, 19739, 19599,   953,   nil,   nil,
   nil,   230,   174,   929,   523,   947,   950,   nil,   -63,  1052,
   -24,   nil,   978,   nil,  1083,   nil,   nil,   967,   nil,  1009,
 19319,   nil,   nil, 19179,   nil,   -95, 19039,   972,   nil,   976,
     4,    -5,  1016,    29,   804,  1022,   984, 18899, 18759,  1050,
   152,    52,   nil, 18619,   nil,   nil,   nil,   nil, 18479,   nil,
   nil, 18339,   nil,   nil,   nil,   -10,  1002,   339,   nil,   nil,
   289,  1471,   nil,  1731,   nil, 25935,   nil, 18199,   nil,   628,
   nil,  1005,   319,  1023,   nil,   nil,   nil,   nil,   738,   nil,
  1141,   nil,   nil,   nil,   nil,   nil,  1148,   nil, 18059,  1034,
    33,    57,   159,   160,  3764,   nil,   768,   nil, 24922, 24703,
 17639,   nil,   nil,   nil,   156,  2495,  4187,   730, 26061, 24489,
    61,   905,  3905,   nil,   nil,   292,   nil,   nil,   nil,  1077,
   nil,  1062, 16799,  1066,   362,   290,   128,   256,   nil,  2918,
 16519,   nil,  1071,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 16379, 16239, 16099, 15959,   271, 15819,   nil,
   nil, 26184,   nil,  3623,   nil,   nil,  1117,   nil,   -54,   nil,
   nil,   nil,   nil,  1102,    27,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  4328,   nil,  1105,  1152,   nil,   nil,   584,   nil,
  4892,  5033,  1121,  1127,  1125,   nil,   nil,   nil,  1126,  1127,
   nil,  1130,  1132,   nil,  1139,   nil,   nil,  1143,  1072,  1141,
  1065,   nil,  1262,   nil,   nil, 15539,   nil,  5315,  1282,   nil,
   nil,    50,   -13,  1284,   670,   629,   nil,  1171,  2072, 14699,
   394,  1291,   nil,  1179,   351,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1168,   nil,   nil,  1178,   379,   nil,   nil, 14559,
 14139,  2636,  1191,  1192,   nil,  1194,  1195,  1196,   nil,  1220,
   -91,  -101, 13859,   nil,   nil,   nil,   nil,  2777,  3341,   nil,
   136, 23239,   nil,   nil,   115,   236,   868,   nil,   nil,   487,
   nil,  1339,   nil, 26031,   nil, 26100,   nil,   nil,   nil,   nil,
   257,  1504,   186,   nil,    49,   nil,   nil,  6019,  5879,   nil,
   nil,   372,   426,   nil,   nil,   396,   nil,   nil,   317,   nil,
   -52,   nil,   nil, 26169,   nil,   nil, 26154,   nil, 26130,   nil,
   nil,   365,  8539,   718,   443,   nil,   492,  4610,    51,   151,
   633,   524,    -9,   nil,   nil,   nil,  -103,   nil,   nil,   nil,
   484,   486,   490,   508,   514,  1401,   526,  1415,  3482,   nil,
   293,   nil,   nil,  3059,   nil,  2636,   534,   nil,   nil,   536,
   538,   543,   548,   nil,   558,   nil,   839, 25798,   nil,   nil,
   689,  7279, 25871, 25944,    47,   nil,   769, 26115,   nil,   nil,
   nil,   nil,   922,   583,   764,   nil,   nil,   nil,   706,   715,
   nil, 26006,   nil, 26223,   nil, 25349,   nil,  1162,   nil,   nil,
   664,   702,   nil,   676,    20,    21,   120,    35,   nil,   687,
   692,   nil,   nil,   nil,   698,   704,   706,   707,     8,   nil,
   591,   nil,   nil,   nil,   nil,   720,   nil ]

racc_action_default = [
    -1,  -652,  -651,  -652,    -2,  -638,    -4,    -5,  -652,    -8,
    -9,  -652,  -652,  -652,   -35,  -652,  -652,   -39,  -652,  -652,
  -295,   -51,  -640,  -652,   -56,   -61,   -62,   -63,   -67,  -272,
  -272,  -272,  -310,  -344,  -345,   -79,  -651,   -83,   -91,   -93,
  -652,  -539,  -540,  -652,  -652,  -652,  -652,  -231,  -652,  -640,
  -245,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,  -294,
  -624,  -297,  -299,  -306,  -308,  -318,  -424,  -652,  -652,   -58,
   -58,  -638,  -652,  -328,  -335,  -652,  -346,  -347,  -349,  -350,
  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -358,  -367,  -469,
  -470,  -471,  -472,  -473,  -474,  -651,  -477,  -651,  -651,  -651,
  -487,  -651,  -651,  -651,  -515,  -521,  -523,  -524,  -525,  -526,
  -622,  -528,  -529,  -623,  -531,  -532,  -533,  -534,  -535,  -536,
  -537,  -538,  -543,  -544,  1097,    -3,  -639,  -647,  -648,  -649,
    -7,  -652,  -652,  -652,  -652,  -652,  -652,   -23,  -652,  -122,
  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -134,  -135,
  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,
  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,
  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,
  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,
  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,
   -28,  -131,  -651,  -652,  -652,  -652,  -652,  -652,  -651,  -652,
  -652,  -634,  -635,  -652,  -652,  -640,  -641,   -55,  -652,  -539,
  -540,  -652,  -295,  -652,  -652,  -237,  -652,  -651,  -652,  -652,
  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,
  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,
  -652,  -246,  -247,  -248,  -249,  -652,  -360,  -453,  -432,  -652,
  -636,  -637,   -68,  -652,  -317,  -359,  -652,  -446,  -448,   -74,
  -651,  -443,   -75,  -640,   -76,  -252,  -267,  -651,  -651,  -271,
  -652,  -277,  -652,  -651,  -616,  -652,  -652,   -77,   -78,  -638,
   -17,   -18,  -652,   -21,   -22,   -81,  -651,  -640,  -652,   -84,
   -87,  -651,   -99,  -100,  -652,  -652,  -107,  -310,  -313,  -640,
  -436,  -344,  -345,  -348,  -444,  -652,   -89,  -652,   -95,  -305,
  -522,  -652,  -225,  -226,  -652,  -238,  -652,  -651,  -301,  -640,
  -651,  -651,  -319,  -320,  -571,   -57,  -652,  -652,  -652,  -651,
  -651,  -638,  -652,  -639,  -539,  -540,  -652,  -652,  -295,  -652,
  -377,  -378,  -652,  -331,  -652,  -122,  -123,  -165,  -166,  -167,
  -183,  -188,  -195,  -198,  -338,  -652,  -539,  -540,  -611,  -612,
  -475,  -652,  -499,  -652,  -501,  -652,  -503,  -652,  -652,  -482,
  -652,  -651,  -652,  -652,  -495,  -652,  -652,  -497,  -652,  -514,
  -516,  -517,  -518,  -519,    -6,  -650,   -29,   -30,   -31,   -32,
   -33,   -10,   -11,  -652,   -25,   -26,   -27,  -132,  -652,   -36,
   -38,  -282,  -652,  -652,  -281,   -37,  -652,   -40,  -652,  -295,
   -48,   -50,  -206,  -257,  -277,   -52,   -53,   -41,  -207,  -257,
  -640,  -262,  -263,  -651,  -651,  -625,  -626,  -272,  -441,  -627,
  -628,  -626,  -625,  -272,  -440,  -442,  -627,  -628,   -47,  -215,
   -54,  -640,  -316,  -652,  -652,  -652,  -651,  -305,  -652,  -652,
  -652,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -227,
  -228,  -229,  -230,  -232,  -233,  -234,  -235,  -236,  -239,  -240,
  -241,  -242,  -640,  -250,  -652,  -454,  -272,  -625,  -626,   -65,
   -69,  -273,  -437,  -450,  -453,  -640,  -640,  -312,  -268,  -652,
  -276,  -269,  -652,  -274,  -652,  -278,  -652,  -619,  -621,   -16,
  -639,   -20,  -640,   -80,  -303,   -96,   -85,  -652,  -640,  -651,
  -652,  -652,  -106,  -652,  -522,  -652,   -92,   -97,  -652,  -652,
  -652,  -652,  -251,  -243,  -652,  -461,  -652,  -640,  -300,  -253,
  -644,  -644,  -652,  -652,  -614,  -644,  -652,  -425,  -571,  -428,
  -610,  -610,  -554,  -556,  -556,  -556,  -570,  -572,  -573,  -574,
  -575,  -576,  -577,  -578,  -579,  -652,  -581,  -583,  -585,  -590,
  -592,  -593,  -595,  -600,  -602,  -603,  -605,  -606,  -607,  -652,
  -651,  -368,  -369,  -651,  -652,  -652,  -652,  -652,  -652,  -363,
  -456,  -651,  -652,  -652,  -305,   -58,  -117,  -118,  -652,  -120,
  -652,  -295,  -651,  -652,  -336,  -549,  -341,  -632,  -633,  -652,
  -476,  -500,  -505,  -506,  -508,  -478,  -502,  -479,  -504,  -480,
  -481,  -652,  -484,  -486,  -652,  -489,  -491,  -492,  -652,  -493,
  -494,  -652,  -520,  -651,   -24,  -652,   -34,  -285,  -652,  -652,
  -651,  -652,  -652,  -652,  -652,  -445,  -652,  -264,  -266,  -652,
  -652,   -70,  -260,  -261,  -438,  -652,  -652,   -72,  -439,  -315,
  -642,  -625,  -626,  -625,  -626,  -640,  -652,  -431,  -651,   -64,
  -433,  -450,  -652,  -451,  -652,  -259,  -311,  -651,  -275,  -279,
  -652,  -617,  -618,  -652,   -19,   -82,  -652,   -88,   -94,  -640,
  -625,  -626,  -651,  -629,  -105,  -652,   -90,  -652,  -652,  -224,
  -640,  -651,  -361,  -651,  -298,  -366,  -302,  -254,  -646,  -645,
  -256,  -646,  -307,  -309,  -615,  -652,  -640,  -652,  -552,  -553,
  -652,  -652,  -563,  -652,  -566,  -652,  -568,  -652,  -379,  -652,
  -381,  -383,  -390,  -640,  -584,  -594,  -604,  -608,  -651,  -370,
  -651,   -59,  -371,  -372,  -323,  -324,  -652,  -326,  -652,  -640,
  -625,  -626,  -629,  -304,  -651,  -117,  -118,  -119,  -652,  -652,
  -651,  -329,  -545,  -547,  -332,  -651,  -651,  -571,  -571,  -652,
  -640,  -652,  -651,  -483,  -485,  -652,  -488,  -496,  -498,  -652,
  -133,  -283,  -652,  -640,  -625,  -626,  -626,  -625,   -49,  -258,
  -652,  -643,  -651,   -43,  -209,   -44,  -210,   -71,   -45,  -212,
   -46,  -211,   -73,  -652,  -652,  -652,  -652,  -445,  -652,  -413,
  -414,  -640,  -416,  -651,  -435,  -434,  -652,  -447,  -651,  -449,
  -270,  -280,  -620,   -86,  -445,   -98,  -214,  -314,   -13,   -15,
  -362,  -364,  -651,  -468,  -462,  -651,  -463,  -464,  -644,  -426,
  -651,  -651,  -418,  -640,  -610,  -591,  -609,  -555,  -556,  -556,
  -582,  -556,  -556,  -601,  -556,  -579,  -596,  -640,  -652,  -388,
  -652,  -580,  -652,  -365,  -373,  -652,  -375,  -651,  -652,   -60,
  -325,  -652,  -445,  -652,  -117,  -118,  -121,  -640,  -651,  -652,
  -652,  -652,  -339,  -640,  -652,  -342,  -613,  -507,  -510,  -511,
  -512,  -513,  -652,  -490,   -12,  -284,  -445,   -42,  -208,  -265,
  -652,  -244,  -610,  -610,  -395,  -651,  -651,  -651,  -412,  -652,
  -640,  -579,  -587,  -588,  -598,  -455,   -66,  -651,  -651,  -467,
  -652,  -652,  -466,  -255,  -652,  -652,  -652,  -427,  -551,  -652,
  -559,  -652,  -561,  -652,  -564,  -652,  -567,  -569,  -380,  -382,
  -386,  -652,  -391,  -321,  -652,  -376,  -322,  -652,  -651,  -327,
  -445,  -652,  -652,  -333,  -337,  -652,  -548,  -550,  -549,  -509,
  -652,  -393,  -394,  -403,  -397,  -405,  -652,  -408,  -652,  -410,
  -415,  -652,  -652,  -586,  -652,  -452,  -651,  -651,  -539,  -540,
  -652,  -652,  -295,  -465,  -429,  -430,  -640,  -420,  -422,  -423,
  -556,  -556,  -556,  -556,  -384,  -652,  -389,  -652,  -651,  -279,
  -651,  -330,  -546,  -651,  -340,  -651,  -610,  -589,  -396,  -651,
  -651,  -651,  -651,  -599,  -651,  -417,  -597,  -652,  -305,   -14,
  -461,  -651,  -652,  -652,  -305,  -419,  -652,  -652,  -557,  -560,
  -562,  -565,  -652,  -387,  -651,  -457,  -458,  -459,  -652,  -652,
  -392,  -652,  -400,  -652,  -402,  -652,  -406,  -652,  -409,  -411,
  -304,  -629,  -460,  -640,  -625,  -626,  -629,  -304,  -421,  -556,
  -385,  -374,  -334,  -343,  -651,  -651,  -651,  -651,  -445,  -558,
  -652,  -398,  -401,  -404,  -407,  -651,  -399 ]

clist = [
'6,608,234,384,450,296,296,296,229,356,357,4,291,361,352,278,280,29,319',
'318,137,221,521,29,556,142,142,359,360,346,721,410,297,297,297,786,129',
'569,29,600,603,882,434,435,282,289,292,29,29,29,441,29,510,441,355,355',
'701,126,355,441,237,457,463,125,145,145,515,147,147,546,333,333,584',
'416,417,418,419,29,870,317,576,849,29,29,336,504,29,340,863,142,298',
'298,298,392,888,394,396,399,641,404,407,394,129,391,665,333,315,294',
'307,308,447,506,692,873,777,753,468,142,355,355,355,355,1033,698,926',
'833,698,130,636,362,638,738,739,642,1007,727,730,625,962,393,734,29',
'959,636,975,408,29,29,29,29,29,789,978,1009,9,622,761,624,928,423,9',
'430,371,930,220,704,1006,567,859,354,735,938,513,514,838,688,1055,768',
'521,855,940,390,395,929,398,848,644,401,403,406,907,791,792,409,899',
'653,136,1033,868,421,865,296,701,1027,629,428,344,2,562,655,690,458',
'445,446,348,388,748,563,353,1016,691,470,471,433,433,1,451,474,369,781',
'318,279,889,385,1078,626,347,29,29,29,29,29,29,29,467,414,766,349,29',
'29,29,736,685,1009,557,350,296,351,372,898,429,440,29,296,440,701,296',
'623,512,707,440,698,698,1053,896,937,1029,716,9,877,900,959,991,297',
'1023,374,584,420,451,785,836,,870,297,576,520,520,,29,318,604,392,,',
'318,29,457,463,29,543,1080,526,,540,,709,291,,547,873,870,869,694,871',
',,,29,,,550,29,,742,744,746,29,1081,,827,129,298,605,606,795,355,,,559',
'564,560,298,,333,1056,612,1039,,511,532,,530,29,844,538,,536,529,516',
',333,448,712,29,29,29,794,469,544,642,748,,712,879,,,315,769,1025,,',
'315,129,,,,,,,645,,,,,870,333,864,333,561,565,,927,,,,,,,,607,,840,',
'892,,948,,661,,,666,,654,943,,,803,142,843,673,,817,,,712,678,,822,',
'296,,520,520,701,,672,458,916,,584,,584,901,902,531,,,,,,903,904,671',
',451,,145,,677,147,,,686,981,982,441,,,673,467,,29,,457,463,441,441',
',,,923,441,441,,672,584,584,,,748,935,748,296,576,576,1072,,,547,,,689',
'458,698,,,547,,,1010,794,866,458,,866,,840,451,945,,,720,856,,,29,,',
',931,,970,813,815,29,467,897,,818,820,,,,1030,,467,1031,,,29,333,,,774',
'968,971,,697,333,,,,,758,296,,760,1060,,,,1014,748,,458,,,,,,,,,,,,',
',,451,784,712,,,,29,790,,29,,783,,469,997,448,924,29,467,950,952,,954',
'956,296,957,762,441,,29,835,,1084,,458,29,,748,1018,748,1026,,6,923',
',,923,,923,451,1057,,,799,,800,666,,584,29,142,,,,,29,29,467,,29,834',
',,,748,29,29,829,547,,666,29,29,,917,673,520,440,678,845,,1058,931,1059',
',931,,440,440,145,,672,147,440,440,,,862,905,,853,,857,,433,,812,,1088',
',,923,,923,,923,,923,,,333,,,,,,,,,,666,333,,,296,,,886,893,886,923',
',458,,,,,,,891,,1048,1049,1050,1051,866,912,,924,451,931,924,,924,666',
',,858,,,29,,,467,,,29,,,,,29,29,,142,,9,,29,,,520,862,,814,816,808,',
'1073,,819,821,,,,,29,,964,,,,,,,,939,829,,932,1089,,972,,944,,724,,440',
'29,,,,,942,,924,,924,,924,,924,846,,,,,29,,,965,,355,,712,29,29,666',
',,,,,,924,,355,,,,,,,,764,765,,767,,,29,,29,872,,874,,,,,862,,19,29',
'29,,,,19,,995,996,,984,984,984,,,,,,973,,238,,977,,,,,,,238,238,238',
',19,324,324,,,1020,29,29,918,,,,,,,,,,,333,,814,816,821,819,,19,,333',
',,238,238,,1040,238,366,29,,,1045,932,,1042,932,925,,932,853,932,,,',
',,1054,,1022,,,,,,,,,29,,296,,,,886,,,,,,458,333,,984,984,984,984,,984',
'29,,,19,,29,451,29,238,238,238,238,19,,,,472,,467,886,666,41,890,29',
'467,,,41,,,,918,,,,932,,932,,932,,932,,,,,,,,984,984,984,984,,,41,322',
'322,,,984,,,,932,,,,,,,,,,517,,1011,,1012,,1013,41,,,,,,,,,,364,,,386',
',,,533,19,238,438,238,238,438,238,,,,,438,238,238,1032,,1034,985,987',
'989,,,,,,19,,,,431,444,558,,,,,,,,963,,,,,,966,41,,,,969,,,,,41,,,974',
',,238,,,,,,,238,,,238,,,,1079,,,,,,,,,,,,,,1085,19,1086,,1087,19,,,',
'324,19,,,,,,,523,,525,,,527,528,,,324,,,1095,,,1062,1064,1066,1068,19',
'1069,,1021,,,,1024,,,,238,19,19,,,32,41,,,,,32,,,620,,620,679,,,,566',
',,,,32,,,,,41,,,,32,32,32,,32,1091,1092,1093,1094,,,,,,,,1096,,,,,,',
',,,695,696,,,32,,,,,32,32,,,32,,,,705,1082,1083,,,,708,,,,,,,,,,,,41',
',,,41,,657,726,322,41,,,,,,,,,,,,,238,,,322,,,,,,,,32,,41,,,32,32,32',
'32,32,,,,,41,41,,,,,,,,,,,,386,,386,,,,,,,,,,,,,,19,,18,,,,,324,18,238',
',,,,,324,,699,,,566,,702,,238,,,,,,,,,,,,18,,,,,,,,,,,,,,,,,32,32,32',
'32,32,32,32,,,18,,32,32,32,,,,19,,,19,,,,,32,,,238,,,,,754,,,,,,,238',
'847,,,,,238,,,,,,,,,,,,,,,32,,,,,,,32,,19,32,,18,881,,438,238,,,19,',
'18,,,,438,438,,41,32,,438,438,32,,322,,,32,,,,801,322,,,,,,,906,699',
'566,,,,,,,,,,324,,32,,,,,,,,,324,,32,32,32,,,,,,,841,,,842,,,,,,,,,',
',41,,,41,,,,,,854,18,,18,,699,18,,566,,,,18,,,,947,,,,,,,19,876,,18',
',,238,958,,,,19,19,,,,,,19,,,41,444,16,,,,,,16,,41,,976,,,438,,,,,,',
',,,,,,,,,,,,,915,16,,19,,,,32,,,,,18,,,,18,,322,,,18,19,,,,,16,,322',
'19,19,,,,,,370,,,,,,,,,,18,,,,,,,,238,,19,,18,18,32,,,,,,,19,238,32',
',,,,,,,,,,,,,,32,41,,,,,16,,,,,,41,41,,16,,993,,41,,,19,19,,,1000,,',
',,,566,,,,,,,,,,,,,,32,,,32,,,,19,,,,32,,,41,,,,,,,,,32,,,,,,32,,1036',
',41,1019,,19,,,,,41,41,,,,,,,,,,,32,,,16,19,436,32,32,436,19,32,19,',
',436,41,32,32,,,,,32,32,,,41,238,16,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,',
',386,,,,,41,41,,,998,,,,,,,,,,,,,,,,,,,,,,,,16,,,41,16,,,,,16,,,,,,',
',,,,,,,18,,,18,386,32,,,,41,,32,16,,,,32,32,,,,,,32,16,16,,,,,41,,,',
',41,,41,42,,,32,,,42,,,,,,,,,18,,,,,,18,,,,18,32,,,,,18,18,,42,323,323',
'18,18,,,,,,,32,,,,,,,,32,32,,,,,,42,,,,,,,,,,365,,,387,,,,,32,,32,,',
',,,,,,,,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,32,32,,42,,,18',
',,,,,,,,,,18,18,,,,,,18,,,16,,,,32,,,,,,,,,,,18,,,,,,,,,,,,,,,,,,32',
',,,,18,,,,,,,,20,,,,,,20,,32,,,18,,32,,32,,42,,18,18,,,,16,,,16,,,,32',
',,20,326,326,,,,,,42,,,,18,,,,,,,,,,,18,,,20,,,,,,,,,,368,,,,,,,16,',
',,,,436,,,,16,,,,,,436,436,,18,18,,436,436,,,,,,,42,,,,42,,,,323,42',
',,,,,,,20,,,18,,,,,323,20,,,,,,,,,42,,,,,,,,,,,,42,42,18,,,,,,,,,,,387',
',387,,,,,,,,18,,,,,18,,18,,,,,,,,,,,,,,16,,,,,,,,,,,16,16,,,,,,16,,',
',20,,439,,,439,,,,,,439,,,436,,,,,,,,,,,20,,,,,,,,,,,,16,,,,,,,,,,,',
',,,,,,,16,,,,,,,,16,16,,,,,,,,,,,,,,,,,,,,,,,,,20,16,,,20,,,,326,20',
',,16,,,42,,,,,,,323,,,326,,,,,323,,,,,20,,,,,,,,,,,,20,20,,,16,16,,',
'1003,,,,,621,,621,,,,,,,,,,,,,,,,,,,,16,,,42,,,42,,,,,,,,,,,,,,,,,,',
',,,,16,,,,,,,,,,,,,,,,,,,,,16,,,,,16,42,16,,,,,,,,,42,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,323,,,,,,,,,,,323,,,,,,,,,,,,,,,,20,,,,',
',,326,,,,,,,,326,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,42,42,,,,,,42',
',,,,,,,,,,20,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,42',
',,,20,,,,42,42,439,,,,20,,,,,,439,439,,,,,439,439,,,245,,,,,42,,,,295',
'295,295,,,,,42,,,,,,342,343,,345,,326,,,,,,,,,,,326,,,,,,,,,,,,387,',
',,,42,42,,,999,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,20,,,,,,,,,,,20',
'20,,,387,,911,20,,42,,,,,,,,,,,,,,,,439,,,,,42,,,,,42,,42,,,,,,,,,,',
'20,,,,,,,,,,,,,,,,,,,20,,,,,,,,20,20,,,,,,,,,,,,,,,,,,295,443,,,449',
'295,,,20,,449,,,,,,,,,20,,,,245,,,481,482,483,484,485,486,487,488,489',
'490,491,492,493,494,495,496,497,498,499,500,501,502,,,,,503,621,,,,',
'20,20,295,,1002,,,,,295,,,295,,,,,,,295,,295,,,295,295,,,,,,20,,,,,',
',,,,,,,,,,,,,,,,,,621,,,,,20,,,552,,553,,,,295,295,,,,,,,,,,,20,,,,',
'20,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,449,449,449,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,295,,295,,,,,,,,,,,,,,,295',
',,,,,,,,,719,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,',
',,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,449,295',
',,,809,,,295,295,449,449,,,,,449,449,,,,,,,,,,,,,,,,,,,,,,,,295,,,295',
',,,,,,,,,,,,,,449,,,,,295,,,,,295,,,295,,,,,,,,,,,,,,,,295,,,,,,,,,',
',,,,,,,,,,,295,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,449,,',
',,,,,,,,,,449,449,449,449,,921,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,449,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295' ]
        racc_goto_table = arr = ::Array.new(3977, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,115,39,69,35,45,45,45,37,23,23,2,87,23,104,173,37,53,62,14,21,21,89',
'53,12,70,70,41,41,39,15,69,84,84,84,123,120,172,53,108,108,109,28,28',
'50,50,50,53,53,53,24,53,51,24,30,30,221,8,30,24,26,49,49,5,73,73,35',
'74,74,64,79,79,210,23,23,23,23,53,211,59,205,17,53,53,63,174,53,77,164',
'70,86,86,86,6,111,6,6,6,194,6,6,6,120,190,36,79,58,57,57,57,32,49,52',
'216,67,150,32,70,30,30,30,30,217,90,160,162,90,7,195,5,195,155,155,195',
'166,85,85,138,151,191,85,53,148,195,139,191,53,53,53,53,53,140,141,167',
'9,68,42,68,152,31,9,29,25,158,22,20,165,168,169,170,171,18,177,178,180',
'182,183,184,89,185,186,189,192,164,193,16,196,197,198,199,200,201,202',
'203,204,13,11,217,209,10,213,45,221,214,220,14,80,3,83,75,88,87,30,30',
'9,100,149,103,106,151,54,30,30,84,84,1,6,37,117,119,14,48,44,124,166',
'125,126,53,53,53,53,53,53,53,70,7,115,127,53,53,53,172,35,167,128,129',
'45,130,131,132,26,26,53,45,26,221,45,133,87,64,26,90,90,151,67,162,160',
'64,9,150,134,148,164,84,135,136,210,9,6,137,52,,211,84,205,6,6,,53,14',
'23,6,,,14,53,49,49,53,39,151,190,,37,,35,87,,62,216,211,161,174,161',
',,,53,,,37,53,,208,208,208,53,109,,36,120,86,14,14,194,30,,,6,6,84,86',
',79,111,37,17,,57,59,,8,53,36,59,,63,5,57,,79,76,49,53,53,53,195,76',
'77,195,149,,49,149,,,58,35,123,,,58,120,,,,,,,6,,,,,211,79,154,79,86',
'86,,161,,,,,,,,5,,89,,36,,155,,37,,,39,,21,85,,,35,70,64,87,,51,,,49',
'87,,51,,45,,6,6,221,,6,87,36,,210,,210,12,12,9,,,,,,172,172,50,,6,,73',
',50,74,,,39,155,155,24,,,87,70,,53,,49,49,24,24,,,,154,24,24,,6,210',
'210,,,149,12,149,45,205,205,15,,,62,,,50,87,90,,,62,,,161,195,156,87',
',156,,89,6,12,,,30,28,,,53,,,,210,,36,32,32,53,70,35,,32,32,,,,161,',
'70,161,,,53,79,,,41,108,12,,86,79,,,,,14,45,,14,155,,,,149,149,,87,',
',,,,,,,,,,,,,6,30,49,,,,53,30,,53,,6,,76,108,76,156,53,70,208,208,,208',
'208,45,208,120,24,,53,104,,161,,87,53,,149,108,149,154,,6,154,,,154',
',154,6,115,,,2,,21,39,,210,53,70,,,,,53,53,70,,53,173,,,,149,53,53,6',
'62,,39,53,53,,32,87,6,26,87,62,,12,210,12,,210,,26,26,73,,6,74,26,26',
',,39,69,,6,,6,,84,,86,,36,,,154,,154,,154,,154,,,79,,,,,,,,,,39,79,',
',45,,,6,14,6,154,,87,,,,,,,84,,208,208,208,208,156,14,,156,6,210,156',
',156,39,,,86,,,53,,,70,,,53,,,,,53,53,,70,,9,,53,,,6,39,,76,76,9,,35',
',76,76,,,,,53,,23,,,,,,,,14,6,,212,208,,23,,14,,102,,26,53,,,,,6,,156',
',156,,156,,156,76,,,,,53,,,14,,30,,49,53,53,39,,,,,,,156,,30,,,,,,,',
'102,102,,102,,,53,,53,159,,159,,,,,39,,34,53,53,,,,34,,14,14,,6,6,6',
',,,,,120,,34,,120,,,,,,,34,34,34,,34,34,34,,,14,53,53,76,,,,,,,,,,,79',
',76,76,76,76,,34,,79,,,34,34,,14,34,34,53,,,39,212,,37,212,159,,212',
'6,212,,,,,,14,,120,,,,,,,,,53,,45,,,,6,,,,,,87,79,,6,6,6,6,,6,53,,,34',
',53,6,53,34,34,34,34,34,,,,60,,70,6,39,65,102,53,70,,,65,,,,76,,,,212',
',212,,212,,212,,,,,,,,6,6,6,6,,,65,65,65,,,6,,,,212,,,,,,,,,,60,,159',
',159,,159,65,,,,,,,,,,65,,,65,,,,60,34,34,34,34,34,34,34,,,,,34,34,34',
'159,,159,157,157,157,,,,,,34,,,,82,82,60,,,,,,,,102,,,,,,102,65,,,,102',
',,,,65,,,102,,,34,,,,,,,34,,,34,,,,159,,,,,,,,,,,,,,159,34,159,,159',
'34,,,,34,34,,,,,,,82,,82,,,82,82,,,34,,,159,,,157,157,157,157,34,157',
',102,,,,102,,,,34,34,34,,,56,65,,,,,56,,,34,,34,60,,,,82,,,,,56,,,,',
'65,,,,56,56,56,,56,157,157,157,157,,,,,,,,157,,,,,,,,,,60,60,,,56,,',
',,56,56,,,56,,,,60,102,102,,,,60,,,,,,,,,,,,65,,,,65,,82,60,65,65,,',
',,,,,,,,,,34,,,65,,,,,,,,56,,65,,,56,56,56,56,56,,,,,65,65,,,,,,,,,',
',,65,,65,,,,,,,,,,,,,,34,,33,,,,,34,33,34,,,,,,34,,82,,,82,,82,,34,',
',,,,,,,,,,33,,,,,,,,,,,,,,,,,56,56,56,56,56,56,56,,,33,,56,56,56,,,',
'34,,,34,,,,,56,,,34,,,,,82,,,,,,,34,60,,,,,34,,,,,,,,,,,,,,,56,,,,,',
',56,,34,56,,33,60,,34,34,,,34,,33,,,,34,34,,65,56,,34,34,56,,65,,,56',
',,,82,65,,,,,,,60,82,82,,,,,,,,,,34,,56,,,,,,,,,34,,56,56,56,,,,,,,82',
',,82,,,,,,,,,,,65,,,65,,,,,,82,33,,33,,82,33,,82,,,,33,,,,60,,,,,,,34',
'82,,33,,,34,60,,,,34,34,,,,,,34,,,65,82,27,,,,,,27,,65,,60,,,34,,,,',
',,,,,,,,,,,,,,,82,27,,34,,,,56,,,,,33,,,,33,,65,,,33,34,,,,,27,,65,34',
'34,,,,,,27,,,,,,,,,,33,,,,,,,,34,,34,,33,33,56,,,,,,,34,34,56,,,,,,',
',,,,,,,,56,65,,,,,27,,,,,,65,65,,27,,34,,65,,,34,34,,,34,,,,,,82,,,',
',,,,,,,,,,56,,,56,,,,34,,,,56,,,65,,,,,,,,,56,,,,,,56,,34,,65,82,,34',
',,,,65,65,,,,,,,,,,,56,,,27,34,27,56,56,27,34,56,34,,,27,65,56,56,,',
',,56,56,,,65,34,27,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,65,,,,,65,65,,,65',
',,,,,,,,,,,,,,,,,,,,,,,27,,,65,27,,,,,27,,,,,,,,,,,,,,33,,,33,65,56',
',,,65,,56,27,,,,56,56,,,,,,56,27,27,,,,,65,,,,,65,,65,66,,,56,,,66,',
',,,,,,,33,,,,,,33,,,,33,56,,,,,33,33,,66,66,66,33,33,,,,,,,56,,,,,,',
',56,56,,,,,,66,,,,,,,,,,66,,,66,,,,,56,,56,,,,,,,,,,,56,56,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,66,,,,,,56,56,,66,,,33,,,,,,,,,,,33,33,,,,,,33',
',,27,,,,56,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,56,,,,,33,,,,,,,,38,,,,,,38',
',56,,,33,,56,,56,,66,,33,33,,,,27,,,27,,,,56,,,38,38,38,,,,,,66,,,,33',
',,,,,,,,,,33,,,38,,,,,,,,,,38,,,,,,,27,,,,,,27,,,,27,,,,,,27,27,,33',
'33,,27,27,,,,,,,66,,,,66,,,,66,66,,,,,,,,38,,,33,,,,,66,38,,,,,,,,,66',
',,,,,,,,,,,66,66,33,,,,,,,,,,,66,,66,,,,,,,,33,,,,,33,,33,,,,,,,,,,',
',,,27,,,,,,,,,,,27,27,,,,,,27,,,,38,,38,,,38,,,,,,38,,,27,,,,,,,,,,',
'38,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,27,,,,,,,,27,27,,,,,,,,,,,,,,,,,',
',,,,,,,38,27,,,38,,,,38,38,,,27,,,66,,,,,,,66,,,38,,,,,66,,,,,38,,,',
',,,,,,,,38,38,,,27,27,,,27,,,,,38,,38,,,,,,,,,,,,,,,,,,,,27,,,66,,,66',
',,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,27,,,,,27,66,27,,,,,,,',
',66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,,,66,,,,,,',
',,,,,,,,,38,,,,,,,38,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,',
',66,66,,,,,,66,,,,,,,,,,,38,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,',
',,,,,,,,,,,,66,,,,38,,,,66,66,38,,,,38,,,,,,38,38,,,,,38,38,,,40,,,',
',66,,,,40,40,40,,,,,66,,,,,,40,40,,40,,38,,,,,,,,,,,38,,,,,,,,,,,,66',
',,,,66,66,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,38,,,,,,,,,,,38',
'38,,,66,,38,38,,66,,,,,,,,,,,,,,,,38,,,,,66,,,,,66,,66,,,,,,,,,,,38',
',,,,,,,,,,,,,,,,,,38,,,,,,,,38,38,,,,,,,,,,,,,,,,,,40,40,,,40,40,,,38',
',40,,,,,,,,,38,,,,40,,,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,40,40,40,40,,,,,40,38,,,,,38,38,40,,38,,,,,40,,,40,,,,,,,40',
',40,,,40,40,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,38,,,40,,40,,,,40',
'40,,,,,,,,,,,38,,,,,38,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40',
',40,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,',
',,,,,,40,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,',
',,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40',
'40,40,,,,40,,,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,',
',,,,,,,,,,,,,40,,,,,40,,,,,40,,,40,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,',
',,,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,40,,,,,,,,,,,,',
'40,40,40,40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3977, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   225,     9,   207,   nil,    58,    -2,   119,    52,   152,
    63,   186,  -323,  -227,   -17,  -525,  -536,  -640,  -677,   nil,
  -365,     9,   152,   -58,  -174,    90,    37,  1705,  -181,   -62,
   -13,    22,  -117,  1440,   910,  -224,  -346,   -11,  2279,   -20,
  2935,   -42,  -448,   nil,  -529,   -27,   nil,   nil,   204,  -168,
    15,  -230,  -401,    15,  -289,   nil,  1271,    75,    70,    43,
   814,   nil,   -19,    46,  -268,  1052,  2076,  -504,  -217,   -72,
    14,   nil,   nil,    53,    56,  -218,   144,    43,   nil,    33,
   159,   nil,   938,  -142,     0,  -425,    58,   -18,  -296,  -276,
  -396,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   140,   nil,   289,  -134,   -51,   nil,   152,   nil,  -317,  -717,
   nil,  -666,   nil,   nil,   nil,  -361,   nil,   156,   nil,  -393,
    31,   nil,   nil,  -590,   158,  -150,   175,   185,   -94,   192,
   193,   185,  -522,  -106,  -504,  -689,   211,  -335,  -247,  -758,
  -475,  -753,   nil,   nil,   nil,   nil,   nil,   nil,  -736,  -369,
  -470,  -742,  -673,   nil,  -331,  -439,  -206,   224,  -668,   160,
  -707,  -420,  -563,   nil,  -648,  -780,  -812,  -793,  -187,  -567,
   103,  -397,  -317,   -10,  -192,   nil,   nil,  -115,  -115,   nil,
  -519,   nil,  -330,  -844,  -433,  -544,  -675,   nil,   nil,    89,
     8,    42,    84,    85,  -300,  -265,  -215,    87,    87,    87,
  -601,  -442,  -442,    90,  -588,  -274,   nil,   nil,  -240,  -543,
  -282,  -663,     7,  -537,  -777,   nil,  -630,  -864,   nil,   nil,
  -185,  -466 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   310,     7,   363,   313,
   nil,   nil,   nil,   nil,   555,   nil,   nil,   nil,   nil,   309,
   311,   nil,   nil,   nil,    14,    15,    21,   243,   nil,   nil,
    17,   nil,   437,   244,   341,   nil,   nil,   779,   242,   473,
    24,   nil,   nil,   358,   nil,    25,    26,    27,   nil,   715,
   nil,   nil,   nil,   330,   nil,    28,   327,   452,    35,   nil,
   nil,    37,    40,    39,   nil,   239,   240,   619,   nil,   144,
   460,   143,   146,    90,    91,   nil,   442,   105,    47,    50,
   275,   548,   301,   nil,   453,   nil,   454,   465,   674,   518,
   299,   283,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   284,    65,   nil,    67,   nil,   nil,
    68,   884,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   601,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   288,   277,   723,   852,   610,   885,   750,   583,
   nil,   751,  1028,   922,   571,   nil,   572,   nil,   nil,   573,
   nil,   575,   nil,   830,   nil,   nil,   nil,   581,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   464,   286,   nil,   nil,   693,
   nil,   505,   nil,   nil,   nil,   nil,   nil,    89,    92,    94,
   nil,   nil,   nil,   nil,   nil,   631,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   867,   788,   570,   nil,   574,
   875,   586,   588,   589,   933,   592,   593,   934,   596,   599,
   nil,   304 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_none,
  0, 157, :_reduce_9,
  3, 153, :_reduce_10,
  0, 159, :_reduce_11,
  4, 156, :_reduce_12,
  0, 164, :_reduce_13,
  6, 158, :_reduce_14,
  3, 158, :_reduce_15,
  2, 160, :_reduce_16,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  3, 165, :_reduce_19,
  2, 165, :_reduce_20,
  1, 166, :_reduce_none,
  1, 166, :_reduce_22,
  0, 177, :_reduce_23,
  4, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  2, 155, :_reduce_28,
  3, 155, :_reduce_29,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  4, 155, :_reduce_34,
  1, 155, :_reduce_none,
  3, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  1, 155, :_reduce_none,
  3, 170, :_reduce_40,
  3, 170, :_reduce_41,
  6, 170, :_reduce_42,
  5, 170, :_reduce_43,
  5, 170, :_reduce_44,
  5, 170, :_reduce_45,
  5, 170, :_reduce_46,
  3, 170, :_reduce_47,
  1, 178, :_reduce_48,
  3, 178, :_reduce_49,
  1, 178, :_reduce_none,
  1, 176, :_reduce_none,
  3, 176, :_reduce_52,
  3, 176, :_reduce_53,
  3, 176, :_reduce_54,
  2, 176, :_reduce_55,
  1, 176, :_reduce_none,
  1, 169, :_reduce_57,
  0, 189, :_reduce_58,
  0, 190, :_reduce_59,
  4, 187, :_reduce_60,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 192, :_reduce_none,
  4, 192, :_reduce_64,
  0, 200, :_reduce_65,
  4, 197, :_reduce_66,
  1, 199, :_reduce_67,
  2, 191, :_reduce_68,
  3, 191, :_reduce_69,
  4, 191, :_reduce_70,
  5, 191, :_reduce_71,
  4, 191, :_reduce_72,
  5, 191, :_reduce_73,
  2, 191, :_reduce_74,
  2, 191, :_reduce_75,
  2, 191, :_reduce_76,
  2, 191, :_reduce_77,
  2, 191, :_reduce_78,
  1, 171, :_reduce_none,
  3, 171, :_reduce_80,
  1, 205, :_reduce_none,
  3, 205, :_reduce_82,
  1, 204, :_reduce_83,
  2, 204, :_reduce_84,
  3, 204, :_reduce_85,
  5, 204, :_reduce_86,
  2, 204, :_reduce_87,
  4, 204, :_reduce_88,
  2, 204, :_reduce_89,
  4, 204, :_reduce_90,
  1, 204, :_reduce_91,
  3, 204, :_reduce_92,
  1, 208, :_reduce_none,
  3, 208, :_reduce_94,
  2, 207, :_reduce_95,
  3, 207, :_reduce_96,
  1, 210, :_reduce_97,
  3, 210, :_reduce_98,
  1, 209, :_reduce_99,
  1, 209, :_reduce_100,
  4, 209, :_reduce_101,
  3, 209, :_reduce_102,
  3, 209, :_reduce_103,
  3, 209, :_reduce_104,
  3, 209, :_reduce_105,
  2, 209, :_reduce_106,
  1, 209, :_reduce_107,
  1, 173, :_reduce_108,
  1, 173, :_reduce_109,
  4, 173, :_reduce_110,
  3, 173, :_reduce_111,
  3, 173, :_reduce_112,
  3, 173, :_reduce_113,
  3, 173, :_reduce_114,
  2, 173, :_reduce_115,
  1, 173, :_reduce_116,
  1, 213, :_reduce_117,
  1, 213, :_reduce_none,
  2, 214, :_reduce_119,
  1, 214, :_reduce_120,
  3, 214, :_reduce_121,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_125,
  1, 215, :_reduce_126,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 167, :_reduce_129,
  1, 167, :_reduce_none,
  1, 168, :_reduce_131,
  0, 221, :_reduce_132,
  4, 168, :_reduce_133,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  3, 186, :_reduce_206,
  3, 186, :_reduce_207,
  6, 186, :_reduce_208,
  5, 186, :_reduce_209,
  5, 186, :_reduce_210,
  5, 186, :_reduce_211,
  5, 186, :_reduce_212,
  0, 227, :_reduce_213,
  5, 186, :_reduce_214,
  3, 186, :_reduce_215,
  3, 186, :_reduce_216,
  3, 186, :_reduce_217,
  3, 186, :_reduce_218,
  3, 186, :_reduce_219,
  3, 186, :_reduce_220,
  3, 186, :_reduce_221,
  3, 186, :_reduce_222,
  3, 186, :_reduce_223,
  4, 186, :_reduce_224,
  2, 186, :_reduce_225,
  2, 186, :_reduce_226,
  3, 186, :_reduce_227,
  3, 186, :_reduce_228,
  3, 186, :_reduce_229,
  3, 186, :_reduce_230,
  1, 186, :_reduce_none,
  3, 186, :_reduce_232,
  3, 186, :_reduce_233,
  3, 186, :_reduce_234,
  3, 186, :_reduce_235,
  3, 186, :_reduce_236,
  2, 186, :_reduce_237,
  2, 186, :_reduce_238,
  3, 186, :_reduce_239,
  3, 186, :_reduce_240,
  3, 186, :_reduce_241,
  3, 186, :_reduce_242,
  3, 186, :_reduce_243,
  6, 186, :_reduce_244,
  1, 186, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  3, 224, :_reduce_250,
  3, 224, :_reduce_251,
  1, 228, :_reduce_252,
  1, 229, :_reduce_none,
  2, 229, :_reduce_254,
  4, 229, :_reduce_255,
  2, 229, :_reduce_256,
  1, 222, :_reduce_none,
  3, 222, :_reduce_258,
  3, 233, :_reduce_259,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 181, :_reduce_264,
  4, 181, :_reduce_265,
  2, 181, :_reduce_266,
  1, 203, :_reduce_267,
  2, 203, :_reduce_268,
  2, 203, :_reduce_269,
  4, 203, :_reduce_270,
  1, 203, :_reduce_271,
  0, 237, :_reduce_272,
  2, 196, :_reduce_273,
  2, 236, :_reduce_274,
  2, 235, :_reduce_275,
  1, 235, :_reduce_none,
  1, 230, :_reduce_277,
  2, 230, :_reduce_278,
  3, 230, :_reduce_279,
  4, 230, :_reduce_280,
  1, 175, :_reduce_281,
  1, 175, :_reduce_282,
  3, 174, :_reduce_283,
  4, 174, :_reduce_284,
  2, 174, :_reduce_285,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_296,
  0, 272, :_reduce_297,
  4, 225, :_reduce_298,
  0, 273, :_reduce_299,
  3, 225, :_reduce_300,
  0, 274, :_reduce_301,
  4, 225, :_reduce_302,
  3, 225, :_reduce_303,
  3, 225, :_reduce_304,
  2, 225, :_reduce_305,
  0, 275, :_reduce_306,
  4, 225, :_reduce_307,
  0, 276, :_reduce_308,
  4, 225, :_reduce_309,
  1, 225, :_reduce_310,
  4, 225, :_reduce_311,
  3, 225, :_reduce_312,
  1, 225, :_reduce_313,
  5, 225, :_reduce_314,
  4, 225, :_reduce_315,
  3, 225, :_reduce_316,
  2, 225, :_reduce_317,
  1, 225, :_reduce_none,
  2, 225, :_reduce_319,
  2, 225, :_reduce_320,
  6, 225, :_reduce_321,
  6, 225, :_reduce_322,
  4, 225, :_reduce_323,
  4, 225, :_reduce_324,
  5, 225, :_reduce_325,
  4, 225, :_reduce_326,
  6, 225, :_reduce_327,
  0, 277, :_reduce_328,
  0, 278, :_reduce_329,
  7, 225, :_reduce_330,
  0, 279, :_reduce_331,
  0, 280, :_reduce_332,
  0, 281, :_reduce_333,
  9, 225, :_reduce_334,
  0, 282, :_reduce_335,
  0, 283, :_reduce_336,
  6, 225, :_reduce_337,
  0, 284, :_reduce_338,
  0, 285, :_reduce_339,
  7, 225, :_reduce_340,
  0, 286, :_reduce_341,
  0, 287, :_reduce_342,
  9, 225, :_reduce_343,
  1, 225, :_reduce_344,
  1, 225, :_reduce_345,
  1, 225, :_reduce_346,
  1, 225, :_reduce_347,
  1, 180, :_reduce_348,
  1, 247, :_reduce_none,
  1, 253, :_reduce_none,
  1, 256, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 262, :_reduce_none,
  1, 264, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 291, :_reduce_none,
  1, 292, :_reduce_none,
  1, 162, :_reduce_none,
  1, 293, :_reduce_none,
  1, 248, :_reduce_none,
  1, 202, :_reduce_none,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  2, 254, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 255, :_reduce_none,
  5, 255, :_reduce_374,
  1, 257, :_reduce_none,
  2, 257, :_reduce_376,
  1, 263, :_reduce_none,
  1, 263, :_reduce_378,
  1, 294, :_reduce_none,
  3, 294, :_reduce_380,
  1, 297, :_reduce_381,
  3, 297, :_reduce_382,
  1, 296, :_reduce_383,
  4, 296, :_reduce_384,
  6, 296, :_reduce_385,
  3, 296, :_reduce_386,
  5, 296, :_reduce_387,
  2, 296, :_reduce_388,
  4, 296, :_reduce_389,
  1, 296, :_reduce_390,
  3, 296, :_reduce_391,
  4, 298, :_reduce_392,
  2, 298, :_reduce_393,
  2, 298, :_reduce_394,
  1, 298, :_reduce_395,
  2, 303, :_reduce_396,
  1, 303, :_reduce_none,
  6, 304, :_reduce_398,
  8, 304, :_reduce_399,
  4, 304, :_reduce_400,
  6, 304, :_reduce_401,
  4, 304, :_reduce_402,
  2, 304, :_reduce_403,
  6, 304, :_reduce_404,
  2, 304, :_reduce_405,
  4, 304, :_reduce_406,
  6, 304, :_reduce_407,
  2, 304, :_reduce_408,
  4, 304, :_reduce_409,
  2, 304, :_reduce_410,
  4, 304, :_reduce_411,
  1, 304, :_reduce_412,
  1, 308, :_reduce_413,
  1, 308, :_reduce_414,
  3, 309, :_reduce_415,
  1, 309, :_reduce_416,
  4, 309, :_reduce_417,
  1, 310, :_reduce_none,
  4, 310, :_reduce_419,
  1, 311, :_reduce_420,
  3, 311, :_reduce_421,
  1, 312, :_reduce_422,
  1, 312, :_reduce_none,
  0, 316, :_reduce_424,
  0, 317, :_reduce_425,
  4, 252, :_reduce_426,
  4, 314, :_reduce_427,
  1, 314, :_reduce_428,
  3, 315, :_reduce_429,
  3, 315, :_reduce_430,
  3, 319, :_reduce_431,
  2, 193, :_reduce_432,
  4, 193, :_reduce_433,
  5, 193, :_reduce_434,
  5, 193, :_reduce_435,
  0, 322, :_reduce_436,
  3, 251, :_reduce_437,
  4, 251, :_reduce_438,
  4, 251, :_reduce_439,
  3, 251, :_reduce_440,
  3, 251, :_reduce_441,
  3, 251, :_reduce_442,
  2, 251, :_reduce_443,
  1, 251, :_reduce_444,
  4, 251, :_reduce_445,
  0, 323, :_reduce_446,
  4, 250, :_reduce_447,
  0, 324, :_reduce_448,
  4, 250, :_reduce_449,
  0, 325, :_reduce_450,
  0, 326, :_reduce_451,
  4, 198, :_reduce_452,
  0, 327, :_reduce_453,
  0, 328, :_reduce_454,
  4, 320, :_reduce_455,
  0, 330, :_reduce_456,
  6, 261, :_reduce_457,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  6, 161, :_reduce_460,
  0, 161, :_reduce_461,
  1, 331, :_reduce_462,
  1, 331, :_reduce_none,
  1, 331, :_reduce_none,
  2, 332, :_reduce_465,
  1, 332, :_reduce_none,
  2, 163, :_reduce_467,
  1, 163, :_reduce_none,
  1, 238, :_reduce_469,
  1, 238, :_reduce_470,
  1, 238, :_reduce_none,
  1, 239, :_reduce_472,
  1, 334, :_reduce_473,
  1, 334, :_reduce_none,
  2, 334, :_reduce_475,
  3, 335, :_reduce_476,
  1, 335, :_reduce_477,
  3, 240, :_reduce_478,
  3, 241, :_reduce_479,
  3, 242, :_reduce_480,
  3, 242, :_reduce_481,
  1, 339, :_reduce_482,
  3, 339, :_reduce_483,
  1, 340, :_reduce_none,
  2, 340, :_reduce_485,
  3, 244, :_reduce_486,
  0, 343, :_reduce_487,
  4, 244, :_reduce_488,
  1, 342, :_reduce_489,
  3, 342, :_reduce_490,
  3, 243, :_reduce_491,
  3, 243, :_reduce_492,
  3, 245, :_reduce_493,
  3, 245, :_reduce_494,
  1, 344, :_reduce_495,
  3, 344, :_reduce_496,
  1, 345, :_reduce_497,
  3, 345, :_reduce_498,
  1, 336, :_reduce_499,
  2, 336, :_reduce_500,
  1, 337, :_reduce_501,
  2, 337, :_reduce_502,
  1, 338, :_reduce_503,
  2, 338, :_reduce_504,
  1, 341, :_reduce_505,
  0, 347, :_reduce_506,
  3, 341, :_reduce_507,
  0, 348, :_reduce_508,
  4, 341, :_reduce_509,
  1, 346, :_reduce_510,
  1, 346, :_reduce_511,
  1, 346, :_reduce_512,
  1, 346, :_reduce_none,
  2, 219, :_reduce_514,
  1, 219, :_reduce_515,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  3, 220, :_reduce_520,
  1, 333, :_reduce_none,
  2, 333, :_reduce_522,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_532,
  1, 212, :_reduce_533,
  1, 212, :_reduce_534,
  1, 212, :_reduce_535,
  1, 212, :_reduce_536,
  1, 212, :_reduce_537,
  1, 212, :_reduce_538,
  1, 246, :_reduce_539,
  1, 246, :_reduce_540,
  1, 179, :_reduce_541,
  1, 179, :_reduce_542,
  1, 184, :_reduce_543,
  1, 184, :_reduce_544,
  0, 350, :_reduce_545,
  4, 265, :_reduce_546,
  1, 265, :_reduce_547,
  3, 269, :_reduce_548,
  0, 352, :_reduce_549,
  3, 269, :_reduce_550,
  4, 351, :_reduce_551,
  2, 351, :_reduce_552,
  2, 351, :_reduce_553,
  1, 351, :_reduce_none,
  2, 354, :_reduce_555,
  0, 354, :_reduce_556,
  6, 318, :_reduce_557,
  8, 318, :_reduce_558,
  4, 318, :_reduce_559,
  6, 318, :_reduce_560,
  4, 318, :_reduce_561,
  6, 318, :_reduce_562,
  2, 318, :_reduce_563,
  4, 318, :_reduce_564,
  6, 318, :_reduce_565,
  2, 318, :_reduce_566,
  4, 318, :_reduce_567,
  2, 318, :_reduce_568,
  4, 318, :_reduce_569,
  1, 318, :_reduce_570,
  0, 318, :_reduce_571,
  1, 313, :_reduce_572,
  1, 313, :_reduce_573,
  1, 313, :_reduce_574,
  1, 313, :_reduce_575,
  1, 295, :_reduce_none,
  1, 295, :_reduce_577,
  1, 356, :_reduce_none,
  1, 357, :_reduce_none,
  3, 357, :_reduce_580,
  1, 305, :_reduce_581,
  3, 305, :_reduce_582,
  1, 358, :_reduce_none,
  2, 359, :_reduce_584,
  1, 359, :_reduce_585,
  2, 360, :_reduce_586,
  1, 360, :_reduce_587,
  1, 299, :_reduce_none,
  3, 299, :_reduce_589,
  1, 353, :_reduce_none,
  3, 353, :_reduce_591,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 300, :_reduce_594,
  1, 300, :_reduce_595,
  3, 362, :_reduce_596,
  3, 363, :_reduce_597,
  1, 306, :_reduce_598,
  3, 306, :_reduce_599,
  1, 355, :_reduce_600,
  3, 355, :_reduce_601,
  1, 364, :_reduce_none,
  1, 364, :_reduce_none,
  2, 307, :_reduce_604,
  1, 307, :_reduce_605,
  1, 365, :_reduce_none,
  1, 365, :_reduce_none,
  2, 302, :_reduce_608,
  2, 301, :_reduce_609,
  0, 301, :_reduce_610,
  1, 270, :_reduce_none,
  0, 366, :_reduce_612,
  4, 270, :_reduce_613,
  1, 249, :_reduce_614,
  2, 249, :_reduce_none,
  1, 232, :_reduce_none,
  3, 232, :_reduce_617,
  3, 367, :_reduce_618,
  2, 367, :_reduce_619,
  4, 367, :_reduce_620,
  2, 367, :_reduce_621,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  1, 271, :_reduce_none,
  1, 271, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  2, 206, :_reduce_none,
  2, 182, :_reduce_none,
  0, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 266, :_reduce_647,
  1, 266, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_650,
  0, 152, :_reduce_651 ]

racc_reduce_n = 652

racc_shift_n = 1097

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tLOWEST => 144,
  :tEQL => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tLOWEST",
  "tEQL",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_43(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

def _reduce_49(val, _values, result)
                      expr, (_, line), resbody = val

                      expr = value_expr expr
                      ary  = s(:array).line line
                      result = new_rescue(expr, new_resbody(ary, resbody))

    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_55(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_67(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_68(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_69(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_70(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_75(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_77(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]

    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_83(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_84(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_85(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_87(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_88(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_89(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_90(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_91(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_92(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]

    result
end

def _reduce_95(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_97(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_103(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_109(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_110(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_111(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_112(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_114(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_121(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_211(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_212(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_213(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_214(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_215(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_224(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")


    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 231 omitted

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_235(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_236(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_237(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_238(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_240(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_242(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_243(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_244(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_251(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_252(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_255(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_256(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_259(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

def _reduce_264(val, _values, result)
                      result = args val

    result
end

def _reduce_265(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_266(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_267(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      result = call_args val

    result
end

def _reduce_269(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_270(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_271(val, _values, result)
                      result = call_args val

    result
end

def _reduce_272(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_273(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_274(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_275(val, _values, result)
                      result = val[1]

    result
end

# reduce 276 omitted

def _reduce_277(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_278(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_279(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_280(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_282(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_283(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_284(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_285(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

def _reduce_296(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_298(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_299(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_300(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_301(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_303(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_304(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_305(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_306(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_307(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_308(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_309(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_310(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_311(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_312(val, _values, result)
                      result = new_yield

    result
end

def _reduce_313(val, _values, result)
                      result = new_yield

    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_315(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_316(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_317(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 318 omitted

def _reduce_319(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_320(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_322(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_325(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_326(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_327(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_328(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_329(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_330(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_331(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_333(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_334(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_335(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_336(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_337(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_338(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_339(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_340(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_341(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_342(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_343(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_346(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_347(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_348(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

# reduce 373 omitted

def _reduce_374(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 375 omitted

def _reduce_376(val, _values, result)
                      result = val[1]

    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = val[1]

    result
end

def _reduce_381(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_382(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_383(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_385(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_386(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_387(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_388(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_389(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_390(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_391(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_392(val, _values, result)
                      result = call_args val

    result
end

def _reduce_393(val, _values, result)
                      result = call_args val

    result
end

def _reduce_394(val, _values, result)
                      result = call_args val

    result
end

def _reduce_395(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_396(val, _values, result)
                      result = args val

    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args val

    result
end

def _reduce_403(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
                      result = args val

    result
end

def _reduce_413(val, _values, result)
 result = 0
    result
end

def _reduce_414(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_415(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_416(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_417(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      result = args val

    result
end

def _reduce_422(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_425(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_426(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_427(val, _values, result)
                      result = args val

    result
end

def _reduce_428(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_429(val, _values, result)
                      result = val[1]

    result
end

def _reduce_430(val, _values, result)
                      result = val[1]

    result
end

def _reduce_431(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_432(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_433(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_435(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_436(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_437(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_442(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_443(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_444(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_445(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_446(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_447(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_448(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_449(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_453(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_454(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_455(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_456(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_457(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 458 omitted

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_461(val, _values, result)
                      result = nil

    result
end

def _reduce_462(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 463 omitted

# reduce 464 omitted

def _reduce_465(val, _values, result)
                      result = val[1]

    result
end

# reduce 466 omitted

def _reduce_467(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_470(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_473(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_476(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_477(val, _values, result)
                      result = new_string val

    result
end

def _reduce_478(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_479(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_480(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_481(val, _values, result)
                      result = val[1]

    result
end

def _reduce_482(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_483(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 484 omitted

def _reduce_485(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_486(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_487(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_488(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_489(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_490(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_491(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_492(val, _values, result)
                      result = val[1]

    result
end

def _reduce_493(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_494(val, _values, result)
                      result = val[1]

    result
end

def _reduce_495(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_496(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_497(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_498(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_499(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_500(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_501(val, _values, result)
                      result = nil

    result
end

def _reduce_502(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_503(val, _values, result)
                      result = nil

    result
end

def _reduce_504(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_505(val, _values, result)
                      result = new_string val

    result
end

def _reduce_506(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_507(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_508(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_509(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_510(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_511(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_512(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 513 omitted

def _reduce_514(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_515(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 521 omitted

def _reduce_522(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

def _reduce_532(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_536(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_537(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_538(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_539(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_540(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_541(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_542(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_543(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_544(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_545(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_546(val, _values, result)
                      result = val[2]

    result
end

def _reduce_547(val, _values, result)
                      result = nil

    result
end

def _reduce_548(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_549(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_550(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_551(val, _values, result)
                      result = args val

    result
end

def _reduce_552(val, _values, result)
                      result = args val

    result
end

def _reduce_553(val, _values, result)
                      result = args val

    result
end

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]

    result
end

def _reduce_556(val, _values, result)
                      result = nil

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val

    result
end

def _reduce_571(val, _values, result)
                      result = args val

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_573(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_574(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_575(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 576 omitted

def _reduce_577(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 578 omitted

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      result = val[1]

    result
end

def _reduce_581(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_582(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_585(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_586(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_587(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      result = args val

    result
end

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_595(val, _values, result)
                      result = :"**"

    result
end

def _reduce_596(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_597(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_598(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_599(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_600(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_601(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 602 omitted

# reduce 603 omitted

def _reduce_604(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_605(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 606 omitted

# reduce 607 omitted

def _reduce_608(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_609(val, _values, result)
                      result = val[1]

    result
end

def _reduce_610(val, _values, result)
                      result = nil

    result
end

# reduce 611 omitted

def _reduce_612(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_613(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_614(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 615 omitted

# reduce 616 omitted

def _reduce_617(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_618(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_619(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_620(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value).line sym.line

    result
end

def _reduce_621(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

# reduce 645 omitted

# reduce 646 omitted

def _reduce_647(val, _values, result)
 yyerrok
    result
end

# reduce 648 omitted

# reduce 649 omitted

def _reduce_650(val, _values, result)
 yyerrok
    result
end

def _reduce_651(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby25Parser
