#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby20Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-621,-113,-111,-112,596,596,281,-621,-621,-621,816,596,662,-621,-621',
'281,-621,231,596,645,-110,825,-536,281,825,-621,596,95,-111,-536,769',
'-113,663,-94,770,96,-621,-621,-536,-621,-621,-621,-621,-621,125,-80',
'803,757,-112,124,-115,-116,-110,232,853,824,-108,-109,824,999,832,575',
'574,573,-111,576,-111,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621',
'-621,-621,-621,-621,-617,644,-621,-621,-621,-113,669,-101,222,223,-621',
'-114,283,-621,222,223,222,223,-621,-110,-621,283,-621,-621,-621,-621',
'-621,-621,-621,283,-621,-621,-621,-617,-113,-111,-112,125,125,-113,-111',
'-112,124,124,125,-621,-621,958,-621,124,-621,125,-102,-110,-621,-104',
'124,-621,-110,125,-112,-621,-621,-621,124,232,125,-621,-621,-104,-621',
'124,-103,-102,-106,-107,-101,-618,852,-621,-99,-100,-621,642,722,-304',
'878,724,603,473,-621,-621,-304,-621,-621,-621,-621,-621,232,842,-530',
'-304,229,420,232,843,232,-530,422,421,663,746,281,575,574,573,-105,576',
'878,-444,718,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621',
'-621,-621,-621,-621,-104,-621,-621,-621,-102,669,-621,-116,-107,-621',
'641,-617,-621,742,803,-621,-104,-621,-615,-621,-116,-621,-621,-621,-621',
'-621,-621,-621,-113,-621,-621,-621,662,-621,-539,-104,-444,229,-104',
'-102,582,-435,-102,-444,-621,-621,830,-103,-621,-621,-104,584,-444,-303',
'-102,232,-621,-538,911,-112,-303,-303,-303,283,272,-539,-303,-303,-110',
'-303,-444,-527,821,746,-102,575,574,573,-527,576,232,-614,504,-615,592',
'591,-111,-527,-109,-303,-303,-116,-303,-303,-303,-303,-303,504,923,-99',
'746,-621,575,574,573,-615,576,-100,-621,584,125,-108,-110,-617,804,124',
'-213,-621,585,-109,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-524,-621,-303,-303,-303,-538,668,-524,592,591,-303',
'817,-614,-303,626,-279,-524,1006,-303,792,-303,791,-303,-303,-303,-303',
'-303,-303,-303,-213,-303,781,-303,776,-614,746,-115,575,574,573,582',
'576,585,626,871,-303,-303,626,-105,626,-303,584,722,626,-524,721,718',
'-303,603,-108,-114,-524,-524,-524,125,-113,-524,-524,-524,124,-524,-106',
'228,580,718,628,627,634,-524,656,-524,-524,-524,-115,592,591,722,718',
'654,724,-524,-524,-529,-524,-524,-524,-524,-524,125,-529,269,270,125',
'124,628,627,753,124,628,627,628,627,624,787,628,627,646,904,585,222',
'223,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524',
'-524,268,267,-524,-524,-524,-303,-524,-524,722,751,-524,724,-303,-524',
'-524,626,-524,-618,-524,750,-524,-303,-524,-524,-524,-524,-524,-524',
'-524,-532,-524,232,-524,905,1037,746,-532,575,574,573,923,576,626,-280',
'125,-524,-524,-524,-524,124,-524,584,-524,626,-303,749,631,-524,-534',
'232,-524,-303,-303,-303,-533,-534,-303,-303,-303,740,-303,-533,-347',
'580,252,738,628,627,790,-347,-303,-303,-303,736,592,591,874,878,-347',
'734,-303,-303,-304,-303,-303,-303,-303,-303,733,-304,-304,730,228,628',
'627,629,249,-304,-304,277,251,250,247,248,628,627,-304,910,585,874,878',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'519,-535,-303,-303,-303,-303,819,-303,-535,3,-303,726,-303,-303,-303',
'725,-303,-618,-303,252,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-527,-303,621,-303,538,539,232,-527,922,622,575,574,573,923,576,718',
'-303,-303,-303,-303,715,-303,249,-303,584,-527,251,250,-303,228,710',
'-114,-527,-527,-527,-531,1028,-527,-527,-527,927,-527,-531,-524,709',
'774,580,-303,709,-527,-524,-527,-527,-527,-303,589,588,592,591,-618',
'550,-527,-527,-303,-527,-527,-527,-527,-527,746,232,575,574,573,228',
'576,746,-278,575,574,573,227,576,746,932,575,574,573,121,576,225,585',
'-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527',
'698,742,-527,-527,-527,-294,-527,-527,742,-94,-527,937,-294,-527,-527',
'742,-527,745,-527,252,-527,-294,-527,-527,-527,-527,-527,-527,-527,232',
'-527,733,-527,922,940,575,574,573,923,576,128,129,130,131,132,-527,-527',
'-527,-527,584,-527,249,-527,942,-303,251,250,-527,222,223,-527,-303',
'-303,-303,335,336,944,-303,-303,946,-303,580,746,946,575,574,573,232',
'576,232,589,588,592,591,952,228,592,591,222,223,-303,-303,1034,-303',
'-303,-303,-303,-303,232,718,232,1032,746,680,575,574,573,718,576,746',
'742,575,574,573,252,576,585,252,718,951,252,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-537,228,-303,-303,-303',
'742,668,-537,470,252,-303,232,742,-303,745,673,-537,471,-303,286,-303',
'661,-303,-303,-303,-303,-303,-303,-303,718,-303,232,-303,660,970,746',
'228,575,574,573,582,576,-536,1028,-281,-303,-303,232,-303,-536,-303',
'584,774,653,-621,652,-278,-303,-536,971,-114,-621,-621,-621,733,974',
'-621,-621,-621,977,-621,252,979,580,981,232,-537,983,650,-621,-621,-621',
'-621,-537,592,591,643,262,263,640,-621,-621,-537,-621,-621,-621,-621',
'-621,746,637,575,574,573,249,576,255,633,251,250,247,248,995,996,253',
'609,254,608,411,585,603,232,-621,-621,-621,-621,-621,-621,-621,-621',
'-621,-621,-621,-621,-621,-621,252,742,-621,-621,-621,228,818,-621,1008',
'545,-621,544,535,-621,-621,540,-621,718,-621,718,-621,533,-621,-621',
'-621,-621,-621,-621,-621,781,-621,-621,-621,286,232,289,536,578,1026',
'575,574,573,582,576,529,-621,-621,-621,-621,-294,-621,528,-621,584,-622',
'1029,-294,-621,842,232,-112,-622,-622,-622,-79,-294,-622,-622,-622,519',
'-622,517,252,1035,514,580,228,1058,1038,-622,-622,-622,-622,547,589',
'588,592,591,262,263,-622,-622,471,-622,-622,-622,-622,-622,946,999,946',
'575,574,573,249,576,255,946,251,250,247,248,1043,286,253,1008,254,504',
'231,475,585,-622,-622,-622,-622,-622,-622,-622,-622,-622,-622,-622,-622',
'-622,-622,474,228,-622,-622,-622,228,733,-622,772,1052,-622,1054,607',
'-622,-622,1056,-622,774,-622,1058,-622,605,-622,-622,-622,-622,-622',
'-622,-622,1058,-622,-622,-622,922,472,575,574,573,923,576,128,129,130',
'131,132,-622,-622,-622,-622,584,-622,-642,-622,423,715,418,401,-622',
'-642,-642,-642,398,396,-642,-642,-642,393,-642,252,899,900,580,369,901',
'119,120,-642,-642,232,1008,589,588,592,591,262,263,252,-642,-642,718',
'-642,-642,-642,-642,-642,718,252,334,333,272,249,-618,262,263,251,250',
'247,248,-617,232,224,221,262,263,220,946,585,1008,249,1081,255,1058',
'251,250,247,248,1058,1058,249,-642,255,-642,251,250,247,248,-642,219',
'-642,-642,-642,286,-642,-642,-642,-642,746,-642,575,574,573,923,576',
'252,252,709,-642,-642,-642,252,232,286,584,-642,-642,286,232,-642,-642',
'709,-642,-642,-642,-642,-642,519,517,-642,869,,,,-642,,580,,249,,,-642',
'251,250,247,248,,592,591,,-642,-642,-642,-642,-642,-642,-642,-642,-642',
'-642,-642,-642,-642,-642,,,-642,-642,-642,,,-642,,286,-642,,,-642,-642',
',-642,585,-642,,-642,,-642,-642,-642,-642,-642,-642,-642,,-642,-642',
'-642,128,129,130,131,132,128,129,130,131,132,,,-642,-642,-443,-642,',
'-642,,,,-443,-443,-443,-642,,-443,-443,-443,578,-443,575,574,573,582',
'576,,,,-443,-443,-443,,,,584,,,,,-443,-443,,-443,-443,-443,-443,-443',
',,,,,,,,,580,564,,,,,,,,589,588,592,591,,-443,-443,-443,-443,-443,-443',
'-443,-443,-443,-443,-443,-443,-443,-443,,,-443,-443,-443,,,-443,,286',
'-443,,,-443,-443,,-443,585,-443,,-443,,-443,-443,-443,-443,-443,-443',
'-443,,-443,-443,-443,,,,,,,,,,,,,-443,-443,-312,-443,,-443,,,,-312,-312',
'-312,-443,,-312,-312,-312,746,-312,575,574,573,582,576,,,,,-312,-312',
',,,584,,,,,-312,-312,,-312,-312,-312,-312,-312,,,,,,,,,,580,,,,,,,,',
',,592,591,,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312',
'-312,-312,,,-312,-312,-312,,,-312,,289,-312,,,-312,-312,,-312,585,-312',
',-312,,-312,-312,-312,-312,-312,-312,-312,,-312,,-312,,,,,,,,,,,,,-312',
'-312,-295,-312,,-312,,,,-295,-295,-295,-312,,-295,-295,-295,746,-295',
'575,574,573,582,576,,,,,-295,-295,-295,,,584,,,,,-295,-295,,-295,-295',
'-295,-295,-295,,,,,,,,,,580,,,,,,,,,,,592,591,,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295,,,-295',
',,-295,,,-295,-295,,-295,585,-295,,-295,,-295,-295,-295,-295,-295,-295',
'-295,,-295,,-295,746,,575,574,573,923,576,,,,,,-295,-295,-295,-295,584',
'-295,-623,-295,,,,,-295,-623,-623,-623,,,-623,-623,-623,,-623,,,,580',
',,,,-623,-623,-623,-623,,,592,591,,,,-623,-623,,-623,-623,-623,-623',
'-623,,,,,,,,,,,,,,,,,,,,,,585,,-623,-623,-623,-623,-623,-623,-623,-623',
'-623,-623,-623,-623,-623,-623,,,-623,-623,-623,,,-623,,,-623,,,-623',
'-623,,-623,,-623,,-623,,-623,-623,-623,-623,-623,-623,-623,,-623,-623',
'-623,,,,,,,,,,,,,-623,-623,-623,-623,,-623,,-623,,,,,-623,186,197,187',
'210,183,203,193,192,213,214,208,191,190,185,211,215,216,195,184,198',
'202,204,196,189,,,,205,212,207,206,199,209,194,182,201,200,,,,,,181',
'188,179,180,176,177,178,136,138,,,137,,,,,,,,,170,171,,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169',
'165,164,160,161,155,153,145,168,146,,,174,103,,,,,,,,,,104,,,,,,,,,167',
',,,,175,186,197,187,210,183,203,193,192,213,214,208,191,190,185,211',
'215,216,195,184,198,202,204,196,189,,,,205,212,207,206,199,209,194,182',
'201,200,,,,,,181,188,179,180,176,177,178,136,138,408,407,137,,409,,',
',,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,',
'174,,,,,,,,,,,,,,,,,,,,167,,,,,175,186,197,187,210,183,203,193,192,213',
'214,208,191,190,185,211,215,216,195,184,198,202,204,196,189,,,,205,212',
'207,206,199,209,194,182,201,200,,,,,,181,188,179,180,176,177,178,136',
'138,135,,137,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152',
',,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155',
'153,145,168,146,,,174,103,,,,,,,,,,104,,,,,,,,,167,,,,,175,186,197,187',
'210,183,203,193,192,213,214,208,191,190,185,211,215,216,195,184,198',
'202,204,196,189,,,,205,212,207,206,199,209,194,182,201,200,,,,,,181',
'188,179,180,176,177,178,136,138,,,137,,,,,,,,,170,171,,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169',
'165,164,160,161,155,153,145,168,146,,,174,103,,,,,,,,,,104,,,,,,,,,167',
',,,,175,186,197,187,210,183,203,193,192,213,214,208,191,190,185,211',
'215,216,195,184,198,202,204,196,189,,,,205,212,207,206,199,209,194,182',
'201,200,,,,,,181,188,179,180,176,177,178,136,138,,,137,,,,,,,,,170,171',
',166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,',
',,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,103,,',
',,,,,,,104,,,,,,,,,167,,,,,175,186,197,187,210,183,203,193,192,213,214',
'208,191,190,185,211,215,216,195,184,198,202,204,196,189,,,,205,212,207',
'206,199,209,194,182,201,200,,,,,,181,188,179,180,176,177,178,136,138',
',,137,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145',
'168,146,,,174,,,,,,,,,,,,,,,,,,,,167,,,,,175,186,197,187,210,183,203',
'193,192,213,214,208,191,190,185,211,215,216,195,184,198,202,204,196',
'189,,,,205,212,207,378,377,379,376,182,201,200,,,,,,181,188,179,180',
'373,374,375,371,138,109,108,372,,111,,,,,,,170,171,,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,385,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,,,307,85,86,87',
'12,78,,,167,79,80,,,175,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,657,11,49,309,13,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261',
',245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247',
'248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266,,-253,',
',66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,22,,,,,657,11,49,309,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259',
'269,270,264,265,260,261,,245,246,,,262,263,,43,,,311,,,62,63,,,64,,38',
'249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101',
',,,96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49',
'309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
'252,256,257,258,259,269,270,264,265,260,261,,245,246,,,262,263,,43,',
',36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254',
',,,103,95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102,307,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261,',
'245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247',
'248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266,,,,,66',
',,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259,269',
'270,264,265,260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249',
',255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,',
',96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252',
'256,257,258,259,269,270,264,265,260,261,,245,246,,,262,263,,43,,,36',
',,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261,,245,246,',
',262,263,,43,,,311,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100',
'102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259,269,270',
'264,265,260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255',
'48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104',
'232,266,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13',
'117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,-643',
'-643,-643,-643,269,270,,,-643,-643,,,,,,262,263,,43,,,36,,,62,63,,,64',
',38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49',
'309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
'252,-643,-643,-643,-643,269,270,,,-643,-643,,,,,,262,263,,43,,,36,,',
'62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,',
'22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,252,-643,-643,-643,-643,269,270,,,-643,-643,,,,,,262,263',
',43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23',
'254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,252,-643,-643,-643,-643,269,270,,,-643,-643,',
',,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,10,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,252,256,257,258,259,269,270,,,260,261',
',,,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,265',
'260,261,,-643,-643,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251',
'250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259',
'269,270,264,265,260,261,,-643,-643,,,262,263,,43,,,36,,,62,63,,,64,',
'38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49',
'309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
'252,256,257,258,259,269,270,264,,260,261,,,,,,262,263,,43,,,36,,,62',
'63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,',
',,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,252,-643,-643,-643,-643,269,270,,,-643,-643,,,,,,262,263,',
'43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23',
'254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,252,-643,-643,-643,-643,269,270,,,-643,-643,',
',,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11',
'49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,',
'22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,10,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,311,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11',
'49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,',
'22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,746,64,575',
'574,573,582,576,48,,,,,,,,242,584,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,580,,93,100,102,85,86,87,,78,,592,591,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,585,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,428,,,,48,,,,,,,,242,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11',
'49,10,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,',
',,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,746,64,575,574,573,923,576,48',
',,,,,,,242,584,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,580,,93,100',
'102,85,86,87,,78,,592,591,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,585,,,49,,,117,116,118,107,60,109,108',
'110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,',
',,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,',
',,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,315,,,,,,,,,,,,,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,243,,,62,63,,746,64,575,574,573,923',
'576,,,,,,,,,,584,,,,103,95,97,98,99,101,,,,96,104,,,,332,,,66,580,,93',
'100,102,85,86,87,,78,,592,591,79,80,,,,83,,81,82,84,326,327,76,77,,',
',,,88,323,329,113,112,114,115,,,244,,,,585,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,,13,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,125,,,,,124,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330',
',,,,,,,,,,,,,,,,,,,363,,,36,,,62,63,,,64,,38,,,,,,,,,,,,,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,',
'11,49,10,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,411,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115',
',,22,,,,,,11,49,,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296',
',48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',428,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,428,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108',
'110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,232,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,',
',,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,',
'243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,',
',96,104,232,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115',
',,22,,,,,,11,49,,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,,,330,,,,,,,,,,,,,,,,,,,,985,,,243,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114',
'115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,243,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,531,,,66,,,93,100,102,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114',
'115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,693,,,,48,,,,,',
',,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,550,,62,63,,,64',
',,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
'300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,298,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,',
',237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,610,60,109,108,611,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,612,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,610,60,109,108,611,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,612,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,992,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,985,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,296,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115',
',,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,',
',88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,',
',,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,',
',237,,,243,,,62,63,,,64,,693,,296,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49',
',,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,296,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115',
',,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,',
'105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,411,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,',
',,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77',
',,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,316',
',,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,',
',,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77',
',,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,796,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,',
',237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,',
',,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,693,,296,,48,,,,,,',
',242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,',
'296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93',
'100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,',
',88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,298,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,',
',,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,',
'45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,693,,,,48,,,,,,',
',242,,,,,103,95,97,98,99,101,,,,96,104,457,461,,,456,,66,,301,93,100',
'102,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,674,454,,,675,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,502,454,,,503',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,1062,461,,,1061,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',676,461,,,677,,,,,,167,,,170,171,175,166,148,149,150,157,154,156,,',
'151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,450,454,,,451,,,,,,167,,',
'170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,1065,454,,,1066,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,702,454,,,703',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,798,454,,,799,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',676,461,,,677,,,,,,167,,,170,171,175,166,148,149,150,157,154,156,,',
'151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,674,454,,,675,,,,,,167,,',
'170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,766,461,,,767,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,1067,461,,,1068',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,885,461,,,886,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',705,461,,,706,,,,,,167,,,170,171,175,166,148,149,150,157,154,156,,',
'151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,801,461,,,800,,,,,,167,,',
'170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',578,174,575,574,573,582,576,,,,,502,454,,,503,584,,,,,167,,,170,171',
'175,166,148,149,150,157,154,156,,,151,152,580,,,172,173,158,159,,,589',
'588,592,591,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168',
'146,,,174,,,,,,,,,585,764,454,,,765,,,,,,167,,,170,171,175,166,148,149',
'150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162',
',147,169,165,164,160,161,155,153,145,168,146,,578,174,575,574,573,582',
'576,922,,575,574,573,923,576,,,584,,,,,167,,584,,578,175,575,574,573',
'582,576,,,,,,,580,,,584,,,,580,,589,588,592,591,,,,589,588,592,591,',
',,,578,580,575,574,573,582,576,,,,589,588,592,591,,,584,,,,232,585,',
',,,,578,585,575,574,573,582,576,,,,,580,,,,,584,,,585,589,588,592,591',
',,,,,,,,,,,,,,580,,,,,,,,,589,588,592,591,,,,,,585,,,,,,,,,,,,,,,,,',
',,,,,,,,,585' ]
        racc_action_table = arr = ::Array.new(25472, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'801,1066,1065,1067,352,353,683,801,801,801,674,882,798,801,801,65,801',
'22,931,402,1079,681,989,325,831,801,955,92,764,989,612,765,799,697,612',
'92,801,801,989,801,801,801,801,801,304,697,658,598,766,304,608,364,883',
'22,728,681,360,361,831,937,687,937,937,937,674,937,798,801,801,801,801',
'801,801,801,801,801,801,801,801,801,801,1067,402,801,801,801,799,801',
'658,784,784,801,767,683,801,713,713,466,466,801,658,801,65,801,801,801',
'801,801,801,801,325,801,801,801,766,1066,1065,1067,352,353,1066,1065',
'1067,352,353,882,801,801,882,801,882,801,931,764,1079,457,765,931,801',
'1079,955,801,457,457,457,955,747,598,457,457,703,457,598,766,702,608',
'364,883,767,728,457,360,361,705,399,561,1035,1011,561,1011,238,457,457',
'1035,457,457,457,457,457,784,714,378,1035,20,135,713,714,466,378,135',
'135,451,952,29,952,952,952,767,952,754,836,760,457,457,457,457,457,457',
'457,457,457,457,457,457,457,457,705,703,457,457,457,702,457,705,238',
'20,457,399,705,457,952,907,705,451,457,611,457,20,457,457,457,457,457',
'457,457,451,457,457,457,450,705,236,703,836,434,703,702,730,29,702,836',
'457,457,685,457,885,457,703,730,836,456,702,763,457,41,820,457,456,456',
'456,29,682,42,456,456,907,456,836,611,679,951,450,951,951,951,611,951',
'678,610,670,611,730,730,450,611,236,456,456,434,456,456,456,456,456',
'664,971,41,745,885,745,745,745,611,745,42,885,971,5,41,820,885,659,5',
'472,885,730,42,456,456,456,456,456,456,456,456,456,456,456,456,456,456',
'610,885,456,456,456,235,456,610,971,971,456,675,610,456,394,651,610',
'951,456,645,456,642,456,456,456,456,456,456,456,334,456,619,456,616',
'610,946,472,946,946,946,946,946,971,635,745,456,456,789,456,387,456',
'946,556,404,107,556,602,456,601,235,456,107,107,107,891,675,107,107',
'107,891,107,334,433,946,600,394,394,394,107,433,107,107,107,334,946',
'946,557,599,433,557,107,107,377,107,107,107,107,107,895,377,47,47,357',
'895,635,635,595,357,789,789,387,387,387,635,404,404,404,789,946,778',
'778,107,107,107,107,107,107,107,107,107,107,107,107,107,107,47,47,107',
'107,107,1068,107,107,850,593,107,850,1068,107,107,638,107,1068,107,590',
'107,1068,107,107,107,107,107,107,107,376,107,997,107,793,997,979,376',
'979,979,979,979,979,389,795,963,107,107,107,107,963,107,979,107,391',
'677,586,391,107,373,797,107,677,677,677,374,373,677,677,677,578,677',
'374,50,979,494,571,638,638,638,50,677,677,677,570,979,979,1045,1045',
'50,569,677,677,770,677,677,677,677,677,567,770,536,566,27,389,389,389',
'494,536,770,27,494,494,494,494,391,391,536,805,979,752,752,677,677,677',
'677,677,677,677,677,677,677,677,677,677,677,562,375,677,677,677,706',
'677,677,375,1,677,559,706,677,677,558,677,706,677,478,677,706,677,677',
'677,677,677,677,677,372,677,381,677,330,330,553,372,977,381,977,977',
'977,977,977,552,677,677,677,677,551,677,478,677,977,110,478,478,677',
'1027,543,677,110,110,110,379,1027,110,110,110,829,110,379,371,541,1027',
'977,886,835,110,371,110,110,110,886,977,977,977,977,886,537,110,110',
'886,110,110,110,110,110,1008,532,1008,1008,1008,19,1008,742,846,742',
'742,742,19,742,871,847,871,871,871,3,871,19,977,110,110,110,110,110',
'110,110,110,110,110,110,110,110,110,530,1008,110,110,110,993,110,110',
'742,527,110,854,993,110,110,871,110,742,110,479,110,993,110,110,110',
'110,110,110,110,855,110,856,110,974,860,974,974,974,974,974,9,9,9,9',
'9,110,110,110,110,974,110,479,110,861,800,479,479,110,17,17,110,800',
'800,800,44,44,863,800,800,864,800,974,869,866,869,869,869,868,869,526',
'974,974,974,974,870,991,733,733,351,351,800,800,991,800,800,800,800',
'800,511,873,510,991,580,499,580,580,580,879,580,1043,869,1043,1043,1043',
'483,1043,974,482,884,869,481,800,800,800,800,800,800,800,800,800,800',
'800,800,800,800,990,234,800,800,800,580,800,990,234,480,800,888,1043',
'800,580,468,990,234,800,458,800,449,800,800,800,800,800,800,800,892',
'800,894,800,448,903,1038,984,1038,1038,1038,1038,1038,317,984,906,800',
'800,445,800,317,800,1038,984,431,676,429,426,800,317,913,800,676,676',
'676,914,916,676,676,676,917,676,498,918,1038,920,921,318,922,424,676',
'676,676,676,318,1038,1038,401,498,498,398,676,676,318,676,676,676,676',
'676,1006,396,1006,1006,1006,498,1006,498,393,498,498,498,498,935,936',
'498,365,498,363,359,1038,358,345,676,676,676,676,676,676,676,676,676',
'676,676,676,676,676,339,1006,676,676,676,319,676,676,953,336,676,335',
'319,676,676,331,676,962,676,966,676,319,676,676,676,676,676,676,676',
'969,676,676,676,329,324,323,320,940,982,940,940,940,940,940,314,676',
'676,676,676,321,676,313,676,940,461,985,321,676,987,312,676,461,461',
'461,310,321,461,461,461,297,461,294,548,992,293,940,337,1086,1001,461',
'461,461,461,337,940,940,940,940,548,548,461,461,337,461,461,461,461',
'461,1002,1037,1003,1037,1037,1037,548,1037,548,1004,548,548,548,548',
'1005,282,548,1007,548,278,244,240,940,461,461,461,461,461,461,461,461',
'461,461,461,461,461,461,239,614,461,461,461,362,1017,461,614,1020,461',
'1021,362,461,461,1022,461,614,461,1023,461,362,461,461,461,461,461,461',
'461,1025,461,461,461,1052,237,1052,1052,1052,1052,1052,344,344,344,344',
'344,461,461,461,461,1052,461,501,461,217,1031,133,102,461,501,501,501',
'101,100,501,501,501,99,501,486,785,785,1052,73,785,785,785,501,501,49',
'1044,1052,1052,1052,1052,486,486,485,501,501,1049,501,501,501,501,501',
'1050,484,43,40,25,486,1061,485,485,486,486,486,486,1062,1064,18,16,484',
'484,15,1070,1052,1071,485,1075,485,1076,485,485,485,485,1077,1078,484',
'501,484,452,484,484,484,484,501,13,452,452,452,501,501,452,452,452,1054',
'452,1054,1054,1054,1054,1054,712,493,708,452,452,452,711,729,707,1054',
'501,501,704,701,452,452,699,452,452,452,452,452,692,690,501,744,,,,501',
',1054,,493,,,501,493,493,493,493,,1054,1054,,452,452,452,452,452,452',
'452,452,452,452,452,452,452,452,,,452,452,452,,,452,,452,452,,,452,452',
',452,1054,452,,452,,452,452,452,452,452,452,452,,452,452,452,308,308',
'308,308,308,525,525,525,525,525,,,452,452,30,452,,452,,,,30,30,30,452',
',30,30,30,350,30,350,350,350,350,350,,,,30,30,30,,,,350,,,,,30,30,,30',
'30,30,30,30,,,,,,,,,,350,350,,,,,,,,350,350,350,350,,30,30,30,30,30',
'30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,350,30',
',30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30,31,30,,30,,,,31',
'31,31,30,,31,31,31,942,31,942,942,942,942,942,,,,,31,31,,,,942,,,,,31',
'31,,31,31,31,31,31,,,,,,,,,,942,,,,,,,,,,,942,942,,31,31,31,31,31,31',
'31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,942,31,,31',
',31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,,31,31,60,31,,31,,,,60,60,60',
'31,,60,60,60,738,60,738,738,738,738,738,,,,,60,60,60,,,738,,,,,60,60',
',60,60,60,60,60,,,,,,,,,,738,,,,,,,,,,,738,738,,60,60,60,60,60,60,60',
'60,60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60,60,,60,738,60,,60,,60',
'60,60,60,60,60,60,,60,,60,1056,,1056,1056,1056,1056,1056,,,,,,60,60',
'60,60,1056,60,462,60,,,,,60,462,462,462,,,462,462,462,,462,,,,1056,',
',,,462,462,462,462,,,1056,1056,,,,462,462,,462,462,462,462,462,,,,,',
',,,,,,,,,,,,,,,,1056,,462,462,462,462,462,462,462,462,462,462,462,462',
'462,462,,,462,462,462,,,462,,,462,,,462,462,,462,,462,,462,,462,462',
'462,462,462,462,462,,462,462,462,,,,,,,,,,,,,462,462,462,462,,462,,462',
',,,,462,419,419,419,419,419,419,419,419,419,419,419,419,419,419,419',
'419,419,419,419,419,419,419,419,419,,,,419,419,419,419,419,419,419,419',
'419,419,,,,,,419,419,419,419,419,419,419,419,419,,,419,,,,,,,,,419,419',
',419,419,419,419,419,419,419,,,419,419,,,,419,419,419,419,,,,,,,,,,',
',,,419,419,,419,419,419,419,419,419,419,419,419,419,419,,,419,419,,',
',,,,,,,419,,,,,,,,,419,,,,,419,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,,,,103,103,103',
'103,103,103,103,103,103,103,,,,,,103,103,103,103,103,103,103,103,103',
'103,103,103,,103,,,,,,,103,103,,103,103,103,103,103,103,103,,,103,103',
',,,103,103,103,103,,,,,,,,,,,,,,103,103,,103,103,103,103,103,103,103',
'103,103,103,103,,,103,,,,,,,,,,,,,,,,,,,,103,,,,,103,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11',
'11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,',
'11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11',
',11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,',
',11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12',
'12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,',
',,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,',
',12,,,,,,,,,12,,,,,12,649,649,649,649,649,649,649,649,649,649,649,649',
'649,649,649,649,649,649,649,649,649,649,649,649,,,,649,649,649,649,649',
'649,649,649,649,649,,,,,,649,649,649,649,649,649,649,649,649,,,649,',
',,,,,,,649,649,,649,649,649,649,649,649,649,,,649,649,,,,649,649,649',
'649,,,,,,,,,,,,,,649,649,,649,649,649,649,649,649,649,649,649,649,649',
',,649,649,,,,,,,,,,649,,,,,,,,,649,,,,,649,783,783,783,783,783,783,783',
'783,783,783,783,783,783,783,783,783,783,783,783,783,783,783,783,783',
',,,783,783,783,783,783,783,783,783,783,783,,,,,,783,783,783,783,783',
'783,783,783,783,,,783,,,,,,,,,783,783,,783,783,783,783,783,783,783,',
',783,783,,,,783,783,783,783,,,,,,,,,,,,,,783,783,,783,783,783,783,783',
'783,783,783,783,783,783,,,783,,,,,,,,,,,,,,,,,,,,783,,,,,783,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75',
'75,75,75,75,75,75,75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75',
',75,,,,,,,75,75,,75,75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75',
',,,,,,,75,75,,75,75,75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,,,844,844',
'844,844,844,844,,,75,844,844,,,75,844,,844,844,844,844,844,844,844,',
',,,,844,844,844,844,844,844,844,,,844,,,,,438,844,844,844,844,844,844',
'844,844,844,844,844,844,,844,844,844,,844,844,,844,844,844,438,438,438',
'438,438,438,438,438,438,438,438,,438,438,,,438,438,,844,,,844,,,844',
'844,,,844,,844,438,,438,844,438,438,438,438,438,438,438,844,438,,,,844',
'844,844,844,844,844,,,,844,844,,438,,438,,,844,,,844,844,844,316,316',
'316,316,316,316,,,,316,316,,,,316,,316,316,316,316,316,316,316,,,,,',
'316,316,316,316,316,316,316,,,316,,,,,444,316,316,316,316,316,316,316',
'316,316,316,316,316,,316,316,316,,316,316,,316,316,316,444,444,444,444',
'444,444,444,444,444,444,444,,444,444,,,444,444,,316,,,316,,,316,316',
',,316,,316,444,,444,316,444,444,444,444,444,444,444,316,444,,,,316,316',
'316,316,316,316,,,,316,316,,444,,,,,316,,,316,316,316,852,852,852,852',
'852,852,,,,852,852,,,,852,,852,852,852,852,852,852,852,,,,,,852,852',
'852,852,852,852,852,,,852,,,,,,852,852,852,852,852,852,852,852,852,852',
'852,852,,852,852,852,,852,852,,852,852,852,291,291,291,291,291,291,291',
'291,291,291,291,,291,291,,,291,291,,852,,,852,,,852,852,,,852,,852,291',
',291,852,291,291,291,291,291,291,291,852,291,,,,852,852,852,852,852',
'852,,,,852,852,,291,,,,,852,,,852,852,852,853,853,853,853,853,853,,',
',853,853,,,,853,,853,853,853,853,853,853,853,,,,,,853,853,853,853,853',
'853,853,,,853,,,,,,853,853,853,853,853,853,853,853,853,853,853,853,',
'853,853,853,,853,853,,853,853,853,549,549,549,549,549,549,549,549,549',
'549,549,,549,549,,,549,549,,853,,,853,,,853,853,,,853,,853,549,,549',
'853,549,549,549,549,549,549,549,853,549,,,,853,853,853,853,853,853,',
',,853,853,,549,,,,,853,,,853,853,853,768,768,768,768,768,768,,,,768',
'768,,,,768,,768,768,768,768,768,768,768,,,,,,768,768,768,768,768,768',
'768,,,768,,,,,,768,768,768,768,768,768,768,768,768,768,768,768,,768',
'768,768,,768,768,,768,768,768,912,912,912,912,912,912,912,912,912,912',
'912,,912,912,,,912,912,,768,,,768,,,768,768,,,768,,768,912,,912,768',
'912,912,912,912,912,912,912,768,912,,,,768,768,768,768,768,768,,,,768',
'768,,912,,,,,768,,,768,768,768,988,988,988,988,988,988,,,,988,988,,',
',988,,988,988,988,988,988,988,988,,,,,,988,988,988,988,988,988,988,',
',988,,,,,,988,988,988,988,988,988,988,988,988,988,988,988,,988,988,988',
',988,988,,988,988,988,802,802,802,802,802,802,802,802,802,802,802,,802',
'802,,,802,802,,988,,,988,,,988,988,,,988,,988,802,,802,988,802,802,802',
'802,802,802,802,988,802,,,,988,988,988,988,988,988,,,,988,988,,802,',
',,,988,,,988,988,988,311,311,311,311,311,311,,,,311,311,,,,311,,311',
'311,311,311,311,311,311,,,,,,311,311,311,311,311,311,311,,,311,,,,,',
'311,311,311,311,311,311,311,311,311,311,311,311,,311,311,311,,311,311',
',311,311,311,24,24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,311,,',
'311,,,311,311,,,311,,311,24,,24,311,24,24,24,24,24,24,24,311,24,,,,311',
'311,311,311,311,311,,,,311,311,,24,,,,,311,,,311,311,311,1009,1009,1009',
'1009,1009,1009,,,,1009,1009,,,,1009,,1009,1009,1009,1009,1009,1009,1009',
',,,,,1009,1009,1009,1009,1009,1009,1009,,,1009,,,,,,1009,1009,1009,1009',
'1009,1009,1009,1009,1009,1009,1009,1009,,1009,1009,1009,,1009,1009,',
'1009,1009,1009,497,497,497,497,497,497,497,497,497,497,497,,497,497',
',,497,497,,1009,,,1009,,,1009,1009,,,1009,,1009,497,,497,1009,497,497',
'497,497,497,497,497,1009,497,,,,1009,1009,1009,1009,1009,1009,,,,1009',
'1009,497,497,,,,,1009,,,1009,1009,1009,243,243,243,243,243,243,,,,243',
'243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243,243',
'243,,,243,,,,,,243,243,243,243,243,243,243,243,243,243,243,243,,243',
'243,243,,243,243,,243,243,243,488,488,488,488,488,488,488,,,488,488',
',,,,,488,488,,243,,,243,,,243,243,,,243,,243,488,,488,243,488,488,488',
'488,488,488,488,243,488,,,,243,243,243,243,243,243,,,,243,243,,,,,,',
'243,,,243,243,243,1014,1014,1014,1014,1014,1014,,,,1014,1014,,,,1014',
',1014,1014,1014,1014,1014,1014,1014,,,,,,1014,1014,1014,1014,1014,1014',
'1014,,,1014,,,,,,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014',
'1014,,1014,1014,1014,,1014,1014,,1014,1014,1014,490,490,490,490,490',
'490,490,,,490,490,,,,,,490,490,,1014,,,1014,,,1014,1014,,,1014,,1014',
'490,,490,1014,490,490,490,490,490,490,490,1014,490,,,,1014,1014,1014',
'1014,1014,1014,,,,1014,1014,,,,,,,1014,,,1014,1014,1014,1016,1016,1016',
'1016,1016,1016,,,,1016,1016,,,,1016,,1016,1016,1016,1016,1016,1016,1016',
',,,,,1016,1016,1016,1016,1016,1016,1016,,,1016,,,,,,1016,1016,1016,1016',
'1016,1016,1016,1016,1016,1016,1016,1016,,1016,1016,1016,,1016,1016,',
'1016,1016,1016,491,491,491,491,491,491,491,,,491,491,,,,,,491,491,,1016',
',,1016,,,1016,1016,,,1016,,1016,491,,491,1016,491,491,491,491,491,491',
'491,1016,491,,,,1016,1016,1016,1016,1016,1016,,,,1016,1016,,,,,,,1016',
',,1016,1016,1016,878,878,878,878,878,878,,,,878,878,,,,878,,878,878',
'878,878,878,878,878,,,,,,878,878,878,878,878,878,878,,,878,,,,,,878',
'878,878,878,878,878,878,878,878,878,878,878,,878,878,878,,878,878,,878',
'878,878,492,492,492,492,492,492,492,,,492,492,,,,,,492,492,,878,,,878',
',,878,878,,,878,,878,492,,492,878,492,492,492,492,492,492,492,878,492',
',,,878,878,878,878,878,878,,,,878,878,,,,,,,878,,,878,878,878,647,647',
'647,647,647,647,,,,647,647,,,,647,,647,647,647,647,647,647,647,,,,,',
'647,647,647,647,647,647,647,,,647,,,,,,647,647,647,647,647,647,647,647',
'647,647,647,647,,647,647,647,,647,647,,647,647,647,495,495,495,495,495',
'495,495,,,495,495,,,,,,495,495,,647,,,647,,,647,647,,,647,,647,495,',
'495,647,495,495,495,495,495,495,495,647,495,,,,647,647,647,647,647,647',
',,,647,647,,,,,,,647,,,647,647,647,779,779,779,779,779,779,,,,779,779',
',,,779,,779,779,779,779,779,779,779,,,,,,779,779,779,779,779,779,779',
',,779,,,,,,779,779,779,779,779,779,779,779,779,779,779,779,,779,779',
'779,,779,779,,779,779,779,476,476,476,476,476,476,476,476,476,476,476',
',476,476,,,476,476,,779,,,779,,,779,779,,,779,,779,476,,476,779,476',
'476,476,476,476,476,476,779,476,,,,779,779,779,779,779,779,,,,779,779',
',,,,,,779,,,779,779,779,889,889,889,889,889,889,,,,889,889,,,,889,,889',
'889,889,889,889,889,889,,,,,,889,889,889,889,889,889,889,,,889,,,,,',
'889,889,889,889,889,889,889,889,889,889,889,889,,889,889,889,,889,889',
',889,889,889,477,477,477,477,477,477,477,477,477,477,477,,477,477,,',
'477,477,,889,,,889,,,889,889,,,889,,889,477,,477,889,477,477,477,477',
'477,477,477,889,477,,,,889,889,889,889,889,889,,,,889,889,,,,,,,889',
',,889,889,889,780,780,780,780,780,780,,,,780,780,,,,780,,780,780,780',
'780,780,780,780,,,,,,780,780,780,780,780,780,780,,,780,,,,,,780,780',
'780,780,780,780,780,780,780,780,780,780,,780,780,780,,780,780,,780,780',
'780,496,496,496,496,496,496,496,496,,496,496,,,,,,496,496,,780,,,780',
',,780,780,,,780,,780,496,,496,780,496,496,496,496,496,496,496,780,496',
',,,780,780,780,780,780,780,,,,780,780,,,,,,,780,,,780,780,780,219,219',
'219,219,219,219,,,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,',
'219,219,219,219,219,219,219,,,219,,,,,,219,219,219,219,219,219,219,219',
'219,219,219,219,,219,219,219,,219,219,,219,219,219,487,487,487,487,487',
'487,487,,,487,487,,,,,,487,487,,219,,,219,,,219,219,,,219,,219,487,',
'487,219,487,487,487,487,487,487,487,219,487,,,,219,219,219,219,219,219',
',,,219,219,,,,,,,219,,,219,219,219,343,343,343,343,343,343,,,,343,343',
',,,343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343',
',,343,,,,,,343,343,343,343,343,343,343,343,343,343,343,343,,343,343',
'343,,343,343,,343,343,343,489,489,489,489,489,489,489,,,489,489,,,,',
',489,489,,343,,,343,,,343,343,,,343,,343,489,,489,343,489,489,489,489',
'489,489,489,343,489,,,,343,343,343,343,343,343,,,,343,343,,,,,,,343',
',,343,343,343,355,355,355,355,355,355,,,,355,355,,,,355,,355,355,355',
'355,355,355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,,355,355',
'355,355,355,355,355,355,355,355,355,355,,355,355,355,,355,355,,355,355',
'355,,,,,,,,,,,,,,,,,,,,355,,,355,,,355,355,,,355,,355,,,,355,,,,,,,',
'355,,,,,355,355,355,355,355,355,,,,355,355,,,,,,,355,,,355,355,355,929',
'929,929,929,929,929,,,,929,929,,,,929,,929,929,929,929,929,929,929,',
',,,,929,929,929,929,929,929,929,,,929,,,,,,929,929,929,929,929,929,929',
'929,929,929,929,929,,929,929,929,,929,929,,929,929,929,,,,,,,,,,,,,',
',,,,,,929,,,929,,,929,929,,,929,,929,,,,929,,,,,,,,929,,,,,929,929,929',
'929,929,929,,,,929,929,,,,,,,929,,,929,929,929,826,826,826,826,826,826',
',,,826,826,,,,826,,826,826,826,826,826,826,826,,,,,,826,826,826,826',
'826,826,826,,,826,,,,,,826,826,826,826,826,826,826,826,826,826,826,826',
',826,826,826,,826,826,,826,826,826,,,,,,,,,,,,,,,,,,,,826,,,826,,,826',
'826,,,826,,826,,,,826,,,,,,,,826,,,,,826,826,826,826,826,826,,,,826',
'826,,,,,,,826,,,826,826,826,597,597,597,597,597,597,,,,597,597,,,,597',
',597,597,597,597,597,597,597,,,,,,597,597,597,597,597,597,597,,,597',
',,,,,597,597,597,597,597,597,597,597,597,597,597,597,,597,597,597,,597',
'597,,597,597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597,597,,,597,,597,',
',,597,,,,,,,,597,,,,,597,597,597,597,597,597,,,,597,597,,,,,,,597,,',
'597,597,597,594,594,594,594,594,594,,,,594,594,,,,594,,594,594,594,594',
'594,594,594,,,,,,594,594,594,594,594,594,594,,,594,,,,,,594,594,594',
'594,594,594,594,594,594,594,594,594,,594,594,594,,594,594,,594,594,594',
',,,,,,,,,,,,,,,,,,,594,,,594,,,594,594,,,594,,594,,,,594,,,,,,,,594',
',,,,594,594,594,594,594,594,,,,594,594,,,,,,,594,,,594,594,594,786,786',
'786,786,786,786,,,,786,786,,,,786,,786,786,786,786,786,786,786,,,,,',
'786,786,786,786,786,786,786,,,786,,,,,,786,786,786,786,786,786,786,786',
'786,786,786,786,,786,786,786,,786,786,,786,786,786,,,,,,,,,,,,,,,,,',
',,786,,,786,,,786,786,,,786,,786,,,,786,,,,,,,,786,,,,,786,786,786,786',
'786,786,,,,786,786,,,,,,,786,,,786,786,786,2,2,2,2,2,2,,,,2,2,,,,2,',
'2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2',
'2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,,2,,,,,,,,2',
',,,,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,36,36,36,36,36,36,,,,36,36,,',
',36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36',
'36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,,,,,,,,,,,',
',,,,,,,,36,,,36,,,36,36,,,36,,36,,,,36,,,,,,,,36,,,,,36,36,36,36,36',
'36,,,,36,36,,,,,,,36,,,36,36,36,356,356,356,356,356,356,,,,356,356,',
',,356,,356,356,356,356,356,356,356,,,,,,356,356,356,356,356,356,356',
',,356,,,,,,356,356,356,356,356,356,356,356,356,356,356,356,,356,356',
'356,,356,356,,356,356,356,,,,,,,,,,,,,,,,,,,,356,,,356,,,356,356,,,356',
',356,,,,356,,,,,,,,356,,,,,356,356,356,356,356,356,,,,356,356,,,,,,',
'356,,,356,356,356,928,928,928,928,928,928,,,,928,928,,,,928,,928,928',
'928,928,928,928,928,,,,,,928,928,928,928,928,928,928,,,928,,,,,,928',
'928,928,928,928,928,928,928,928,928,928,928,,928,928,928,,928,928,,928',
'928,928,,,,,,,,,,,,,,,,,,,,928,,,928,,,928,928,,,928,,928,,,,928,,,',
',,,,928,,,,,928,928,928,928,928,928,,,,928,928,,,,,,,928,,,928,928,928',
'959,959,959,959,959,959,,,,959,959,,,,959,,959,959,959,959,959,959,959',
',,,,,959,959,959,959,959,959,959,,,959,,,,,,959,959,959,959,959,959',
'959,959,959,959,959,959,,959,959,959,,959,959,,959,959,959,,,,,,,,,',
',,,,,,,,,,959,,,959,,,959,959,,,959,,959,,,,959,,,,,,,,959,,,,,959,959',
'959,959,959,959,,,,959,959,,,,,,,959,,,959,959,959,249,249,249,,249',
',,,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249',
'249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249',
'249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,944',
'249,944,944,944,944,944,249,,,,,,,,249,944,,,,249,249,249,249,249,249',
',,,249,249,,,,,,,249,944,,249,249,249,716,716,716,,716,,944,944,716',
'716,,,,716,,716,716,716,716,716,716,716,,,,,,716,716,716,716,716,716',
'716,,,716,,,,944,,,716,,,716,716,716,716,716,716,716,716,,716,716,716',
',716,716,,716,716,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,,716,',
'716,,,,716,,,,,,,,716,,,,,716,716,716,716,716,716,,,,716,716,,,,,,,716',
',,716,716,716,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8',
'8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,',
',,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8',
',,8,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23',
'23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23',
'23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,1081,23,1081,1081,1081',
'1081,1081,23,,,,,,,,23,1081,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,1081',
',23,23,23,32,32,32,,32,,1081,1081,32,32,,,,32,,32,32,32,32,32,32,32',
',,,,,32,32,32,32,32,32,32,,,32,,,,1081,,,32,,,32,32,32,32,32,32,32,32',
'32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32',
',32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32',
'32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33',
'33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33',
'33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,',
',,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,34,34,34',
',34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,',
',34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34',
',,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34',
'34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,37,37,37,,37,,,,37,37',
',,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37',
',,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,',
'37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37',
',,,,,,37,,,37,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38',
',,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38',
'38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,1058,38,1058',
'1058,1058,1058,1058,,,,,,,,,,1058,,,,38,38,38,38,38,38,,,,38,38,,,,38',
',,38,1058,,38,38,38,45,45,45,,45,,1058,1058,45,45,,,,45,,45,45,45,45',
'45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,1058,,,45,,,45,45,45,45,45',
'45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45',
'45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,',
'45,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46',
'46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46',
'46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,',
'46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,48,48,48,,48,',
',,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,',
',,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,',
',,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48',
'48,,,,48,48,,,,,,,48,,,48,48,48,62,62,62,62,62,,,,62,62,,,,62,,62,62',
'62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,62,62,,62,62,62,62',
'62,62,62,62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62',
',,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,',
',,62,,,62,62,62,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,',
',,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67',
'67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,',
'67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,68,68',
'68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68',
',,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,68,68,68,',
',,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,,68,68,68',
'68,68,68,,,,68,68,,,,,,,68,,,68,68,68,71,71,71,,71,,,,71,71,,,,71,,71',
'71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71',
'71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71',
',,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71,71,71,71,,,,71,71,71,,,',
',71,71,,,71,71,71,72,72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72',
',,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72',
'72,72,,72,72,,,,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,',
',,,,,,,,,,,72,72,72,72,72,72,,,,72,72,,,,,,,72,,,72,72,72,123,123,123',
'123,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123',
'123,123,123,123,123,,,123,,,,,,123,123,123,123,123,123,123,123,123,123',
'123,123,,123,123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,,,,123,,',
'123,,,123,123,,,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123,123,123',
',,,123,123,,,,,,123,123,,,123,123,123,128,128,128,,128,,,,128,128,,',
',128,,128,128,128,128,128,128,128,,,,,,128,128,128,128,128,128,128,',
',128,,,,,,,128,,,128,128,128,128,128,128,128,128,,128,128,128,,128,128',
',128,128,128,,,,,,,,,,,,,,,,,,,,128,,,128,,,128,128,,,128,,,,,,128,',
',,,,,,128,,,,,128,128,128,128,128,128,,,,128,128,,,,,,,128,,,128,128',
'128,129,129,129,,129,,,,129,129,,,,129,,129,129,129,129,129,129,129',
',,,,,129,129,129,129,129,129,129,,,129,,,,,,,129,,,129,129,129,129,129',
'129,129,129,,129,129,129,,129,129,,129,129,129,,,,,,,,,,,,,,,,,,,,129',
',,129,,,129,129,,,129,,,,,,129,,,,,,,,129,,,,,129,129,129,129,129,129',
',,,129,129,,,,,,,129,,,129,129,129,130,130,130,,130,,,,130,130,,,,130',
',130,130,130,130,130,130,130,,,,,,130,130,130,130,130,130,130,,,130',
',,,,,,130,,,130,130,130,130,130,130,130,130,,130,130,130,,130,130,,130',
'130,130,,,,,,,,,,,,,,,,,,,,130,,,130,,,130,130,,,130,,,,,,130,,,,,,',
',130,,,,,130,130,130,130,130,130,,,,130,130,,,,,,,130,,,130,130,130',
'131,131,131,,131,,,,131,131,,,,131,,131,131,131,131,131,131,131,,,,',
',131,131,131,131,131,131,131,,,131,,,,,,,131,,,131,131,131,131,131,131',
'131,131,,131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,',
'131,,,131,131,,,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131,131,131',
',,,131,131,,,,,,,131,,,131,131,131,132,132,132,132,132,,,,132,132,,',
',132,,132,132,132,132,132,132,132,,,,,,132,132,132,132,132,132,132,',
',132,,,,,,132,132,,132,132,132,132,132,132,132,132,132,,132,132,132',
',132,132,,132,132,132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132,',
'132,,,,132,,,,,,,,132,,,,,132,132,132,132,132,132,,,,132,132,,,,,,,132',
',,132,132,132,1032,1032,1032,,1032,,,,1032,1032,,,,1032,,1032,1032,1032',
'1032,1032,1032,1032,,,,,,1032,1032,1032,1032,1032,1032,1032,,,1032,',
',,,,,1032,,,1032,1032,1032,1032,1032,1032,1032,1032,1032,1032,1032,1032',
',1032,1032,,1032,1032,1032,,,,,,,,,,,,,,,,,,,,1032,,,1032,,,1032,1032',
',,1032,,1032,,1032,,1032,,,,,,,,1032,,,,,1032,1032,1032,1032,1032,1032',
',,,1032,1032,,,,,,,1032,,1032,1032,1032,1032,220,220,220,,220,,,,220',
'220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220',
'220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,',
'220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,220',
',,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220,',
',220,220,220,221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221',
'221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221',
'221,221,221,221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,',
',,,,,,221,,,221,,,221,221,,,221,,221,,,,221,,,,,,,,221,,,,,221,221,221',
'221,221,221,,,,221,221,,,,,,,221,,,221,221,221,222,222,222,,222,,,,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,',
',,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222,',
',222,222,222,223,223,223,,223,,,,223,223,,,,223,,223,223,223,223,223',
'223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223',
'223,223,223,223,223,,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,',
',,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223',
'223,223,223,,,,223,223,,,,,,,223,,,223,223,223,224,224,224,,224,,,,224',
'224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224',
'224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224,',
'224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,',
',,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,',
',224,224,224,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225,225',
'225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225',
'225,225,225,225,225,225,225,225,225,,225,225,,225,225,225,,,,,,,,,,',
',,,,,,,,,225,,,225,,,225,225,,,225,,225,,225,,225,,,,,,,,225,,,,,225',
'225,225,225,225,225,,,,225,225,,,,,,,225,,225,225,225,225,229,229,229',
',229,,,,229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229',
'229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229',
'229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229',
',,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,,,',
',,,229,,,229,229,229,230,230,230,,230,,,,230,230,,,,230,,230,230,230',
'230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230',
'230,230,230,230,230,230,230,,230,230,230,,230,230,,230,230,230,,,,,',
',,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,,,230',
'230,230,230,230,230,,,,230,230,,,,,,,230,,,230,230,230,231,231,231,',
'231,,,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231',
'231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231',
'231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231',
',,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,231',
',,,,,231,,,231,231,231,242,242,242,,242,,,,242,242,,,,242,,242,242,242',
'242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242',
'242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,',
',,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242',
'242,242,242,242,242,,,,242,242,,,,,,,242,,,242,242,242,245,245,245,',
'245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245',
'245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245',
',,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,',
',,,245,,,245,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,',
',,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,247,247,247,',
'247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247',
'247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247',
'247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247',
',,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,,,',
',,,247,,,247,247,247,248,248,248,,248,,,,248,248,,,,248,,248,248,248',
'248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248',
'248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248,248,,,,,',
',,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248',
'248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,250,250,250,',
'250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250',
'250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250',
',,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,',
',,,250,,,250,250,250,251,251,251,,251,,,,251,251,,,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,',
',,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251',
'251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,252,252,252,',
'252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252',
'252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252',
'252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252',
',,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,',
',,,252,,,252,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253',
'253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253',
'253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,',
',,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253',
'253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,254,254,254,',
'254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254',
'254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254',
'254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254',
',,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,',
',,,254,,,254,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,',
',,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,256,256,256,',
'256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256',
'256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,',
',,,256,,,256,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257',
'257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257',
'257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,',
',,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257',
'257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,258,258,258,',
'258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258',
'258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258',
'258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258',
',,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,',
',,,258,,,258,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,',
',,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259',
'259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,260,260,260,',
'260,,,,260,260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260',
'260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260',
'260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260',
',,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,',
',,,260,,,260,260,260,261,261,261,,261,,,,261,261,,,,261,,261,261,261',
'261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261',
'261,261,261,261,261,261,261,,261,261,261,,261,261,,261,261,261,,,,,',
',,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261',
'261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261,261,262,262,262,',
'262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262,262,262',
'262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262',
'262,262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262',
',,262,,,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,',
',,,262,,,262,262,262,263,263,263,,263,,,,263,263,,,,263,,263,263,263',
'263,263,263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263',
'263,263,263,263,263,263,263,,263,263,263,,263,263,,263,263,263,,,,,',
',,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263',
'263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263,263,264,264,264,',
'264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264',
'264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264',
'264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264',
',,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,',
',,,264,,,264,264,264,265,265,265,,265,,,,265,265,,,,265,,265,265,265',
'265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265',
'265,265,265,265,265,265,265,,265,265,265,,265,265,,265,265,265,,,,,',
',,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265',
'265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265,266,266,266,',
'266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266,266',
'266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266,,266',
'266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266',
',,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,',
',,,266,,,266,266,266,271,271,271,,271,,,,271,271,,,,271,,271,271,271',
'271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271',
'271,271,271,271,271,271,271,,271,271,271,,271,271,,271,271,271,,,,,',
',,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,,,271',
'271,271,271,271,271,,,,271,271,,,,,,,271,,,271,271,271,279,279,279,',
'279,,,,279,279,,,,279,,279,279,279,279,279,279,279,,,,,,279,279,279',
'279,279,279,279,,,279,,,,,,,279,,,279,279,279,279,279,279,279,279,279',
'279,279,279,,279,279,,279,279,279,,,,,,,,,,,,,,,,,,,,279,,,279,,,279',
'279,,,279,,279,,279,,279,,,,,,,,279,,,,,279,279,279,279,279,279,,,,279',
'279,,,,,,,279,,279,279,279,279,286,286,286,,286,,,,286,286,,,,286,,286',
'286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286,,,,,',
',286,,,286,286,286,286,286,286,286,286,286,286,286,286,,286,286,,286',
'286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,286,,286,,286',
',,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,,286,286',
'286,286,289,289,289,,289,,,,289,289,,,,289,,289,289,289,289,289,289',
'289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289,289,289,289',
'289,289,289,289,289,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,',
',,,,,289,,,289,,,289,289,,,289,,289,,289,,289,,,,,,,,289,,,,,289,289',
'289,289,289,289,,,,289,289,289,,,,,,289,,289,289,289,289,296,296,296',
',296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,,296,296,296',
'296,296,296,296,,,296,,,,,,,296,,,296,296,296,296,296,296,296,296,,296',
'296,296,,296,296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296',
',,296,,,,,,296,,,,,,,,296,,,,,296,296,296,296,296,296,,,,296,296,,,',
',,,296,,,296,296,296,298,298,298,,298,,,,298,298,,,,298,,298,298,298',
'298,298,298,298,,,,,,298,298,298,298,298,298,298,,,298,,,,,,,298,,,298',
'298,298,298,298,298,298,298,,298,298,298,,298,298,,298,298,298,,,,,',
',,,,,,,,,,,,,,298,,,298,,,298,298,,,298,,,,,,298,,,,,,,,298,,,,,298',
'298,298,298,298,298,,,,298,298,,,,,,,298,,,298,298,298,300,300,300,',
'300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300',
'300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300',
'300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300',
',,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300,300,,,',
',,,300,,,300,300,300,301,301,301,,301,,,,301,301,,,,301,,301,301,301',
'301,301,301,301,,,,,,301,301,301,301,301,301,301,,,301,,,,,,,301,,,301',
'301,301,301,301,301,301,301,,301,301,301,,301,301,,301,301,301,,,,,',
',,,,,,,,,,,,,,301,,,301,,,301,301,,,301,,,,,,301,,,,,,,,301,,,,,301',
'301,301,301,301,301,,,,301,301,,,,,,,301,,,301,301,301,307,307,307,307',
'307,,,,307,307,,,,307,,307,307,307,307,307,307,307,,,,,,307,307,307',
'307,307,307,307,,,307,,,,,,307,307,,307,307,307,307,307,307,307,307',
'307,,307,307,307,,307,307,,307,307,307,,,,,,,,,,,,,,,,,,,,307,,,307',
',,307,307,,,307,,307,,,,307,,,,,,,,307,,,,,307,307,307,307,307,307,',
',,307,307,,,,,,,307,,,307,307,307,983,983,983,,983,,,,983,983,,,,983',
',983,983,983,983,983,983,983,,,,,,983,983,983,983,983,983,983,,,983',
',,,,,,983,,,983,983,983,983,983,983,983,983,,983,983,983,,983,983,,',
',983,,,,,,,,,,,,,,,,,,,,983,,,983,,,983,983,,,983,,,,,,,,,,,,,,,,,,',
'983,983,983,983,983,983,,,,983,983,,,,,,,983,,,983,983,983,315,315,315',
',315,,,,315,315,,,,315,,315,315,315,315,315,315,315,,,,,,315,315,315',
'315,315,315,315,,,315,,,,,,,315,,,315,315,315,315,315,315,315,315,,315',
'315,315,,315,315,,,,315,,,,,,,,,,,,,,,,,,,,315,,,315,,,315,315,,,315',
',,,,,,,,,,,,,,,,,,315,315,315,315,315,315,,,,315,315,,,,315,,,315,,',
'315,315,315,332,332,332,,332,,,,332,332,,,,332,,332,332,332,332,332',
'332,332,,,,,,332,332,332,332,332,332,332,,,332,,,,,,,332,,,332,332,332',
'332,332,332,332,332,,332,332,332,,332,332,,,,332,,,,,,,,,,,,,,,,,,,',
'332,,,332,,,332,332,,,332,,,,,,,,,,,,,,,,,,,332,332,332,332,332,332',
',,,332,332,,,,,,,332,,,332,332,332,958,958,958,,958,,,,958,958,,,,958',
',958,958,958,958,958,958,958,,,,,,958,958,958,958,958,958,958,,,958',
',,,,,,958,,,958,958,958,958,958,958,958,958,,958,958,958,,958,958,,958',
'958,958,,,,,,,,,,,,,,,,,,,,958,,,958,,,958,958,,,958,,958,,,,958,,,',
',,,,958,,,,,958,958,958,958,958,958,,,,958,958,,,,,,,958,,,958,958,958',
'340,340,340,,340,,,,340,340,,,,340,,340,340,340,340,340,340,340,,,,',
',340,340,340,340,340,340,340,,,340,,,,,,,340,,,340,340,340,340,340,340',
'340,340,,340,340,340,,340,340,,340,340,340,,,,,,,,,,,,,,,,,,,,340,,',
'340,,,340,340,,,340,,,,,,340,,,,,,,,340,,,,,340,340,340,340,340,340',
',,,340,340,,,,,,,340,,,340,340,340,342,342,342,,342,,,,342,342,,,,342',
',342,342,342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,,342',
',,,,,,342,,,342,342,342,342,342,342,342,342,,342,342,342,,342,342,,342',
'342,342,,,,,,,,,,,,,,,,,,,,342,,,342,342,,342,342,,,342,,,,,,342,,,',
',,,,342,,,,,342,342,342,342,342,342,,,,342,342,,,,,,,342,,,342,342,342',
'346,346,346,,346,,,,346,346,,,,346,,346,346,346,346,346,346,346,,,,',
',346,346,346,346,346,346,346,,,346,,,,,,,346,,,346,346,346,346,346,346',
'346,346,346,346,346,346,,346,346,,346,346,346,,,,,,,,,,,,,,,,,,,,346',
',,346,,,346,346,,,346,,346,,,,346,,,,,,,,346,,,,,346,346,346,346,346',
'346,,,,346,346,,,,,,,346,,346,346,346,346,347,347,347,,347,,,,347,347',
',,,347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347',
',,347,,,,,,,347,,,347,347,347,347,347,347,347,347,347,347,347,347,,347',
'347,,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,,,,,347',
',,,,,,,347,,,,,347,347,347,347,347,347,,,,347,347,,,,,,,347,,347,347',
'347,347,354,354,354,,354,,,,354,354,,,,354,,354,354,354,354,354,354',
'354,,,,,,354,354,354,354,354,354,354,,,354,,,,,,,354,,,354,354,354,354',
'354,354,354,354,,354,354,354,,354,354,,354,354,354,,,,,,,,,,,,,,,,,',
',,354,,,354,,,354,354,,,354,,,,,,354,,,,,,,,354,,,,,354,354,354,354',
'354,354,,,,354,354,,,,,,,354,,,354,354,354,368,368,368,,368,,,,368,368',
',,,368,,368,368,368,368,368,368,368,,,,,,368,368,368,368,368,368,368',
',,368,,,,,,,368,,,368,368,368,368,368,368,368,368,,368,368,368,,368',
'368,,,,368,,,,,,,,,,,,,,,,,,,,368,,,368,,,368,368,,,368,,,,,,,,,,,,',
',,,,,,368,368,368,368,368,368,,,,368,368,,,,,,,368,,,368,368,368,370',
'370,370,,370,,,,370,370,,,,370,,370,370,370,370,370,370,370,,,,,,370',
'370,370,370,370,370,370,,,370,,,,,,,370,,,370,370,370,370,370,370,370',
'370,,370,370,370,,370,370,,,,370,,,,,,,,,,,,,,,,,,,,370,,,370,,,370',
'370,,,370,,,,,,,,,,,,,,,,,,,370,370,370,370,370,370,,,,370,370,,,,,',
',370,,,370,370,370,932,932,932,,932,,,,932,932,,,,932,,932,932,932,932',
'932,932,932,,,,,,932,932,932,932,932,932,932,,,932,,,,,,,932,,,932,932',
'932,932,932,932,932,932,,932,932,932,,932,932,,,,932,,,,,,,,,,,,,,,',
',,,,932,,,932,,,932,932,,,932,,,,,,,,,,,,,,,,,,,932,932,932,932,932',
'932,,,,932,932,,,,,,,932,,,932,932,932,923,923,923,,923,,,,923,923,',
',,923,,923,923,923,923,923,923,923,,,,,,923,923,923,923,923,923,923',
',,923,,,,,,,923,,,923,923,923,923,923,923,923,923,,923,923,923,,923',
'923,,,,923,,,,,,,,,,,,,,,,,,,,923,,,923,,,923,923,,,923,,,,,,,,,,,,',
',,,,,,923,923,923,923,923,923,,,,923,923,,,,,,,923,,,923,923,923,428',
'428,428,,428,,,,428,428,,,,428,,428,428,428,428,428,428,428,,,,,,428',
'428,428,428,428,428,428,,,428,,,,,,,428,,,428,428,428,428,428,428,428',
'428,,428,428,428,,428,428,,428,428,428,,,,,,,,,,,,,,,,,,,,428,,,428',
',,428,428,,,428,,,,,,428,,,,,,,,428,,,,,428,428,428,428,428,428,,,,428',
'428,,,,,,,428,,,428,428,428,911,911,911,,911,,,,911,911,,,,911,,911',
'911,911,911,911,911,911,,,,,,911,911,911,911,911,911,911,,,911,,,,,',
',911,,,911,911,911,911,911,911,911,911,,911,911,911,,911,911,,911,911',
'911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911,,,,,,911,,,,,,,,911',
',,,,911,911,911,911,911,911,,,,911,911,,,,,,,911,,,911,911,911,910,910',
'910,,910,,,,910,910,,,,910,,910,910,910,910,910,910,910,,,,,,910,910',
'910,910,910,910,910,,,910,,,,,,,910,,,910,910,910,910,910,910,910,910',
'910,910,910,910,,910,910,,910,910,910,,,,,,,,,,,,,,,,,,,,910,,,910,',
',910,910,,,910,,,,910,,910,,,,,,,,910,,,,,910,910,910,910,910,910,,',
',910,910,,,,,,,910,,910,910,910,910,890,890,890,,890,,,,890,890,,,,890',
',890,890,890,890,890,890,890,,,,,,890,890,890,890,890,890,890,,,890',
',,,,,,890,,,890,890,890,890,890,890,890,890,,890,890,890,,890,890,,890',
'890,890,,,,,,,,,,,,,,,,,,,,890,,,890,,,890,890,,,890,,,,,,890,,,,,,',
',890,,,,,890,890,890,890,890,890,,,,890,890,,,,,,,890,,,890,890,890',
'471,471,471,,471,,,,471,471,,,,471,,471,471,471,471,471,471,471,,,,',
',471,471,471,471,471,471,471,,,471,,,,,,,471,,,471,471,471,471,471,471',
'471,471,471,471,471,471,,471,471,,471,471,471,,,,,,,,,,,,,,,,,,,,471',
',,471,,,471,471,,,471,,471,,471,,471,,,,,,,,471,,,,,471,471,471,471',
'471,471,,,,471,471,,,,,,,471,,471,471,471,471,473,473,473,,473,,,,473',
'473,,,,473,,473,473,473,473,473,473,473,,,,,,473,473,473,473,473,473',
'473,,,473,,,,,,,473,,,473,473,473,473,473,473,473,473,,473,473,473,',
'473,473,,473,473,473,,,,,,,,,,,,,,,,,,,,473,,,473,,,473,473,,,473,,',
',,,473,,,,,,,,473,,,,,473,473,473,473,473,473,,,,473,473,,,,,,,473,',
',473,473,473,474,474,474,,474,,,,474,474,,,,474,,474,474,474,474,474',
'474,474,,,,,,474,474,474,474,474,474,474,,,474,,,,,,,474,,,474,474,474',
'474,474,474,474,474,,474,474,474,,474,474,,474,474,474,,,,,,,,,,,,,',
',,,,,,474,,,474,,,474,474,,,474,,,,,,474,,,,,,,,474,,,,,474,474,474',
'474,474,474,,,,474,474,,,,,,,474,,,474,474,474,475,475,475,,475,,,,475',
'475,,,,475,,475,475,475,475,475,475,475,,,,,,475,475,475,475,475,475',
'475,,,475,,,,,,,475,,,475,475,475,475,475,475,475,475,,475,475,475,',
'475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475,,,475,475,,,475,,',
',,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475,475,,,,,,,475,',
',475,475,475,876,876,876,,876,,,,876,876,,,,876,,876,876,876,876,876',
'876,876,,,,,,876,876,876,876,876,876,876,,,876,,,,,,,876,,,876,876,876',
'876,876,876,876,876,,876,876,876,,876,876,,876,876,876,,,,,,,,,,,,,',
',,,,,,876,,,876,,,876,876,,,876,,,,,,876,,,,,,,,876,,,,,876,876,876',
'876,876,876,,,,876,876,,,,,,,876,,,876,876,876,514,514,514,,514,,,,514',
'514,,,,514,,514,514,514,514,514,514,514,,,,,,514,514,514,514,514,514',
'514,,,514,,,,,,,514,,,514,514,514,514,514,514,514,514,514,514,514,514',
',514,514,,514,514,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,',
'514,,514,,514,,,,,,,,514,,,,,514,514,514,514,514,514,,,,514,514,,,,',
',,514,,514,514,514,514,517,517,517,,517,,,,517,517,,,,517,,517,517,517',
'517,517,517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517',
'517,517,517,517,517,517,517,517,517,517,517,,517,517,,517,517,517,,',
',,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517,,,,517,,517,,,,,,,,517,,',
',,517,517,517,517,517,517,,,,517,517,,,,,,,517,,517,517,517,517,519',
'519,519,,519,,,,519,519,,,,519,,519,519,519,519,519,519,519,,,,,,519',
'519,519,519,519,519,519,,,519,,,,,,,519,,,519,519,519,519,519,519,519',
'519,,519,519,519,,519,519,,519,519,519,,,,,,,,,,,,,,,,,,,,519,,,519',
',,519,519,,,519,,,,,,519,,,,,,,,519,,,,,519,519,519,519,519,519,,,,519',
'519,,,,,,,519,,,519,519,519,524,524,524,524,524,,,,524,524,,,,524,,524',
'524,524,524,524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,',
'524,524,524,524,524,524,524,524,524,524,524,524,,524,524,524,,524,524',
',524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,524,,,,524',
',,,,,,,524,,,,,524,524,524,524,524,524,,,,524,524,,,,,,524,524,,,524',
'524,524,531,531,531,,531,,,,531,531,,,,531,,531,531,531,531,531,531',
'531,,,,,,531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531',
'531,531,531,531,,531,531,531,,531,531,,,,531,,,,,,,,,,,,,,,,,,,,531',
',,531,,,531,531,,,531,,,,,,,,,,,,,,,,,,,531,531,531,531,531,531,,,,531',
'531,,,,,,,531,,,531,531,531,533,533,533,,533,,,,533,533,,,,533,,533',
'533,533,533,533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,',
',533,,,533,533,533,533,533,533,533,533,533,533,533,533,,533,533,,533',
'533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533,,,533,,533,,533,,533',
',,,,,,,533,,,,,533,533,533,533,533,533,,,,533,533,,,,,,,533,,533,533',
'533,533,540,540,540,,540,,,,540,540,,,,540,,540,540,540,540,540,540',
'540,,,,,,540,540,540,540,540,540,540,,,540,,,,,,,540,,,540,540,540,540',
'540,540,540,540,,540,540,540,,540,540,,,,540,,,,,,,,,,,,,,,,,,,,540',
',,540,,,540,540,,,540,,,,,,,,,,,,,,,,,,,540,540,540,540,540,540,,,,540',
'540,,,,,,,540,,,540,540,540,544,544,544,,544,,,,544,544,,,,544,,544',
'544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,',
',544,,,544,544,544,544,544,544,544,544,,544,544,544,,544,544,,544,544',
'544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,,,,,544,,,,,,,,544',
',,,,544,544,544,544,544,544,,,,544,544,,,,,,,544,,,544,544,544,545,545',
'545,,545,,,,545,545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545',
'545,545,545,545,545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545',
',545,545,545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545',
'545,,,545,,,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545',
',,,,,,545,,,545,545,545,550,550,550,,550,,,,550,550,,,,550,,550,550',
'550,550,550,550,550,,,,,,550,550,550,550,550,550,550,,,550,,,,,,,550',
',,550,550,550,550,550,550,550,550,,550,550,550,,550,550,,550,550,550',
',,,,,,,,,,,,,,,,,,,550,,,550,,,550,550,,,550,,,,,,550,,,,,,,,550,,,',
',550,550,550,550,550,550,,,,550,550,,,,,,,550,,,550,550,550,821,821',
'821,,821,,,,821,821,,,,821,,821,821,821,821,821,821,821,,,,,,821,821',
'821,821,821,821,821,,,821,,,,,,,821,,,821,821,821,821,821,821,821,821',
',821,821,821,,821,821,,821,821,821,,,,,,,,,,,,,,,,,,,,821,,,821,,,821',
'821,,,821,,,,,,821,,,,,,,,821,,,,,821,821,821,821,821,821,,,,821,821',
',,,,,,821,,,821,821,821,819,819,819,,819,,,,819,819,,,,819,,819,819',
'819,819,819,819,819,,,,,,819,819,819,819,819,819,819,,,819,,,,,,,819',
',,819,819,819,819,819,819,819,819,,819,819,819,,819,819,,819,819,819',
',,,,,,,,,,,,,,,,,,,819,,,819,,,819,819,,,819,,,,,,819,,,,,,,,819,,,',
',819,819,819,819,819,819,,,,819,819,,,,,,,819,,,819,819,819,818,818',
'818,,818,,,,818,818,,,,818,,818,818,818,818,818,818,818,,,,,,818,818',
'818,818,818,818,818,,,818,,,,,,,818,,,818,818,818,818,818,818,818,818',
',818,818,818,,818,818,,818,818,818,,,,,,,,,,,,,,,,,,,,818,,,818,,,818',
'818,,,818,,,,,,818,,,,,,,,818,,,,,818,818,818,818,818,818,,,,818,818',
',,,,,,818,,,818,818,818,817,817,817,,817,,,,817,817,,,,817,,817,817',
'817,817,817,817,817,,,,,,817,817,817,817,817,817,817,,,817,,,,,,,817',
',,817,817,817,817,817,817,817,817,,817,817,817,,817,817,,817,817,817',
',,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817,,,,,,817,,,,,,,,817,,,',
',817,817,817,817,817,817,,,,817,817,,,,,,,817,,,817,817,817,816,816',
'816,,816,,,,816,816,,,,816,,816,816,816,816,816,816,816,,,,,,816,816',
'816,816,816,816,816,,,816,,,,,,,816,,,816,816,816,816,816,816,816,816',
',816,816,816,,816,816,,816,816,816,,,,,,,,,,,,,,,,,,,,816,,,816,,,816',
'816,,,816,,,,,,816,,,,,,,,816,,,,,816,816,816,816,816,816,,,,816,816',
',,,,,,816,,,816,816,816,803,803,803,,803,,,,803,803,,,,803,,803,803',
'803,803,803,803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,,,803',
',,803,803,803,803,803,803,803,803,,803,803,803,,803,803,,803,803,803',
',,,,,,,,,,,,,,,,,,,803,,,803,,,803,803,,,803,,,,,,803,,,,,,,,803,,,',
',803,803,803,803,803,803,,,,803,803,,,,,,,803,,,803,803,803,582,582',
'582,,582,,,,582,582,,,,582,,582,582,582,582,582,582,582,,,,,,582,582',
'582,582,582,582,582,,,582,,,,,,,582,,,582,582,582,582,582,582,582,582',
',582,582,582,,582,582,,582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582',
'582,,,582,,,,,,582,,,,,,,,582,,,,,582,582,582,582,582,582,,,,582,582',
',,,,,,582,,,582,582,582,796,796,796,,796,,,,796,796,,,,796,,796,796',
'796,796,796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796',
',,796,796,796,796,796,796,796,796,,796,796,796,,796,796,,796,796,796',
',,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796,,,',
',796,796,796,796,796,796,,,,796,796,,,,,,,796,,,796,796,796,605,605',
'605,,605,,,,605,605,,,,605,,605,605,605,605,605,605,605,,,,,,605,605',
'605,605,605,605,605,,,605,,,,,,,605,,,605,605,605,605,605,605,605,605',
'605,605,605,605,,605,605,,605,605,605,,,,,,,,,,,,,,,,,,,,605,,,605,',
',605,605,,,605,,605,,605,,605,,,,,,,,605,,,,,605,605,605,605,605,605',
',,,605,605,,,,,,,605,,605,605,605,605,617,617,617,,617,,,,617,617,,',
',617,,617,617,617,617,617,617,617,,,,,,617,617,617,617,617,617,617,',
',617,,,,,,,617,,,617,617,617,617,617,617,617,617,,617,617,617,,617,617',
',617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,,,,,,617,',
',,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,,,,,,,617,,,617,617',
'617,623,623,623,,623,,,,623,623,,,,623,,623,623,623,623,623,623,623',
',,,,,623,623,623,623,623,623,623,,,623,,,,,,,623,,,623,623,623,623,623',
'623,623,623,,623,623,623,,623,623,,623,623,623,,,,,,,,,,,,,,,,,,,,623',
',,623,,,623,623,,,623,,,,,,623,,,,,,,,623,,,,,623,623,623,623,623,623',
',,,623,623,,,,,,,623,,,623,623,623,774,774,774,,774,,,,774,774,,,,774',
',774,774,774,774,774,774,774,,,,,,774,774,774,774,774,774,774,,,774',
',,,,,,774,,,774,774,774,774,774,774,774,774,774,774,774,774,,774,774',
',774,774,774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,774,,774',
',774,,,,,,,,774,,,,,774,774,774,774,774,774,,,,774,774,,,,,,,774,,774',
'774,774,774,652,652,652,,652,,,,652,652,,,,652,,652,652,652,652,652',
'652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,,652,,,652,652,652',
'652,652,652,652,652,,652,652,652,,652,652,,652,652,652,,,,,,,,,,,,,',
',,,,,,652,,,652,,,652,652,,,652,,652,,,,652,,,,,,,,652,,,,,652,652,652',
'652,652,652,,,,652,652,,,,,,,652,,,652,652,652,653,653,653,,653,,,,653',
'653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653,653,653,653',
'653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,653,,653,653,653,',
'653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,653,,,653,,',
',,,653,,,,,,,,653,,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,',
',653,653,653,654,654,654,,654,,,,654,654,,,,654,,654,654,654,654,654',
'654,654,,,,,,654,654,654,654,654,654,654,,,654,,,,,,,654,,,654,654,654',
'654,654,654,654,654,654,654,654,654,,654,654,,654,654,654,,,,,,,,,,',
',,,,,,,,,654,,,654,,,654,654,,,654,,654,,654,,654,,,,,,,,654,,,,,654',
'654,654,654,654,654,,,,654,654,,,,,,,654,,654,654,654,654,657,657,657',
',657,,,,657,657,,,,657,,657,657,657,657,657,657,657,,,,,,657,657,657',
'657,657,657,657,,,657,,,,,,,657,,,657,657,657,657,657,657,657,657,,657',
'657,657,,657,657,,657,657,657,,,,,,,,,,,,,,,,,,,,657,,,657,,,657,657',
',,657,,,,,,657,,,,,,,,657,,,,,657,657,657,657,657,657,,,,657,657,,,',
',,,657,,,657,657,657,660,660,660,,660,,,,660,660,,,,660,,660,660,660',
'660,660,660,660,,,,,,660,660,660,660,660,660,660,,,660,,,,,,,660,,,660',
'660,660,660,660,660,660,660,660,660,660,660,,660,660,,660,660,660,,',
',,,,,,,,,,,,,,,,,660,,,660,,,660,660,,,660,,660,,660,,660,,,,,,,,660',
',,,,660,660,660,660,660,660,,,,660,660,,,,,,,660,,660,660,660,660,661',
'661,661,,661,,,,661,661,,,,661,,661,661,661,661,661,661,661,,,,,,661',
'661,661,661,661,661,661,,,661,,,,,,,661,,,661,661,661,661,661,661,661',
'661,661,661,661,661,,661,661,,661,661,661,,,,,,,,,,,,,,,,,,,,661,,,661',
',,661,661,,,661,,,,661,,661,,,,,,,,661,,,,,661,661,661,661,661,661,',
',,661,661,,,,,,,661,,661,661,661,661,662,662,662,,662,,,,662,662,,,',
'662,,662,662,662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,',
'662,,,,,,,662,,,662,662,662,662,662,662,662,662,,662,662,662,,662,662',
',662,662,662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,,,,,662,',
',,,,,,662,,,,,662,662,662,662,662,662,,,,662,662,,,,,,,662,,,662,662',
'662,663,663,663,,663,,,,663,663,,,,663,,663,663,663,663,663,663,663',
',,,,,663,663,663,663,663,663,663,,,663,,,,,,,663,,,663,663,663,663,663',
'663,663,663,,663,663,663,,663,663,,663,663,663,,,,,,,,,,,,,,,,,,,,663',
',,663,,,663,663,,,663,,,,,,663,,,,,,,,663,,,,,663,663,663,663,663,663',
',,,663,663,,,,,,,663,,,663,663,663,668,668,668,,668,,,,668,668,,,,668',
',668,668,668,668,668,668,668,,,,,,668,668,668,668,668,668,668,,,668',
',,,,,,668,,,668,668,668,668,668,668,668,668,,668,668,668,,668,668,,668',
'668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,,,668,,,,,,',
',668,,,,,668,668,668,668,668,668,,,,668,668,,,,,,,668,,,668,668,668',
'669,669,669,,669,,,,669,669,,,,669,,669,669,669,669,669,669,669,,,,',
',669,669,669,669,669,669,669,,,669,,,,,,,669,,,669,669,669,669,669,669',
'669,669,,669,669,669,,669,669,,669,669,669,,,,,,,,,,,,,,,,,,,,669,,',
'669,,,669,669,,,669,,,,,,669,,,,,,,,669,,,,,669,669,669,669,669,669',
',,,669,669,,,,,,,669,,,669,669,669,762,762,762,,762,,,,762,762,,,,762',
',762,762,762,762,762,762,762,,,,,,762,762,762,762,762,762,762,,,762',
',,,,,,762,,,762,762,762,762,762,762,762,762,,762,762,762,,762,762,,762',
'762,762,,,,,,,,,,,,,,,,,,,,762,,,762,,,762,762,,,762,,762,,,,762,,,',
',,,,762,,,,,762,762,762,762,762,762,,,,762,762,,,,,,,762,,,762,762,762',
'740,740,740,,740,,,,740,740,,,,740,,740,740,740,740,740,740,740,,,,',
',740,740,740,740,740,740,740,,,740,,,,,,,740,,,740,740,740,740,740,740',
'740,740,,740,740,740,,740,740,,740,740,740,,,,,,,,,,,,,,,,,,,,740,,',
'740,,,740,740,,,740,,,,,,740,,,,,,,,740,,,,,740,740,740,740,740,740',
',,,740,740,,,,,,,740,,,740,740,740,693,693,693,,693,,,,693,693,,,,693',
',693,693,693,693,693,693,693,,,,,,693,693,693,693,693,693,693,,,693',
',,,,,,693,,,693,693,693,693,693,693,693,693,,693,693,693,,693,693,,693',
'693,693,,,,,,,,,,,,,,,,,,,,693,,,693,,,693,693,,,693,,,,,,693,,,,,,',
',693,,,,,693,693,693,693,693,693,,,,693,693,,,,,,,693,,,693,693,693',
'698,698,698,,698,,,,698,698,,,,698,,698,698,698,698,698,698,698,,,,',
',698,698,698,698,698,698,698,,,698,,,,,,,698,,,698,698,698,698,698,698',
'698,698,,698,698,698,,698,698,,,,698,,,,,,,,,,,,,,,,,,,,698,,,698,,',
'698,698,,,698,,,,,,,,,,,,,,,,,,,698,698,698,698,698,698,,,,698,698,',
',,,,,698,,,698,698,698,709,709,709,,709,,,,709,709,,,,709,,709,709,709',
'709,709,709,709,,,,,,709,709,709,709,709,709,709,,,709,,,,,,,709,,,709',
'709,709,709,709,709,709,709,,709,709,709,,709,709,,,,709,,,,,,,,,,,',
',,,,,,,,709,,,709,,,709,709,,,709,,,,,,,,,,,,,,,,,,,709,709,709,709',
'709,709,,,,709,709,,,,,,,709,,,709,709,709,710,710,710,,710,,,,710,710',
',,,710,,710,710,710,710,710,710,710,,,,,,710,710,710,710,710,710,710',
',,710,,,,,,,710,,,710,710,710,710,710,710,710,710,,710,710,710,,710',
'710,,710,710,710,,,,,,,,,,,,,,,,,,,,710,,,710,,,710,710,,,710,,,,,,710',
',,,,,,,710,,,,,710,710,710,710,710,710,,,,710,710,,,,,,,710,,,710,710',
'710,724,724,724,,724,,,,724,724,,,,724,,724,724,724,724,724,724,724',
',,,,,724,724,724,724,724,724,724,,,724,,,,,,,724,,,724,724,724,724,724',
'724,724,724,724,724,724,724,,724,724,,724,724,724,,,,,,,,,,,,,,,,,,',
',724,,,724,,,724,724,,,724,,,,,,724,,,,,,,,724,,,,,724,724,724,724,724',
'724,,,,724,724,,,,,,,724,,724,724,724,724,721,721,721,,721,,,,721,721',
',,,721,,721,721,721,721,721,721,721,,,,,,721,721,721,721,721,721,721',
',,721,,,,,,,721,,,721,721,721,721,721,721,721,721,721,721,721,721,,721',
'721,,721,721,721,,,,,,,,,,,,,,,,,,,,721,,,721,,,721,721,,,721,,721,',
',,721,,,,,,,,721,,,,,721,721,721,721,721,721,,,,721,721,227,227,,,227',
',721,,721,721,721,721,,227,227,,227,227,227,227,227,227,227,,,227,227',
',,,227,227,227,227,,,,,,227,,,,,,,,227,227,,227,227,227,227,227,227',
'227,227,227,227,227,,,227,,,,,,,,,,469,469,,,469,,,,,,227,,,469,469',
'227,469,469,469,469,469,469,469,,,469,469,,,,469,469,469,469,,,,,,469',
',,,,,,,469,469,,469,469,469,469,469,469,469,469,469,469,469,,,469,,',
',,,,,,,773,773,,,773,,,,,,469,,,773,773,469,773,773,773,773,773,773',
'773,,,773,773,,,,773,773,773,773,,,,,,773,,,,,,,,773,773,,773,773,773',
'773,773,773,773,773,773,773,773,,,773,,,,,,,,,,1028,1028,,,1028,,,,',
',773,,,1028,1028,773,1028,1028,1028,1028,1028,1028,1028,,,1028,1028',
',,,1028,1028,1028,1028,,,,,,1028,,,,,,,,1028,1028,,1028,1028,1028,1028',
'1028,1028,1028,1028,1028,1028,1028,,,1028,,,,,,,,,,470,470,,,470,,,',
',,1028,,,470,470,1028,470,470,470,470,470,470,470,,,470,470,,,,470,470',
'470,470,,,,,,470,,,,,,,,470,470,,470,470,470,470,470,470,470,470,470',
'470,470,,,470,,,,,,,,,,226,226,,,226,,,,,,470,,,226,226,470,226,226',
'226,226,226,226,226,,,226,226,,,,226,226,226,226,,,,,,226,,,,,,,,226',
'226,,226,226,226,226,226,226,226,226,226,226,226,,,226,,,,,,,,,,1033',
'1033,,,1033,,,,,,226,,,1033,1033,226,1033,1033,1033,1033,1033,1033,1033',
',,1033,1033,,,,1033,1033,1033,1033,,,,,,1033,,,,,,,,1033,1033,,1033',
'1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,,,1033,,,,,,,,,,534',
'534,,,534,,,,,,1033,,,534,534,1033,534,534,534,534,534,534,534,,,534',
'534,,,,534,534,534,534,,,,,,534,,,,,,,,534,534,,534,534,534,534,534',
'534,534,534,534,534,534,,,534,,,,,,,,,,655,655,,,655,,,,,,534,,,655',
'655,534,655,655,655,655,655,655,655,,,655,655,,,,655,655,655,655,,,',
',,655,,,,,,,,655,655,,655,655,655,655,655,655,655,655,655,655,655,,',
'655,,,,,,,,,,547,547,,,547,,,,,,655,,,547,547,655,547,547,547,547,547',
'547,547,,,547,547,,,,547,547,547,547,,,,,,547,,,,,,,,547,547,,547,547',
'547,547,547,547,547,547,547,547,547,,,547,,,,,,,,,,546,546,,,546,,,',
',,547,,,546,546,547,546,546,546,546,546,546,546,,,546,546,,,,546,546',
'546,546,,,,,,546,,,,,,,,546,546,,546,546,546,546,546,546,546,546,546',
'546,546,,,546,,,,,,,,,,607,607,,,607,,,,,,546,,,607,607,546,607,607',
'607,607,607,607,607,,,607,607,,,,607,607,607,607,,,,,,607,,,,,,,,607',
'607,,607,607,607,607,607,607,607,607,607,607,607,,,607,,,,,,,,,,1034',
'1034,,,1034,,,,,,607,,,1034,1034,607,1034,1034,1034,1034,1034,1034,1034',
',,1034,1034,,,,1034,1034,1034,1034,,,,,,1034,,,,,,,,1034,1034,,1034',
'1034,1034,1034,1034,1034,1034,1034,1034,1034,1034,,,1034,,,,,,,,,,772',
'772,,,772,,,,,,1034,,,772,772,1034,772,772,772,772,772,772,772,,,772',
'772,,,,772,772,772,772,,,,,,772,,,,,,,,772,772,,772,772,772,772,772',
'772,772,772,772,772,772,,,772,,,,,,,,,,535,535,,,535,,,,,,772,,,535',
'535,772,535,535,535,535,535,535,535,,,535,535,,,,535,535,535,535,,,',
',,535,,,,,,,,535,535,,535,535,535,535,535,535,535,535,535,535,535,,',
'535,,,,,,,,,,656,656,,,656,,,,,,535,,,656,656,535,656,656,656,656,656',
'656,656,,,656,656,,,,656,656,656,656,,,,,,656,,,,,,,,656,656,,656,656',
'656,656,656,656,656,656,656,656,656,,736,656,736,736,736,736,736,,,',
',275,275,,,275,736,,,,,656,,,275,275,656,275,275,275,275,275,275,275',
',,275,275,736,,,275,275,275,275,,,736,736,736,736,,,,,,,,275,275,,275',
'275,275,275,275,275,275,275,275,275,275,,,275,,,,,,,,,736,606,606,,',
'606,,,,,,275,,,606,606,275,606,606,606,606,606,606,606,,,606,606,,,',
'606,606,606,606,,,,,,606,,,,,,,,606,606,,606,606,606,606,606,606,606',
'606,606,606,606,,734,606,734,734,734,734,734,824,,824,824,824,824,824',
',,734,,,,,606,,824,,564,606,564,564,564,564,564,,,,,,,734,,,564,,,,824',
',734,734,734,734,,,,824,824,824,824,,,,,782,564,782,782,782,782,782',
',,,564,564,564,564,,,782,,,,824,734,,,,,,781,824,781,781,781,781,781',
',,,,782,,,,,781,,,564,782,782,782,782,,,,,,,,,,,,,,,781,,,,,,,,,781',
'781,781,781,,,,,,782,,,,,,,,,,,,,,,,,,,,,,,,,,,781' ]
        racc_action_check = arr = ::Array.new(25472, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   630,  6186,   738,   nil,   201,   nil,   nil,  7142,   757,
   nil,  2221,  2359,  1186,   nil,  1134,  1131,   778,  1184,   646,
    96,   nil,   -73,  7278,  3720,  1233,   nil,   510,   nil,   168,
  1420,  1548,  7414,  7550,  7686,   nil,  6323,  7822,  7958,   nil,
  1130,   187,   195,  1203,   759,  8094,  8230,   379,  8366,  1113,
   480,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1676,   nil,  8502,   nil,   nil,   -10,   nil,  8638,  8774,   nil,
   nil,  8910,  9046,  1150,   nil,  2773,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -89,   nil,   nil,   nil,   nil,   nil,   nil,  1097,
  1093,  1092,  1087,  2083,   nil,   nil,   nil,   405,   nil,   nil,
   675,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  9182,   nil,   nil,   nil,   nil,  9318,  9454,
  9590,  9726,  9862,  1104,   nil,   131,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1085,   nil,  5090,
 10134, 10270, 10406, 10542, 10678, 10814, 24310, 23945,   nil, 10950,
 11086, 11222,   nil,   nil,   814,   269,   164,  1140,    83,  1020,
  1058,   nil, 11358,  3994,  1054, 11494, 11630, 11766, 11902,  6870,
 12038, 12174, 12310, 12446, 12582, 12718, 12854, 12990, 13126, 13262,
 13398, 13534, 13670, 13806, 13942, 14078, 14214,   nil,   nil,   nil,
   nil, 14350,   nil,   nil,   nil, 25113,   nil,   nil,  1046, 14486,
   nil,   nil,  1049,   nil,   nil,   nil, 14622,   nil,   nil, 14758,
   nil,  3172,   nil,   971,   968,   nil, 14894,  1007, 15030,   nil,
 15166, 15302,   nil,   nil,   -82,   nil,   nil, 15438,  1367,   nil,
   949,  3720,   959,   986,   941, 15710,  3035,   855,   889,   953,
  1007,   997,   nil,   971,   934,    -2,   nil,   nil,   nil,   969,
   593,   912, 15846,   nil,   293,   970,   968,  1024,   nil,   959,
 16118,   nil, 16254,  5227,  1162,   885, 16390, 16526,   nil,   nil,
  1384,   808,    -8,    -7, 16662,  5364,  6460,   327,   994,   877,
    32,    33,  1088,   952,    27,   981,   nil,   nil, 16798,   nil,
 16934,   615,   572,   466,   472,   544,   437,   365,   103,   607,
   nil,   574,   nil,   nil,   nil,   nil,   nil,   340,   nil,   468,
   nil,   479,   nil,   874,   305,   nil,   867,   nil,   857,   104,
   nil,   854,   -41,   nil,   344,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1945,
   nil,   nil,   nil,   nil,   856,   nil,   818,   nil, 17342,   817,
   nil,   803,   nil,   345,   167,   nil,   nil,   nil,  2898,   nil,
   nil,   nil,   nil,   nil,  3035,   812,   nil,   nil,   795,   783,
   162,   104,  1292,   nil,   nil,   nil,   270,   135,   820,   nil,
   nil,  1080,  1808,   nil,   nil,   nil,    61,   nil,   815, 24018,
 24237, 17886,   246, 18022, 18158, 18294,  4679,  4816,   573,   708,
   833,   809,   806,   803,  1190,  1180,  1162,  5090,  3994,  5227,
  4131,  4268,  4405,  1248,   493,  4542,  4953,  3857,   895,   850,
   nil,  1212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   730,   728,   nil,   nil, 18566,   nil,   nil, 18702,   nil, 18838,
   nil,   nil,   nil,   nil, 18974,  1372,   709,   636,   nil,   nil,
   627, 19110,   594, 19246, 24456, 24967,   508,   620,   nil,   nil,
 19382,   565,   nil,   593, 19518, 19654, 24675, 24602,  1031,  3309,
 19790,   663,   656,   530,   nil,   nil,   277,   311,   541,   519,
   nil,    39,   533,   nil, 25273,   nil,   458,   455,   nil,   446,
   440,   432,   nil,   nil,   nil,   nil,   nil,   nil,   414,   nil,
   807,   nil, 20742,   nil,   nil,   nil,   490,   nil,   nil,   nil,
   454,   nil,   nil,   444,  5912,   445,   nil,  5775,    21,   429,
   416,   393,   398,   nil,   nil, 21014, 25186, 24748,    26,   nil,
   273,   210,   -21,   nil,  1084,   nil,   277, 21150,   nil,   292,
   nil,   nil,   nil, 21286,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   334,   nil,   nil,   441,   nil,
   nil,   nil,   242,   nil,   nil,   240,   nil,  4542,   nil,  2497,
   nil,   237, 21558, 21694, 21830, 24529, 25040, 21966,   -41,   236,
 22102, 22238, 22374, 22510,   217,   nil,   nil,   nil, 22646, 22782,
   202,   nil,   nil,   nil,   -77,   275,   945,   540,   171,   161,
   nil,   -54,   254,   -19,   nil,   150,   nil,    51,   nil,   nil,
  1208,   nil,  1248, 23190,   nil,   nil,   nil,   -96, 23326,  1201,
   nil,  1201,   130,   126,  1236,   138,   548,  1232,  1187, 23462,
 23598,  1253,  1247,    59,   172,   nil,  7006,   nil,   nil,   nil,
   nil, 23870,   nil,   nil, 23734,   nil,   nil,   nil,    26,  1195,
   201,   nil,   nil,   742, 25248,   nil, 25102,   nil,  1640,   nil,
 23054,   nil,   675,   nil,  1210,   266,   nil,    20,   nil,   nil,
   nil,   nil,   592,   nil,   185,   nil,   nil,   nil,   nil,   nil,
   192,   nil, 22918,   146,     4,     7,    24,    68,  3446,   nil,
   500,   nil, 24894, 24091, 21422,   nil,   nil,   nil,   434,  4679,
  4953, 25337, 25310,  2635,    53,  1177,  6049,   nil,   nil,   338,
   nil,   nil,   nil,   406,   nil,   400, 20878,   419,   -75,   -55,
   810,     0,  3583, 20606,   nil,   474,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 20470, 20334, 20198, 20062,
   188, 19926,   nil,   nil, 25255,   nil,  5638,   nil,   nil,   577,
   nil,   -51,   nil,   nil,   nil,   569,   175,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  2898,   nil,   598,   646,   nil,   nil,
   368,   nil,  3172,  3309,   636,   659,   658,   nil,   nil,   nil,
   661,   680,   nil,   693,   696,   nil,   700,   nil,   707,   777,
   711,   682,   nil,   846,   nil,   nil, 18430,   nil,  4405,   854,
   nil,   nil,    -1,    28,   865,   240,   619,   nil,   776,  4816,
 17750,   289,   911,   nil,   796,   323,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   787,   nil,   nil,   806,   144,   nil,   nil,
 17614, 17478,  3446,   821,   826,   nil,   827,   831,   834,   nil,
   856,   840,   827, 17206,   nil,   nil,   nil,   nil,  6597,  5501,
   nil,     6, 17070,   nil,   nil,   889,   994,     8,   nil,   nil,
  1012,   nil,  1512,   nil,  6914,   nil,   335,   nil,   nil,   nil,
   nil,   239,   141,   905,   nil,    14,   nil,   nil, 15982,  6734,
   nil,   nil,  1034,   404,   nil,   nil,  1036,   nil,   nil,   965,
   nil,   259,   nil,   nil,   738,   nil,   nil,   607,   nil,   470,
   nil,   nil,   955, 15574,   849,  1026,   nil,  1076,  3583,   -56,
   813,   763,  1044,   683,   nil,   nil,   nil,   391,   nil,   nil,
   nil,   975,   995,   997,  1004,  1009,   938,  1012,   668,  3857,
   nil,   153,   nil,   nil,  4131,   nil,  4268,  1038,   nil,   nil,
  1041,  1043,  1047,  1051,   nil,  1061,   nil,   601, 24164,   nil,
   nil,  1208,  9998, 24383, 24821,    88,   nil,  1074,   875,   nil,
   nil,   nil,   nil,   814,  1111,   559,   nil,   nil,   nil,  1241,
  1247,   nil,  1143,   nil,  1256,   nil,  1739,   nil,  8002,   nil,
   nil,  1172,  1179,   nil,  1144,   -10,   -11,    -9,   413,   nil,
  1147,  1149,   nil,   nil,   nil,  1151,  1153,  1158,  1159,     8,
   nil,  7322,   nil,   nil,   nil,   nil,   974,   nil ]

racc_action_default = [
    -1,  -643,  -642,  -643,    -2,  -629,    -4,    -5,  -643,    -8,
    -9,  -643,  -643,  -643,   -35,  -643,  -643,   -40,  -643,  -643,
  -294,   -51,  -631,  -643,   -56,   -61,   -62,   -63,   -67,  -273,
  -273,  -273,  -309,  -343,  -344,   -79,  -642,   -83,   -91,   -93,
  -643,  -536,  -537,  -643,  -643,  -643,  -643,  -232,  -643,  -631,
  -246,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -616,  -296,  -298,  -305,  -307,  -317,  -423,  -643,  -643,   -58,
   -58,  -629,  -643,  -327,  -334,  -643,  -345,  -346,  -348,  -349,
  -350,  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -366,  -468,
  -469,  -470,  -471,  -472,  -473,  -642,  -476,  -642,  -642,  -642,
  -486,  -642,  -642,  -642,  -514,  -520,  -521,  -614,  -525,  -526,
  -615,  -528,  -529,  -530,  -531,  -532,  -533,  -534,  -535,  -540,
  -541,  1088,    -3,  -630,  -638,  -639,  -640,    -7,  -643,  -643,
  -643,  -643,  -643,  -643,   -23,  -643,  -122,  -123,  -124,  -125,
  -126,  -127,  -128,  -129,  -130,  -134,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,
  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,
  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,
  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,
  -199,  -200,  -201,  -202,  -203,  -204,  -205,   -28,  -131,  -642,
  -643,  -643,  -643,  -643,  -643,  -642,  -643,  -643,  -626,  -643,
  -643,  -631,  -632,   -55,  -643,  -536,  -537,  -643,  -294,  -643,
  -643,  -238,  -643,  -642,  -643,  -643,  -643,  -643,  -643,  -643,
  -643,  -643,  -643,  -643,  -643,  -643,  -643,  -643,  -643,  -643,
  -643,  -643,  -643,  -643,  -643,  -643,  -643,  -247,  -248,  -249,
  -250,  -643,  -359,  -452,  -431,  -643,  -627,  -628,   -68,  -643,
  -316,  -358,  -643,  -445,  -447,   -74,  -642,  -442,   -75,  -631,
   -76,  -253,  -268,  -642,  -642,  -272,  -643,  -278,  -643,  -609,
  -643,  -643,   -77,   -78,  -629,   -17,   -18,  -643,   -21,   -22,
   -81,  -642,  -631,  -643,   -84,   -87,  -642,   -99,  -100,  -643,
  -643,  -107,  -309,  -312,  -631,  -435,  -343,  -344,  -347,  -443,
  -643,   -89,  -643,   -95,  -304,  -522,  -523,  -643,  -226,  -227,
  -643,  -239,  -643,  -642,  -300,  -631,  -642,  -642,  -318,  -319,
  -568,   -57,  -643,  -643,  -643,  -642,  -642,  -629,  -643,  -630,
  -536,  -537,  -643,  -643,  -294,  -643,  -376,  -377,  -643,  -330,
  -643,  -122,  -123,  -165,  -166,  -167,  -183,  -188,  -195,  -198,
  -337,  -643,  -536,  -537,  -604,  -605,  -474,  -643,  -498,  -643,
  -500,  -643,  -502,  -643,  -643,  -481,  -643,  -642,  -643,  -643,
  -494,  -643,  -643,  -496,  -643,  -513,  -515,  -516,  -517,  -518,
    -6,  -641,   -29,   -30,   -31,   -32,   -33,   -10,   -11,  -643,
   -25,   -26,   -27,  -132,  -643,   -36,   -38,   -39,  -643,  -643,
   -37,  -643,   -41,  -643,  -294,   -49,   -50,  -206,  -258,  -278,
   -52,   -53,   -42,  -207,  -258,  -631,  -263,  -264,  -642,  -642,
  -617,  -618,  -273,  -440,  -619,  -620,  -618,  -617,  -273,  -439,
  -441,  -619,  -620,   -48,  -215,   -54,  -631,  -315,  -643,  -643,
  -643,  -642,  -304,  -643,  -643,  -643,  -216,  -217,  -218,  -219,
  -220,  -221,  -222,  -223,  -228,  -229,  -230,  -231,  -233,  -234,
  -235,  -236,  -237,  -240,  -241,  -242,  -243,  -631,  -251,  -643,
  -453,  -273,  -617,  -618,   -65,   -69,  -274,  -436,  -449,  -452,
  -631,  -631,  -311,  -269,  -643,  -277,  -270,  -643,  -275,  -643,
  -279,  -612,  -613,   -16,  -630,   -20,  -631,   -80,  -302,   -96,
   -85,  -643,  -631,  -642,  -643,  -643,  -106,  -643,  -522,  -523,
  -643,   -92,   -97,  -643,  -643,  -643,  -643,  -643,  -252,  -244,
  -643,  -460,  -643,  -631,  -299,  -254,  -635,  -635,  -643,  -643,
  -607,  -635,  -643,  -424,  -568,  -427,  -603,  -603,  -551,  -553,
  -553,  -553,  -567,  -569,  -570,  -571,  -572,  -573,  -574,  -575,
  -643,  -577,  -643,  -583,  -585,  -586,  -588,  -593,  -595,  -596,
  -598,  -599,  -600,  -643,  -642,  -367,  -368,  -642,  -643,  -643,
  -643,  -643,  -643,  -362,  -455,  -642,  -643,  -643,  -304,   -58,
  -117,  -118,  -643,  -120,  -643,  -294,  -642,  -643,  -335,  -546,
  -340,  -624,  -625,  -643,  -475,  -499,  -504,  -505,  -507,  -477,
  -501,  -478,  -503,  -479,  -480,  -643,  -483,  -485,  -643,  -488,
  -490,  -491,  -643,  -492,  -493,  -643,  -519,  -642,   -24,  -643,
   -34,  -284,  -643,  -643,  -642,  -643,  -643,  -643,  -444,  -643,
  -265,  -267,  -643,  -643,   -70,  -261,  -262,  -437,  -643,  -643,
   -72,  -438,  -314,  -633,  -617,  -618,  -617,  -618,  -631,  -643,
  -430,  -642,   -64,  -432,  -449,  -643,  -450,  -643,  -260,  -310,
  -642,  -276,  -280,  -643,  -610,  -611,   -19,   -82,  -643,   -88,
   -94,  -631,  -617,  -618,  -642,  -103,  -105,  -643,   -90,  -643,
  -643,  -224,  -225,  -631,  -642,  -360,  -642,  -297,  -365,  -301,
  -255,  -637,  -636,  -257,  -637,  -306,  -308,  -608,  -643,  -631,
  -643,  -549,  -550,  -643,  -643,  -560,  -643,  -563,  -643,  -565,
  -643,  -378,  -643,  -380,  -382,  -389,  -574,  -631,  -579,  -587,
  -597,  -601,  -642,  -369,  -642,   -59,  -370,  -371,  -322,  -323,
  -643,  -325,  -643,  -631,  -617,  -618,  -621,  -303,  -642,  -117,
  -118,  -119,  -643,  -643,  -642,  -328,  -542,  -544,  -331,  -642,
  -642,  -568,  -568,  -643,  -631,  -643,  -642,  -482,  -484,  -643,
  -487,  -495,  -497,  -643,  -133,  -282,  -643,  -631,  -617,  -618,
  -618,  -617,  -259,  -643,  -634,  -642,   -44,  -209,   -45,  -210,
   -71,   -46,  -212,   -47,  -211,   -73,  -643,  -643,  -643,  -643,
  -444,  -643,  -412,  -413,  -631,  -415,  -642,  -434,  -433,  -643,
  -446,  -642,  -448,  -271,  -281,   -86,  -101,   -98,  -214,  -313,
   -13,   -15,  -361,  -363,  -642,  -467,  -461,  -642,  -462,  -463,
  -635,  -425,  -642,  -642,  -417,  -631,  -603,  -584,  -602,  -552,
  -553,  -553,  -578,  -553,  -553,  -594,  -553,  -589,  -631,  -643,
  -387,  -643,  -576,  -643,  -364,  -372,  -643,  -374,  -642,  -643,
   -60,  -324,  -643,  -444,  -643,  -117,  -118,  -121,  -631,  -642,
  -643,  -643,  -643,  -338,  -631,  -643,  -341,  -606,  -506,  -509,
  -510,  -511,  -512,  -643,  -489,   -12,  -283,  -444,   -43,  -208,
  -266,  -643,  -245,  -603,  -603,  -394,  -642,  -642,  -642,  -411,
  -643,  -631,  -574,  -643,  -581,  -591,  -454,   -66,  -642,  -642,
  -466,  -643,  -643,  -465,  -256,  -643,  -643,  -643,  -426,  -548,
  -643,  -556,  -643,  -558,  -643,  -561,  -643,  -564,  -566,  -379,
  -381,  -385,  -643,  -390,  -320,  -643,  -375,  -321,  -643,  -642,
  -326,  -444,  -643,  -643,  -332,  -336,  -643,  -545,  -547,  -546,
  -508,  -643,  -392,  -393,  -402,  -396,  -404,  -643,  -407,  -643,
  -409,  -414,  -643,  -643,  -580,  -643,  -451,  -642,  -642,  -108,
  -109,  -643,  -643,  -116,  -464,  -428,  -429,  -631,  -419,  -421,
  -422,  -553,  -553,  -553,  -553,  -383,  -643,  -388,  -643,  -642,
  -280,  -642,  -329,  -543,  -642,  -339,  -642,  -603,  -582,  -395,
  -642,  -642,  -642,  -642,  -592,  -642,  -416,  -590,  -643,  -304,
   -14,  -460,  -642,  -643,  -643,  -115,  -418,  -643,  -643,  -554,
  -557,  -559,  -562,  -643,  -386,  -642,  -456,  -457,  -458,  -643,
  -643,  -391,  -643,  -399,  -643,  -401,  -643,  -405,  -643,  -408,
  -410,  -303,  -621,  -459,  -631,  -617,  -618,  -621,  -114,  -420,
  -553,  -384,  -373,  -333,  -342,  -642,  -642,  -642,  -642,  -444,
  -555,  -643,  -397,  -400,  -403,  -406,  -642,  -398 ]

clist = [
'6,287,230,226,233,292,292,292,445,274,19,276,452,458,602,380,19,443',
'4,139,139,348,464,126,9,355,356,552,714,342,9,234,122,314,516,565,293',
'293,293,694,234,234,234,406,19,319,319,747,780,142,142,879,294,294,294',
'352,353,144,144,357,123,501,572,134,218,427,430,731,732,510,19,499,278',
'285,288,234,234,442,436,234,362,436,463,139,344,841,436,328,328,126',
'505,331,635,388,873,390,392,395,358,400,403,390,541,771,855,685,950',
'594,597,351,351,139,741,351,310,998,412,413,414,415,917,658,328,865',
'312,826,290,302,303,862,347,19,691,127,1000,691,234,234,234,234,19,720',
'723,368,1024,9,727,889,616,625,618,389,617,632,416,891,636,404,1014',
'370,779,619,966,953,783,969,880,919,755,419,351,351,351,351,367,921',
'217,696,997,861,563,863,851,694,350,728,929,840,508,516,509,831,681',
'1046,762,847,931,453,292,920,386,425,435,387,391,435,394,1,647,868,435',
'638,397,399,402,1069,898,785,469,1024,786,405,890,446,429,429,133,19',
'234,433,234,234,433,234,1000,462,417,433,234,234,860,857,1018,623,1007',
'950,694,683,410,729,2,19,292,507,678,452,458,760,384,292,558,559,292',
'887,440,441,464,467,443,918,1020,340,465,466,741,928,572,870,691,691',
'349,829,649,293,446,684,365,234,775,275,381,515,515,293,234,620,982',
'234,1044,294,287,699,343,534,537,345,553,687,1047,294,708,346,,,,19',
'701,,,19,704,546,126,319,19,512,,865,542,525,,523,704,,,1071,789,,,',
'319,862,598,,555,560,606,,527,,556,19,,,820,,,939,1030,524,,,234,19',
'19,328,557,561,530,862,,,,506,,126,614,836,614,,,554,328,511,601,1001',
',1072,763,310,,,704,,310,639,351,788,1016,526,636,741,,741,532,,,,,',
',,,,972,973,,655,328,1021,328,,1022,666,,659,,139,,671,833,,694,,,934',
',797,,883,453,452,458,,292,,515,515,,,665,,,862,,807,809,142,,,,812',
'814,892,893,144,894,895,835,446,,648,666,907,,,810,679,462,234,,,815',
'1005,741,,856,,,,,,,572,572,664,,1075,,665,,670,672,838,,453,292,,1063',
',436,,,,,806,808,453,1051,436,436,811,813,,,436,436,542,691,,,446,19',
',690,,542,936,741,319,741,234,,462,682,833,688,689,319,,717,788,,,,462',
',888,234,704,,848,697,,961,768,,,700,,,,,962,,741,,453,292,,914,328',
',,,,,,,719,328,,713,,,,909,758,759,,761,,19,446,,19,,,,807,809,814,812',
'234,777,462,756,,,,,,,,,234,453,292,,,,234,,,435,,,959,,828,,,,435,435',
'6,,,20,435,435,,446,,20,19,908,139,659,778,436,433,234,793,462,784,827',
'1048,,9,433,433,,,,666,433,433,671,822,805,659,20,321,321,,988,142,515',
',,,,,542,144,,,1049,,1050,794,665,,909,837,319,,20,854,1009,,845,,849',
',,319,364,,429,,,896,,,,1017,,,914,,,914,,914,,,,,1079,850,,659,453',
',,292,328,839,877,,877,,,,,,881,328,,,,,,,882,,,20,,,446,,,,19,659,20',
',462,,234,872,435,,,19,19,,,139,,,19,,,735,737,739,,,,515,854,,,,914',
',914,433,914,,914,1064,,,,704,897,,,,,,,,,822,,,,,19,,,914,,,,,29,,',
'933,,,29,,,,19,,,,,,,,19,19,,29,955,20,,434,659,,434,954,29,29,29,434',
'29,957,963,,,,960,,234,,19,,,20,965,938,,,,,,19,234,,,854,29,,949,,',
'29,29,964,,29,,968,975,975,975,,351,,,,,,,,,,,,967,984,351,,,,19,19',
',,991,,,,,,976,978,980,,,,,20,,,,20,,,1012,321,20,29,1015,,,19,29,29',
'29,29,29,328,,1033,,1036,321,,,1013,328,,,845,,,,20,,1027,,,,,19,,,',
',20,20,,453,292,,,858,877,,858,,,615,,615,19,975,975,975,975,19,975',
'19,,,,,,446,,,328,,,462,,,,234,,462,877,659,,,1073,1074,,1053,1055,1057',
'1059,864,1060,866,,,29,29,29,29,29,29,29,,,,29,29,29,,975,975,975,975',
',,,,,,29,975,,,,941,943,,945,947,,948,,,,,,,,915,,,1082,1083,1084,1085',
',,,,,,,1087,,,29,,,,,,,29,,,29,,,,,,,,,,,,,916,,,,,29,,,,29,,,,,29,',
',32,,,,,,32,,,,,20,,,,,,,321,,,32,,,29,,,321,,,32,32,32,,32,29,29,29',
',,,,16,,,,,,16,,,,,,,,,,,,32,,,,,32,32,,,32,1039,1040,1041,1042,,,16',
',,,,20,,,20,,,,,,858,,,915,,,915,,915,1002,,1003,16,1004,,,,,,,,,366',
',,,,,,,,32,,,,,32,32,32,32,32,,,,20,,1023,,1025,1080,434,,,,,,,,,434',
'434,,29,,,434,434,,,,,,,16,,,,,,,,915,16,915,,915,,915,,,,,,,,321,,',
',,,,,,,,321,1070,,,915,,,,,29,,,,,,1076,,1077,29,1078,,32,32,32,32,32',
'32,32,,,,32,32,32,,29,,,,,,,,,1086,32,,,,426,439,,,,,,,,,20,,,,16,,431',
',,431,,20,20,,431,,,902,20,,29,,32,29,,,,,16,32,,29,32,,,434,,,,,,,',
'29,,,,,,29,32,,,,32,,,,20,32,,,,,,,518,,520,,521,522,,29,,,20,,,29,29',
',,,20,20,32,,29,29,,,16,,29,29,16,32,32,32,,16,,,,,,,,,20,,,,,,,562',
',,,20,,,,,,,16,,,,,,,,,,,,16,16,,,,,,,,313,,18,,,,615,,18,,,20,20,,',
'993,,,,,,,,,,,,,,,,,,,,,18,,,,,,20,,,29,,,,651,,29,,,,,29,29,,,,,18',
'29,,32,615,,,,,20,,,,,,,,,29,,,,,,,,,,,,20,,,,,20,,20,,,,29,,,,,,,,',
',,,,,,32,,,29,,18,,,,32,,29,29,,18,,,692,,,562,,695,,,,32,,,,,,,,,29',
',29,,,,,16,,,,,,29,29,,,,,,,,,,,,,,,,424,,,,,32,,,32,,,,,,,,32,,,,748',
',29,29,313,,,,32,,,,,,32,,18,,18,,,18,,,,,18,16,,,16,,,29,,,,,32,,18',
',,,32,32,,,,,,,,32,32,,,,,32,32,,29,,,,,,,,795,,313,,,,,313,692,562',
'16,,,29,,,431,,29,,29,,,,,431,431,,,,,431,431,,18,,29,,18,,,834,,18',
',,599,600,,,,,,,,,42,,,,,,42,,846,,,,,692,18,,562,,,,,,,,,,18,18,,,',
',867,32,42,318,318,,,32,,,,,32,32,,,,,,32,,,439,,,,,,42,,,,,,,,32,,361',
',,383,,16,,,,,,,,,,,16,16,906,,,32,,16,,,,,,,,,,,,,,,,32,431,,,,,,,32',
'32,,,42,,,,,,,,,42,,,16,,,,,,,41,32,,32,,,41,,,,,16,,,32,32,,,,16,16',
',,,,,,,,,,,,,41,317,317,,,,,,,,,16,,,,,,,,32,32,18,16,,,,41,,562,,,',
',,,,360,,,382,,,,42,,,,,,,32,,,,,752,,,754,,,16,16,,,994,,42,,,,,,,',
',1010,,,32,,,,,,,,41,,,,18,16,,18,,41,,,,32,,,,,32,,32,,,,,,,,,,,,,',
'16,,32,,,,,,,,42,,,,42,,,,318,42,,16,,18,,,16,,16,18,,,,,,318,,,18,18',
',,,,18,18,42,,,,,,,,,,,,42,42,,,41,,,,,,,,,383,,383,,,,,,,,,,,,,41,',
',,,,,,,,,,,,,,,,,,,,884,,,,,,,,,,,,,,,,,,903,,,,,,,,,,,,,,,,,,18,,,',
',,41,,,,41,18,18,,317,41,,,18,,,,926,,,,,,,,,317,,,,18,,,,,930,,41,',
',,,,935,,,,,,41,41,,,18,,,,,,,,,382,,382,,,,,956,,18,,,,,,,42,18,18',
',,,,318,,,,,,,,,318,,,,,,,,,,,18,,,,,,,,,,,18,,,986,987,,,,,,,,,,,,',
',,,,,,,,,,,,,,,42,,1011,42,,,,18,18,,,,,,,,,,,,,,,,,,,,,,,1031,,,,,',
',18,,,,,,,,,,,,,,1045,42,,,,,,,,,,,,,,18,,,41,,,,,,,317,,,,,,,,,317',
',18,,,,,18,,18,,,,,,,,,318,,,,,,,,,,,318,,,,,,,,,,,,,,,,,,,,,,,,,41',
',,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,42,42,,,,,,42,41,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,317,,,,,,42,,,,,317',
',,42,42,241,,,,,,,,,291,291,291,,,,,,,,,,,338,339,42,341,,,,,,,,,,42',
',,,,,,,,,,,,,,,,,,41,,,,,,,,,,,41,41,,,383,,,41,,42,42,,,990,,,,,,,',
',,,,,,,,,,,,,,,,,,,42,,,,,,,41,,,,,,,,,,,,,,,,,383,41,,,,42,,,,41,41',
',,,,,,,,,,,,,,,42,,,,,42,,42,,41,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,291',
'438,,,444,291,,,,444,,,382,,,,,41,41,,,989,241,,,476,477,478,479,480',
'481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497',
',41,,,498,,,,,,,,291,,,,,,,291,,,291,,,382,,,,291,41,291,,291,291,,',
',,,,,,,,,,,,,,41,,,,,41,,41,,,,,,,,,,,,,,,548,,549,,,,291,291,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,291,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,,444,444,444',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,,,291,,291,,,,,,,,,,,,,,291',
',,,,,,,,,,711,712,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,',
',,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,444',
'291,,,802,,,291,291,444,444,,,,,444,444,,,,,,,,,,,,,,,,,,,,,,,,291,',
',,,,,,,,,,,,,,,444,,,,,,291,,,,,291,,,291,,,,,,,,,,,,,,,,291,,,,,,,',
',,,,,,,,,,,,,,291,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,291,,,,,,,444',
',,,,,,,,,,,,444,444,444,444,,912,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,444,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291' ]
        racc_goto_table = arr = ::Array.new(3754, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,85,39,37,26,45,45,45,35,171,34,37,49,49,113,69,34,76,2,70,70,102,76',
'118,9,41,41,12,15,39,9,34,5,62,87,170,82,82,82,217,34,34,34,69,34,34',
'34,148,121,73,73,109,84,84,84,23,23,74,74,23,8,49,203,21,21,28,28,153',
'153,35,34,172,50,50,50,34,34,32,24,34,34,24,32,70,9,17,24,78,78,118',
'51,63,192,6,107,6,6,6,5,6,6,6,64,67,162,52,146,106,106,30,30,70,147',
'30,58,164,23,23,23,23,158,36,78,212,59,160,57,57,57,208,128,34,88,7',
'165,88,34,34,34,34,34,83,83,129,213,9,83,130,68,193,68,189,131,193,9',
'132,193,189,133,134,135,136,137,149,138,139,44,150,42,31,30,30,30,30',
'25,156,22,20,163,159,166,159,167,217,168,169,18,16,175,87,176,178,180',
'181,182,183,184,85,45,162,187,26,26,188,190,26,191,1,13,148,26,194,195',
'196,197,164,198,199,37,213,200,201,202,6,82,82,11,34,34,34,34,34,34',
'34,165,70,10,34,34,34,207,209,210,216,149,146,217,86,7,170,3,34,45,85',
'35,49,49,113,98,45,81,101,45,67,30,30,76,60,76,159,158,79,30,30,147',
'160,203,147,88,88,104,52,75,82,6,54,115,34,117,48,122,6,6,82,34,123',
'162,34,149,84,85,64,124,37,39,125,126,172,109,84,64,127,,,,34,35,,,34',
'49,37,118,34,34,60,,212,62,9,,5,49,,,149,192,,,,34,208,23,,6,6,37,,60',
',82,34,,,36,,,153,17,8,,,34,34,34,78,84,84,63,208,,,,57,,118,34,36,34',
',,60,78,57,5,159,,107,35,58,,,49,,58,6,30,193,121,59,193,147,,147,59',
',,,,,,,,,153,153,,37,78,159,78,,159,85,,39,,70,,85,87,,217,,,83,,35',
',36,85,49,49,,45,,6,6,,,6,,,208,,76,76,73,,,,76,76,12,12,74,170,170',
'64,6,,21,85,36,,,51,39,70,34,,,51,147,147,,152,,,,,,,203,203,50,,159',
',6,,50,60,76,,85,45,,15,,24,,,,,32,32,85,153,24,24,32,32,,,24,24,62',
'88,,,6,34,,84,,62,12,147,34,147,34,,70,50,87,60,60,34,,100,193,,,,70',
',35,34,49,,28,60,,36,41,,,60,,,,,12,,147,,85,45,,152,78,,,,,,,,60,78',
',30,,,,76,100,100,,100,,34,6,,34,,,,76,76,76,76,34,6,70,118,,,,,,,,',
'34,85,45,,,,34,,,26,,,106,,102,,,,26,26,6,,,38,26,26,,6,,38,34,32,70',
'39,30,24,34,34,2,70,30,171,113,,9,34,34,,,,85,34,34,85,6,84,39,38,38',
'38,,106,73,6,,,,,,62,74,,,12,,12,21,6,,76,62,34,,38,39,106,,6,,6,,,34',
'38,,82,,,69,,,,152,,,152,,,152,,152,,,,,36,84,,39,85,,,45,78,60,6,,6',
',,,,,100,78,,,,,,,82,,,38,,,6,,,,34,39,38,,70,,34,60,26,,,34,34,,,70',
',,34,,,206,206,206,,,,6,39,,,,152,,152,34,152,,152,35,,,,49,60,,,,,',
',,,6,,,,,34,,,152,,,,,53,,,6,,,53,,,,34,,,,,,,,34,34,,53,23,38,,38,39',
',38,100,53,53,53,38,53,100,23,,,,100,,34,,34,,,38,100,60,,,,,,34,34',
',,39,53,,60,,,53,53,118,,53,,118,6,6,6,,30,,,,,,,,,,,,60,34,30,,,,34',
'34,,,34,,,,,,155,155,155,,,,,38,,,,38,,,100,38,38,53,100,,,34,53,53',
'53,53,53,78,,37,,39,38,,,118,78,,,6,,,,38,,34,,,,,34,,,,,38,38,,85,45',
',,154,6,,154,,,38,,38,34,6,6,6,6,34,6,34,,,,,,6,,,78,,,70,,,,34,,70',
'6,39,,,100,100,,155,155,155,155,157,155,157,,,53,53,53,53,53,53,53,',
',,53,53,53,,6,6,6,6,,,,,,,53,6,,,,206,206,,206,206,,206,,,,,,,,154,',
',155,155,155,155,,,,,,,,155,,,53,,,,,,,53,,,53,,,,,,,,,,,,,157,,,,,53',
',,,53,,,,,53,,,56,,,,,,56,,,,,38,,,,,,,38,,,56,,,53,,,38,,,56,56,56',
',56,53,53,53,,,,,27,,,,,,27,,,,,,,,,,,,56,,,,,56,56,,,56,206,206,206',
'206,,,27,,,,,38,,,38,,,,,,154,,,154,,,154,,154,157,,157,27,157,,,,,',
',,,27,,,,,,,,,56,,,,,56,56,56,56,56,,,,38,,157,,157,206,38,,,,,,,,,38',
'38,,53,,,38,38,,,,,,,27,,,,,,,,154,27,154,,154,,154,,,,,,,,38,,,,,,',
',,,,38,157,,,154,,,,,53,,,,,,157,,157,53,157,,56,56,56,56,56,56,56,',
',,56,56,56,,53,,,,,,,,,157,56,,,,29,29,,,,,,,,,38,,,,27,,27,,,27,,38',
'38,,27,,,38,38,,53,,56,53,,,,,27,56,,53,56,,,38,,,,,,,,53,,,,,,53,56',
',,,56,,,,38,56,,,,,,,29,,29,,29,29,,53,,,38,,,53,53,,,,38,38,56,,53',
'53,,,27,,53,53,27,56,56,56,,27,,,,,,,,,38,,,,,,,29,,,,38,,,,,,,27,,',
',,,,,,,,,27,27,,,,,,,,14,,33,,,,38,,33,,,38,38,,,38,,,,,,,,,,,,,,,,',
',,,,33,,,,,,38,,,53,,,,29,,53,,,,,53,53,,,,,33,53,,56,38,,,,,38,,,,',
',,,,53,,,,,,,,,,,,38,,,,,38,,38,,,,53,,,,,,,,,,,,,,,56,,,53,,33,,,,56',
',53,53,,33,,,29,,,29,,29,,,,56,,,,,,,,,53,,53,,,,,27,,,,,,53,53,,,,',
',,,,,,,,,,,14,,,,,56,,,56,,,,,,,,56,,,,29,,53,53,14,,,,56,,,,,,56,,33',
',33,,,33,,,,,33,27,,,27,,,53,,,,,56,,33,,,,56,56,,,,,,,,56,56,,,,,56',
'56,,53,,,,,,,,29,,14,,,,,14,29,29,27,,,53,,,27,,53,,53,,,,,27,27,,,',
',27,27,,33,,53,,33,,,29,,33,,,14,14,,,,,,,,,66,,,,,,66,,29,,,,,29,33',
',29,,,,,,,,,,33,33,,,,,29,56,66,66,66,,,56,,,,,56,56,,,,,,56,,,29,,',
',,,66,,,,,,,,56,,66,,,66,,27,,,,,,,,,,,27,27,29,,,56,,27,,,,,,,,,,,',
',,,,56,27,,,,,,,56,56,,,66,,,,,,,,,66,,,27,,,,,,,65,56,,56,,,65,,,,',
'27,,,56,56,,,,27,27,,,,,,,,,,,,,,65,65,65,,,,,,,,,27,,,,,,,,56,56,33',
'27,,,,65,,29,,,,,,,,65,,,65,,,,66,,,,,,,56,,,,,14,,,14,,,27,27,,,27',
',66,,,,,,,,,29,,,56,,,,,,,,65,,,,33,27,,33,,65,,,,56,,,,,56,,56,,,,',
',,,,,,,,,27,,56,,,,,,,,66,,,,66,,,,66,66,,27,,33,,,27,,27,33,,,,,,66',
',,33,33,,,,,33,33,66,,,,,,,,,,,,66,66,,,65,,,,,,,,,66,,66,,,,,,,,,,',
',,65,,,,,,,,,,,,,,,,,,,,,,14,,,,,,,,,,,,,,,,,,14,,,,,,,,,,,,,,,,,,33',
',,,,,65,,,,65,33,33,,65,65,,,33,,,,14,,,,,,,,,65,,,,33,,,,,14,,65,,',
',,,14,,,,,,65,65,,,33,,,,,,,,,65,,65,,,,,14,,33,,,,,,,66,33,33,,,,,66',
',,,,,,,,66,,,,,,,,,,,33,,,,,,,,,,,33,,,14,14,,,,,,,,,,,,,,,,,,,,,,,',
',,,,66,,14,66,,,,33,33,,,,,,,,,,,,,,,,,,,,,,,14,,,,,,,33,,,,,,,,,,,',
',,14,66,,,,,,,,,,,,,,33,,,65,,,,,,,65,,,,,,,,,65,,33,,,,,33,,33,,,,',
',,,,66,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,65,,,65,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,66,,,,,,,,,,,66,66,,,,,,66,65,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,66,,,,,,,,,,,,65,,,,,,66,,,,,65,,,66,66,40,,,,,,,,,40',
'40,40,,,,,,,,,,,40,40,66,40,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,65,,,,,,,',
',,,65,65,,,66,,,65,,66,66,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,65',
',,,,,,,,,,,,,,,,66,65,,,,66,,,,65,65,,,,,,,,,,,,,,,,66,,,,,66,,66,,65',
',,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,40,40,,,40,40,,,,40,,,65,,,,,65,65',
',,65,40,,,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,,65,,,40,,,,,,,,40,,,,,,,40,,,40,,,65,,,,40,65,40,,40,40,,,,,',
',,,,,,,,,,,65,,,,,65,,65,,,,,,,,,,,,,,,40,,40,,,,40,40,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40,40,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,,,40,,,,,,,,,,,40,40',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,40,,,40,40,40,40',
',,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,40,,,,,,40,,,,,40',
',,40,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,',
',,,,,,,,,,,,,,40,,,,,,,40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3754, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   207,    16,   250,   nil,    27,    -2,   125,    55,    22,
   103,   216,  -316,  -210,  1527,  -523,  -527,  -629,  -654,   nil,
  -347,    52,   164,   -12,  -143,   102,   -19,  1199,  -155,  1184,
    42,    35,  -147,  1563,     8,  -217,  -324,   -16,   646,   -20,
  2721,   -44,  -430,   nil,  -589,   -27,   nil,   nil,   262,  -214,
    43,  -188,  -403,   840,  -219,   nil,  1157,    94,    78,    88,
    36,   nil,    -4,    53,  -230,  2030,  1890,  -509,  -220,   -60,
     8,   nil,   nil,    38,    46,  -141,  -207,   nil,    50,   224,
   nil,   -86,     4,  -415,    20,   -29,  -254,  -260,  -382,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   183,   nil,
    -2,   -86,   -44,   nil,   214,   nil,  -245,  -658,   nil,  -703,
   nil,   nil,   nil,  -344,   nil,   214,   nil,  -328,    18,   nil,
   nil,  -571,   215,   -86,   241,   243,   -38,   248,    66,    70,
  -628,  -217,  -623,  -806,    85,  -458,  -219,  -731,  -456,  -731,
   nil,   nil,   nil,   nil,   nil,   nil,  -763,  -468,  -533,  -708,
  -657,   nil,  -244,  -499,   278,    30,  -649,   318,  -704,  -555,
  -556,   nil,  -625,  -759,  -822,  -803,  -170,  -546,   118,  -378,
  -315,   -16,  -202,   nil,   nil,   -95,   -94,   nil,  -495,   nil,
  -308,  -818,  -410,  -521,  -651,   nil,   nil,   108,   108,    54,
   106,   107,  -302,  -238,  -186,   112,   112,   112,  -569,  -410,
  -408,   118,  -554,  -288,   nil,   nil,   228,  -494,  -605,  -489,
  -729,   nil,  -613,  -833,   nil,   nil,  -142,  -478 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   305,     7,   359,   308,
   nil,   nil,   nil,   nil,   551,   nil,   nil,   nil,   nil,   304,
   306,   nil,   nil,   nil,    14,    15,    21,   239,   nil,   297,
    17,   nil,   432,   240,   337,   nil,   nil,   773,   238,   468,
    24,   nil,   nil,   354,   nil,    25,    26,    27,   nil,   707,
   nil,   nil,   nil,   325,   nil,    28,   322,   447,    35,   nil,
   nil,    37,    40,    39,   nil,   235,   236,   613,   nil,   141,
   455,   140,   143,    90,    91,   nil,   437,    47,    50,   271,
   543,   nil,   448,   nil,   449,   460,   667,   513,   295,   279,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
   nil,   nil,   280,    65,   nil,    67,   nil,   nil,    68,   875,
    69,    70,    71,   nil,    72,   nil,    73,   nil,   595,    74,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   284,   273,   716,   844,   604,   876,   743,   579,   nil,   744,
  1019,   913,   567,   nil,   568,   nil,   nil,   569,   nil,   571,
   nil,   823,   nil,   nil,   nil,   577,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   459,   282,   nil,   nil,   686,   nil,   500,
   nil,   nil,   nil,   nil,   nil,    89,    92,    94,   nil,   nil,
   nil,   nil,   nil,   630,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   859,   782,   566,   nil,   570,   581,   583,
   924,   586,   587,   925,   590,   593,   nil,   299 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 145, :_reduce_1,
  2, 143, :_reduce_2,
  2, 144, :_reduce_3,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_6,
  2, 146, :_reduce_none,
  1, 149, :_reduce_none,
  0, 153, :_reduce_9,
  3, 149, :_reduce_10,
  0, 155, :_reduce_11,
  4, 152, :_reduce_12,
  0, 160, :_reduce_13,
  6, 154, :_reduce_14,
  3, 154, :_reduce_15,
  2, 156, :_reduce_16,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_19,
  2, 161, :_reduce_20,
  1, 162, :_reduce_none,
  1, 162, :_reduce_22,
  0, 173, :_reduce_23,
  4, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  2, 151, :_reduce_28,
  3, 151, :_reduce_29,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  3, 151, :_reduce_32,
  3, 151, :_reduce_33,
  4, 151, :_reduce_34,
  1, 151, :_reduce_none,
  3, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  1, 151, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  6, 166, :_reduce_43,
  5, 166, :_reduce_44,
  5, 166, :_reduce_45,
  5, 166, :_reduce_46,
  5, 166, :_reduce_47,
  3, 166, :_reduce_48,
  1, 174, :_reduce_49,
  1, 174, :_reduce_none,
  1, 172, :_reduce_none,
  3, 172, :_reduce_52,
  3, 172, :_reduce_53,
  3, 172, :_reduce_54,
  2, 172, :_reduce_55,
  1, 172, :_reduce_none,
  1, 165, :_reduce_57,
  0, 185, :_reduce_58,
  0, 186, :_reduce_59,
  4, 183, :_reduce_60,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 188, :_reduce_none,
  4, 188, :_reduce_64,
  0, 196, :_reduce_65,
  4, 193, :_reduce_66,
  1, 195, :_reduce_67,
  2, 187, :_reduce_68,
  3, 187, :_reduce_69,
  4, 187, :_reduce_70,
  5, 187, :_reduce_71,
  4, 187, :_reduce_72,
  5, 187, :_reduce_73,
  2, 187, :_reduce_74,
  2, 187, :_reduce_75,
  2, 187, :_reduce_76,
  2, 187, :_reduce_77,
  2, 187, :_reduce_78,
  1, 167, :_reduce_none,
  3, 167, :_reduce_80,
  1, 201, :_reduce_none,
  3, 201, :_reduce_82,
  1, 200, :_reduce_83,
  2, 200, :_reduce_84,
  3, 200, :_reduce_85,
  5, 200, :_reduce_86,
  2, 200, :_reduce_87,
  4, 200, :_reduce_88,
  2, 200, :_reduce_89,
  4, 200, :_reduce_90,
  1, 200, :_reduce_91,
  3, 200, :_reduce_92,
  1, 204, :_reduce_none,
  3, 204, :_reduce_94,
  2, 203, :_reduce_95,
  3, 203, :_reduce_96,
  1, 206, :_reduce_97,
  3, 206, :_reduce_98,
  1, 205, :_reduce_99,
  1, 205, :_reduce_100,
  4, 205, :_reduce_101,
  3, 205, :_reduce_102,
  3, 205, :_reduce_103,
  3, 205, :_reduce_104,
  3, 205, :_reduce_105,
  2, 205, :_reduce_106,
  1, 205, :_reduce_107,
  1, 169, :_reduce_108,
  1, 169, :_reduce_109,
  4, 169, :_reduce_110,
  3, 169, :_reduce_111,
  3, 169, :_reduce_112,
  3, 169, :_reduce_113,
  3, 169, :_reduce_114,
  2, 169, :_reduce_115,
  1, 169, :_reduce_116,
  1, 209, :_reduce_117,
  1, 209, :_reduce_none,
  2, 210, :_reduce_119,
  1, 210, :_reduce_120,
  3, 210, :_reduce_121,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_125,
  1, 211, :_reduce_126,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 163, :_reduce_129,
  1, 163, :_reduce_none,
  1, 164, :_reduce_131,
  0, 217, :_reduce_132,
  4, 164, :_reduce_133,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  3, 182, :_reduce_206,
  3, 182, :_reduce_207,
  6, 182, :_reduce_208,
  5, 182, :_reduce_209,
  5, 182, :_reduce_210,
  5, 182, :_reduce_211,
  5, 182, :_reduce_212,
  0, 222, :_reduce_213,
  5, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  3, 182, :_reduce_223,
  4, 182, :_reduce_224,
  4, 182, :_reduce_225,
  2, 182, :_reduce_226,
  2, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_229,
  3, 182, :_reduce_230,
  3, 182, :_reduce_231,
  1, 182, :_reduce_none,
  3, 182, :_reduce_233,
  3, 182, :_reduce_234,
  3, 182, :_reduce_235,
  3, 182, :_reduce_236,
  3, 182, :_reduce_237,
  2, 182, :_reduce_238,
  2, 182, :_reduce_239,
  3, 182, :_reduce_240,
  3, 182, :_reduce_241,
  3, 182, :_reduce_242,
  3, 182, :_reduce_243,
  3, 182, :_reduce_244,
  6, 182, :_reduce_245,
  1, 182, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 219, :_reduce_251,
  3, 219, :_reduce_252,
  1, 171, :_reduce_253,
  1, 223, :_reduce_none,
  2, 223, :_reduce_255,
  4, 223, :_reduce_256,
  2, 223, :_reduce_257,
  1, 218, :_reduce_none,
  3, 218, :_reduce_259,
  3, 227, :_reduce_260,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  2, 177, :_reduce_265,
  4, 177, :_reduce_266,
  2, 177, :_reduce_267,
  1, 199, :_reduce_268,
  2, 199, :_reduce_269,
  2, 199, :_reduce_270,
  4, 199, :_reduce_271,
  1, 199, :_reduce_272,
  0, 231, :_reduce_273,
  2, 192, :_reduce_274,
  2, 230, :_reduce_275,
  2, 229, :_reduce_276,
  1, 229, :_reduce_none,
  1, 224, :_reduce_278,
  2, 224, :_reduce_279,
  3, 224, :_reduce_280,
  4, 224, :_reduce_281,
  3, 170, :_reduce_282,
  4, 170, :_reduce_283,
  2, 170, :_reduce_284,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_295,
  0, 266, :_reduce_296,
  4, 220, :_reduce_297,
  0, 267, :_reduce_298,
  3, 220, :_reduce_299,
  0, 268, :_reduce_300,
  4, 220, :_reduce_301,
  3, 220, :_reduce_302,
  3, 220, :_reduce_303,
  2, 220, :_reduce_304,
  0, 269, :_reduce_305,
  4, 220, :_reduce_306,
  0, 270, :_reduce_307,
  4, 220, :_reduce_308,
  1, 220, :_reduce_309,
  4, 220, :_reduce_310,
  3, 220, :_reduce_311,
  1, 220, :_reduce_312,
  5, 220, :_reduce_313,
  4, 220, :_reduce_314,
  3, 220, :_reduce_315,
  2, 220, :_reduce_316,
  1, 220, :_reduce_none,
  2, 220, :_reduce_318,
  2, 220, :_reduce_319,
  6, 220, :_reduce_320,
  6, 220, :_reduce_321,
  4, 220, :_reduce_322,
  4, 220, :_reduce_323,
  5, 220, :_reduce_324,
  4, 220, :_reduce_325,
  6, 220, :_reduce_326,
  0, 271, :_reduce_327,
  0, 272, :_reduce_328,
  7, 220, :_reduce_329,
  0, 273, :_reduce_330,
  0, 274, :_reduce_331,
  0, 275, :_reduce_332,
  9, 220, :_reduce_333,
  0, 276, :_reduce_334,
  0, 277, :_reduce_335,
  6, 220, :_reduce_336,
  0, 278, :_reduce_337,
  0, 279, :_reduce_338,
  7, 220, :_reduce_339,
  0, 280, :_reduce_340,
  0, 281, :_reduce_341,
  9, 220, :_reduce_342,
  1, 220, :_reduce_343,
  1, 220, :_reduce_344,
  1, 220, :_reduce_345,
  1, 220, :_reduce_346,
  1, 176, :_reduce_347,
  1, 241, :_reduce_none,
  1, 247, :_reduce_none,
  1, 250, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 254, :_reduce_none,
  1, 256, :_reduce_none,
  1, 258, :_reduce_none,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 282, :_reduce_none,
  1, 283, :_reduce_none,
  1, 284, :_reduce_none,
  1, 285, :_reduce_none,
  1, 286, :_reduce_none,
  1, 158, :_reduce_none,
  1, 287, :_reduce_none,
  1, 242, :_reduce_none,
  1, 198, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  2, 248, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 249, :_reduce_none,
  5, 249, :_reduce_373,
  1, 251, :_reduce_none,
  2, 251, :_reduce_375,
  1, 257, :_reduce_none,
  1, 257, :_reduce_377,
  1, 288, :_reduce_none,
  3, 288, :_reduce_379,
  1, 291, :_reduce_380,
  3, 291, :_reduce_381,
  1, 290, :_reduce_382,
  4, 290, :_reduce_383,
  6, 290, :_reduce_384,
  3, 290, :_reduce_385,
  5, 290, :_reduce_386,
  2, 290, :_reduce_387,
  4, 290, :_reduce_388,
  1, 290, :_reduce_389,
  3, 290, :_reduce_390,
  4, 292, :_reduce_391,
  2, 292, :_reduce_392,
  2, 292, :_reduce_393,
  1, 292, :_reduce_394,
  2, 297, :_reduce_395,
  1, 297, :_reduce_none,
  6, 298, :_reduce_397,
  8, 298, :_reduce_398,
  4, 298, :_reduce_399,
  6, 298, :_reduce_400,
  4, 298, :_reduce_401,
  2, 298, :_reduce_402,
  6, 298, :_reduce_403,
  2, 298, :_reduce_404,
  4, 298, :_reduce_405,
  6, 298, :_reduce_406,
  2, 298, :_reduce_407,
  4, 298, :_reduce_408,
  2, 298, :_reduce_409,
  4, 298, :_reduce_410,
  1, 298, :_reduce_411,
  1, 302, :_reduce_412,
  1, 302, :_reduce_413,
  3, 303, :_reduce_414,
  1, 303, :_reduce_415,
  4, 303, :_reduce_416,
  1, 304, :_reduce_none,
  4, 304, :_reduce_418,
  1, 305, :_reduce_419,
  3, 305, :_reduce_420,
  1, 306, :_reduce_421,
  1, 306, :_reduce_none,
  0, 310, :_reduce_423,
  0, 311, :_reduce_424,
  4, 246, :_reduce_425,
  4, 308, :_reduce_426,
  1, 308, :_reduce_427,
  3, 309, :_reduce_428,
  3, 309, :_reduce_429,
  3, 313, :_reduce_430,
  2, 189, :_reduce_431,
  4, 189, :_reduce_432,
  5, 189, :_reduce_433,
  5, 189, :_reduce_434,
  0, 316, :_reduce_435,
  3, 245, :_reduce_436,
  4, 245, :_reduce_437,
  4, 245, :_reduce_438,
  3, 245, :_reduce_439,
  3, 245, :_reduce_440,
  3, 245, :_reduce_441,
  2, 245, :_reduce_442,
  1, 245, :_reduce_443,
  4, 245, :_reduce_444,
  0, 317, :_reduce_445,
  4, 244, :_reduce_446,
  0, 318, :_reduce_447,
  4, 244, :_reduce_448,
  0, 319, :_reduce_449,
  0, 320, :_reduce_450,
  4, 194, :_reduce_451,
  0, 321, :_reduce_452,
  0, 322, :_reduce_453,
  4, 314, :_reduce_454,
  0, 324, :_reduce_455,
  6, 255, :_reduce_456,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  6, 157, :_reduce_459,
  0, 157, :_reduce_460,
  1, 325, :_reduce_461,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 326, :_reduce_464,
  1, 326, :_reduce_none,
  2, 159, :_reduce_466,
  1, 159, :_reduce_none,
  1, 232, :_reduce_468,
  1, 232, :_reduce_469,
  1, 232, :_reduce_none,
  1, 233, :_reduce_471,
  1, 328, :_reduce_472,
  1, 328, :_reduce_none,
  2, 328, :_reduce_474,
  3, 329, :_reduce_475,
  1, 329, :_reduce_476,
  3, 234, :_reduce_477,
  3, 235, :_reduce_478,
  3, 236, :_reduce_479,
  3, 236, :_reduce_480,
  1, 333, :_reduce_481,
  3, 333, :_reduce_482,
  1, 334, :_reduce_none,
  2, 334, :_reduce_484,
  3, 238, :_reduce_485,
  0, 337, :_reduce_486,
  4, 238, :_reduce_487,
  1, 336, :_reduce_488,
  3, 336, :_reduce_489,
  3, 237, :_reduce_490,
  3, 237, :_reduce_491,
  3, 239, :_reduce_492,
  3, 239, :_reduce_493,
  1, 338, :_reduce_494,
  3, 338, :_reduce_495,
  1, 339, :_reduce_496,
  3, 339, :_reduce_497,
  1, 330, :_reduce_498,
  2, 330, :_reduce_499,
  1, 331, :_reduce_500,
  2, 331, :_reduce_501,
  1, 332, :_reduce_502,
  2, 332, :_reduce_503,
  1, 335, :_reduce_504,
  0, 341, :_reduce_505,
  3, 335, :_reduce_506,
  0, 342, :_reduce_507,
  4, 335, :_reduce_508,
  1, 340, :_reduce_509,
  1, 340, :_reduce_510,
  1, 340, :_reduce_511,
  1, 340, :_reduce_none,
  2, 215, :_reduce_513,
  1, 215, :_reduce_514,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  3, 216, :_reduce_519,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  2, 327, :_reduce_522,
  2, 327, :_reduce_523,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_529,
  1, 208, :_reduce_530,
  1, 208, :_reduce_531,
  1, 208, :_reduce_532,
  1, 208, :_reduce_533,
  1, 208, :_reduce_534,
  1, 208, :_reduce_535,
  1, 240, :_reduce_536,
  1, 240, :_reduce_537,
  1, 175, :_reduce_538,
  1, 175, :_reduce_539,
  1, 180, :_reduce_540,
  1, 180, :_reduce_541,
  0, 344, :_reduce_542,
  4, 259, :_reduce_543,
  1, 259, :_reduce_544,
  3, 263, :_reduce_545,
  0, 346, :_reduce_546,
  3, 263, :_reduce_547,
  4, 345, :_reduce_548,
  2, 345, :_reduce_549,
  2, 345, :_reduce_550,
  1, 345, :_reduce_none,
  2, 348, :_reduce_552,
  0, 348, :_reduce_553,
  6, 312, :_reduce_554,
  8, 312, :_reduce_555,
  4, 312, :_reduce_556,
  6, 312, :_reduce_557,
  4, 312, :_reduce_558,
  6, 312, :_reduce_559,
  2, 312, :_reduce_560,
  4, 312, :_reduce_561,
  6, 312, :_reduce_562,
  2, 312, :_reduce_563,
  4, 312, :_reduce_564,
  2, 312, :_reduce_565,
  4, 312, :_reduce_566,
  1, 312, :_reduce_567,
  0, 312, :_reduce_568,
  1, 307, :_reduce_569,
  1, 307, :_reduce_570,
  1, 307, :_reduce_571,
  1, 307, :_reduce_572,
  1, 289, :_reduce_none,
  1, 289, :_reduce_574,
  1, 350, :_reduce_none,
  3, 350, :_reduce_576,
  1, 299, :_reduce_577,
  3, 299, :_reduce_578,
  2, 351, :_reduce_579,
  2, 352, :_reduce_580,
  1, 293, :_reduce_none,
  3, 293, :_reduce_582,
  1, 347, :_reduce_none,
  3, 347, :_reduce_584,
  1, 353, :_reduce_none,
  1, 353, :_reduce_none,
  2, 294, :_reduce_587,
  1, 294, :_reduce_588,
  3, 354, :_reduce_589,
  3, 355, :_reduce_590,
  1, 300, :_reduce_591,
  3, 300, :_reduce_592,
  1, 349, :_reduce_593,
  3, 349, :_reduce_594,
  1, 356, :_reduce_none,
  1, 356, :_reduce_none,
  2, 301, :_reduce_597,
  1, 301, :_reduce_598,
  1, 357, :_reduce_none,
  1, 357, :_reduce_none,
  2, 296, :_reduce_601,
  2, 295, :_reduce_602,
  0, 295, :_reduce_603,
  1, 264, :_reduce_none,
  0, 358, :_reduce_605,
  4, 264, :_reduce_606,
  1, 243, :_reduce_607,
  2, 243, :_reduce_none,
  1, 226, :_reduce_none,
  3, 226, :_reduce_610,
  3, 359, :_reduce_611,
  2, 359, :_reduce_612,
  2, 359, :_reduce_613,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 315, :_reduce_none,
  1, 315, :_reduce_none,
  1, 315, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 179, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  0, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 202, :_reduce_none,
  2, 178, :_reduce_none,
  0, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 260, :_reduce_638,
  1, 260, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_641,
  0, 148, :_reduce_642 ]

racc_reduce_n = 643

racc_shift_n = 1088

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tLOWEST => 140,
  :tEQL => 141 }

racc_nt_base = 142

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tLOWEST",
  "tEQL",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_43(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_44(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_48(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_49(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_55(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_67(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_68(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_69(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_70(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_75(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_77(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]

    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_83(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_84(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_85(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_87(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_88(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_89(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_90(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_91(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_92(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]

    result
end

def _reduce_95(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_97(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_103(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_109(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_110(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_111(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_112(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_114(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_121(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_211(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_212(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_213(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_214(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_215(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_224(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")

    result
end

def _reduce_225(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")

                      ## TODO: why is this 2.0 only?
                      debug20 12, val, result

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 232 omitted

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_235(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_236(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_237(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_238(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_239(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_240(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_241(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_242(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_243(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_244(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_245(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_252(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_253(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_256(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_257(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 258 omitted

def _reduce_259(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_260(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = args val

    result
end

def _reduce_266(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_267(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_268(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_269(val, _values, result)
                      result = call_args val

    result
end

def _reduce_270(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_271(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_272(val, _values, result)
                      result = call_args val

    result
end

def _reduce_273(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_274(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_275(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_276(val, _values, result)
                      result = val[1]

    result
end

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_279(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_280(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_281(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_283(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_284(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_296(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_298(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_299(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_301(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_303(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_304(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_305(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_306(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_308(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_310(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_311(val, _values, result)
                      result = new_yield

    result
end

def _reduce_312(val, _values, result)
                      result = new_yield

    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_314(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_315(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_316(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 317 omitted

def _reduce_318(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_319(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_325(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_326(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_329(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_330(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_331(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_334(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_335(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_336(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_338(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_339(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_340(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_341(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_342(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_343(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_346(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_347(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[1]

    result
end

def _reduce_380(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_381(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_382(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_383(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_385(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_386(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_387(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_388(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_389(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_390(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_391(val, _values, result)
                      result = call_args val

    result
end

def _reduce_392(val, _values, result)
                      result = call_args val

    result
end

def _reduce_393(val, _values, result)
                      result = call_args val

    result
end

def _reduce_394(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
 result = 0
    result
end

def _reduce_413(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_416(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      result = args val

    result
end

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_424(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_425(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_426(val, _values, result)
                      result = args val

    result
end

def _reduce_427(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_428(val, _values, result)
                      result = val[1]

    result
end

def _reduce_429(val, _values, result)
                      result = val[1]

    result
end

def _reduce_430(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_431(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_432(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_433(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_436(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_442(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_443(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_444(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_447(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_448(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_449(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_450(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_451(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_452(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_453(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_454(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_455(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_456(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 457 omitted

# reduce 458 omitted

def _reduce_459(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_460(val, _values, result)
                      result = nil

    result
end

def _reduce_461(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = val[1]

    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_469(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_472(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_475(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_476(val, _values, result)
                      result = new_string val

    result
end

def _reduce_477(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_478(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_479(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_480(val, _values, result)
                      result = val[1]

    result
end

def _reduce_481(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_482(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_485(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_486(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_487(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_488(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_489(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_490(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_491(val, _values, result)
                      result = val[1]

    result
end

def _reduce_492(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_493(val, _values, result)
                      result = val[1]

    result
end

def _reduce_494(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_495(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_496(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_497(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_498(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_499(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_500(val, _values, result)
                      result = nil

    result
end

def _reduce_501(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_502(val, _values, result)
                      result = nil

    result
end

def _reduce_503(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_504(val, _values, result)
                      result = new_string val

    result
end

def _reduce_505(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_506(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_507(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_508(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_509(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_510(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_511(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_514(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 520 omitted

# reduce 521 omitted

def _reduce_522(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

def _reduce_523(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

def _reduce_529(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_530(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_531(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_537(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_539(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_540(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_541(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_542(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_543(val, _values, result)
                      result = val[2]

    result
end

def _reduce_544(val, _values, result)
                      result = nil

    result
end

def _reduce_545(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_546(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_547(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_548(val, _values, result)
                      result = args val

    result
end

def _reduce_549(val, _values, result)
                      result = args val

    result
end

def _reduce_550(val, _values, result)
                      result = args val

    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      result = val[1]

    result
end

def _reduce_553(val, _values, result)
                      result = nil

    result
end

def _reduce_554(val, _values, result)
                      result = args val

    result
end

def _reduce_555(val, _values, result)
                      result = args val

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 573 omitted

def _reduce_574(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      result = val[1]

    result
end

def _reduce_577(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_578(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

def _reduce_579(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_580(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

# reduce 581 omitted

def _reduce_582(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      result = args val

    result
end

# reduce 585 omitted

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_588(val, _values, result)
                      result = :"**"

    result
end

def _reduce_589(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_590(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_591(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_592(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_593(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_594(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 595 omitted

# reduce 596 omitted

def _reduce_597(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_598(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 599 omitted

# reduce 600 omitted

def _reduce_601(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_602(val, _values, result)
                      result = val[1]

    result
end

def _reduce_603(val, _values, result)
                      result = nil

    result
end

# reduce 604 omitted

def _reduce_605(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_606(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_607(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 608 omitted

# reduce 609 omitted

def _reduce_610(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_611(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_612(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_613(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

def _reduce_638(val, _values, result)
 yyerrok
    result
end

# reduce 639 omitted

# reduce 640 omitted

def _reduce_641(val, _values, result)
 yyerrok
    result
end

def _reduce_642(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
