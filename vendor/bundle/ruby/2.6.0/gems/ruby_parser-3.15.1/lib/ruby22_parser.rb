#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby22Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-303,807,-110,647,601,601,-541,-303,-303,-303,-115,-93,735,-303,-303',
'-101,-303,255,650,95,225,226,235,-103,255,-109,-79,96,601,-108,773,-114',
'-113,523,774,601,-303,-303,917,-303,-303,-303,-303,-303,-111,601,-112',
'-109,-111,252,761,-112,829,254,253,232,252,-110,-109,731,254,253,858',
'-108,284,-107,646,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,649,-101,-303,-303,-303,828,673,225,226,-103,-303',
'225,226,-303,-109,284,284,-625,-303,884,-303,608,-303,-303,-303,-303',
'-303,-303,-303,235,-303,-115,-303,-624,-106,-110,-101,128,128,-101,-110',
'-624,127,127,-103,-303,-303,-103,-104,-100,-303,-628,284,-99,-101,-105',
'-104,-303,-628,-628,-628,128,-103,-113,-628,-628,127,-628,128,128,286',
'964,-102,127,127,-103,-628,-111,128,-112,-109,-101,-111,127,-112,-109',
'857,-628,-628,-98,-628,-628,-628,-628,-628,128,821,235,829,730,127,235',
'286,286,-540,272,273,106,107,631,128,234,225,226,-628,127,-621,-435',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628',
'828,668,-628,-628,-628,477,674,286,271,270,-628,847,235,-628,-444,235',
'667,848,-628,668,-628,-112,-628,-628,-628,-628,-628,-628,-628,-107,-628',
'-628,-628,106,107,-628,631,-526,633,632,629,631,-628,-103,-526,-628',
'-628,-624,-102,-621,-628,-628,-628,-526,108,109,723,-628,-112,-628,-628',
'-628,-115,-111,-628,-628,-628,-444,-628,-628,586,-621,631,-110,-444',
'626,-112,-628,-628,-628,-628,589,627,-444,-212,-628,720,820,-628,-628',
'716,-628,-628,-628,-628,-628,715,633,632,629,553,-444,633,632,581,631',
'578,577,576,-533,579,791,108,109,597,596,-533,235,701,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,633,632,-628',
'-628,-628,-628,822,-628,-114,910,-628,-110,-628,-628,-628,590,-628,-624',
'-628,704,-628,-628,-628,-628,-628,-628,-628,-628,-628,586,-628,-628',
'-628,633,632,634,-93,-532,235,-628,589,667,911,631,-532,-628,-628,-628',
'-628,1012,-628,631,-628,-303,631,727,-278,-628,729,128,-303,-303,-303',
'-111,127,-303,-303,-303,-294,-303,235,-539,235,597,596,-294,235,-212',
'-539,-303,-303,-303,235,-101,-294,1043,-622,-539,727,-303,-303,729,-303',
'-303,-303,-303,-303,581,-110,578,577,576,231,579,633,632,639,590,631',
'776,685,636,633,632,651,633,632,794,778,-105,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-114,-531,-303,-303,-303',
'-529,823,-303,-531,255,-303,255,-529,-303,-303,255,-303,-622,-303,-540',
'-303,-529,-303,-303,-303,-303,-303,-303,-303,128,-303,255,-303,231,127',
'633,632,-304,807,-622,474,877,-541,232,-304,-303,-303,-303,-303,475',
'-303,-303,-303,-304,916,-534,678,-303,-303,-303,-303,-98,-534,-113,-303',
'-303,581,-303,578,577,576,586,579,880,884,581,-107,578,577,576,-100',
'579,589,727,-99,-106,729,-303,-303,-303,-303,-303,-303,-303,-303,-109',
'-303,423,289,-108,-115,-625,425,424,584,-303,581,-537,578,577,576,666',
'579,747,-537,597,596,665,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,225,226,-303,-303,-303,581,673,578,577,576',
'-303,579,747,-303,128,597,596,590,-303,127,-303,750,-303,-303,-303,-303',
'-303,-303,-303,235,-303,581,-303,578,577,576,586,579,727,128,658,726',
'-535,747,127,-303,-303,589,-303,-535,-303,-628,750,880,884,-538,657',
'-303,-628,-628,-628,231,-538,-113,-628,-628,231,-628,1034,584,567,-538',
'255,1034,225,226,-628,778,594,593,597,596,778,-276,933,655,715,-628',
'-628,231,-628,-628,-628,-628,-628,648,280,645,-276,581,231,578,577,576',
'252,579,-536,230,254,253,250,251,938,-536,590,642,228,638,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-304,-529',
'-628,-628,-628,747,674,-304,-529,943,-628,235,-526,-628,957,738,-304',
'255,-628,-526,-628,946,-628,-628,-628,-628,-628,-628,-628,948,-628,-628',
'-628,265,266,581,950,578,577,576,586,579,952,952,235,-628,-628,958,-628',
'252,-628,589,-529,254,253,250,251,-628,723,-529,-529,-529,723,-111,-529',
'-529,-529,723,-529,235,255,723,235,584,-347,976,-529,-279,-529,-529',
'-529,-347,594,593,597,596,265,266,-529,-529,-347,-529,-529,-529,-529',
'-529,614,1005,613,578,577,576,252,579,258,414,254,253,250,251,608,977',
'256,738,257,980,983,985,590,-529,-529,-529,-529,-529,-529,-529,-529',
'-529,-529,-529,-529,-529,-529,987,-304,-529,-529,-529,-538,-529,-529',
'-304,235,-529,989,-538,-529,-529,235,-529,-304,-529,255,-529,-538,-529',
'-529,-529,-529,-529,-529,-529,1001,-529,1002,-529,548,544,581,289,578',
'577,576,586,579,-539,235,292,-529,-529,-529,-529,-539,-529,589,-529',
'-526,541,1014,534,-529,-539,533,-526,-526,-526,-529,235,-526,-526,-526',
'723,-526,255,723,581,584,578,577,576,-526,579,-526,-526,-526,594,593',
'597,596,265,266,785,-526,-526,-78,-526,-526,-526,-526,-526,581,523,578',
'577,576,252,579,258,1032,254,253,250,251,747,521,256,1005,257,578,577',
'576,590,579,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,518,747,-526,-526,-526,255,-526,-526,1035,847,-526,289,508',
'-526,-526,234,-526,255,-526,479,-526,1041,-526,-526,-526,-526,-526,-526',
'-526,478,-526,1044,-526,265,266,952,952,252,952,1049,476,254,253,250',
'251,-526,-526,-526,-526,252,-526,258,-526,254,253,250,251,-526,131,132',
'133,134,135,-526,311,85,86,87,12,78,1014,426,231,79,80,421,404,738,83',
'540,81,82,84,33,34,76,77,1058,538,1060,1062,1064,88,31,30,116,115,117',
'118,905,906,22,1064,907,122,123,662,11,49,313,13,120,119,121,110,60',
'112,111,113,401,114,122,123,399,106,107,720,45,46,44,255,259,260,261',
'262,272,273,267,268,263,264,-294,248,249,231,396,265,266,-294,43,372',
'661,36,235,338,62,63,-294,337,64,659,38,252,1014,258,48,254,253,250',
'251,271,270,256,23,257,723,723,231,103,95,97,98,99,101,550,275,227,96',
'104,-625,269,-624,-251,475,235,66,224,223,93,100,102,222,952,108,109',
'311,85,86,87,12,78,1014,1087,231,79,80,1064,1064,1064,83,612,81,82,84',
'33,34,76,77,124,610,825,1064,235,88,31,30,116,115,117,118,275,508,22',
'834,836,521,523,662,11,49,313,13,120,119,121,110,60,112,111,113,508',
'114,122,123,808,106,107,3,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,-303,248,249,231,-277,265,266,-303,43,715,1040,36,-625,235,62',
'63,-303,796,64,1038,38,252,795,258,48,254,253,250,251,271,270,256,23',
'257,289,785,-303,103,95,97,98,99,101,-303,780,289,96,104,-625,269,715',
'723,-303,255,66,608,723,93,100,102,723,757,108,109,311,85,86,87,12,78',
'755,235,754,79,80,753,745,743,83,741,81,82,84,33,34,76,77,131,132,133',
'134,135,88,31,30,116,115,117,118,739,875,22,131,132,133,134,135,11,49',
'313,13,120,119,121,110,60,112,111,113,738,114,122,123,235,106,107,884',
'45,46,44,255,259,260,261,262,272,273,267,268,263,264,723,248,249,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102,,,108',
'109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,131,132',
'133,134,135,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261',
'262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64',
',38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99',
'101,,,,96,104,,269,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,',
',265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270',
'256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102',
',,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,',
',96,104,,269,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,103,95,97,98,99,101,,,,96,104,235,269,,,,,66,,,93,100,102',
',,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,',
',96,104,,269,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,581,22,578',
'577,576,,579,11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,255,-650,-650,-650,-650,272,273,,747,-650,-650,,',
',,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271',
'270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,581,,578,577,576,66',
'579,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,747,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,-650',
'-650,-650,-650,272,273,,,-650,-650,,,,,,265,266,,43,,,36,,,62,63,,,64',
',38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,255,-650,-650,-650,-650,272,273,,,-650,-650,,,,,,265,266,',
'43,,,315,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,-650,-650,-650,-650,272,273,,,-650',
'-650,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262',
'272,273,267,,263,264,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
'259,260,261,262,272,273,267,268,263,264,,-650,-650,,,265,266,,43,,,36',
',,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,',
'-650,-650,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262',
'272,273,,,263,264,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48',
'254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
'-650,-650,-650,-650,272,273,,,-650,-650,,,,,,265,266,,43,,,36,,,62,63',
',,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,255,-650,-650,-650,-650,272,273,,,-650,-650,,,,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,255,,,,,,,,,,,,,,,,265,266,',
'43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,315,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'315,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66',
',305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99',
'101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,319,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,334,,,,,,,,,,,,,,,,,,,,324,,,246,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,336,,,66,,,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,128,,,,,127,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,366,,,36,,,62',
'63,,,64,,38,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101',
',,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,414,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431,,',
',48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
'235,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97',
'98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48',
',,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
'304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104',
'235,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,',
',,,,,,,,,,,,,991,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,698,,,,48,',
',,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,324,,,246,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,536,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77',
',,,,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320',
',,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,998',
',,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,553,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',301,,,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,302,97,98,99,101',
',,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,334,,,,,,,,,,,,,,,,,,,,991,,,246,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96',
'104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328',
',,120,119,121,615,60,112,111,616,,114,122,123,,106,107,,,,334,,,,,,',
',,,,,,,,,,,,,617,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,328,,,120,119,121,615,60,112,111,616,,114,122,123,,106,107,,,',
'334,,,,,,,,,,,,,,,,,,,,617,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97',
'98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,698,,299',
',48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96',
'104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,414,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96',
'104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,',
',,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,',
',,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,301,,,,48,,,,,,,,245,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104',
',,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,698,,,,48,,,,,,,,245,,,,,103,302',
'97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431,,,,48,',
',,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101',
',,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,',
',,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334',
',,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,800,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,240,,,246,,,62,63,,,64,,698,,299,,48,,,,,,,,245,,,,,103,302',
'97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299',
',48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,',
',,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,-649,,108,109',
',,,-649,-649,-649,,,-649,-649,-649,581,-649,578,577,576,586,579,,,,-649',
'-649,,,,,589,,,,,-649,-649,,-649,-649,-649,-649,-649,,,,,,,,,,584,,',
',,,,,,,,597,596,,,,,,,,,,,,,-649,,-649,,,,,-649,,-649,-649,-649,289',
'-649,-649,-649,-649,,-649,,590,,,,,,,-649,-649,-649,,,,,-649,-649,,',
'-649,-649,,-649,-649,-649,-649,-649,,,-649,,,,,-649,,,,,,,-649,,,,,',
',,,-649,-649,-649,-649,-649,-649,-649,-649,-649,-649,-649,-649,-649',
'-649,,,-649,-649,-649,,,-649,,289,-649,,,-649,-649,,-649,,-649,,-649',
',-649,-649,-649,-649,-649,-649,-649,,-649,-649,-649,,,,,,,,,,,,,-649',
'-649,-312,-649,,-649,,,,-312,-312,-312,-649,,-312,-312,-312,581,-312',
'578,577,576,586,579,,,,,-312,-312,,,,589,,,,,-312,-312,,-312,-312,-312',
'-312,-312,,,,,,,,,,584,,,,,,,,,594,593,597,596,,-312,-312,-312,-312',
'-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,,,-312,-312,-312,',
',-312,,292,-312,,,-312,-312,,-312,590,-312,,-312,,-312,-312,-312,-312',
'-312,-312,-312,,-312,,-312,,,,,,,,,,,,,-312,-312,-295,-312,,-312,,,',
'-295,-295,-295,-312,,-295,-295,-295,581,-295,578,577,576,586,579,,,',
',-295,-295,-295,,,589,,,,,-295,-295,,-295,-295,-295,-295,-295,,,,,,',
',,,584,,,,,,,,,594,593,597,596,,-295,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,,,-295,-295,-295,,,-295,,,-295,,,-295',
'-295,,-295,590,-295,,-295,,-295,-295,-295,-295,-295,-295,-295,,-295',
',-295,581,,578,577,576,586,579,,,,,,-295,-295,-295,-295,589,-295,-630',
'-295,,,,,-295,-630,-630,-630,,,-630,-630,-630,,-630,,,,584,,,,,-630',
'-630,-630,-630,,,597,596,,,,-630,-630,,-630,-630,-630,-630,-630,,,,',
',,,,,,,,,,,,,,,,,590,,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630',
'-630,-630,-630,-630,,,-630,-630,-630,,,-630,,,-630,,,-630,-630,,-630',
',-630,,-630,,-630,-630,-630,-630,-630,-630,-630,,-630,-630,-630,581',
',578,577,576,586,579,,,,,,-630,-630,-630,-630,589,-630,-629,-630,,,',
',-630,-629,-629,-629,,,-629,-629,-629,,-629,,,,584,,,,,-629,-629,-629',
'-629,594,593,597,596,,,,-629,-629,,-629,-629,-629,-629,-629,,,,,,,,',
',,,,,,,,,,,,,590,,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629',
'-629,-629,-629,-629,,,-629,-629,-629,,,-629,,,-629,,,-629,-629,,-629',
',-629,,-629,,-629,-629,-629,-629,-629,-629,-629,,-629,-629,-629,581',
',578,577,576,586,579,,,,,,-629,-629,-629,-629,589,-629,-443,-629,,,',
',-629,-443,-443,-443,,,-443,-443,-443,,-443,,,,584,,,,,-443,-443,-443',
',,,597,596,,,,-443,-443,,-443,-443,-443,-443,-443,,,,,,,,,,,,,,,,,,',
',,,590,,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443',
'-443,-443,,,-443,-443,-443,,,-443,,289,-443,,,-443,-443,,-443,,-443',
',-443,,-443,-443,-443,-443,-443,-443,-443,,-443,-443,-443,,,,,,,,,,',
',,-443,-443,,-443,,-443,,,,,,,-443,189,200,190,213,186,206,196,195,216',
'217,211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215',
'210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139',
'141,138,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190',
'213,186,206,196,195,216,217,211,194,193,188,214,218,219,198,187,201',
'205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184',
'191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,',
',178,189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218',
'219,198,187,201,205,207,199,192,,,,208,215,210,381,380,382,379,185,204',
'203,,,,,,184,191,182,183,376,377,378,374,141,112,111,375,,114,,,,,,',
'173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,',
',,,388,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,',
',177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195',
'216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208',
'215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181',
'139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190',
'213,186,206,196,195,216,217,211,194,193,188,214,218,219,198,187,201',
'205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184',
'191,182,183,179,180,181,139,141,411,410,140,,412,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,',
',,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211,194,193',
'188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212',
'197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,',
',,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,',
',154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,506,458,,,507,,,170',
',,,,178,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,,,,,,,,,,805,465,,,804,,,,,,170,,,173,174,178,169,151,152',
'153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,679,458',
',,680,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,',
',,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,,,,,,,,,,681,465,,,682,,,,,,170,,,173,174,178',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
',,,,,802,458,,,803,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,768,458,,,769,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,770,465,,,771,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,891,465,,,892',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,1068,465,,,1067,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',1071,458,,,1072,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,581,177,578,577,576,586,579,,,,,506,458',
',,507,589,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
'584,,,175,176,161,162,,,,,597,596,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,,,,,590,681,465,,,682,,,,,,170,,,173',
'174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,',
',,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,',
'177,,,,,,,,,,679,458,,,680,,,,,,170,,,173,174,178,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1073,465,,,1074,',
',,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176',
'161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,,,,,,711,465,,,712,,,,,,170,,,173,174,178,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,708',
'458,,,709,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,454,458,,,455,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,581',
',578,577,576,586,579,,,461,465,,,460,,,589,,,170,,,173,174,178,169,151',
'152,153,160,157,159,,,154,155,,,584,175,176,161,162,,,,,,289,597,596',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,581,177,578',
'577,576,586,579,,,,,,590,,,,589,,,,,170,,,,,178,581,,578,577,576,586',
'579,,,,,584,,,,,589,,,,594,593,597,596,581,,578,577,576,586,579,581',
',578,577,576,586,579,584,581,589,578,577,576,586,579,,589,235,597,596',
',,,,589,590,,,,,,584,,,,,,,584,,,,597,596,,,584,594,593,597,596,,590',
',,,,597,596,581,,578,577,576,586,579,581,,578,577,576,586,579,,,589',
'590,,,,,,589,590,581,,578,577,576,586,579,590,,,,,,584,,,589,,,,584',
',,,597,596,,,,594,593,597,596,,,,,581,584,578,577,576,586,579,,,,594',
'593,597,596,,,589,,,,,590,,,,,,,590,,,,,,,,,,584,,,,,,,,590,594,593',
'597,596,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,590' ]
        racc_action_table = arr = ::Array.new(26190, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'460,913,1071,402,355,356,239,460,460,460,367,703,569,460,460,708,460',
'483,405,92,788,788,767,709,482,889,703,92,961,364,617,613,771,565,617',
'888,460,460,824,460,460,460,460,460,1073,937,1072,1085,770,483,603,769',
'835,483,483,438,482,768,913,562,482,482,733,239,329,363,402,460,460',
'460,460,460,460,460,460,460,460,460,460,460,460,405,708,460,460,460',
'835,460,718,718,709,460,470,470,460,824,688,65,771,460,1017,460,1017',
'460,460,460,460,460,460,460,788,460,438,460,770,367,1071,708,355,356',
'708,1071,1073,355,356,709,460,460,709,460,889,460,461,29,364,708,613',
'771,460,461,461,461,961,709,460,461,461,961,461,888,603,329,888,770',
'888,603,769,461,1073,937,1072,1085,768,1073,937,1072,1085,733,461,461',
'363,461,461,461,461,461,308,680,718,686,561,308,470,688,65,238,47,47',
'334,334,390,5,22,782,782,711,5,615,29,461,461,461,461,461,461,461,461',
'461,461,461,461,461,461,686,455,461,461,461,241,461,29,47,47,461,719',
'556,461,841,22,802,719,461,803,461,680,461,461,461,461,461,461,461,238',
'461,461,461,44,44,711,525,615,390,390,390,640,711,455,615,461,461,711',
'461,615,461,711,681,615,334,334,555,461,455,681,681,681,241,461,681',
'681,681,841,681,711,977,615,793,802,841,384,803,681,681,681,681,977',
'384,841,476,891,554,679,681,681,547,681,681,681,681,681,545,525,525',
'525,542,841,640,640,957,392,957,957,957,382,957,640,44,44,977,977,382',
'537,525,681,681,681,681,681,681,681,681,681,681,681,681,681,681,793',
'793,681,681,681,891,681,681,476,793,681,679,891,681,681,977,681,891',
'681,535,681,891,681,681,681,681,681,681,681,735,681,681,681,392,392',
'392,532,381,531,891,735,454,797,397,381,681,681,681,681,957,681,407',
'681,682,643,560,799,681,560,901,682,682,682,681,901,682,682,682,999',
'682,515,996,801,735,735,999,514,338,996,682,682,682,1003,454,999,1003',
'616,996,855,682,682,855,682,682,682,682,682,750,454,750,750,750,619',
'750,397,397,397,735,394,619,503,394,407,407,407,643,643,643,619,338',
'682,682,682,682,682,682,682,682,682,682,682,682,682,682,338,380,682',
'682,682,616,682,682,380,487,682,486,616,682,682,485,682,616,682,41,682',
'616,682,682,682,682,682,682,682,969,682,484,682,237,969,394,394,541',
'663,616,237,750,42,20,541,682,682,682,682,237,682,804,682,541,809,379',
'472,682,804,804,804,41,379,682,804,804,985,804,985,985,985,985,985,1051',
'1051,1049,41,1049,1049,1049,663,1049,985,564,42,20,564,804,804,712,804',
'804,804,804,804,663,712,138,462,42,20,712,138,138,985,712,584,378,584',
'584,584,453,584,1049,378,985,985,452,804,804,804,804,804,804,804,804',
'804,804,804,804,804,804,354,354,804,804,804,747,804,747,747,747,804',
'747,584,804,360,738,738,985,804,360,804,584,804,804,804,804,804,804',
'804,449,804,353,804,353,353,353,353,353,559,897,435,559,377,747,897',
'804,804,353,804,377,804,805,747,756,756,995,432,804,805,805,805,990',
'995,804,805,805,1033,805,990,353,353,995,497,1033,17,17,805,990,353',
'353,353,353,1033,430,833,427,840,805,805,27,805,805,805,805,805,404',
'27,401,851,875,19,875,875,875,497,875,376,19,497,497,497,497,852,376',
'353,399,19,396,805,805,805,805,805,805,805,805,805,805,805,805,805,805',
'774,375,805,805,805,875,805,774,375,859,805,860,374,805,875,861,774',
'490,805,374,805,865,805,805,805,805,805,805,805,866,805,805,805,490',
'490,567,868,567,567,567,567,567,869,871,874,805,805,876,805,490,805',
'567,113,490,490,490,490,805,879,113,113,113,885,805,113,113,113,890',
'113,894,551,898,900,567,50,909,113,912,113,113,113,50,567,567,567,567',
'551,551,113,113,50,113,113,113,113,113,368,1043,366,1043,1043,1043,551',
'1043,551,362,551,551,551,551,361,919,551,920,551,922,923,924,567,113',
'113,113,113,113,113,113,113,113,113,113,113,113,113,926,1041,113,113',
'113,321,113,113,1041,927,113,928,321,113,113,348,113,1041,113,342,113',
'321,113,113,113,113,113,113,113,941,113,942,113,339,335,980,333,980',
'980,980,980,980,322,328,327,113,113,113,113,322,113,980,113,110,324',
'959,318,113,322,317,110,110,110,113,316,110,110,110,968,110,502,972',
'958,980,958,958,958,110,958,110,110,110,980,980,980,980,502,502,975',
'110,110,314,110,110,110,110,110,877,300,877,877,877,502,877,502,988',
'502,502,502,502,958,297,502,943,502,943,943,943,980,943,110,110,110',
'110,110,110,110,110,110,110,110,110,110,110,296,877,110,110,110,498',
'110,110,991,993,110,285,281,110,110,247,110,488,110,243,110,998,110',
'110,110,110,110,110,110,242,110,1007,110,488,488,1008,1009,498,1010',
'1011,240,498,498,498,498,110,110,110,110,488,110,488,110,488,488,488',
'488,110,530,530,530,530,530,110,1020,1020,1020,1020,1020,1020,1013,220',
'323,1020,1020,136,102,1023,1020,323,1020,1020,1020,1020,1020,1020,1020',
'1026,323,1027,1028,1029,1020,1020,1020,1020,1020,1020,1020,789,789,1020',
'1031,789,789,789,442,1020,1020,1020,1020,1020,1020,1020,1020,1020,1020',
'1020,1020,101,1020,1020,1020,100,1020,1020,1037,1020,1020,1020,442,442',
'442,442,442,442,442,442,442,442,442,325,442,442,437,99,442,442,325,1020',
'73,437,1020,49,43,1020,1020,325,40,1020,437,1020,442,1050,442,1020,442',
'442,442,442,442,442,442,1020,442,1055,1056,340,1020,1020,1020,1020,1020',
'1020,340,25,18,1020,1020,1067,442,1068,442,340,1070,1020,16,15,1020',
'1020,1020,13,1076,1020,1020,1022,1022,1022,1022,1022,1022,1077,1081',
'365,1022,1022,1082,1083,1084,1022,365,1022,1022,1022,1022,1022,1022',
'1022,3,365,684,1092,683,1022,1022,1022,1022,1022,1022,1022,687,675,1022',
'690,692,695,697,448,1022,1022,1022,1022,1022,1022,1022,1022,1022,1022',
'1022,1022,669,1022,1022,1022,664,1022,1022,1,1022,1022,1022,448,448',
'448,448,448,448,448,448,448,448,448,892,448,448,997,656,448,448,892',
'1022,705,997,1022,892,707,1022,1022,892,650,1022,997,1022,448,647,448',
'1022,448,448,448,448,448,448,448,1022,448,710,624,1074,1022,1022,1022',
'1022,1022,1022,1074,621,713,1022,1022,1074,448,714,607,1074,717,1022',
'606,605,1022,1022,1022,604,600,1022,1022,830,830,830,830,830,830,598',
'734,595,830,830,591,583,574,830,573,830,830,830,830,830,830,830,347',
'347,347,347,347,830,830,830,830,830,830,830,572,749,830,312,312,312',
'312,312,830,830,830,830,830,830,830,830,830,830,830,830,570,830,830',
'830,751,830,830,758,830,830,830,294,294,294,294,294,294,294,294,294',
'294,294,764,294,294,,,294,294,,830,,,830,,,830,830,,,830,,830,294,,294',
'830,294,294,294,294,294,294,294,830,294,,,,830,830,830,830,830,830,',
',,830,830,,294,,,,,830,,,830,830,830,,,830,830,849,849,849,849,849,849',
',,,849,849,,,,849,,849,849,849,849,849,849,849,9,9,9,9,9,849,849,849',
'849,849,849,849,,,849,,,,,,849,849,849,849,849,849,849,849,849,849,849',
'849,,849,849,849,,849,849,,849,849,849,24,24,24,24,24,24,24,24,24,24',
'24,,24,24,,,24,24,,849,,,849,,,849,849,,,849,,849,24,,24,849,24,24,24',
'24,24,24,24,849,24,,,,849,849,849,849,849,849,,,,849,849,,24,,,,,849',
',,849,849,849,,,849,849,857,857,857,857,857,857,,,,857,857,,,,857,,857',
'857,857,857,857,857,857,,,,,,857,857,857,857,857,857,857,,,857,,,,,',
'857,857,857,857,857,857,857,857,857,857,857,857,,857,857,857,,857,857',
',857,857,857,552,552,552,552,552,552,552,552,552,552,552,,552,552,,',
'552,552,,857,,,857,,,857,857,,,857,,857,552,,552,857,552,552,552,552',
'552,552,552,857,552,,,,857,857,857,857,857,857,,,,857,857,,552,,,,,857',
',,857,857,857,,,857,857,858,858,858,858,858,858,,,,858,858,,,,858,,858',
'858,858,858,858,858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,',
'858,858,858,858,858,858,858,858,858,858,858,858,,858,858,858,,858,858',
',858,858,858,918,918,918,918,918,918,918,918,918,918,918,,918,918,,',
'918,918,,858,,,858,,,858,858,,,858,,858,918,,918,858,918,918,918,918',
'918,918,918,858,918,,,,858,858,858,858,858,858,,,,858,858,,918,,,,,858',
',,858,858,858,,,858,858,884,884,884,884,884,884,,,,884,884,,,,884,,884',
'884,884,884,884,884,884,,,,,,884,884,884,884,884,884,884,,,884,,,,,',
'884,884,884,884,884,884,884,884,884,884,884,884,,884,884,884,,884,884',
',884,884,884,501,501,501,501,501,501,501,501,501,501,501,,501,501,,',
'501,501,,884,,,884,,,884,884,,,884,,884,501,,501,884,501,501,501,501',
'501,501,501,884,501,,,,884,884,884,884,884,884,,,,884,884,501,501,,',
',,884,,,884,884,884,,,884,884,895,895,895,895,895,895,,,,895,895,,,',
'895,,895,895,895,895,895,895,895,,,,,,895,895,895,895,895,895,895,,',
'895,,,,,,895,895,895,895,895,895,895,895,895,895,895,895,,895,895,895',
',895,895,,895,895,895,806,806,806,806,806,806,806,806,806,806,806,,806',
'806,,,806,806,,895,,,895,,,895,895,,,895,,895,806,,806,895,806,806,806',
'806,806,806,806,895,806,,,,895,895,895,895,895,895,,,,895,895,,806,',
',,,895,,,895,895,895,,,895,895,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2',
'2,,,,,,2,2,2,2,2,2,2,,1014,2,1014,1014,1014,,1014,2,2,2,2,2,2,2,2,2',
'2,2,2,,2,2,2,,2,2,,2,2,2,493,493,493,493,493,493,493,,1014,493,493,',
',,,,493,493,,2,,,2,,,2,2,,,2,,2,493,,493,2,493,493,493,493,493,493,493',
'2,493,,,,2,2,2,2,2,2,,,,2,2,,1012,,1012,1012,1012,2,1012,,2,2,2,,,2',
'2,652,652,652,652,652,652,,,,652,652,,,,652,,652,652,652,652,652,652',
'652,1012,,,,,652,652,652,652,652,652,652,,,652,,,,,,652,652,652,652',
'652,652,652,652,652,652,652,652,,652,652,652,,652,652,,652,652,652,492',
'492,492,492,492,492,492,,,492,492,,,,,,492,492,,652,,,652,,,652,652',
',,652,,652,492,,492,652,492,492,492,492,492,492,492,652,492,,,,652,652',
'652,652,652,652,,,,652,652,,,,,,,652,,,652,652,652,,,652,652,36,36,36',
'36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36',
'36,,,36,,,,,,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36',
'36,36,491,491,491,491,491,491,491,,,491,491,,,,,,491,491,,36,,,36,,',
'36,36,,,36,,36,491,,491,36,491,491,491,491,491,491,491,36,491,,,,36',
'36,36,36,36,36,,,,36,36,,,,,,,36,,,36,36,36,,,36,36,602,602,602,602',
'602,602,,,,602,602,,,,602,,602,602,602,602,602,602,602,,,,,,602,602',
'602,602,602,602,602,,,602,,,,,,602,602,602,602,602,602,602,602,602,602',
'602,602,,602,602,602,,602,602,,602,602,602,496,496,496,496,496,496,496',
',,496,496,,,,,,496,496,,602,,,602,,,602,602,,,602,,602,496,,496,602',
'496,496,496,496,496,496,496,602,496,,,,602,602,602,602,602,602,,,,602',
'602,,,,,,,602,,,602,602,602,,,602,602,599,599,599,599,599,599,,,,599',
'599,,,,599,,599,599,599,599,599,599,599,,,,,,599,599,599,599,599,599',
'599,,,599,,,,,,599,599,599,599,599,599,599,599,599,599,599,599,,599',
'599,599,,599,599,,599,599,599,500,500,500,500,500,500,500,500,,500,500',
',,,,,500,500,,599,,,599,,,599,599,,,599,,599,500,,500,599,500,500,500',
'500,500,500,500,599,500,,,,599,599,599,599,599,599,,,,599,599,,,,,,',
'599,,,599,599,599,,,599,599,359,359,359,359,359,359,,,,359,359,,,,359',
',359,359,359,359,359,359,359,,,,,,359,359,359,359,359,359,359,,,359',
',,,,,359,359,359,359,359,359,359,359,359,359,359,359,,359,359,359,,359',
'359,,359,359,359,481,481,481,481,481,481,481,481,481,481,481,,481,481',
',,481,481,,359,,,359,,,359,359,,,359,,359,481,,481,359,481,481,481,481',
'481,481,481,359,481,,,,359,359,359,359,359,359,,,,359,359,,,,,,,359',
',,359,359,359,,,359,359,358,358,358,358,358,358,,,,358,358,,,,358,,358',
'358,358,358,358,358,358,,,,,,358,358,358,358,358,358,358,,,358,,,,,',
'358,358,358,358,358,358,358,358,358,358,358,358,,358,358,358,,358,358',
',358,358,358,480,480,480,480,480,480,480,480,480,480,480,,480,480,,',
'480,480,,358,,,358,,,358,358,,,358,,358,480,,480,358,480,480,480,480',
'480,480,480,358,480,,,,358,358,358,358,358,358,,,,358,358,,,,,,,358',
',,358,358,358,,,358,358,934,934,934,934,934,934,,,,934,934,,,,934,,934',
'934,934,934,934,934,934,,,,,,934,934,934,934,934,934,934,,,934,,,,,',
'934,934,934,934,934,934,934,934,934,934,934,934,,934,934,934,,934,934',
',934,934,934,499,499,499,499,499,499,499,,,499,499,,,,,,499,499,,934',
',,934,,,934,934,,,934,,934,499,,499,934,499,499,499,499,499,499,499',
'934,499,,,,934,934,934,934,934,934,,,,934,934,,,,,,,934,,,934,934,934',
',,934,934,935,935,935,935,935,935,,,,935,935,,,,935,,935,935,935,935',
'935,935,935,,,,,,935,935,935,935,935,935,935,,,935,,,,,,935,935,935',
'935,935,935,935,935,935,935,935,935,,935,935,935,,935,935,,935,935,935',
'495,495,495,495,495,495,495,,,495,495,,,,,,495,495,,935,,,935,,,935',
'935,,,935,,935,495,,495,935,495,495,495,495,495,495,495,935,495,,,,935',
'935,935,935,935,935,,,,935,935,,,,,,,935,,,935,935,935,,,935,935,346',
'346,346,346,346,346,,,,346,346,,,,346,,346,346,346,346,346,346,346,',
',,,,346,346,346,346,346,346,346,,,346,,,,,,346,346,346,346,346,346,346',
'346,346,346,346,346,,346,346,346,,346,346,,346,346,346,494,494,494,494',
'494,494,494,,,494,494,,,,,,494,494,,346,,,346,,,346,346,,,346,,346,494',
',494,346,494,494,494,494,494,494,494,346,494,,,,346,346,346,346,346',
'346,,,,346,346,,,,,,,346,,,346,346,346,,,346,346,772,772,772,772,772',
'772,,,,772,772,,,,772,,772,772,772,772,772,772,772,,,,,,772,772,772',
'772,772,772,772,,,772,,,,,,772,772,772,772,772,772,772,772,772,772,772',
'772,,772,772,772,,772,772,,772,772,772,489,,,,,,,,,,,,,,,,489,489,,772',
',,772,,,772,772,,,772,,772,489,,489,772,489,489,489,489,,,,772,,,,,772',
'772,772,772,772,772,,,,772,772,,,,,,,772,,,772,772,772,,,772,772,783',
'783,783,783,783,783,,,,783,783,,,,783,,783,783,783,783,783,783,783,',
',,,,783,783,783,783,783,783,783,,,783,,,,,,783,783,783,783,783,783,783',
'783,783,783,783,783,,783,783,783,,783,783,,783,783,783,,,,,,,,,,,,,',
',,,,,,783,,,783,,,783,783,,,783,,783,,,,783,,,,,,,,783,,,,,783,783,783',
'783,783,783,,,,783,783,,,,,,,783,,,783,783,783,,,783,783,784,784,784',
'784,784,784,,,,784,784,,,,784,,784,784,784,784,784,784,784,,,,,,784',
'784,784,784,784,784,784,,,784,,,,,,784,784,784,784,784,784,784,784,784',
'784,784,784,,784,784,784,,784,784,,784,784,784,,,,,,,,,,,,,,,,,,,,784',
',,784,,,784,784,,,784,,784,,,,784,,,,,,,,784,,,,,784,784,784,784,784',
'784,,,,784,784,,,,,,,784,,,784,784,784,,,784,784,320,320,320,320,320',
'320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320',
'320,320,320,320,,,320,,,,,,320,320,320,320,320,320,320,320,320,320,320',
'320,,320,320,320,,320,320,,320,320,320,,,,,,,,,,,,,,,,,,,,320,,,320',
',,320,320,,,320,,320,,,,320,,,,,,,,320,,,,,320,320,320,320,320,320,',
',,320,320,,,,,,,320,,,320,320,320,,,320,320,965,965,965,965,965,965',
',,,965,965,,,,965,,965,965,965,965,965,965,965,,,,,,965,965,965,965',
'965,965,965,,,965,,,,,,965,965,965,965,965,965,965,965,965,965,965,965',
',965,965,965,,965,965,,965,965,965,,,,,,,,,,,,,,,,,,,,965,,,965,,,965',
'965,,,965,,965,,,,965,,,,,,,,965,,,,,965,965,965,965,965,965,,,,965',
'965,,,,,,,965,,,965,965,965,,,965,965,315,315,315,315,315,315,,,,315',
'315,,,,315,,315,315,315,315,315,315,315,,,,,,315,315,315,315,315,315',
'315,,,315,,,,,,315,315,315,315,315,315,315,315,315,315,315,315,,315',
'315,315,,315,315,,315,315,315,,,,,,,,,,,,,,,,,,,,315,,,315,,,315,315',
',,315,,315,,,,315,,,,,,,,315,,,,,315,315,315,315,315,315,,,,315,315',
',,,,,,315,,,315,315,315,,,315,315,994,994,994,994,994,994,,,,994,994',
',,,994,,994,994,994,994,994,994,994,,,,,,994,994,994,994,994,994,994',
',,994,,,,,,994,994,994,994,994,994,994,994,994,994,994,994,,994,994',
'994,,994,994,,994,994,994,,,,,,,,,,,,,,,,,,,,994,,,994,,,994,994,,,994',
',994,,,,994,,,,,,,,994,,,,,994,994,994,994,994,994,,,,994,994,,,,,,',
'994,,,994,994,994,,,994,994,790,790,790,790,790,790,,,,790,790,,,,790',
',790,790,790,790,790,790,790,,,,,,790,790,790,790,790,790,790,,,790',
',,,,,790,790,790,790,790,790,790,790,790,790,790,790,,790,790,790,,790',
'790,,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,790,',
',,790,,,,,,,,790,,,,,790,790,790,790,790,790,,,,790,790,,,,,,,790,,',
'790,790,790,,,790,790,246,246,246,246,246,246,,,,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
'246,246,246,246,246,246,246,246,246,246,246,246,,246,246,246,,246,246',
',246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,246,,,,246',
',,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246',
'246,,,246,246,222,222,222,222,222,222,,,,222,222,,,,222,,222,222,222',
'222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,222,222',
'222,222,222,222,222,222,222,222,222,222,,222,222,222,,222,222,,222,222',
'222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,222,,,,222,,,,,,,',
'222,,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222,,,222,222,222,',
',222,222,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,,1015,,1015,1015',
'1015,1015,1015,1015,1015,,,,,,1015,1015,1015,1015,1015,1015,1015,,,1015',
',,,,,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,,1015',
'1015,1015,,1015,1015,,1015,1015,1015,,,,,,,,,,,,,,,,,,,,1015,,,1015',
',,1015,1015,,,1015,,1015,,,,1015,,,,,,,,1015,,,,,1015,1015,1015,1015',
'1015,1015,,,,1015,1015,,,,,,,1015,,,1015,1015,1015,,,1015,1015,67,67',
'67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67',
',,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,',
',,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67',
'67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,8,8,8,8,8,,,,8,8,,,,8',
',8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,',
'8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,',
'8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,23,23,23,,23,,,,23,23',
',,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23',
',,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,',
',,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,',
'23,23,,,,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32',
'32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32',
'32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32',
',,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,',
',,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33',
'33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33',
'33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33',
',,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,',
'33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34',
',,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34',
'34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34',
',34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34',
'34,,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37',
'37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37',
',37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,',
',,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38',
',38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,',
',38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,',
',,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38',
',,,38,38,,,,38,,,38,,,38,38,38,,,38,38,45,45,45,,45,,,,45,45,,,,45,',
'45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45',
'45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,',
',45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,',
',,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46',
'46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46',
'46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46',
',,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46',
',,46,46,48,48,48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48',
'48,48,48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48',
'48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,',
'48,,,,,48,48,48,48,48,48,,,,48,48,,,,,,,48,,,48,48,48,,,48,48,62,62',
'62,62,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62',
'62,,,62,,,,,,62,62,,62,62,62,62,62,62,62,62,62,,62,62,62,,62,62,,62',
'62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,',
',,62,62,62,62,62,62,,,,62,62,,,,,,,62,,,62,62,62,,,62,62,68,68,68,,68',
',,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68',
',,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,68,68,68,,,,,,',
',,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,,68,68,68,68',
'68,68,,,,68,68,,,,,,,68,,,68,68,68,,,68,68,71,71,71,,71,,,,71,71,,,',
'71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71',
'71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,,,,,,,,,,,,,,,,,,,71',
',,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71,71,71,71,,,,71,71,71',
',,,,71,71,,,71,71,71,,,71,71,72,72,72,,72,,,,72,72,,,,72,,72,72,72,72',
'72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72',
'72,72,,72,72,72,,72,72,,,,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72',
',72,,,,,,,,,,,,,,,,,72,72,72,72,72,72,,,,72,72,,,,,,,72,,,72,72,72,',
',72,72,1038,1038,1038,,1038,,,,1038,1038,,,,1038,,1038,1038,1038,1038',
'1038,1038,1038,,,,,,1038,1038,1038,1038,1038,1038,1038,,,1038,,,,,,',
'1038,,,1038,1038,1038,1038,1038,1038,1038,1038,1038,1038,1038,1038,',
'1038,1038,,1038,1038,1038,,,,,,,,,,,,,,,,,,,,1038,,,1038,,,1038,1038',
',,1038,,1038,,1038,,1038,,,,,,,,1038,,,,,1038,1038,1038,1038,1038,1038',
',,,1038,1038,,,,,,,1038,,1038,1038,1038,1038,,,1038,1038,126,126,126',
'126,126,,,,126,126,,,,126,,126,126,126,126,126,126,126,,,,,,126,126',
'126,126,126,126,126,,,126,,,,,,126,126,126,126,126,126,126,126,126,126',
'126,126,,126,126,126,,126,126,,126,126,126,,,,,,,,,,,,,,,,,,,,126,,',
'126,,,126,126,,,126,,126,,,,126,,,,,,,,126,,,,,126,126,126,126,126,126',
',,,126,126,,,,,,126,126,,,126,126,126,,,126,126,131,131,131,,131,,,',
'131,131,,,,131,,131,131,131,131,131,131,131,,,,,,131,131,131,131,131',
'131,131,,,131,,,,,,,131,,,131,131,131,131,131,131,131,131,,131,131,131',
',131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,',
',,,,131,,,,,,,,131,,,,,131,131,131,131,131,131,,,,131,131,,,,,,,131',
',,131,131,131,,,131,131,132,132,132,,132,,,,132,132,,,,132,,132,132',
'132,132,132,132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,,,132',
',,132,132,132,132,132,132,132,132,,132,132,132,,132,132,,132,132,132',
',,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132,,,,,,132,,,,,,,,132,,,',
',132,132,132,132,132,132,,,,132,132,,,,,,,132,,,132,132,132,,,132,132',
'133,133,133,,133,,,,133,133,,,,133,,133,133,133,133,133,133,133,,,,',
',133,133,133,133,133,133,133,,,133,,,,,,,133,,,133,133,133,133,133,133',
'133,133,,133,133,133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,',
'133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,,,133,133,133,133,133,133',
',,,133,133,,,,,,,133,,,133,133,133,,,133,133,134,134,134,,134,,,,134',
'134,,,,134,,134,134,134,134,134,134,134,,,,,,134,134,134,134,134,134',
'134,,,134,,,,,,,134,,,134,134,134,134,134,134,134,134,,134,134,134,',
'134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,',
',,,134,,,,,,,,134,,,,,134,134,134,134,134,134,,,,134,134,,,,,,,134,',
',134,134,134,,,134,134,135,135,135,135,135,,,,135,135,,,,135,,135,135',
'135,135,135,135,135,,,,,,135,135,135,135,135,135,135,,,135,,,,,,135',
'135,,135,135,135,135,135,135,135,135,135,,135,135,135,,135,135,,135',
'135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135,,,135,,135,,,,135,,,',
',,,,135,,,,,135,135,135,135,135,135,,,,135,135,,,,,,,135,,,135,135,135',
',,135,135,223,223,223,,223,,,,223,223,,,,223,,223,223,223,223,223,223',
'223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223',
'223,223,223,223,,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,',
',,223,,,223,,,223,223,,,223,,223,,,,223,,,,,,,,223,,,,,223,223,223,223',
'223,223,,,,223,223,,,,,,,223,,,223,223,223,,,223,223,224,224,224,,224',
',,,224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224',
'224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224',
'224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224',
',224,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,',
'224,,,224,224,224,,,224,224,225,225,225,,225,,,,225,225,,,,225,,225',
'225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,',
',225,,,225,225,225,225,225,225,225,225,,225,225,225,,225,225,,225,225',
'225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225',
',,,,225,225,225,225,225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225',
'225,226,226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226',
',,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226',
'226,226,226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226',
',,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226',
',,,226,226,,,,,,,226,,,226,226,226,,,226,226,227,227,227,,227,,,,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,',
'227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,',
',,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,',
',227,227,227,,,227,227,228,228,228,,228,,,,228,228,,,,228,,228,228,228',
'228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228',
'228,228,228,228,228,228,228,228,228,228,228,,228,228,,228,228,228,,',
',,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,228,,228,,228,,,,,,,,228',
',,,,228,228,228,228,228,228,,,,228,228,,,,,,,228,,228,228,228,228,,',
'228,228,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232',
'232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232',
'232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,',
',,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232',
'232,232,,,,232,232,,,,,,,232,,,232,232,232,,,232,232,233,233,233,,233',
',,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233',
'233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233',
'233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233',
',,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233',
',,233,233,233,,,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234',
'234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234',
',,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234',
',,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,',
',234,234,234,234,234,234,,,,234,234,234,,,,,,234,,,234,234,234,,,234',
'234,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245',
'245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245',
',,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,,,245,245,248,248,248,,248,,,,248',
'248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248',
'248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,',
'248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,',
',,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,',
',248,248,248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,',
',,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249',
'249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250',
'250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250',
'250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250',
'250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250',
',,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250',
'250,,,,,,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,',
',251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,',
',251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251',
',251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,',
',,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251',
'251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,',
',,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252',
'252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252,252,253,253,253',
',253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253',
'253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253',
'253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253',
',,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,',
',,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254',
'254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254',
',,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254',
'254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255',
',,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255',
'255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255',
',,,255,255,,,,,,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256',
'256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256',
'256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,',
'256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,',
',,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,',
',256,256,256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257',
'257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257',
'257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,',
',,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257',
'257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,258',
'258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258',
'258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258',
'258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258',
',,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258',
'258,,,,,,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259,259,,',
',259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,',
',259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259',
',259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,',
',,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259',
'259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260',
'260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260',
'260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,',
',,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260',
'260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260,260,261,261,261',
',261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261',
'261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261',
'261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261',
',,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,',
',,,261,,,261,261,261,,,261,261,262,262,262,,262,,,,262,262,,,,262,,262',
'262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,',
',262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,,262,262',
'262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262',
',,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,,262',
'262,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263',
',,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263',
'263,263,263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263',
',,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263',
',,,263,263,,,,,,,263,,,263,263,263,,,263,263,264,264,264,,264,,,,264',
'264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264,264,264,264',
'264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264,264,264,',
'264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,',
',,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,',
',264,264,264,,,264,264,265,265,265,,265,,,,265,265,,,,265,,265,265,265',
'265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265',
'265,265,265,265,265,265,265,,265,265,265,,265,265,,265,265,265,,,,,',
',,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265',
'265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265,,,265,265,266',
'266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266',
'266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266',
'266,,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266',
',,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266',
'266,,,,,,,266,,,266,266,266,,,266,266,267,267,267,,267,,,,267,267,,',
',267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267,',
',267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,,267,267',
',267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,',
',,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267',
'267,,,267,267,268,268,268,,268,,,,268,268,,,,268,,268,268,268,268,268',
'268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268',
'268,268,268,268,268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,',
',,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268',
'268,268,268,,,,268,268,,,,,,,268,,,268,268,268,,,268,268,269,269,269',
',269,,,,269,269,,,,269,,269,269,269,269,269,269,269,,,,,,269,269,269',
'269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269',
'269,269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269',
',,269,,,,,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,',
',,,269,,,269,269,269,,,269,269,274,274,274,,274,,,,274,274,,,,274,,274',
'274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,',
',274,,,274,274,274,274,274,274,274,274,,274,274,274,,274,274,,274,274',
'274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,,,,,274,,,,,,,,274',
',,,,274,274,274,274,274,274,,,,274,274,,,,,,,274,,,274,274,274,,,274',
'274,282,282,282,,282,,,,282,282,,,,282,,282,282,282,282,282,282,282',
',,,,,282,282,282,282,282,282,282,,,282,,,,,,,282,,,282,282,282,282,282',
'282,282,282,282,282,282,282,,282,282,,282,282,282,,,,,,,,,,,,,,,,,,',
',282,,,282,,,282,282,,,282,,282,,282,,282,,,,,,,,282,,,,,282,282,282',
'282,282,282,,,,282,282,,,,,,,282,,282,282,282,282,,,282,282,289,289',
'289,,289,,,,289,289,,,,289,,289,289,289,289,289,289,289,,,,,,289,289',
'289,289,289,289,289,,,289,,,,,,,289,,,289,289,289,289,289,289,289,289',
'289,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,',
',289,289,,,289,,289,,289,,289,,,,,,,,289,,,,,289,289,289,289,289,289',
',,,289,289,,,,,,,289,,289,289,289,289,,,289,289,292,292,292,,292,,,',
'292,292,,,,292,,292,292,292,292,292,292,292,,,,,,292,292,292,292,292',
'292,292,,,292,,,,,,,292,,,292,292,292,292,292,292,292,292,292,292,292',
'292,,292,292,,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292',
',292,,292,,292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292,292,292',
',,,,,292,,292,292,292,292,,,292,292,989,989,989,,989,,,,989,989,,,,989',
',989,989,989,989,989,989,989,,,,,,989,989,989,989,989,989,989,,,989',
',,,,,,989,,,989,989,989,989,989,989,989,989,,989,989,989,,989,989,,',
',989,,,,,,,,,,,,,,,,,,,,989,,,989,,,989,989,,,989,,,,,,,,,,,,,,,,,,',
'989,989,989,989,989,989,,,,989,989,,,,,,,989,,,989,989,989,,,989,989',
'299,299,299,,299,,,,299,299,,,,299,,299,299,299,299,299,299,299,,,,',
',299,299,299,299,299,299,299,,,299,,,,,,,299,,,299,299,299,299,299,299',
'299,299,,299,299,299,,299,299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,',
'299,,,299,299,,,299,,,,,,299,,,,,,,,299,,,,,299,299,299,299,299,299',
',,,299,299,,,,,,,299,,,299,299,299,,,299,299,301,301,301,,301,,,,301',
'301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301,301,301,301',
'301,,,301,,,,,,,301,,,301,301,301,301,301,301,301,301,,301,301,301,',
'301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,,301,,',
',,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301,,,,,,,301,',
',301,301,301,,,301,301,304,304,304,,304,,,,304,304,,,,304,,304,304,304',
'304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304,,,304',
'304,304,304,304,304,304,304,,304,304,304,,304,304,,304,304,304,,,,,',
',,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,304,,,,,,,,304,,,,,304',
'304,304,304,304,304,,,,304,304,,,,,,,304,,,304,304,304,,,304,304,305',
'305,305,,305,,,,305,305,,,,305,,305,305,305,305,305,305,305,,,,,,305',
'305,305,305,305,305,305,,,305,,,,,,,305,,,305,305,305,305,305,305,305',
'305,,305,305,305,,305,305,,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305',
',,305,305,,,305,,,,,,305,,,,,,,,305,,,,,305,305,305,305,305,305,,,,305',
'305,,,,,,,305,,,305,305,305,,,305,305,311,311,311,311,311,,,,311,311',
',,,311,,311,311,311,311,311,311,311,,,,,,311,311,311,311,311,311,311',
',,311,,,,,,311,311,,311,311,311,311,311,311,311,311,311,,311,311,311',
',311,311,,311,311,311,,,,,,,,,,,,,,,,,,,,311,,,311,,,311,311,,,311,',
'311,,,,311,,,,,,,,311,,,,,311,311,311,311,311,311,,,,311,311,,,,,,,311',
',,311,311,311,,,311,311,964,964,964,,964,,,,964,964,,,,964,,964,964',
'964,964,964,964,964,,,,,,964,964,964,964,964,964,964,,,964,,,,,,,964',
',,964,964,964,964,964,964,964,964,,964,964,964,,964,964,,964,964,964',
',,,,,,,,,,,,,,,,,,,964,,,964,,,964,964,,,964,,964,,,,964,,,,,,,,964',
',,,,964,964,964,964,964,964,,,,964,964,,,,,,,964,,,964,964,964,,,964',
'964,319,319,319,,319,,,,319,319,,,,319,,319,319,319,319,319,319,319',
',,,,,319,319,319,319,319,319,319,,,319,,,,,,,319,,,319,319,319,319,319',
'319,319,319,,319,319,319,,319,319,,,,319,,,,,,,,,,,,,,,,,,,,319,,,319',
',,319,319,,,319,,,,,,,,,,,,,,,,,,,319,319,319,319,319,319,,,,319,319',
',,,319,,,319,,,319,319,319,,,319,319,336,336,336,,336,,,,336,336,,,',
'336,,336,336,336,336,336,336,336,,,,,,336,336,336,336,336,336,336,,',
'336,,,,,,,336,,,336,336,336,336,336,336,336,336,,336,336,336,,336,336',
',,,336,,,,,,,,,,,,,,,,,,,,336,,,336,,,336,336,,,336,,,,,,,,,,,,,,,,',
',,336,336,336,336,336,336,,,,336,336,,,,,,,336,,,336,336,336,,,336,336',
'938,938,938,,938,,,,938,938,,,,938,,938,938,938,938,938,938,938,,,,',
',938,938,938,938,938,938,938,,,938,,,,,,,938,,,938,938,938,938,938,938',
'938,938,,938,938,938,,938,938,,,,938,,,,,,,,,,,,,,,,,,,,938,,,938,,',
'938,938,,,938,,,,,,,,,,,,,,,,,,,938,938,938,938,938,938,,,,938,938,',
',,,,,938,,,938,938,938,,,938,938,343,343,343,,343,,,,343,343,,,,343',
',343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,,,343',
',,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343,,343,343,,343',
'343,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,343,,,,,,',
',343,,,,,343,343,343,343,343,343,,,,343,343,,,,,,,343,,,343,343,343',
',,343,343,345,345,345,,345,,,,345,345,,,,345,,345,345,345,345,345,345',
'345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,,345,,,345,345,345,345',
'345,345,345,345,,345,345,345,,345,345,,345,345,345,,,,,,,,,,,,,,,,,',
',,345,,,345,345,,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345,345,345,345',
'345,345,,,,345,345,,,,,,,345,,,345,345,345,,,345,345,349,349,349,,349',
',,,349,349,,,,349,,349,349,349,349,349,349,349,,,,,,349,349,349,349',
'349,349,349,,,349,,,,,,,349,,,349,349,349,349,349,349,349,349,349,349',
'349,349,,349,349,,349,349,349,,,,,,,,,,,,,,,,,,,,349,,,349,,,349,349',
',,349,,349,,,,349,,,,,,,,349,,,,,349,349,349,349,349,349,,,,349,349',
',,,,,,349,,349,349,349,349,,,349,349,350,350,350,,350,,,,350,350,,,',
'350,,350,350,350,350,350,350,350,,,,,,350,350,350,350,350,350,350,,',
'350,,,,,,,350,,,350,350,350,350,350,350,350,350,350,350,350,350,,350',
'350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,,,350,350,,,350,,,,,,350',
',,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,,,,,,,350,,350,350',
'350,350,,,350,350,357,357,357,,357,,,,357,357,,,,357,,357,357,357,357',
'357,357,357,,,,,,357,357,357,357,357,357,357,,,357,,,,,,,357,,,357,357',
'357,357,357,357,357,357,,357,357,357,,357,357,,357,357,357,,,,,,,,,',
',,,,,,,,,,357,,,357,,,357,357,,,357,,,,,,357,,,,,,,,357,,,,,357,357',
'357,357,357,357,,,,357,357,,,,,,,357,,,357,357,357,,,357,357,929,929',
'929,,929,,,,929,929,,,,929,,929,929,929,929,929,929,929,,,,,,929,929',
'929,929,929,929,929,,,929,,,,,,,929,,,929,929,929,929,929,929,929,929',
',929,929,929,,929,929,,,,929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929',
',,929,,,,,,,,,,,,,,,,,,,929,929,929,929,929,929,,,,929,929,,,,,,,929',
',,929,929,929,,,929,929,917,917,917,,917,,,,917,917,,,,917,,917,917',
'917,917,917,917,917,,,,,,917,917,917,917,917,917,917,,,917,,,,,,,917',
',,917,917,917,917,917,917,917,917,,917,917,917,,917,917,,917,917,917',
',,,,,,,,,,,,,,,,,,,917,,,917,,,917,917,,,917,,,,,,917,,,,,,,,917,,,',
',917,917,917,917,917,917,,,,917,917,,,,,,,917,,,917,917,917,,,917,917',
'916,916,916,,916,,,,916,916,,,,916,,916,916,916,916,916,916,916,,,,',
',916,916,916,916,916,916,916,,,916,,,,,,,916,,,916,916,916,916,916,916',
'916,916,916,916,916,916,,916,916,,916,916,916,,,,,,,,,,,,,,,,,,,,916',
',,916,,,916,916,,,916,,,,916,,916,,,,,,,,916,,,,,916,916,916,916,916',
'916,,,,916,916,,,,,,,916,,916,916,916,916,,,916,916,371,371,371,,371',
',,,371,371,,,,371,,371,371,371,371,371,371,371,,,,,,371,371,371,371',
'371,371,371,,,371,,,,,,,371,,,371,371,371,371,371,371,371,371,,371,371',
'371,,371,371,,,,371,,,,,,,,,,,,,,,,,,,,371,,,371,,,371,371,,,371,,,',
',,,,,,,,,,,,,,,371,371,371,371,371,371,,,,371,371,,,,,,,371,,,371,371',
'371,,,371,371,373,373,373,,373,,,,373,373,,,,373,,373,373,373,373,373',
'373,373,,,,,,373,373,373,373,373,373,373,,,373,,,,,,,373,,,373,373,373',
'373,373,373,373,373,,373,373,373,,373,373,,,,373,,,,,,,,,,,,,,,,,,,',
'373,,,373,,,373,373,,,373,,,,,,,,,,,,,,,,,,,373,373,373,373,373,373',
',,,373,373,,,,,,,373,,,373,373,373,,,373,373,896,896,896,,896,,,,896',
'896,,,,896,,896,896,896,896,896,896,896,,,,,,896,896,896,896,896,896',
'896,,,896,,,,,,,896,,,896,896,896,896,896,896,896,896,,896,896,896,',
'896,896,,896,896,896,,,,,,,,,,,,,,,,,,,,896,,,896,,,896,896,,,896,,',
',,,896,,,,,,,,896,,,,,896,896,896,896,896,896,,,,896,896,,,,,,,896,',
',896,896,896,,,896,896,882,882,882,,882,,,,882,882,,,,882,,882,882,882',
'882,882,882,882,,,,,,882,882,882,882,882,882,882,,,882,,,,,,,882,,,882',
'882,882,882,882,882,882,882,,882,882,882,,882,882,,882,882,882,,,,,',
',,,,,,,,,,,,,,882,,,882,,,882,882,,,882,,,,,,882,,,,,,,,882,,,,,882',
'882,882,882,882,882,,,,882,882,,,,,,,882,,,882,882,882,,,882,882,431',
'431,431,,431,,,,431,431,,,,431,,431,431,431,431,431,431,431,,,,,,431',
'431,431,431,431,431,431,,,431,,,,,,,431,,,431,431,431,431,431,431,431',
'431,,431,431,431,,431,431,,431,431,431,,,,,,,,,,,,,,,,,,,,431,,,431',
',,431,431,,,431,,,,,,431,,,,,,,,431,,,,,431,431,431,431,431,431,,,,431',
'431,,,,,,,431,,,431,431,431,,,431,431,825,825,825,,825,,,,825,825,,',
',825,,825,825,825,825,825,825,825,,,,,,825,825,825,825,825,825,825,',
',825,,,,,,,825,,,825,825,825,825,825,825,825,825,,825,825,825,,825,825',
',825,825,825,,,,,,,,,,,,,,,,,,,,825,,,825,,,825,825,,,825,,,,,,825,',
',,,,,,825,,,,,825,825,825,825,825,825,,,,825,825,,,,,,,825,,,825,825',
'825,,,825,825,823,823,823,,823,,,,823,823,,,,823,,823,823,823,823,823',
'823,823,,,,,,823,823,823,823,823,823,823,,,823,,,,,,,823,,,823,823,823',
'823,823,823,823,823,,823,823,823,,823,823,,823,823,823,,,,,,,,,,,,,',
',,,,,,823,,,823,,,823,823,,,823,,,,,,823,,,,,,,,823,,,,,823,823,823',
'823,823,823,,,,823,823,,,,,,,823,,,823,823,823,,,823,823,822,822,822',
',822,,,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,,822,822,822',
'822,822,822,822,,,822,,,,,,,822,,,822,822,822,822,822,822,822,822,,822',
'822,822,,822,822,,822,822,822,,,,,,,,,,,,,,,,,,,,822,,,822,,,822,822',
',,822,,,,,,822,,,,,,,,822,,,,,822,822,822,822,822,822,,,,822,822,,,',
',,,822,,,822,822,822,,,822,822,821,821,821,,821,,,,821,821,,,,821,,821',
'821,821,821,821,821,821,,,,,,821,821,821,821,821,821,821,,,821,,,,,',
',821,,,821,821,821,821,821,821,821,821,,821,821,821,,821,821,,821,821',
'821,,,,,,,,,,,,,,,,,,,,821,,,821,,,821,821,,,821,,,,,,821,,,,,,,,821',
',,,,821,821,821,821,821,821,,,,821,821,,,,,,,821,,,821,821,821,,,821',
'821,820,820,820,,820,,,,820,820,,,,820,,820,820,820,820,820,820,820',
',,,,,820,820,820,820,820,820,820,,,820,,,,,,,820,,,820,820,820,820,820',
'820,820,820,,820,820,820,,820,820,,820,820,820,,,,,,,,,,,,,,,,,,,,820',
',,820,,,820,820,,,820,,,,,,820,,,,,,,,820,,,,,820,820,820,820,820,820',
',,,820,820,,,,,,,820,,,820,820,820,,,820,820,475,475,475,,475,,,,475',
'475,,,,475,,475,475,475,475,475,475,475,,,,,,475,475,475,475,475,475',
'475,,,475,,,,,,,475,,,475,475,475,475,475,475,475,475,475,475,475,475',
',475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475,,,475,475,,,475,',
'475,,475,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475,475,,,,',
',,475,,475,475,475,475,,,475,475,477,477,477,,477,,,,477,477,,,,477',
',477,477,477,477,477,477,477,,,,,,477,477,477,477,477,477,477,,,477',
',,,,,,477,,,477,477,477,477,477,477,477,477,,477,477,477,,477,477,,477',
'477,477,,,,,,,,,,,,,,,,,,,,477,,,477,,,477,477,,,477,,,,,,477,,,,,,',
',477,,,,,477,477,477,477,477,477,,,,477,477,,,,,,,477,,,477,477,477',
',,477,477,478,478,478,,478,,,,478,478,,,,478,,478,478,478,478,478,478',
'478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478,478,478',
'478,478,478,478,,478,478,478,,478,478,,478,478,478,,,,,,,,,,,,,,,,,',
',,478,,,478,,,478,478,,,478,,,,,,478,,,,,,,,478,,,,,478,478,478,478',
'478,478,,,,478,478,,,,,,,478,,,478,478,478,,,478,478,479,479,479,,479',
',,,479,479,,,,479,,479,479,479,479,479,479,479,,,,,,479,479,479,479',
'479,479,479,,,479,,,,,,,479,,,479,479,479,479,479,479,479,479,,479,479',
'479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479,479,,,479',
',,,,,479,,,,,,,,479,,,,,479,479,479,479,479,479,,,,479,479,,,,,,,479',
',,479,479,479,,,479,479,807,807,807,,807,,,,807,807,,,,807,,807,807',
'807,807,807,807,807,,,,,,807,807,807,807,807,807,807,,,807,,,,,,,807',
',,807,807,807,807,807,807,807,807,,807,807,807,,807,807,,807,807,807',
',,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,,807,,,,,,807,,,,,,,,807,,,',
',807,807,807,807,807,807,,,,807,807,,,,,,,807,,,807,807,807,,,807,807',
'800,800,800,,800,,,,800,800,,,,800,,800,800,800,800,800,800,800,,,,',
',800,800,800,800,800,800,800,,,800,,,,,,,800,,,800,800,800,800,800,800',
'800,800,,800,800,800,,800,800,,800,800,800,,,,,,,,,,,,,,,,,,,,800,,',
'800,,,800,800,,,800,,,,,,800,,,,,,,,800,,,,,800,800,800,800,800,800',
',,,800,800,,,,,,,800,,,800,800,800,,,800,800,518,518,518,,518,,,,518',
'518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518,518,518,518,518',
'518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518,518,518,518,518',
',518,518,,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,',
'518,,518,,518,,,,,,,,518,,,,,518,518,518,518,518,518,,,,518,518,,,,',
',,518,,518,518,518,518,,,518,518,521,521,521,,521,,,,521,521,,,,521',
',521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,,521',
',,,,,,521,,,521,521,521,521,521,521,521,521,521,521,521,521,,521,521',
',521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,,521,,521',
',,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521,,,,,,,521,,521,521',
'521,521,,,521,521,523,523,523,,523,,,,523,523,,,,523,,523,523,523,523',
'523,523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,,,523,,,523,523',
'523,523,523,523,523,523,,523,523,523,,523,523,,523,523,523,,,,,,,,,',
',,,,,,,,,,523,,,523,,,523,523,,,523,,,,,,523,,,,,,,,523,,,,,523,523',
'523,523,523,523,,,,523,523,,,,,,,523,,,523,523,523,,,523,523,529,529',
'529,529,529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529',
'529,529,529,529,529,529,,,529,,,,,,529,529,529,529,529,529,529,529,529',
'529,529,529,,529,529,529,,529,529,,529,529,529,,,,,,,,,,,,,,,,,,,,529',
',,529,,,529,529,,,529,,529,,,,529,,,,,,,,529,,,,,529,529,529,529,529',
'529,,,,529,529,,,,,,529,529,,,529,529,529,,,529,529,536,536,536,,536',
',,,536,536,,,,536,,536,536,536,536,536,536,536,,,,,,536,536,536,536',
'536,536,536,,,536,,,,,,,536,,,536,536,536,536,536,536,536,536,,536,536',
'536,,536,536,,,,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,,',
',,,,,,,,,,,,,,,536,536,536,536,536,536,,,,536,536,,,,,,,536,,,536,536',
'536,,,536,536,538,538,538,,538,,,,538,538,,,,538,,538,538,538,538,538',
'538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,,,538,,,538,538,538',
'538,538,538,538,538,538,538,538,538,,538,538,,538,538,538,,,,,,,,,,',
',,,,,,,,,538,,,538,,,538,538,,,538,,538,,538,,538,,,,,,,,538,,,,,538',
'538,538,538,538,538,,,,538,538,,,,,,,538,,538,538,538,538,,,538,538',
'544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,',
',544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544',
'544,544,,544,544,544,,544,544,,,,544,,,,,,,,,,,,,,,,,,,,544,,,544,,',
'544,544,,,544,,,,,,,,,,,,,,,,,,,544,544,544,544,544,544,,,,544,544,',
',,,,,544,,,544,544,544,,,544,544,548,548,548,,548,,,,548,548,,,,548',
',548,548,548,548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548',
',,,,,,548,,,548,548,548,548,548,548,548,548,,548,548,548,,548,548,,548',
'548,548,,,,,,,,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,,,,,548,,,,,,',
',548,,,,,548,548,548,548,548,548,,,,548,548,,,,,,,548,,,548,548,548',
',,548,548,553,553,553,,553,,,,553,553,,,,553,,553,553,553,553,553,553',
'553,,,,,,553,553,553,553,553,553,553,,,553,,,,,,,553,,,553,553,553,553',
'553,553,553,553,,553,553,553,,553,553,,553,553,553,,,,,,,,,,,,,,,,,',
',,553,,,553,,,553,553,,,553,,,,,,553,,,,,,,,553,,,,,553,553,553,553',
'553,553,,,,553,553,,,,,,,553,,,553,553,553,,,553,553,778,778,778,,778',
',,,778,778,,,,778,,778,778,778,778,778,778,778,,,,,,778,778,778,778',
'778,778,778,,,778,,,,,,,778,,,778,778,778,778,778,778,778,778,778,778',
'778,778,,778,778,,778,778,778,,,,,,,,,,,,,,,,,,,,778,,,778,,,778,778',
',,778,,778,,778,,778,,,,,,,,778,,,,,778,778,778,778,778,778,,,,778,778',
',,,,,,778,,778,778,778,778,,,778,778,766,766,766,,766,,,,766,766,,,',
'766,,766,766,766,766,766,766,766,,,,,,766,766,766,766,766,766,766,,',
'766,,,,,,,766,,,766,766,766,766,766,766,766,766,,766,766,766,,766,766',
',766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766,,,766,766,,,766,,766,,,,766',
',,,,,,,766,,,,,766,766,766,766,766,766,,,,766,766,,,,,,,766,,,766,766',
'766,,,766,766,745,745,745,,745,,,,745,745,,,,745,,745,745,745,745,745',
'745,745,,,,,,745,745,745,745,745,745,745,,,745,,,,,,,745,,,745,745,745',
'745,745,745,745,745,,745,745,745,,745,745,,745,745,745,,,,,,,,,,,,,',
',,,,,,745,,,745,,,745,745,,,745,,,,,,745,,,,,,,,745,,,,,745,745,745',
'745,745,745,,,,745,745,,,,,,,745,,,745,745,745,,,745,745,587,587,587',
',587,,,,587,587,,,,587,,587,587,587,587,587,587,587,,,,,,587,587,587',
'587,587,587,587,,,587,,,,,,,587,,,587,587,587,587,587,587,587,587,,587',
'587,587,,587,587,,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587',
',,587,,,,,,587,,,,,,,,587,,,,,587,587,587,587,587,587,,,,587,587,,,',
',,,587,,,587,587,587,,,587,587,729,729,729,,729,,,,729,729,,,,729,,729',
'729,729,729,729,729,729,,,,,,729,729,729,729,729,729,729,,,729,,,,,',
',729,,,729,729,729,729,729,729,729,729,729,729,729,729,,729,729,,729',
'729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,,729,,,,,,729,,,,,,',
',729,,,,,729,729,729,729,729,729,,,,729,729,,,,,,,729,,729,729,729,729',
',,729,729,726,726,726,,726,,,,726,726,,,,726,,726,726,726,726,726,726',
'726,,,,,,726,726,726,726,726,726,726,,,726,,,,,,,726,,,726,726,726,726',
'726,726,726,726,726,726,726,726,,726,726,,726,726,726,,,,,,,,,,,,,,',
',,,,,726,,,726,,,726,726,,,726,,726,,,,726,,,,,,,,726,,,,,726,726,726',
'726,726,726,,,,726,726,,,,,,,726,,726,726,726,726,,,726,726,721,721',
'721,,721,,,,721,721,,,,721,,721,721,721,721,721,721,721,,,,,,721,721',
'721,721,721,721,721,,,721,,,,,,,721,,,721,721,721,721,721,721,721,721',
',721,721,721,,721,721,,721,721,721,,,,,,,,,,,,,,,,,,,,721,,,721,,,721',
'721,,,721,,721,,,,721,,,,,,,,721,,,,,721,721,721,721,721,721,,,,721',
'721,,,,,,,721,,,721,721,721,,,721,721,716,716,716,,716,,,,716,716,,',
',716,,716,716,716,716,716,716,716,,,,,,716,716,716,716,716,716,716,',
',716,,,,,,,716,,,716,716,716,716,716,716,716,716,,716,716,716,,716,716',
',716,716,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,,716,,,,,,716,',
',,,,,,716,,,,,716,716,716,716,716,716,,,,716,716,,,,,,,716,,,716,716',
'716,,,716,716,610,610,610,,610,,,,610,610,,,,610,,610,610,610,610,610',
'610,610,,,,,,610,610,610,610,610,610,610,,,610,,,,,,,610,,,610,610,610',
'610,610,610,610,610,610,610,610,610,,610,610,,610,610,610,,,,,,,,,,',
',,,,,,,,,610,,,610,,,610,610,,,610,,610,,610,,610,,,,,,,,610,,,,,610',
'610,610,610,610,610,,,,610,610,,,,,,,610,,610,610,610,610,,,610,610',
'715,715,715,,715,,,,715,715,,,,715,,715,715,715,715,715,715,715,,,,',
',715,715,715,715,715,715,715,,,715,,,,,,,715,,,715,715,715,715,715,715',
'715,715,,715,715,715,,715,715,,,,715,,,,,,,,,,,,,,,,,,,,715,,,715,,',
'715,715,,,715,,,,,,,,,,,,,,,,,,,715,715,715,715,715,715,,,,715,715,',
',,,,,715,,,715,715,715,,,715,715,622,622,622,,622,,,,622,622,,,,622',
',622,622,622,622,622,622,622,,,,,,622,622,622,622,622,622,622,,,622',
',,,,,,622,,,622,622,622,622,622,622,622,622,,622,622,622,,622,622,,622',
'622,622,,,,,,,,,,,,,,,,,,,,622,,,622,,,622,622,,,622,,,,,,622,,,,,,',
',622,,,,,622,622,622,622,622,622,,,,622,622,,,,,,,622,,,622,622,622',
',,622,622,628,628,628,,628,,,,628,628,,,,628,,628,628,628,628,628,628',
'628,,,,,,628,628,628,628,628,628,628,,,628,,,,,,,628,,,628,628,628,628',
'628,628,628,628,,628,628,628,,628,628,,628,628,628,,,,,,,,,,,,,,,,,',
',,628,,,628,,,628,628,,,628,,,,,,628,,,,,,,,628,,,,,628,628,628,628',
'628,628,,,,628,628,,,,,,,628,,,628,628,628,,,628,628,704,704,704,,704',
',,,704,704,,,,704,,704,704,704,704,704,704,704,,,,,,704,704,704,704',
'704,704,704,,,704,,,,,,,704,,,704,704,704,704,704,704,704,704,,704,704',
'704,,704,704,,,,704,,,,,,,,,,,,,,,,,,,,704,,,704,,,704,704,,,704,,,',
',,,,,,,,,,,,,,,704,704,704,704,704,704,,,,704,704,,,,,,,704,,,704,704',
'704,,,704,704,657,657,657,,657,,,,657,657,,,,657,,657,657,657,657,657',
'657,657,,,,,,657,657,657,657,657,657,657,,,657,,,,,,,657,,,657,657,657',
'657,657,657,657,657,,657,657,657,,657,657,,657,657,657,,,,,,,,,,,,,',
',,,,,,657,,,657,,,657,657,,,657,,657,,,,657,,,,,,,,657,,,,,657,657,657',
'657,657,657,,,,657,657,,,,,,,657,,,657,657,657,,,657,657,658,658,658',
',658,,,,658,658,,,,658,,658,658,658,658,658,658,658,,,,,,658,658,658',
'658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658,658,658,658,,658',
'658,658,,658,658,,658,658,658,,,,,,,,,,,,,,,,,,,,658,,,658,,,658,658',
',,658,,,,,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658,658,,,',
',,,658,,,658,658,658,,,658,658,659,659,659,,659,,,,659,659,,,,659,,659',
'659,659,659,659,659,659,,,,,,659,659,659,659,659,659,659,,,659,,,,,',
',659,,,659,659,659,659,659,659,659,659,659,659,659,659,,659,659,,659',
'659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,659,,659,,659',
',,,,,,,659,,,,,659,659,659,659,659,659,,,,659,659,,,,,,,659,,659,659',
'659,659,,,659,659,662,662,662,,662,,,,662,662,,,,662,,662,662,662,662',
'662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662,,,662,662',
'662,662,662,662,662,662,,662,662,662,,662,662,,662,662,662,,,,,,,,,',
',,,,,,,,,,662,,,662,,,662,662,,,662,,,,,,662,,,,,,,,662,,,,,662,662',
'662,662,662,662,,,,662,662,,,,,,,662,,,662,662,662,,,662,662,701,701',
'701,,701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701',
'701,701,701,701,701,,,701,,,,,,,701,,,701,701,701,701,701,701,701,701',
',701,701,701,,701,701,,701,701,701,,,,,,,,,,,,,,,,,,,,701,,,701,,,701',
'701,,,701,,,,,,701,,,,,,,,701,,,,,701,701,701,701,701,701,,,,701,701',
',,,,,,701,,,701,701,701,,,701,701,665,665,665,,665,,,,665,665,,,,665',
',665,665,665,665,665,665,665,,,,,,665,665,665,665,665,665,665,,,665',
',,,,,,665,,,665,665,665,665,665,665,665,665,665,665,665,665,,665,665',
',665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,665,,665',
',665,,,,,,,,665,,,,,665,665,665,665,665,665,,,,665,665,,,,,,,665,,665',
'665,665,665,,,665,665,666,666,666,,666,,,,666,666,,,,666,,666,666,666',
'666,666,666,666,,,,,,666,666,666,666,666,666,666,,,666,,,,,,,666,,,666',
'666,666,666,666,666,666,666,666,666,666,666,,666,666,,666,666,666,,',
',,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,,,,666,,666,,,,,,,,666,,',
',,666,666,666,666,666,666,,,,666,666,,,,,,,666,,666,666,666,666,,,666',
'666,667,667,667,,667,,,,667,667,,,,667,,667,667,667,667,667,667,667',
',,,,,667,667,667,667,667,667,667,,,667,,,,,,,667,,,667,667,667,667,667',
'667,667,667,,667,667,667,,667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667',
',,667,,,667,667,,,667,,,,,,667,,,,,,,,667,,,,,667,667,667,667,667,667',
',,,667,667,,,,,,,667,,,667,667,667,,,667,667,668,668,668,,668,,,,668',
'668,,,,668,,668,668,668,668,668,668,668,,,,,,668,668,668,668,668,668',
'668,,,668,,,,,,,668,,,668,668,668,668,668,668,668,668,,668,668,668,',
'668,668,,668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,',
',,,668,,,,,,,,668,,,,,668,668,668,668,668,668,,,,668,668,,,,,,,668,',
',668,668,668,,,668,668,698,698,698,,698,,,,698,698,,,,698,,698,698,698',
'698,698,698,698,,,,,,698,698,698,698,698,698,698,,,698,,,,,,,698,,,698',
'698,698,698,698,698,698,698,,698,698,698,,698,698,,698,698,698,,,,,',
',,,,,,,,,,,,,,698,,,698,,,698,698,,,698,,,,,,698,,,,,,,,698,,,,,698',
'698,698,698,698,698,,,,698,698,,,,,,,698,,,698,698,698,,,698,698,673',
'673,673,,673,,,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673',
'673,673,673,673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673',
'673,,673,673,673,,673,673,,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673',
',,673,673,,,673,,,,,,673,,,,,,,,673,,,,,673,673,673,673,673,673,,,,673',
'673,,,,,,,673,,,673,673,673,,,673,673,674,674,674,,674,,,,674,674,,',
',674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674,',
',674,,,,,,,674,,,674,674,674,674,674,674,674,674,,674,674,674,,674,674',
',674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,,,,,674,',
',,,,,,674,,,,,674,674,674,674,674,674,,,,674,674,,,,,,,674,,,674,674',
'674,505,,674,674,,,,505,505,505,,,505,505,505,743,505,743,743,743,743',
'743,,,,505,505,,,,,743,,,,,505,505,,505,505,505,505,505,,,,,,,,,,743',
',,,,,,,,,,743,743,,,,,,,,,,,,,505,,456,,,,,505,,456,456,456,505,505',
'456,456,456,,456,,743,,,,,,,456,456,456,,,,,505,505,,,456,456,,456,456',
'456,456,456,,,505,,,,,505,,,,,,,505,,,,,,,,,456,456,456,456,456,456',
'456,456,456,456,456,456,456,456,,,456,456,456,,,456,,456,456,,,456,456',
',456,,456,,456,,456,456,456,456,456,456,456,,456,456,456,,,,,,,,,,,',
',456,456,31,456,,456,,,,31,31,31,456,,31,31,31,983,31,983,983,983,983',
'983,,,,,31,31,,,,983,,,,,31,31,,31,31,31,31,31,,,,,,,,,,983,,,,,,,,',
'983,983,983,983,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31',
',,31,,31,31,,,31,31,,31,983,31,,31,,31,31,31,31,31,31,31,,31,,31,,,',
',,,,,,,,,31,31,60,31,,31,,,,60,60,60,31,,60,60,60,785,60,785,785,785',
'785,785,,,,,60,60,60,,,785,,,,,60,60,,60,60,60,60,60,,,,,,,,,,785,,',
',,,,,,785,785,785,785,,60,60,60,60,60,60,60,60,60,60,60,60,60,60,,,60',
'60,60,,,60,,,60,,,60,60,,60,785,60,,60,,60,60,60,60,60,60,60,,60,,60',
'1062,,1062,1062,1062,1062,1062,,,,,,60,60,60,60,1062,60,466,60,,,,,60',
'466,466,466,,,466,466,466,,466,,,,1062,,,,,466,466,466,466,,,1062,1062',
',,,466,466,,466,466,466,466,466,,,,,,,,,,,,,,,,,,,,,,1062,,466,466,466',
'466,466,466,466,466,466,466,466,466,466,466,,,466,466,466,,,466,,,466',
',,466,466,,466,,466,,466,,466,466,466,466,466,466,466,,466,466,466,739',
',739,739,739,739,739,,,,,,466,466,466,466,739,466,465,466,,,,,466,465',
'465,465,,,465,465,465,,465,,,,739,,,,,465,465,465,465,739,739,739,739',
',,,465,465,,465,465,465,465,465,,,,,,,,,,,,,,,,,,,,,,739,,465,465,465',
'465,465,465,465,465,465,465,465,465,465,465,,,465,465,465,,,465,,,465',
',,465,465,,465,,465,,465,,465,465,465,465,465,465,465,,465,465,465,1064',
',1064,1064,1064,1064,1064,,,,,,465,465,465,465,1064,465,30,465,,,,,465',
'30,30,30,,,30,30,30,,30,,,,1064,,,,,30,30,30,,,,1064,1064,,,,30,30,',
'30,30,30,30,30,,,,,,,,,,,,,,,,,,,,,,1064,,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30,,30,,30,30,30',
'30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30,,30,,30,,,,,,,30,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11',
'11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,',
',,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11',
'11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11',
',,,,11,787,787,787,787,787,787,787,787,787,787,787,787,787,787,787,787',
'787,787,787,787,787,787,787,787,,,,787,787,787,787,787,787,787,787,787',
'787,,,,,,787,787,787,787,787,787,787,787,787,,,787,,,,,,,,,787,787,',
'787,787,787,787,787,787,787,,,787,787,,,,787,787,787,787,,,,,,,,,,,',
',,787,787,,787,787,787,787,787,787,787,787,787,787,787,,,787,,,,,,,',
',,,,,,,,,,,,787,,,,,787,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,,,,,75',
'75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75,75,75',
'75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75,75,75',
'75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,654,654,654,654,654,654',
'654,654,654,654,654,654,654,654,654,654,654,654,654,654,654,654,654',
'654,,,,654,654,654,654,654,654,654,654,654,654,,,,,,654,654,654,654',
'654,654,654,654,654,,,654,,,,,,,,,654,654,,654,654,654,654,654,654,654',
',,654,654,,,,654,654,654,654,,,,,,,,,,,,,,654,654,,654,654,654,654,654',
'654,654,654,654,654,654,,,654,654,,,,,,,,,,654,,,,,,,,,654,,,,,654,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,,,,103,103,103,103,103,103,103,103,103,103,',
',,,,103,103,103,103,103,103,103,103,103,103,103,103,,103,,,,,,,103,103',
',103,103,103,103,103,103,103,,,103,103,,,,103,103,103,103,,,,,,,,,,',
',,,103,103,,103,103,103,103,103,103,103,103,103,103,103,,,103,,,,,,',
',,,,,,,,,,,,,103,,,,,103,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12',
'12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12',
'12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12',
'12,,,12,12,,,,,,,,,,12,,,,,,,,,12,,,,,12,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
',,,422,422,422,422,422,422,422,422,422,422,,,,,,422,422,422,422,422',
'422,422,422,422,,,422,,,,,,,,,422,422,,422,422,422,422,422,422,422,',
',422,422,,,,422,422,422,422,,,,,,,,,,,,,,422,422,,422,422,422,422,422',
'422,422,422,422,422,422,,,422,422,,,,,,,,,,422,,777,777,,,777,,,422',
',,,,422,777,777,,777,777,777,777,777,777,777,,,777,777,,,,777,777,777',
'777,,,,,,777,,,,,,,,777,777,,777,777,777,777,777,777,777,777,777,777',
'777,,,777,,,,,,,,,,661,661,,,661,,,,,,777,,,661,661,777,661,661,661',
'661,661,661,661,,,661,661,,,,661,661,661,661,,,,,,661,,,,,,,,661,661',
',661,661,661,661,661,661,661,661,661,661,661,,,661,,,,,,,,,,473,473',
',,473,,,,,,661,,,473,473,661,473,473,473,473,473,473,473,,,473,473,',
',,473,473,473,473,,,,,,473,,,,,,,,473,473,,473,473,473,473,473,473,473',
'473,473,473,473,,,473,,,,,,,,,,474,474,,,474,,,,,,473,,,474,474,473',
'474,474,474,474,474,474,474,,,474,474,,,,474,474,474,474,,,,,,474,,',
',,,,,474,474,,474,474,474,474,474,474,474,474,474,474,474,,,474,,,,',
',,,,,660,660,,,660,,,,,,474,,,660,660,474,660,660,660,660,660,660,660',
',,660,660,,,,660,660,660,660,,,,,,660,,,,,,,,660,660,,660,660,660,660',
'660,660,660,660,660,660,660,,,660,,,,,,,,,,611,611,,,611,,,,,,660,,',
'611,611,660,611,611,611,611,611,611,611,,,611,611,,,,611,611,611,611',
',,,,,611,,,,,,,,611,611,,611,611,611,611,611,611,611,611,611,611,611',
',,611,,,,,,,,,,612,612,,,612,,,,,,611,,,612,612,611,612,612,612,612',
'612,612,612,,,612,612,,,,612,612,612,612,,,,,,612,,,,,,,,612,612,,612',
'612,612,612,612,612,612,612,612,612,612,,,612,,,,,,,,,,776,776,,,776',
',,,,,612,,,776,776,612,776,776,776,776,776,776,776,,,776,776,,,,776',
'776,776,776,,,,,,776,,,,,,,,776,776,,776,776,776,776,776,776,776,776',
'776,776,776,,,776,,,,,,,,,,1034,1034,,,1034,,,,,,776,,,1034,1034,776',
'1034,1034,1034,1034,1034,1034,1034,,,1034,1034,,,,1034,1034,1034,1034',
',,,,,1034,,,,,,,,1034,1034,,1034,1034,1034,1034,1034,1034,1034,1034',
'1034,1034,1034,,,1034,,,,,,,,,,1039,1039,,,1039,,,,,,1034,,,1039,1039',
'1034,1039,1039,1039,1039,1039,1039,1039,,,1039,1039,,,,1039,1039,1039',
'1039,,,,,,1039,,,,,,,,1039,1039,,1039,1039,1039,1039,1039,1039,1039',
'1039,1039,1039,1039,,1044,1039,1044,1044,1044,1044,1044,,,,,278,278',
',,278,1044,,,,,1039,,,278,278,1039,278,278,278,278,278,278,278,,,278',
'278,1044,,,278,278,278,278,,,,,1044,1044,,,,,,,,278,278,,278,278,278',
'278,278,278,278,278,278,278,278,,,278,,,,,,,,,1044,550,550,,,550,,,',
',,278,,,550,550,278,550,550,550,550,550,550,550,,,550,550,,,,550,550',
'550,550,,,,,,550,,,,,,,,550,550,,550,550,550,550,550,550,550,550,550',
'550,550,,,550,,,,,,,,,,549,549,,,549,,,,,,550,,,549,549,550,549,549',
'549,549,549,549,549,,,549,549,,,,549,549,549,549,,,,,,549,,,,,,,,549',
'549,,549,549,549,549,549,549,549,549,549,549,549,,,549,,,,,,,,,,1040',
'1040,,,1040,,,,,,549,,,1040,1040,549,1040,1040,1040,1040,1040,1040,1040',
',,1040,1040,,,,1040,1040,1040,1040,,,,,,1040,,,,,,,,1040,1040,,1040',
'1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,,,1040,,,,,,,,,,540',
'540,,,540,,,,,,1040,,,540,540,1040,540,540,540,540,540,540,540,,,540',
'540,,,,540,540,540,540,,,,,,540,,,,,,,,540,540,,540,540,540,540,540',
'540,540,540,540,540,540,,,540,,,,,,,,,,539,539,,,539,,,,,,540,,,539',
'539,540,539,539,539,539,539,539,539,,,539,539,,,,539,539,539,539,,,',
',,539,,,,,,,,539,539,,539,539,539,539,539,539,539,539,539,539,539,,',
'539,,,,,,,,,,229,229,,,229,,,,,,539,,,229,229,539,229,229,229,229,229',
'229,229,,,229,229,,,,229,229,229,229,,,,,,229,,,,,,,,229,229,,229,229',
'229,229,229,229,229,229,229,229,229,,,229,950,,950,950,950,950,950,',
',230,230,,,230,,,950,,,229,,,230,230,229,230,230,230,230,230,230,230',
',,230,230,,,950,230,230,230,230,,,,,,230,950,950,,,,,,230,230,,230,230',
'230,230,230,230,230,230,230,230,230,,828,230,828,828,828,828,828,,,',
',,950,,,,828,,,,,230,,,,,230,952,,952,952,952,952,952,,,,,828,,,,,952',
',,,828,828,828,828,948,,948,948,948,948,948,946,,946,946,946,946,946',
'952,1087,948,1087,1087,1087,1087,1087,,946,828,952,952,,,,,1087,828',
',,,,,948,,,,,,,946,,,,948,948,,,1087,946,946,946,946,,952,,,,,1087,1087',
'1060,,1060,1060,1060,1060,1060,1058,,1058,1058,1058,1058,1058,,,1060',
'948,,,,,,1058,946,741,,741,741,741,741,741,1087,,,,,,1060,,,741,,,,1058',
',,,1060,1060,,,,1058,1058,1058,1058,,,,,786,741,786,786,786,786,786',
',,,741,741,741,741,,,786,,,,,1060,,,,,,,1058,,,,,,,,,,786,,,,,,,,741',
'786,786,786,786,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,786' ]
        racc_action_check = arr = ::Array.new(26190, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1278,  2202,  1239,   nil,    65,   nil,   nil,  5302,  1482,
   nil, 23669, 24359,  1100,   nil,  1064,  1063,   650,  1110,   634,
   436,   nil,   102,  5442,  1497,  1169,   nil,   623,   nil,   108,
 23532, 23008,  5582,  5722,  5862,   nil,  2484,  6002,  6142,   nil,
  1040,   412,   435,  1110,   185,  6282,  6422,   114,  6562,  1038,
   740,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 23136,   nil,  6702,   nil,   nil,    72,   nil,  5162,  6842,   nil,
   nil,  6982,  7122,  1078,   nil, 23945,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -97,   nil,   nil,   nil,   nil,   nil,   nil,  1026,
  1004,  1000,   957, 24221,   nil,   nil,   nil,   nil,   nil,   nil,
   930,   nil,   nil,   796,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  7402,   nil,   nil,   nil,
   nil,  7542,  7682,  7822,  7962,  8102,   974,   nil,   524,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   953,   nil,  4881,  8242,  8382,  8522,  8662,  8802,  8942, 25741,
 25814,   nil,  9082,  9222,  9362,   nil,   nil,   435,    98,   -81,
   996,   131,   896,   943,   nil,  9502,  4740,   936,  9642,  9782,
  9922, 10062, 10202, 10342, 10482, 10622, 10762, 10902, 11042, 11182,
 11322, 11462, 11602, 11742, 11882, 12022, 12162, 12302, 12442, 12582,
   nil,   nil,   nil,   nil, 12722,   nil,   nil,   nil, 25303,   nil,
   nil,   926, 12862,   nil,   nil,   932,   nil,   nil,   nil, 13002,
   nil,   nil, 13142,   nil,  1356,   nil,   882,   859,   nil, 13422,
   887, 13562,   nil,   nil, 13702, 13842,   nil,   nil,    50,   nil,
   nil, 13982,  1356,   nil,   824,  4317,   815,   845,   804, 14262,
  4035,   804,   841,  1005,   876,  1074,   nil,   831,   794,    39,
   nil,   nil,   nil,   823,   127,   782, 14402,   nil,   336,   843,
  1110,   nil,   829, 14682,   nil, 14822,  3471,  1341,   766, 14962,
 15102,   nil,   nil,   592,   576,    -8,    -7, 15242,  3048,  2907,
   500,   838,   718,    41,     5,  1146,   787,   -14,   816,   nil,
   nil, 15802,   nil, 15942,   678,   667,   640,   576,   509,   457,
   403,   305,   244,   nil,   210,   nil,   nil,   nil,   nil,   nil,
   130,   nil,   258,   nil,   394,   nil,   606,   329,   nil,   604,
   nil,   586,   -57,   nil,   584,   -42,   nil,   337,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 24497,   nil,   nil,   nil,   nil,   584,   nil,   nil,
   566, 16362,   539,   nil,   nil,   508,   nil,  1077,   -32,   nil,
   nil,   nil,  1074,   nil,   nil,   nil,   nil,   nil,  1215,   515,
   nil,   nil,   468,   462,   300,   127, 22880,   nil,   nil,   nil,
     0,   132,   488,   nil,   nil, 23400, 23268,   nil,   nil,   nil,
    56,   nil,   445, 24719, 24792, 17202,   210, 17342, 17482, 17622,
  3048,  2907,   -43,   -50,   444,   428,   424,   422,   961,  3612,
   694,  2484,  2343,  2202,  3471,  3330,  2625,   617,   949,  3189,
  2766,  1920,   880,   447,   nil, 22800,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   296,   290,   nil,   nil, 18042,   nil,
   nil, 18182,   nil, 18322,   nil,   189,   nil,   nil,   nil, 18462,
  1030,   258,   253,   nil,   nil,   236, 18602,   204, 18742, 25668,
 25595,   439,   223,   nil, 18882,   180,   nil,   216, 19022, 25449,
 25376,   747,  1638, 19162,   292,   260,    99,   nil,   nil,   524,
   275,    85,   -54,   nil,   437,   -55,   nil,   728,   nil,  -117,
  1283,   nil,  1263,  1243,  1241,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1225,   535,   nil,   nil, 19722,   nil,   nil,
   nil,  1317,   nil,   nil,   nil,  1314,   nil,   nil,  1312,  2766,
  1342,   nil,  2625,    24,  1344,  1340,  1332,  1335,   nil,   nil,
 20422, 24938, 25011,     7,   nil,   172,   407,   -21,   nil,   370,
   nil,  1230, 20702,   nil,  1238,   nil,   nil,   nil, 20842,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   194,   nil,   nil,   340,   nil,   nil,   nil,  1185,   nil,   nil,
  1180,   nil,  2343,   nil, 24083,   nil,  1168, 21122, 21262, 21402,
 24865, 24646, 21542,   431,  1180, 21822, 21962, 22102, 22242,  1174,
   nil,   nil,   nil, 22522, 22662,  1155,   nil,   nil,   nil,   213,
    90,   265,   399,  1117,  1113,   nil,   104,  1224,    71,   nil,
  1141,   nil,  1246,   nil,   nil,  1127,   nil,  1169, 22382,   nil,
   nil, 21682,   nil,  -118, 20982,  1173,   nil,  1180,    -9,    -1,
  1237,   170,   491,  1248,  1214, 20562, 20282,  1279,    52,   216,
   nil, 20142,   nil,   nil,   nil,   nil, 20002,   nil,   nil, 19862,
   nil,   nil,   nil,    34,  1238,   319,   nil,   nil,   527, 23331,
   nil, 26018,   nil, 22764,   nil, 19582,   nil,   566,   nil,  1264,
   392,  1290,   nil,   nil,   nil,   nil,   652,   nil,  1405,   nil,
   nil,   nil,   nil,   nil,  1425,   nil, 19442,  -104,    33,    27,
    24,     8,  3612,   nil,   666,   nil, 25084, 24573, 19302,   nil,
   nil,   nil,   157,  3753,  3894, 23100, 26055, 23807,   -16,  1057,
  4599,   nil,   nil,   225,   nil,   nil,   nil,   275,   nil,   273,
 17902,   292,   142,   145,   531,   663,  2061, 17762,   nil,   405,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 17062, 16922, 16782, 16642,   -49, 16502,   nil,   nil, 25876,   nil,
  1356,   nil,   nil,   583,   nil,   -23,   nil,   nil,   nil,   nil,
   569,   202,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1497,
   nil,   581,   636,   nil,   nil,   308,   nil,  1638,  1779,   622,
   629,   630,   nil,   nil,   nil,   636,   644,   nil,   651,   657,
   nil,   658,   nil,   nil,   662,   660,   662,   923,   nil,   793,
   nil,   nil, 16222,   nil,  1920,   797,   nil,   nil,    23,     1,
   802,   273,  1215,   nil,   687,  2061, 16082,   525,   806,   nil,
   690,   279,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   681,
   nil,   nil,   692,   -86,   nil,   nil, 15662, 15522,  1779,   726,
   728,   nil,   730,   731,   732,   nil,   768,   760,   744, 15382,
   nil,   nil,   nil,   nil,  3189,  3330,   nil,    33, 14542,   nil,
   nil,   793,   899,   939,   nil,   nil, 25934,   nil, 25927,   nil,
 25805,   nil, 25903,   nil,   nil,   nil,   nil,   266,   898,   803,
   nil,    16,   nil,   nil, 14122,  4176,   nil,   nil,   936,   383,
   nil,   nil,   939,   nil,   nil,   875,   nil,   227,   nil,   nil,
   861,   nil,   nil, 22972,   nil,   495,   nil,   nil,   873, 13282,
   595,   964,   nil,  1012,  4458,   589,   339,  1218,   977,   336,
   nil,   nil,   nil,   302,   nil,   nil,   nil,   913,   917,   918,
   920,   921,  2278,   952,  2188,  5022,   nil,    86,   nil,   nil,
  1074,   nil,  1215,   959,   nil,   nil,   969,   971,   972,   973,
   nil,   984,   nil,   600, 25157,   nil,   nil,  1130,  7262, 25230,
 25522,   800,   nil,   790, 25292,   nil,   nil,   nil,   nil,   504,
  1045,   540,   nil,   nil,   nil,  1177,  1178,   nil, 26000,   nil,
 25993,   nil, 23199,   nil, 23463,   nil,   nil,  1110,  1112,   nil,
  1079,   -10,    34,    32,  1251,   nil,  1084,  1093,   nil,   nil,
   nil,  1094,  1098,  1099,  1100,    35,   nil, 25942,   nil,   nil,
   nil,   nil,  1113,   nil ]

racc_action_default = [
    -1,  -650,  -649,  -650,    -2,  -636,    -4,    -5,  -650,    -8,
    -9,  -650,  -650,  -650,   -35,  -650,  -650,   -39,  -650,  -650,
  -294,   -50,  -638,  -650,   -55,   -60,   -61,   -62,   -66,  -271,
  -271,  -271,  -309,  -343,  -344,   -78,  -649,   -82,   -90,   -92,
  -650,  -538,  -539,  -650,  -650,  -650,  -650,  -230,  -650,  -638,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -623,  -296,  -298,  -305,  -307,  -317,  -423,  -650,  -650,   -57,
   -57,  -636,  -650,  -327,  -334,  -650,  -345,  -346,  -348,  -349,
  -350,  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -366,  -468,
  -469,  -470,  -471,  -472,  -473,  -649,  -476,  -649,  -649,  -649,
  -486,  -649,  -649,  -649,  -514,  -520,  -522,  -523,  -524,  -525,
  -621,  -527,  -528,  -622,  -530,  -531,  -532,  -533,  -534,  -535,
  -536,  -537,  -542,  -543,  1094,    -3,  -637,  -645,  -646,  -647,
    -7,  -650,  -650,  -650,  -650,  -650,  -650,   -23,  -650,  -121,
  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
   -28,  -130,  -649,  -650,  -650,  -650,  -650,  -650,  -649,  -650,
  -650,  -633,  -650,  -650,  -638,  -639,   -54,  -650,  -538,  -539,
  -650,  -294,  -650,  -650,  -236,  -650,  -649,  -650,  -650,  -650,
  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,
  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,
  -245,  -246,  -247,  -248,  -650,  -359,  -452,  -431,  -650,  -634,
  -635,   -67,  -650,  -316,  -358,  -650,  -445,  -447,   -73,  -649,
  -442,   -74,  -638,   -75,  -251,  -266,  -649,  -649,  -270,  -650,
  -276,  -650,  -649,  -615,  -650,  -650,   -76,   -77,  -636,   -17,
   -18,  -650,   -21,   -22,   -80,  -649,  -638,  -650,   -83,   -86,
  -649,   -98,   -99,  -650,  -650,  -106,  -309,  -312,  -638,  -435,
  -343,  -344,  -347,  -443,  -650,   -88,  -650,   -94,  -304,  -521,
  -650,  -224,  -225,  -650,  -237,  -650,  -649,  -300,  -638,  -649,
  -649,  -318,  -319,  -570,   -56,  -650,  -650,  -650,  -649,  -649,
  -636,  -650,  -637,  -538,  -539,  -650,  -650,  -294,  -650,  -376,
  -377,  -650,  -330,  -650,  -121,  -122,  -164,  -165,  -166,  -182,
  -187,  -194,  -197,  -337,  -650,  -538,  -539,  -610,  -611,  -474,
  -650,  -498,  -650,  -500,  -650,  -502,  -650,  -650,  -481,  -650,
  -649,  -650,  -650,  -494,  -650,  -650,  -496,  -650,  -513,  -515,
  -516,  -517,  -518,    -6,  -648,   -29,   -30,   -31,   -32,   -33,
   -10,   -11,  -650,   -25,   -26,   -27,  -131,  -650,   -36,   -38,
  -281,  -650,  -650,  -280,   -37,  -650,   -40,  -650,  -294,   -48,
   -49,  -205,  -256,  -276,   -51,   -52,   -41,  -206,  -256,  -638,
  -261,  -262,  -649,  -649,  -624,  -625,  -271,  -440,  -626,  -627,
  -625,  -624,  -271,  -439,  -441,  -626,  -627,   -47,  -214,   -53,
  -638,  -315,  -650,  -650,  -650,  -649,  -304,  -650,  -650,  -650,
  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -226,  -227,
  -228,  -229,  -231,  -232,  -233,  -234,  -235,  -238,  -239,  -240,
  -241,  -638,  -249,  -650,  -453,  -271,  -624,  -625,   -64,   -68,
  -272,  -436,  -449,  -452,  -638,  -638,  -311,  -267,  -650,  -275,
  -268,  -650,  -273,  -650,  -277,  -650,  -618,  -620,   -16,  -637,
   -20,  -638,   -79,  -302,   -95,   -84,  -650,  -638,  -649,  -650,
  -650,  -105,  -650,  -521,  -650,   -91,   -96,  -650,  -650,  -650,
  -650,  -250,  -242,  -650,  -460,  -650,  -638,  -299,  -252,  -642,
  -642,  -650,  -650,  -613,  -642,  -650,  -424,  -570,  -427,  -609,
  -609,  -553,  -555,  -555,  -555,  -569,  -571,  -572,  -573,  -574,
  -575,  -576,  -577,  -578,  -650,  -580,  -582,  -584,  -589,  -591,
  -592,  -594,  -599,  -601,  -602,  -604,  -605,  -606,  -650,  -649,
  -367,  -368,  -649,  -650,  -650,  -650,  -650,  -650,  -362,  -455,
  -649,  -650,  -650,  -304,   -57,  -116,  -117,  -650,  -119,  -650,
  -294,  -649,  -650,  -335,  -548,  -340,  -631,  -632,  -650,  -475,
  -499,  -504,  -505,  -507,  -477,  -501,  -478,  -503,  -479,  -480,
  -650,  -483,  -485,  -650,  -488,  -490,  -491,  -650,  -492,  -493,
  -650,  -519,  -649,   -24,  -650,   -34,  -284,  -650,  -650,  -649,
  -650,  -650,  -650,  -444,  -650,  -263,  -265,  -650,  -650,   -69,
  -259,  -260,  -437,  -650,  -650,   -71,  -438,  -314,  -640,  -624,
  -625,  -624,  -625,  -638,  -650,  -430,  -649,   -63,  -432,  -449,
  -650,  -450,  -650,  -258,  -310,  -649,  -274,  -278,  -650,  -616,
  -617,  -650,   -19,   -81,  -650,   -87,   -93,  -638,  -624,  -625,
  -649,  -102,  -104,  -650,   -89,  -650,  -650,  -223,  -638,  -649,
  -360,  -649,  -297,  -365,  -301,  -253,  -644,  -643,  -255,  -644,
  -306,  -308,  -614,  -650,  -638,  -650,  -551,  -552,  -650,  -650,
  -562,  -650,  -565,  -650,  -567,  -650,  -378,  -650,  -380,  -382,
  -389,  -638,  -583,  -593,  -603,  -607,  -649,  -369,  -649,   -58,
  -370,  -371,  -322,  -323,  -650,  -325,  -650,  -638,  -624,  -625,
  -628,  -303,  -649,  -116,  -117,  -118,  -650,  -650,  -649,  -328,
  -544,  -546,  -331,  -649,  -649,  -570,  -570,  -650,  -638,  -650,
  -649,  -482,  -484,  -650,  -487,  -495,  -497,  -650,  -132,  -282,
  -650,  -638,  -624,  -625,  -625,  -624,  -257,  -650,  -641,  -649,
   -43,  -208,   -44,  -209,   -70,   -45,  -211,   -46,  -210,   -72,
  -650,  -650,  -650,  -650,  -444,  -650,  -412,  -413,  -638,  -415,
  -649,  -434,  -433,  -650,  -446,  -649,  -448,  -269,  -279,  -619,
   -85,  -100,   -97,  -213,  -313,   -13,   -15,  -361,  -363,  -649,
  -467,  -461,  -649,  -462,  -463,  -642,  -425,  -649,  -649,  -417,
  -638,  -609,  -590,  -608,  -554,  -555,  -555,  -581,  -555,  -555,
  -600,  -555,  -578,  -595,  -638,  -650,  -387,  -650,  -579,  -650,
  -364,  -372,  -650,  -374,  -649,  -650,   -59,  -324,  -650,  -444,
  -650,  -116,  -117,  -120,  -638,  -649,  -650,  -650,  -650,  -338,
  -638,  -650,  -341,  -612,  -506,  -509,  -510,  -511,  -512,  -650,
  -489,   -12,  -283,  -444,   -42,  -207,  -264,  -650,  -243,  -609,
  -609,  -394,  -649,  -649,  -649,  -411,  -650,  -638,  -578,  -586,
  -587,  -597,  -454,   -65,  -649,  -649,  -466,  -650,  -650,  -465,
  -254,  -650,  -650,  -650,  -426,  -550,  -650,  -558,  -650,  -560,
  -650,  -563,  -650,  -566,  -568,  -379,  -381,  -385,  -650,  -390,
  -320,  -650,  -375,  -321,  -650,  -649,  -326,  -444,  -650,  -650,
  -332,  -336,  -650,  -547,  -549,  -548,  -508,  -650,  -392,  -393,
  -402,  -396,  -404,  -650,  -407,  -650,  -409,  -414,  -650,  -650,
  -585,  -650,  -451,  -649,  -649,  -107,  -108,  -650,  -650,  -115,
  -464,  -428,  -429,  -638,  -419,  -421,  -422,  -555,  -555,  -555,
  -555,  -383,  -650,  -388,  -650,  -649,  -278,  -649,  -329,  -545,
  -649,  -339,  -649,  -609,  -588,  -395,  -649,  -649,  -649,  -649,
  -598,  -649,  -416,  -596,  -650,  -304,   -14,  -460,  -649,  -650,
  -650,  -114,  -418,  -650,  -650,  -556,  -559,  -561,  -564,  -650,
  -386,  -649,  -456,  -457,  -458,  -650,  -650,  -391,  -650,  -399,
  -650,  -401,  -650,  -405,  -650,  -408,  -410,  -303,  -628,  -459,
  -638,  -624,  -625,  -628,  -113,  -420,  -555,  -384,  -373,  -333,
  -342,  -649,  -649,  -649,  -649,  -444,  -557,  -650,  -397,  -400,
  -403,  -406,  -649,  -398 ]

clist = [
'6,4,233,318,277,295,295,295,129,719,229,236,351,383,290,607,520,29,279',
'663,568,137,221,29,449,142,142,599,602,345,456,462,696,332,332,696,145',
'145,29,354,354,409,125,354,358,359,699,29,29,29,509,29,147,147,355,356',
'545,784,360,879,296,296,296,297,297,297,575,126,332,555,9,867,583,446',
'129,339,9,29,467,505,316,846,29,29,885,514,29,433,434,142,503,870,866',
'391,868,393,395,398,390,403,406,393,335,354,354,354,354,640,361,751',
'447,690,281,288,291,468,860,142,415,416,417,418,725,728,775,736,737',
'732,130,923,347,314,293,306,307,1004,830,956,392,1030,635,29,637,624',
'407,641,29,29,29,29,29,972,621,440,623,635,440,1006,787,975,759,440',
'925,422,429,18,370,927,220,702,1003,18,520,566,856,353,733,935,512,696',
'696,924,513,835,686,1052,959,766,852,937,389,699,394,397,9,845,643,444',
'445,18,400,295,402,419,405,469,470,904,789,790,926,428,439,457,1030',
'439,408,896,652,136,439,865,420,862,1024,18,450,628,473,343,2,561,654',
'688,734,1075,387,29,29,29,29,29,29,29,466,562,413,29,29,29,352,432,432',
'824,699,295,705,1006,689,1,764,29,295,368,714,295,779,1013,278,511,886',
'683,874,384,456,462,956,841,625,346,575,1026,348,893,867,934,583,450',
'833,18,556,349,350,371,519,519,870,29,18,1007,391,895,546,622,29,525',
'897,29,542,988,296,129,867,297,539,332,1020,290,373,783,296,1050,,297',
',,29,692,,354,29,549,332,1027,707,29,1028,889,,,710,,,1053,603,528,',
'558,563,,710,,,793,1078,1036,611,,1077,531,468,29,447,129,537,543,,332',
',332,529,913,29,29,29,,,559,,530,560,564,510,535,,18,,18,792,,18,641',
'515,,,18,867,606,644,,,,,,,,767,,1022,18,314,1081,710,,837,314,,945',
'940,,,,,,840,,,,660,664,696,,653,,,,142,317,814,,671,699,,,819,,676',
'145,295,,519,519,900,901,670,801,,457,583,,583,456,462,147,967,,,,,',
',,,450,18,978,979,,18,,,684,,18,,,,861,466,671,29,,1069,,,,,,575,575',
',,546,670,583,583,898,899,,18,546,295,,810,812,,,,,815,817,18,18,457',
',718,,,837,,,,332,457,,,450,,,669,332,792,,,29,675,,928,,695,811,813',
',29,466,,816,818,,,965,,,,466,,,,29,,,,,,894,,,,710,1057,920,942,,295',
',853,,440,687,772,,,,,782,457,440,440,,843,788,,440,440,,,760,,450,994',
',,,,29,,,29,968,781,,,,427,,29,466,,,,,929,295,1015,,832,,29,,,1085',
',,29,457,,439,317,,,6,797,,914,,439,439,450,,,,439,439,664,798,583,831',
'29,142,,546,1054,746,29,29,466,,,,145,,842,29,29,826,,,664,29,29,915',
',18,519,671,147,809,676,,928,332,,928,811,813,818,816,,670,,,332,,,859',
',317,850,,854,9,317,,,,902,,,,1023,,,920,,,920,440,920,,,,,,1055,,1056',
',664,,432,,295,,,883,,883,855,,604,605,457,18,,,18,,,740,742,744,471',
',,,,450,928,,,929,664,,929,,,929,29,929,,466,,,29,888,439,,,29,29,915',
'142,,,,29,,519,859,,920,,920,,920,18,920,,,,,18,29,,,,,,,516,18,18,',
'826,1070,746,18,18,876,920,710,,,,,29,,,,,939,,,532,354,,,,,,,929,,929',
'29,929,,929,354,961,,,29,29,664,,,,,,,,,969,,557,,,,,929,,,,,430,443',
'29,,29,970,,,,974,,722,859,,19,29,29,,,,19,,,,,981,981,981,,,332,,,',
',237,,,,332,18,,,,237,237,237,,19,323,323,18,18,,29,29,,,18,,762,763',
',765,,,,,746,,746,,,,19,18,522,1019,524,237,237,526,527,237,365,29,',
',1042,,332,,,1039,,,850,,18,,,,,,,756,,,758,,,,677,,29,,295,18,,,883',
',,,,18,18,565,457,981,981,981,981,,981,29,,,19,,29,450,29,237,237,237',
'237,19,,,1011,746,18,466,883,664,693,694,29,466,982,984,986,18,,,947',
'949,,951,953,,954,703,,,,,,706,,,,32,981,981,981,981,,32,,,,,,981,,',
'724,,,,18,18,32,746,,746,656,,,,,32,32,32,,32,,,887,,,,863,,,863,,,',
',,18,19,237,437,237,237,437,237,,746,32,437,237,237,,32,32,,,32,,,,',
',19,,,,18,,1059,1061,1063,1065,,1066,,,,,,,,,890,,,,,18,,,,,18,,18,',
',,237,697,909,,565,,700,237,,,237,,,32,1045,1046,1047,1048,32,32,32',
'32,32,921,,1088,1089,1090,1091,19,,,,19,,,1093,323,19,,,960,932,,,,',
'963,,,,,966,,323,,,,,,971,936,,,19,,844,,,941,752,,,,,237,19,19,,,,',
',1086,,,,,,619,,619,41,,,,962,,41,878,,,,,,,,,,32,32,32,32,32,32,32',
',,,32,32,32,,,,,41,321,321,,1018,,,32,1021,,903,,,,799,,,,,,992,993',
'697,565,,,41,,869,,871,,,,,,363,,,385,,,,32,,,863,,,921,32,1017,921',
'32,921,838,,,839,,,,,,,,,237,,,,,32,,,,32,,851,,1037,32,944,697,,,565',
',,,41,1079,1080,,,,955,,,41,,1051,873,,,,,32,16,,,,,,16,922,,,32,32',
'32,19,973,443,,,,921,323,921,237,921,,921,,,323,,,,,,16,,,237,,,,,,',
',,,,921,912,,,,,,,,,,,16,,,,,,,,,,369,,,,,,,,41,,,,,19,,,19,,,,,,,,237',
',,,,,,,41,,,,237,,,,,,237,,,,,,,,,,,,16,1008,,1009,32,1010,,,,16,,,19',
',,,,,437,237,,,,,,,,437,437,,,,,437,437,,,,1029,,1031,565,,41,,,,41',
',,,321,41,,,,,,32,,,,,,323,,,32,321,,,,,,,323,,,41,,,,32,,,,,,42,1016',
'41,41,,,42,,16,,435,1076,,435,,385,,385,435,,,,,,,1082,,1083,,1084,',
',16,,42,322,322,,,,32,,,32,19,,,,,,237,32,,,1092,19,19,,,,42,,19,32',
',,,,,32,364,,,386,,,,,,437,,,,,,,,,,,,,,32,,,,16,,32,32,16,19,,,,16',
',32,32,,,,,32,32,,,,,,19,,,42,,,,,19,19,,16,42,,,,,,,,,,,16,16,,,,,',
',,,237,,19,,,,,,,,,,,19,237,,,,,41,,,,,,,321,,,,,,,,321,,,,,,,,,,,,',
'990,,,,,19,19,,,997,,,32,,,,,,32,42,,,,32,32,,,,,,32,,,,,,19,,,,,,41',
'42,,41,,32,,,,,,,,,,,,,1033,,,,,19,,,,,32,,,,,,,,,,,,,,,,19,,,32,,19',
',19,,41,,32,32,,,,,,,,,,42,237,,,42,,16,,322,42,,,,,32,,32,,,,,,,,,322',
',32,32,,,,,,,42,,,,321,,,,,,,,42,42,,321,,,,,,,,,,386,,386,,,,32,32',
',,,,,,,,16,,,16,,,,,,,,,20,,,,,,20,,,32,,,,,,,,,,41,,,,,,,,,,,41,41',
',,20,325,325,41,32,,,16,,,,,,435,,,,,,,,,435,435,,32,20,,435,435,32',
',32,,,,367,,,,,,,41,,,,,32,,,,,,,,,,,,,,41,,,,,,,,41,41,,,,,,,,,,,,',
',,,,,,20,,,,,,42,41,,20,,,,322,,,,,41,,,322,,,,,,,,,,,,,,,,16,,,,,,',
',,,,16,16,,,385,,,16,,41,41,,,995,,,,,,,,,,,435,,,,42,,,42,,,,,,,,,41',
',,,,,,16,20,,438,,,438,,,,,438,,,,,,385,,16,,,41,,,20,,16,16,,,,,,42',
',,,,,,,,41,,,,,41,,41,,,,16,,,,,,,,,,,16,,,,,,,,,,,,,,,,,,,,,322,,,',
'20,,,,20,,,322,325,20,,,,,16,16,,,1000,,,,,,,325,,,,,,,,,,20,,,,,,,',
',,16,,20,20,,,,,,,,,,,,620,,620,,42,,,,,,,,,,16,42,42,,,,,,42,,,,,,',
',,,,,,16,,,,,16,,16,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,42,,,244',
',,,,42,42,,,294,294,294,,,,,,,,,,,341,342,,344,,,,,,,42,,,,,,,,,,,42',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,386,,,,325,42,42,,,996,,,325,,,,',
',,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,386,,,,,42,,20,,,20,,,',
',,,,,,,,,,,,42,,,,,42,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,294,442,,438',
'448,294,,,,448,,,438,438,,,,,438,438,,,244,,,480,481,482,483,484,485',
'486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,,,325',
',502,,,,,,,,294,325,,,,,,294,,,294,,,,,,,294,,294,,,294,294,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,20,,,551,,552,,,,294,294,20,20,,,,,908,20',
',,,,,,,,,,,,,,,,438,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,20,,',
',,,,,20,20,,,,,294,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,20,,,,,,,,,,,,294',
',448,448,448,,,,,,,,,,,,,,,,,,620,,,,,20,20,,,999,,,,,,,,,,,,294,,,294',
',294,,,,,,,,,,20,,,,,294,,,,,,,,,,717,,,,,,,,,620,,,,,20,,,,,,,,,,,',
',,,,,,,,,20,,,,294,20,,20,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,294,448,294,,,806,,,294,294,448,448,,,,,448',
'448,,,,,,,,,,,,,,,,,,,,,,,,294,,,294,,,,,,,,,,,,,,,448,,,,,294,,,,,294',
',,294,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,294,,,,',
',,,,,,,,,,,,,,,,,294,,,,,,,448,,,,,,,,,,,,,448,448,448,448,,918,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,294,448,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,294' ]
        racc_goto_table = arr = ::Array.new(3501, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,2,39,62,173,45,45,45,120,15,37,26,104,69,87,115,89,53,37,36,172,21',
'21,53,35,70,70,108,108,39,49,49,90,79,79,90,73,73,53,30,30,69,5,30,41',
'41,221,53,53,53,51,53,74,74,23,23,64,123,23,109,84,84,84,86,86,86,205',
'8,79,12,9,211,210,32,120,77,9,53,32,49,59,17,53,53,111,35,53,28,28,70',
'174,216,161,6,161,6,6,6,190,6,6,6,63,30,30,30,30,194,5,150,76,52,50',
'50,50,76,164,70,23,23,23,23,85,85,67,155,155,85,7,160,9,58,57,57,57',
'166,162,148,191,217,195,53,195,138,191,195,53,53,53,53,53,139,68,24',
'68,195,24,167,140,141,42,24,152,31,29,33,25,158,22,20,165,33,89,168',
'169,170,171,18,177,90,90,161,178,180,182,183,151,184,185,186,189,221',
'192,193,9,16,196,30,30,33,197,45,198,9,199,30,30,200,201,202,164,26',
'26,87,217,26,203,204,13,11,26,209,10,213,214,33,6,220,37,80,3,83,75',
'88,172,166,100,53,53,53,53,53,53,53,70,103,7,53,53,53,106,84,84,36,221',
'45,64,167,54,1,115,53,45,117,64,45,119,151,48,87,44,35,150,124,49,49',
'148,36,125,126,205,160,127,67,211,162,210,6,52,33,128,129,130,131,6',
'6,216,53,33,161,6,132,62,133,53,190,134,53,39,164,84,120,211,86,37,79',
'135,87,136,137,84,151,,86,,,53,174,,30,53,37,79,161,35,53,161,36,,,49',
',,111,23,5,,6,6,,49,,,194,109,17,37,,151,59,76,53,76,120,59,77,,79,',
'79,8,36,53,53,53,,,84,,9,86,86,57,63,,33,,33,195,,33,195,57,,,33,211',
'5,6,,,,,,,,35,,123,33,58,161,49,,89,58,,155,85,,,,,,64,,,,37,39,90,',
'21,,,,70,14,51,,87,221,,,51,,87,73,45,,6,6,172,172,6,35,,87,210,,210',
'49,49,74,36,,,,,,,,,6,33,155,155,,33,,,39,,33,,,,154,70,87,53,,15,,',
',,,205,205,,,62,6,210,210,12,12,,33,62,45,,32,32,,,,,32,32,33,33,87',
',30,,,89,,,,79,87,,,6,,,50,79,195,,,53,50,,210,,86,76,76,,53,70,,76',
'76,,,108,,,,70,,,,53,,,,,,35,,,,49,155,154,12,,45,,28,,24,50,41,,,,',
'30,87,24,24,,76,30,,24,24,,,120,,6,108,,,,,53,,,53,12,6,,,,14,,53,70',
',,,,212,45,108,,104,,53,,,36,,,53,87,,26,14,,,6,2,,32,,26,26,6,,,,26',
'26,39,21,210,173,53,70,,62,115,149,53,53,70,,,,73,,62,53,53,6,,,39,53',
'53,76,,33,6,87,74,86,87,,210,79,,210,76,76,76,76,,6,,,79,,,39,,14,6',
',6,9,14,,,,69,,,,154,,,154,,,154,24,154,,,,,,12,,12,,39,,84,,45,,,6',
',6,86,,14,14,87,33,,,33,,,208,208,208,60,,,,,6,210,,,212,39,,212,,,212',
'53,212,,70,,,53,84,26,,,53,53,76,70,,,,53,,6,39,,154,,154,,154,33,154',
',,,,33,53,,,,,,,60,33,33,,6,35,149,33,33,149,154,49,,,,,53,,,,,6,,,60',
'30,,,,,,,212,,212,53,212,,212,30,23,,,53,53,39,,,,,,,,,23,,60,,,,,212',
',,,,82,82,53,,53,120,,,,120,,102,39,,34,53,53,,,,34,,,,,6,6,6,,,79,',
',,,34,,,,79,33,,,,34,34,34,,34,34,34,33,33,,53,53,,,33,,102,102,,102',
',,,,149,,149,,,,34,33,82,120,82,34,34,82,82,34,34,53,,,39,,79,,,37,',
',6,,33,,,,,,,14,,,14,,,,60,,53,,45,33,,,6,,,,,33,33,82,87,6,6,6,6,,6',
'53,,,34,,53,6,53,34,34,34,34,34,,,149,149,33,70,6,39,60,60,53,70,157',
'157,157,33,,,208,208,,208,208,,208,60,,,,,,60,,,,56,6,6,6,6,,56,,,,',
',6,,,60,,,,33,33,56,149,,149,82,,,,,56,56,56,,56,,,102,,,,156,,,156',
',,,,,33,34,34,34,34,34,34,34,,149,56,34,34,34,,56,56,,,56,,,,,,34,,',
',33,,157,157,157,157,,157,,,,,,,,,14,,,,,33,,,,,33,,33,,,,34,82,14,',
'82,,82,34,,,34,,,56,208,208,208,208,56,56,56,56,56,156,,157,157,157',
'157,34,,,,34,,,157,34,34,,,102,14,,,,,102,,,,,102,,34,,,,,,102,14,,',
'34,,60,,,14,82,,,,,34,34,34,,,,,,208,,,,,,34,,34,65,,,,14,,65,60,,,',
',,,,,,56,56,56,56,56,56,56,,,,56,56,56,,,,,65,65,65,,102,,,56,102,,60',
',,,82,,,,,,14,14,82,82,,,65,,159,,159,,,,,,65,,,65,,,,56,,,156,,,156',
'56,14,156,56,156,82,,,82,,,,,,,,,34,,,,,56,,,,56,,82,,14,56,60,82,,',
'82,,,,65,102,102,,,,60,,,65,,14,82,,,,,56,27,,,,,,27,159,,,56,56,56',
'34,60,82,,,,156,34,156,34,156,,156,,,34,,,,,,27,,,34,,,,,,,,,,,156,82',
',,,,,,,,,,27,,,,,,,,,,27,,,,,,,,65,,,,,34,,,34,,,,,,,,34,,,,,,,,65,',
',,34,,,,,,34,,,,,,,,,,,,27,159,,159,56,159,,,,27,,,34,,,,,,34,34,,,',
',,,,34,34,,,,,34,34,,,,159,,159,82,,65,,,,65,,,,65,65,,,,,,56,,,,,,34',
',,56,65,,,,,,,34,,,65,,,,56,,,,,,66,82,65,65,,,66,,27,,27,159,,27,,65',
',65,27,,,,,,,159,,159,,159,,,27,,66,66,66,,,,56,,,56,34,,,,,,34,56,',
',159,34,34,,,,66,,34,56,,,,,,56,66,,,66,,,,,,34,,,,,,,,,,,,,,56,,,,27',
',56,56,27,34,,,,27,,56,56,,,,,56,56,,,,,,34,,,66,,,,,34,34,,27,66,,',
',,,,,,,,27,27,,,,,,,,,34,,34,,,,,,,,,,,34,34,,,,,65,,,,,,,65,,,,,,,',
'65,,,,,,,,,,,,,34,,,,,34,34,,,34,,,56,,,,,,56,66,,,,56,56,,,,,,56,,',
',,,34,,,,,,65,66,,65,,56,,,,,,,,,,,,,34,,,,,34,,,,,56,,,,,,,,,,,,,,',
',34,,,56,,34,,34,,65,,56,56,,,,,,,,,,66,34,,,66,,27,,66,66,,,,,56,,56',
',,,,,,,,66,,56,56,,,,,,,66,,,,65,,,,,,,,66,66,,65,,,,,,,,,,66,,66,,',
',56,56,,,,,,,,,27,,,27,,,,,,,,,38,,,,,,38,,,56,,,,,,,,,,65,,,,,,,,,',
',65,65,,,38,38,38,65,56,,,27,,,,,,27,,,,,,,,,27,27,,56,38,,27,27,56',
',56,,,,38,,,,,,,65,,,,,56,,,,,,,,,,,,,,65,,,,,,,,65,65,,,,,,,,,,,,,',
',,,,,38,,,,,,66,65,,38,,,,66,,,,,65,,,66,,,,,,,,,,,,,,,,27,,,,,,,,,',
',27,27,,,65,,,27,,65,65,,,65,,,,,,,,,,,27,,,,66,,,66,,,,,,,,,65,,,,',
',,27,38,,38,,,38,,,,,38,,,,,,65,,27,,,65,,,38,,27,27,,,,,,66,,,,,,,',
',65,,,,,65,,65,,,,27,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,66,,,,38,,,,38',
',,66,38,38,,,,,27,27,,,27,,,,,,,38,,,,,,,,,,38,,,,,,,,,,27,,38,38,,',
',,,,,,,,,38,,38,,66,,,,,,,,,,27,66,66,,,,,,66,,,,,,,,,,,,,27,,,,,27',
',27,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,66,,,40,,,,,66,66,,,40,40',
'40,,,,,,,,,,,40,40,,40,,,,,,,66,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,38,,,66,,,,38,66,66,,,66,,,38,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,',
',,,,,,,,,,,,,,,,,,66,,,,,66,,38,,,38,,,,,,,,,,,,,,,,66,,,,,66,,66,,',
',,,,,,,,,,,,,,,,,,,,,,,,38,,,40,40,,38,40,40,,,,40,,,38,38,,,,,38,38',
',,40,,,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,,,38,,40,,,,,,,,40,38,,,,,,40,,,40,,,,,,,40,,40,,,40,40,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,38,,,40,,40,,,,40,40,38,38,,,,,38,38,,,,,,',
',,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,38,,,,,,,,38',
'38,,,,,40,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,38,,,,,,,,,,,,40,,40,40,40',
',,,,,,,,,,,,,,,,,38,,,,,38,38,,,38,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,38',
',,,,40,,,,,,,,,,40,,,,,,,,,38,,,,,38,,,,,,,,,,,,,,,,,,,,,38,,,,40,38',
',38,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,40,40,40,,,40,,,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,40',
',,40,,,,,,,,,,,,,,,40,,,,,40,,,,,40,,,40,,,,,,,,,,,,,,,,40,,,,,,,,,',
',,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,40,,,,,,,',
',,,,,40,40,40,40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3501, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   259,    -1,   230,   nil,    37,    -2,   120,    62,    68,
    86,   209,  -277,  -203,   401,  -545,  -524,  -638,  -668,   nil,
  -360,    10,   156,   -13,   -71,    94,   -12,  1421,  -136,   -59,
   -28,    26,  -154,   163,   907,  -204,  -430,    -9,  2030,   -20,
  2462,   -25,  -443,   nil,  -489,   -27,   nil,   nil,   241,  -199,
    83,  -231,  -401,    15,  -250,   nil,  1076,   100,    95,    44,
   537,   nil,   -34,    64,  -280,  1279,  1633,  -493,  -219,   -62,
    14,   nil,   nil,    25,    41,  -194,  -117,    31,   nil,    -4,
   182,   nil,   672,  -118,    28,  -437,    31,   -16,  -272,  -281,
  -486,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   161,   nil,   351,  -105,   -53,   nil,   184,   nil,  -328,  -697,
   nil,  -674,   nil,   nil,   nil,  -346,   nil,   191,   nil,  -355,
     3,   nil,   nil,  -567,   198,  -106,   218,   220,   -57,   228,
   228,   220,  -478,   -69,  -476,  -654,   244,  -304,  -240,  -748,
  -467,  -743,   nil,   nil,   nil,   nil,   nil,   nil,  -738,    88,
  -475,  -691,  -666,   nil,  -248,  -444,   384,   133,  -661,   602,
  -699,  -647,  -550,   nil,  -618,  -773,  -808,  -786,  -180,  -559,
   109,  -390,  -333,   -21,  -186,   nil,   nil,  -108,  -105,   nil,
  -508,   nil,  -320,  -832,  -422,  -533,  -663,   nil,   nil,    98,
     3,    41,    94,    94,  -290,  -252,  -204,   100,   101,   102,
  -582,  -424,  -424,   113,  -563,  -287,   nil,   nil,   196,  -518,
  -281,  -668,  -197,  -512,  -753,   nil,  -650,  -844,   nil,   nil,
  -161,  -475 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   309,     7,   362,   312,
   nil,   nil,   nil,   nil,   554,   nil,   nil,   nil,   nil,   308,
   310,   nil,   nil,   nil,    14,    15,    21,   242,   nil,   nil,
    17,   nil,   436,   243,   340,   nil,   nil,   777,   241,   472,
    24,   nil,   nil,   357,   nil,    25,    26,    27,   nil,   713,
   nil,   nil,   nil,   329,   nil,    28,   326,   451,    35,   nil,
   nil,    37,    40,    39,   nil,   238,   239,   618,   nil,   144,
   459,   143,   146,    90,    91,   nil,   441,   105,    47,    50,
   274,   547,   300,   nil,   452,   nil,   453,   464,   672,   517,
   298,   282,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   283,    65,   nil,    67,   nil,   nil,
    68,   881,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   600,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   287,   276,   721,   849,   609,   882,   748,   582,
   nil,   749,  1025,   919,   570,   nil,   571,   nil,   nil,   572,
   nil,   574,   nil,   827,   nil,   nil,   nil,   580,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   463,   285,   nil,   nil,   691,
   nil,   504,   nil,   nil,   nil,   nil,   nil,    89,    92,    94,
   nil,   nil,   nil,   nil,   nil,   630,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   864,   786,   569,   nil,   573,
   872,   585,   587,   588,   930,   591,   592,   931,   595,   598,
   nil,   303 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_none,
  0, 156, :_reduce_9,
  3, 152, :_reduce_10,
  0, 158, :_reduce_11,
  4, 155, :_reduce_12,
  0, 163, :_reduce_13,
  6, 157, :_reduce_14,
  3, 157, :_reduce_15,
  2, 159, :_reduce_16,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_19,
  2, 164, :_reduce_20,
  1, 165, :_reduce_none,
  1, 165, :_reduce_22,
  0, 176, :_reduce_23,
  4, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  2, 154, :_reduce_28,
  3, 154, :_reduce_29,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  3, 154, :_reduce_32,
  3, 154, :_reduce_33,
  4, 154, :_reduce_34,
  1, 154, :_reduce_none,
  3, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  1, 154, :_reduce_none,
  3, 169, :_reduce_40,
  3, 169, :_reduce_41,
  6, 169, :_reduce_42,
  5, 169, :_reduce_43,
  5, 169, :_reduce_44,
  5, 169, :_reduce_45,
  5, 169, :_reduce_46,
  3, 169, :_reduce_47,
  1, 177, :_reduce_48,
  1, 177, :_reduce_none,
  1, 175, :_reduce_none,
  3, 175, :_reduce_51,
  3, 175, :_reduce_52,
  3, 175, :_reduce_53,
  2, 175, :_reduce_54,
  1, 175, :_reduce_none,
  1, 168, :_reduce_56,
  0, 188, :_reduce_57,
  0, 189, :_reduce_58,
  4, 186, :_reduce_59,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 191, :_reduce_none,
  4, 191, :_reduce_63,
  0, 199, :_reduce_64,
  4, 196, :_reduce_65,
  1, 198, :_reduce_66,
  2, 190, :_reduce_67,
  3, 190, :_reduce_68,
  4, 190, :_reduce_69,
  5, 190, :_reduce_70,
  4, 190, :_reduce_71,
  5, 190, :_reduce_72,
  2, 190, :_reduce_73,
  2, 190, :_reduce_74,
  2, 190, :_reduce_75,
  2, 190, :_reduce_76,
  2, 190, :_reduce_77,
  1, 170, :_reduce_none,
  3, 170, :_reduce_79,
  1, 204, :_reduce_none,
  3, 204, :_reduce_81,
  1, 203, :_reduce_82,
  2, 203, :_reduce_83,
  3, 203, :_reduce_84,
  5, 203, :_reduce_85,
  2, 203, :_reduce_86,
  4, 203, :_reduce_87,
  2, 203, :_reduce_88,
  4, 203, :_reduce_89,
  1, 203, :_reduce_90,
  3, 203, :_reduce_91,
  1, 207, :_reduce_none,
  3, 207, :_reduce_93,
  2, 206, :_reduce_94,
  3, 206, :_reduce_95,
  1, 209, :_reduce_96,
  3, 209, :_reduce_97,
  1, 208, :_reduce_98,
  1, 208, :_reduce_99,
  4, 208, :_reduce_100,
  3, 208, :_reduce_101,
  3, 208, :_reduce_102,
  3, 208, :_reduce_103,
  3, 208, :_reduce_104,
  2, 208, :_reduce_105,
  1, 208, :_reduce_106,
  1, 172, :_reduce_107,
  1, 172, :_reduce_108,
  4, 172, :_reduce_109,
  3, 172, :_reduce_110,
  3, 172, :_reduce_111,
  3, 172, :_reduce_112,
  3, 172, :_reduce_113,
  2, 172, :_reduce_114,
  1, 172, :_reduce_115,
  1, 212, :_reduce_116,
  1, 212, :_reduce_none,
  2, 213, :_reduce_118,
  1, 213, :_reduce_119,
  3, 213, :_reduce_120,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_124,
  1, 214, :_reduce_125,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 166, :_reduce_128,
  1, 166, :_reduce_none,
  1, 167, :_reduce_130,
  0, 220, :_reduce_131,
  4, 167, :_reduce_132,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  3, 185, :_reduce_205,
  3, 185, :_reduce_206,
  6, 185, :_reduce_207,
  5, 185, :_reduce_208,
  5, 185, :_reduce_209,
  5, 185, :_reduce_210,
  5, 185, :_reduce_211,
  0, 226, :_reduce_212,
  5, 185, :_reduce_213,
  3, 185, :_reduce_214,
  3, 185, :_reduce_215,
  3, 185, :_reduce_216,
  3, 185, :_reduce_217,
  3, 185, :_reduce_218,
  3, 185, :_reduce_219,
  3, 185, :_reduce_220,
  3, 185, :_reduce_221,
  3, 185, :_reduce_222,
  4, 185, :_reduce_223,
  2, 185, :_reduce_224,
  2, 185, :_reduce_225,
  3, 185, :_reduce_226,
  3, 185, :_reduce_227,
  3, 185, :_reduce_228,
  3, 185, :_reduce_229,
  1, 185, :_reduce_none,
  3, 185, :_reduce_231,
  3, 185, :_reduce_232,
  3, 185, :_reduce_233,
  3, 185, :_reduce_234,
  3, 185, :_reduce_235,
  2, 185, :_reduce_236,
  2, 185, :_reduce_237,
  3, 185, :_reduce_238,
  3, 185, :_reduce_239,
  3, 185, :_reduce_240,
  3, 185, :_reduce_241,
  3, 185, :_reduce_242,
  6, 185, :_reduce_243,
  1, 185, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  3, 223, :_reduce_249,
  3, 223, :_reduce_250,
  1, 227, :_reduce_251,
  1, 228, :_reduce_none,
  2, 228, :_reduce_253,
  4, 228, :_reduce_254,
  2, 228, :_reduce_255,
  1, 221, :_reduce_none,
  3, 221, :_reduce_257,
  3, 232, :_reduce_258,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  2, 180, :_reduce_263,
  4, 180, :_reduce_264,
  2, 180, :_reduce_265,
  1, 202, :_reduce_266,
  2, 202, :_reduce_267,
  2, 202, :_reduce_268,
  4, 202, :_reduce_269,
  1, 202, :_reduce_270,
  0, 236, :_reduce_271,
  2, 195, :_reduce_272,
  2, 235, :_reduce_273,
  2, 234, :_reduce_274,
  1, 234, :_reduce_none,
  1, 229, :_reduce_276,
  2, 229, :_reduce_277,
  3, 229, :_reduce_278,
  4, 229, :_reduce_279,
  1, 174, :_reduce_280,
  1, 174, :_reduce_281,
  3, 173, :_reduce_282,
  4, 173, :_reduce_283,
  2, 173, :_reduce_284,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_295,
  0, 271, :_reduce_296,
  4, 224, :_reduce_297,
  0, 272, :_reduce_298,
  3, 224, :_reduce_299,
  0, 273, :_reduce_300,
  4, 224, :_reduce_301,
  3, 224, :_reduce_302,
  3, 224, :_reduce_303,
  2, 224, :_reduce_304,
  0, 274, :_reduce_305,
  4, 224, :_reduce_306,
  0, 275, :_reduce_307,
  4, 224, :_reduce_308,
  1, 224, :_reduce_309,
  4, 224, :_reduce_310,
  3, 224, :_reduce_311,
  1, 224, :_reduce_312,
  5, 224, :_reduce_313,
  4, 224, :_reduce_314,
  3, 224, :_reduce_315,
  2, 224, :_reduce_316,
  1, 224, :_reduce_none,
  2, 224, :_reduce_318,
  2, 224, :_reduce_319,
  6, 224, :_reduce_320,
  6, 224, :_reduce_321,
  4, 224, :_reduce_322,
  4, 224, :_reduce_323,
  5, 224, :_reduce_324,
  4, 224, :_reduce_325,
  6, 224, :_reduce_326,
  0, 276, :_reduce_327,
  0, 277, :_reduce_328,
  7, 224, :_reduce_329,
  0, 278, :_reduce_330,
  0, 279, :_reduce_331,
  0, 280, :_reduce_332,
  9, 224, :_reduce_333,
  0, 281, :_reduce_334,
  0, 282, :_reduce_335,
  6, 224, :_reduce_336,
  0, 283, :_reduce_337,
  0, 284, :_reduce_338,
  7, 224, :_reduce_339,
  0, 285, :_reduce_340,
  0, 286, :_reduce_341,
  9, 224, :_reduce_342,
  1, 224, :_reduce_343,
  1, 224, :_reduce_344,
  1, 224, :_reduce_345,
  1, 224, :_reduce_346,
  1, 179, :_reduce_347,
  1, 246, :_reduce_none,
  1, 252, :_reduce_none,
  1, 255, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 261, :_reduce_none,
  1, 263, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 291, :_reduce_none,
  1, 161, :_reduce_none,
  1, 292, :_reduce_none,
  1, 247, :_reduce_none,
  1, 201, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 253, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 254, :_reduce_none,
  5, 254, :_reduce_373,
  1, 256, :_reduce_none,
  2, 256, :_reduce_375,
  1, 262, :_reduce_none,
  1, 262, :_reduce_377,
  1, 293, :_reduce_none,
  3, 293, :_reduce_379,
  1, 296, :_reduce_380,
  3, 296, :_reduce_381,
  1, 295, :_reduce_382,
  4, 295, :_reduce_383,
  6, 295, :_reduce_384,
  3, 295, :_reduce_385,
  5, 295, :_reduce_386,
  2, 295, :_reduce_387,
  4, 295, :_reduce_388,
  1, 295, :_reduce_389,
  3, 295, :_reduce_390,
  4, 297, :_reduce_391,
  2, 297, :_reduce_392,
  2, 297, :_reduce_393,
  1, 297, :_reduce_394,
  2, 302, :_reduce_395,
  1, 302, :_reduce_none,
  6, 303, :_reduce_397,
  8, 303, :_reduce_398,
  4, 303, :_reduce_399,
  6, 303, :_reduce_400,
  4, 303, :_reduce_401,
  2, 303, :_reduce_402,
  6, 303, :_reduce_403,
  2, 303, :_reduce_404,
  4, 303, :_reduce_405,
  6, 303, :_reduce_406,
  2, 303, :_reduce_407,
  4, 303, :_reduce_408,
  2, 303, :_reduce_409,
  4, 303, :_reduce_410,
  1, 303, :_reduce_411,
  1, 307, :_reduce_412,
  1, 307, :_reduce_413,
  3, 308, :_reduce_414,
  1, 308, :_reduce_415,
  4, 308, :_reduce_416,
  1, 309, :_reduce_none,
  4, 309, :_reduce_418,
  1, 310, :_reduce_419,
  3, 310, :_reduce_420,
  1, 311, :_reduce_421,
  1, 311, :_reduce_none,
  0, 315, :_reduce_423,
  0, 316, :_reduce_424,
  4, 251, :_reduce_425,
  4, 313, :_reduce_426,
  1, 313, :_reduce_427,
  3, 314, :_reduce_428,
  3, 314, :_reduce_429,
  3, 318, :_reduce_430,
  2, 192, :_reduce_431,
  4, 192, :_reduce_432,
  5, 192, :_reduce_433,
  5, 192, :_reduce_434,
  0, 321, :_reduce_435,
  3, 250, :_reduce_436,
  4, 250, :_reduce_437,
  4, 250, :_reduce_438,
  3, 250, :_reduce_439,
  3, 250, :_reduce_440,
  3, 250, :_reduce_441,
  2, 250, :_reduce_442,
  1, 250, :_reduce_443,
  4, 250, :_reduce_444,
  0, 322, :_reduce_445,
  4, 249, :_reduce_446,
  0, 323, :_reduce_447,
  4, 249, :_reduce_448,
  0, 324, :_reduce_449,
  0, 325, :_reduce_450,
  4, 197, :_reduce_451,
  0, 326, :_reduce_452,
  0, 327, :_reduce_453,
  4, 319, :_reduce_454,
  0, 329, :_reduce_455,
  6, 260, :_reduce_456,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  6, 160, :_reduce_459,
  0, 160, :_reduce_460,
  1, 330, :_reduce_461,
  1, 330, :_reduce_none,
  1, 330, :_reduce_none,
  2, 331, :_reduce_464,
  1, 331, :_reduce_none,
  2, 162, :_reduce_466,
  1, 162, :_reduce_none,
  1, 237, :_reduce_468,
  1, 237, :_reduce_469,
  1, 237, :_reduce_none,
  1, 238, :_reduce_471,
  1, 333, :_reduce_472,
  1, 333, :_reduce_none,
  2, 333, :_reduce_474,
  3, 334, :_reduce_475,
  1, 334, :_reduce_476,
  3, 239, :_reduce_477,
  3, 240, :_reduce_478,
  3, 241, :_reduce_479,
  3, 241, :_reduce_480,
  1, 338, :_reduce_481,
  3, 338, :_reduce_482,
  1, 339, :_reduce_none,
  2, 339, :_reduce_484,
  3, 243, :_reduce_485,
  0, 342, :_reduce_486,
  4, 243, :_reduce_487,
  1, 341, :_reduce_488,
  3, 341, :_reduce_489,
  3, 242, :_reduce_490,
  3, 242, :_reduce_491,
  3, 244, :_reduce_492,
  3, 244, :_reduce_493,
  1, 343, :_reduce_494,
  3, 343, :_reduce_495,
  1, 344, :_reduce_496,
  3, 344, :_reduce_497,
  1, 335, :_reduce_498,
  2, 335, :_reduce_499,
  1, 336, :_reduce_500,
  2, 336, :_reduce_501,
  1, 337, :_reduce_502,
  2, 337, :_reduce_503,
  1, 340, :_reduce_504,
  0, 346, :_reduce_505,
  3, 340, :_reduce_506,
  0, 347, :_reduce_507,
  4, 340, :_reduce_508,
  1, 345, :_reduce_509,
  1, 345, :_reduce_510,
  1, 345, :_reduce_511,
  1, 345, :_reduce_none,
  2, 218, :_reduce_513,
  1, 218, :_reduce_514,
  1, 348, :_reduce_none,
  1, 348, :_reduce_none,
  1, 348, :_reduce_none,
  1, 348, :_reduce_none,
  3, 219, :_reduce_519,
  1, 332, :_reduce_none,
  2, 332, :_reduce_521,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 211, :_reduce_531,
  1, 211, :_reduce_532,
  1, 211, :_reduce_533,
  1, 211, :_reduce_534,
  1, 211, :_reduce_535,
  1, 211, :_reduce_536,
  1, 211, :_reduce_537,
  1, 245, :_reduce_538,
  1, 245, :_reduce_539,
  1, 178, :_reduce_540,
  1, 178, :_reduce_541,
  1, 183, :_reduce_542,
  1, 183, :_reduce_543,
  0, 349, :_reduce_544,
  4, 264, :_reduce_545,
  1, 264, :_reduce_546,
  3, 268, :_reduce_547,
  0, 351, :_reduce_548,
  3, 268, :_reduce_549,
  4, 350, :_reduce_550,
  2, 350, :_reduce_551,
  2, 350, :_reduce_552,
  1, 350, :_reduce_none,
  2, 353, :_reduce_554,
  0, 353, :_reduce_555,
  6, 317, :_reduce_556,
  8, 317, :_reduce_557,
  4, 317, :_reduce_558,
  6, 317, :_reduce_559,
  4, 317, :_reduce_560,
  6, 317, :_reduce_561,
  2, 317, :_reduce_562,
  4, 317, :_reduce_563,
  6, 317, :_reduce_564,
  2, 317, :_reduce_565,
  4, 317, :_reduce_566,
  2, 317, :_reduce_567,
  4, 317, :_reduce_568,
  1, 317, :_reduce_569,
  0, 317, :_reduce_570,
  1, 312, :_reduce_571,
  1, 312, :_reduce_572,
  1, 312, :_reduce_573,
  1, 312, :_reduce_574,
  1, 294, :_reduce_none,
  1, 294, :_reduce_576,
  1, 355, :_reduce_none,
  1, 356, :_reduce_none,
  3, 356, :_reduce_579,
  1, 304, :_reduce_580,
  3, 304, :_reduce_581,
  1, 357, :_reduce_none,
  2, 358, :_reduce_583,
  1, 358, :_reduce_584,
  2, 359, :_reduce_585,
  1, 359, :_reduce_586,
  1, 298, :_reduce_none,
  3, 298, :_reduce_588,
  1, 352, :_reduce_none,
  3, 352, :_reduce_590,
  1, 360, :_reduce_none,
  1, 360, :_reduce_none,
  2, 299, :_reduce_593,
  1, 299, :_reduce_594,
  3, 361, :_reduce_595,
  3, 362, :_reduce_596,
  1, 305, :_reduce_597,
  3, 305, :_reduce_598,
  1, 354, :_reduce_599,
  3, 354, :_reduce_600,
  1, 363, :_reduce_none,
  1, 363, :_reduce_none,
  2, 306, :_reduce_603,
  1, 306, :_reduce_604,
  1, 364, :_reduce_none,
  1, 364, :_reduce_none,
  2, 301, :_reduce_607,
  2, 300, :_reduce_608,
  0, 300, :_reduce_609,
  1, 269, :_reduce_none,
  0, 365, :_reduce_611,
  4, 269, :_reduce_612,
  1, 248, :_reduce_613,
  2, 248, :_reduce_none,
  1, 231, :_reduce_none,
  3, 231, :_reduce_616,
  3, 366, :_reduce_617,
  2, 366, :_reduce_618,
  4, 366, :_reduce_619,
  2, 366, :_reduce_620,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 182, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 184, :_reduce_none,
  1, 184, :_reduce_none,
  2, 205, :_reduce_none,
  2, 181, :_reduce_none,
  0, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 265, :_reduce_645,
  1, 265, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_648,
  0, 151, :_reduce_649 ]

racc_reduce_n = 650

racc_shift_n = 1094

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLOWEST => 143,
  :tEQL => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLOWEST",
  "tEQL",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_43(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_54(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_57(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_59(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_64(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_65(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_66(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_67(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_68(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_69(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_70(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_71(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_72(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_73(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_74(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_75(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_76(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 78 omitted

def _reduce_79(val, _values, result)
                      result = val[1]

    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_82(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_83(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_84(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_85(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_86(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_87(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_88(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_89(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_90(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_91(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = val[1]

    result
end

def _reduce_94(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_95(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_96(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_97(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_102(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_107(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_109(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_110(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_111(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_112(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_113(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_114(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_116(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 117 omitted

def _reduce_118(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_119(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_120(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_125(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 126 omitted

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

def _reduce_205(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_211(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_212(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_213(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")


    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_235(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_236(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_242(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_243(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_258(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = args val

    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_267(val, _values, result)
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_270(val, _values, result)
                      result = call_args val

    result
end

def _reduce_271(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_272(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_273(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_274(val, _values, result)
                      result = val[1]

    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_277(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_278(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_279(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_283(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_284(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_296(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_298(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_299(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_301(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_303(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_304(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_305(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_306(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_308(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_310(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_311(val, _values, result)
                      result = new_yield

    result
end

def _reduce_312(val, _values, result)
                      result = new_yield

    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_314(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_315(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_316(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 317 omitted

def _reduce_318(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_319(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_325(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_326(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_329(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_330(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_331(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_334(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_335(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_336(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_338(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_339(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_340(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_341(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_342(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_343(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_346(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_347(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[1]

    result
end

def _reduce_380(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_381(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_382(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_383(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_385(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_386(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_387(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_388(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_389(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_390(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_391(val, _values, result)
                      result = call_args val

    result
end

def _reduce_392(val, _values, result)
                      result = call_args val

    result
end

def _reduce_393(val, _values, result)
                      result = call_args val

    result
end

def _reduce_394(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
 result = 0
    result
end

def _reduce_413(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_416(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      result = args val

    result
end

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_424(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_425(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_426(val, _values, result)
                      result = args val

    result
end

def _reduce_427(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_428(val, _values, result)
                      result = val[1]

    result
end

def _reduce_429(val, _values, result)
                      result = val[1]

    result
end

def _reduce_430(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_431(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_432(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_433(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_436(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_442(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_443(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_444(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_447(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_448(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_449(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_450(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_451(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_452(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_453(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_454(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_455(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_456(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 457 omitted

# reduce 458 omitted

def _reduce_459(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_460(val, _values, result)
                      result = nil

    result
end

def _reduce_461(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = val[1]

    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_469(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_472(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_475(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_476(val, _values, result)
                      result = new_string val

    result
end

def _reduce_477(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_478(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_479(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_480(val, _values, result)
                      result = val[1]

    result
end

def _reduce_481(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_482(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_485(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_486(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_487(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_488(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_489(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_490(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_491(val, _values, result)
                      result = val[1]

    result
end

def _reduce_492(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_493(val, _values, result)
                      result = val[1]

    result
end

def _reduce_494(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_495(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_496(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_497(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_498(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_499(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_500(val, _values, result)
                      result = nil

    result
end

def _reduce_501(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_502(val, _values, result)
                      result = nil

    result
end

def _reduce_503(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_504(val, _values, result)
                      result = new_string val

    result
end

def _reduce_505(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_506(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_507(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_508(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_509(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_510(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_511(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_514(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

def _reduce_531(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_536(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_537(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_538(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_539(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_540(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_541(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_542(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_543(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_544(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_545(val, _values, result)
                      result = val[2]

    result
end

def _reduce_546(val, _values, result)
                      result = nil

    result
end

def _reduce_547(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_548(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_549(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_550(val, _values, result)
                      result = args val

    result
end

def _reduce_551(val, _values, result)
                      result = args val

    result
end

def _reduce_552(val, _values, result)
                      result = args val

    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]

    result
end

def _reduce_555(val, _values, result)
                      result = nil

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_573(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_574(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      result = val[1]

    result
end

def _reduce_580(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_581(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_584(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_585(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_586(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      result = args val

    result
end

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_594(val, _values, result)
                      result = :"**"

    result
end

def _reduce_595(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_596(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_597(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_598(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_599(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_600(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_604(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 605 omitted

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_608(val, _values, result)
                      result = val[1]

    result
end

def _reduce_609(val, _values, result)
                      result = nil

    result
end

# reduce 610 omitted

def _reduce_611(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_612(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_613(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 614 omitted

# reduce 615 omitted

def _reduce_616(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_617(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_618(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_619(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value).line sym.line

    result
end

def _reduce_620(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

def _reduce_645(val, _values, result)
 yyerrok
    result
end

# reduce 646 omitted

# reduce 647 omitted

def _reduce_648(val, _values, result)
 yyerrok
    result
end

def _reduce_649(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
