#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby23Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-529,312,85,86,87,12,78,-529,-529,-529,79,80,-529,-529,-529,83,-529',
'81,82,84,33,34,76,77,-529,285,-529,-529,-529,88,31,30,116,115,117,118',
'-529,-529,22,-529,-529,-529,-529,-529,11,49,314,13,120,119,121,110,60',
'112,111,113,-101,114,122,123,739,106,107,-100,45,46,44,-529,-529,-529',
'-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,236,-108,-529',
'-529,-529,43,-529,-529,36,-107,-529,62,63,-529,-529,64,-529,38,-529',
'-103,-529,48,-529,-529,-529,-529,-529,-529,-529,23,-529,287,-529,-529',
'103,95,97,98,99,101,-529,-109,-101,96,104,-529,-529,-529,-529,-100,-529',
'66,-529,-102,93,100,102,-529,-303,108,109,-109,-529,-112,-529,-303,-303',
'-303,762,-113,128,-303,-303,-115,-303,127,-110,-101,602,235,-101,648',
'225,226,-100,-114,-103,-100,774,830,602,-114,775,602,-303,-303,-101',
'-303,-303,-303,-303,-303,-115,-100,285,-107,-99,651,-112,859,-111,285',
'128,-113,-98,236,602,127,-110,-624,-102,-103,602,829,-103,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,736,-103',
'-303,-303,-303,647,674,-100,-625,-540,-303,225,226,-303,-111,885,-102',
'609,-303,-102,-303,-108,-303,-303,-303,-303,-303,-303,-303,128,-303',
'650,-303,236,127,-102,-109,-624,-112,-106,-625,-109,-101,-112,-113,-303',
'-303,-628,-303,-113,-303,-105,287,128,-628,-628,-628,-303,127,287,-628',
'-628,-303,-628,-113,128,-114,-107,128,524,127,-114,-628,127,-103,858',
'-102,-115,732,-104,-107,632,-115,-628,-628,-107,-628,-628,-628,-628',
'-628,128,-624,-110,965,830,127,128,-110,285,95,236,127,225,226,632,-536',
'728,96,632,730,731,-622,-536,-628,-628,-628,-628,-628,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-111,829,-628,-628,-628,-111,675,-108',
'632,669,-628,848,-108,-628,634,633,630,849,-628,808,-628,236,-628,-628',
'-628,-628,-628,-628,-628,724,-628,-628,-628,106,107,702,-435,-529,634',
'633,630,-621,634,633,-529,-628,-628,-303,-102,-622,-628,792,-93,-529',
'-303,-303,-303,-628,287,-303,-303,-303,-628,-303,-111,236,721,-112,-79',
'634,633,-622,231,-303,-303,-303,717,-109,911,281,-628,-212,716,-303',
'-303,918,-303,-303,-303,-303,-303,-533,231,554,-526,236,-532,705,-533',
'613,632,-526,-529,-532,106,107,-621,233,611,-93,-526,236,108,109,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-621',
'822,-303,-303,-303,-628,824,-303,912,232,-303,-114,-628,-303,-303,-109',
'-303,-624,-303,-278,-303,-628,-303,-303,-303,-303,-303,-303,-303,232',
'-303,-526,-303,634,633,635,236,-115,582,-628,579,578,577,587,580,-303',
'-303,-303,-303,233,-303,669,-303,821,590,108,109,-303,-303,-112,236',
'632,-303,128,-113,-303,-303,-303,127,587,-628,-303,-303,587,-303,582',
'585,579,578,577,590,580,478,236,590,595,594,598,597,627,-541,-106,668',
'-103,-303,-303,628,-303,-303,-303,-303,-303,582,-303,579,578,577,-115',
'580,-112,-303,-110,668,598,597,-625,686,598,597,-303,256,591,634,633',
'795,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,231,-115,-303,-303,-303,632,674,662,591,-108,-303,-110,591,-303',
'878,-101,660,256,-303,632,-303,256,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-110,-303,231,128,231,231,231,917,127,230,1013,475,1041,777',
'-303,-303,-526,-104,228,-303,476,1039,779,-526,-526,-526,-303,256,-526',
'-526,-526,-303,-526,-113,232,634,633,640,-531,-534,-526,-537,-526,-526',
'-526,-531,-534,-304,-537,634,633,652,-526,-526,-304,-526,-526,-526,-526',
'-526,-212,-303,679,-304,290,231,667,232,-303,232,232,232,1035,-625,-540',
'666,582,-303,579,578,577,779,580,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,-526,236,-526,-526,-526,-526,-105,-526',
'-526,-526,728,-526,659,730,-526,-526,-304,-526,748,-526,-98,-526,-114',
'-526,-526,-526,-526,-526,-526,-526,-303,-526,632,-526,232,637,-107,728',
'658,582,727,579,578,577,587,580,-526,-526,-526,-526,-535,-526,934,-526',
'231,590,-276,-535,-526,-628,716,1035,656,-526,128,-526,-628,-628,-628',
'127,779,-628,-628,-628,649,-628,-304,585,273,274,225,226,-276,-304,-628',
'-628,-628,-628,598,597,-538,939,-304,634,633,-628,-628,-538,-628,-628',
'-628,-628,-628,646,-539,128,-538,643,231,-294,127,-539,944,272,271,541',
'-294,-541,236,232,-539,1044,591,236,539,-294,-628,-628,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,739,-304,-628,-628,-628',
'231,823,-628,728,947,-628,730,551,-628,-628,-538,-628,949,-628,-99,-628',
'476,-628,-628,-628,-628,-628,-628,-628,-539,-628,-628,-628,232,-294',
'-108,951,582,808,579,578,577,587,580,-347,-628,-628,-628,-628,424,-628',
'-347,-628,590,426,425,256,-628,-628,953,-347,953,-628,236,-111,-628',
'-628,-628,881,885,232,-628,-628,639,-628,585,598,597,225,226,-100,881',
'885,-628,595,594,598,597,253,225,226,959,255,254,-628,-628,-109,-628',
'-628,-628,-628,-628,131,132,133,134,135,724,582,-347,579,578,577,582',
'580,579,578,577,724,580,591,724,236,724,236,-628,-628,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,977,-279,-628,-628,-628',
'615,675,748,614,415,-628,978,748,-628,739,981,751,984,-628,986,-628',
'958,-628,-628,-628,-628,-628,-628,-628,988,-628,-628,-628,1006,236,579',
'578,577,582,580,579,578,577,256,580,-628,-628,-650,-628,990,-628,609',
'236,1002,-650,-650,-650,-628,1003,-650,-650,-650,-628,-650,-111,582',
'256,579,578,577,587,580,-650,-650,549,253,748,545,290,255,254,590,236',
'-650,-650,751,-650,-650,-650,-650,-650,293,1015,582,542,579,578,577',
'1006,580,579,578,577,585,580,535,582,534,579,578,577,587,580,256,598',
'597,131,132,133,134,135,724,590,724,786,-650,236,-312,-78,266,267,748',
'-650,1033,-312,-312,-312,290,-650,-312,-312,-312,524,-312,585,253,522',
'259,591,255,254,251,252,-312,-312,598,597,1036,848,-650,-650,519,290',
'-312,-312,509,-312,-312,-312,-312,-312,906,907,-650,235,908,122,123',
'-650,131,132,133,134,135,1042,-650,480,1045,953,591,-650,953,953,1050',
'-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312',
'479,256,-312,-312,-312,1015,477,-312,427,293,-312,422,739,-312,-312',
'1059,-312,1061,-312,1063,-312,1065,-312,-312,-312,-312,-312,-312,-312',
'1065,-312,405,-312,253,402,721,400,255,254,251,252,397,373,236,339,-312',
'-312,-630,-312,1015,-312,724,724,338,-630,-630,-630,-312,276,-630,-630',
'-630,-312,-630,256,131,132,133,134,135,227,-625,-630,-630,-630,-630',
'-624,236,224,223,266,267,222,-630,-630,953,-630,-630,-630,-630,-630',
'582,1015,579,578,577,253,580,259,1088,255,254,251,252,1065,1065,257',
'582,258,579,578,577,1065,580,-630,-630,-630,-630,-630,-630,-630,-630',
'-630,-630,-630,-630,-630,-630,124,748,-630,-630,-630,826,1065,-630,276',
'236,-630,835,837,-630,-630,522,-630,748,-630,524,-630,509,-630,-630',
'-630,-630,-630,-630,-630,509,-630,-630,-630,582,3,579,578,577,587,580',
'809,716,236,-277,797,-630,-630,-630,-630,590,-630,-629,-630,290,796',
'786,290,-630,-629,-629,-629,716,-630,-629,-629,-629,781,-629,256,256',
'724,585,609,724,724,758,-629,-629,-629,-629,595,594,598,597,266,267',
'236,-629,-629,756,-629,-629,-629,-629,-629,582,755,579,578,577,253,580',
'259,754,255,254,251,252,746,744,257,742,258,876,740,236,591,885,-629',
'-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,724',
'748,-629,-629,-629,,,-629,,,-629,,,-629,-629,,-629,,-629,,-629,,-629',
'-629,-629,-629,-629,-629,-629,,-629,-629,-629,582,,579,578,577,587,580',
',,,,,-629,-629,-629,-629,590,-629,-295,-629,,,,,-629,-295,-295,-295',
',-629,-295,-295,-295,256,-295,,,,585,,,,,,-295,-295,-295,595,594,598',
'597,,,,-295,-295,,-295,-295,-295,-295,-295,,,,253,,,,255,254,251,252',
',,,,,,,,,,591,,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,,,-295,-295,-295,,,-295,,,-295,,,-295,-295,,-295,,-295',
',-295,,-295,-295,-295,-295,-295,-295,-295,,-295,,-295,582,,579,578,577',
'587,580,,,,,,-295,-295,-295,-295,590,-295,-650,-295,,,,,-295,-650,-650',
'-650,,-295,-650,-650,-650,,-650,256,,,585,,,,,-650,-650,-650,,,,598',
'597,266,267,,-650,-650,,-650,-650,-650,-650,-650,,,,,,253,,259,,255',
'254,251,252,,,,,,,,,591,,-650,-650,-650,-650,-650,-650,-650,-650,-650',
'-650,-650,-650,-650,-650,,,-650,-650,-650,,,-650,,290,-650,,,-650,-650',
',-650,,-650,,-650,,-650,-650,-650,-650,-650,-650,-650,,-650,-650,-650',
',,,,,,,,,,,,-650,-650,-443,-650,,-650,,,,-443,-443,-443,-650,,-443,-443',
'-443,-650,-443,256,,,,,,,,-443,-443,-443,,,,,,266,267,,-443,-443,,-443',
'-443,-443,-443,-443,,,,,,253,,,,255,254,251,252,,,,,,,,,,,-443,-443',
'-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,,,-443,-443',
'-443,,,-443,,290,-443,,,-443,-443,,-443,,-443,,-443,,-443,-443,-443',
'-443,-443,-443,-443,,-443,-443,-443,,,,,,,,,,,,,-443,-443,,-443,,-443',
'312,85,86,87,12,78,-443,,,79,80,-443,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,663,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,-251,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,',
',79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,663,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,',
',266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271',
'257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274',
'268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
'256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43,',
',36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269',
'264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255',
'254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270',
',,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43,,,36',
',,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103',
'95,97,98,99,101,,,,96,104,236,270,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265',
',-651,-651,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263',
'273,274,268,,264,265,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,,,264,265,,,,,,266,267,,43,,,36,,,62,63,,,64',
',38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,-651,-651,-651,-651,273,274,,,-651,-651,,,,,,266,267,',
'43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23',
'258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,-651,-651,-651,-651,273,274,,,-651',
'-651,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,-651,-651,-651',
'-651,273,274,,,-651,-651,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,256,-651,-651,-651,-651,273,274,,,-651,-651,,,,,,266,267,,43,',
',36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,256,-651,-651,-651,-651,273,274,,,-651,-651',
',,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272',
'271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,-651,-651,,,266,267,,43,,,316,,,62,63,,,64,,38',
'253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,256,-651,-651,-651,-651,273,274,,,-651,-651,,,,,,266,267,,43,',
',36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,316,,,62,63,,,64',
',38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,316,,,62,63,,,64,,38,,,,48,,,',
',,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
'305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,',
'66,,306,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300',
',48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,',
'120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,',
',103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,320,',
',,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,247,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,337,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77',
',,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,128,,,,,127,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'335,,,,,,,,,,,,,,,,,,,,367,,,36,,,62,63,,,64,,38,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62',
'63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,415',
'66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,432,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,432,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302',
',300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,236,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,',
',,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246',
',,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66',
',306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99',
'101,,,,96,104,236,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,992,,,247,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,699,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325',
',,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,537,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,554,,62,63,,,64,,,,,,48,',
',,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,999,,,247,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,',
'247,,,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49',
',,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,992,,,247,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,329,,,120,119,121,616,60,112,111,617,,114,122,123,,106,107',
',,,335,,,,,,,,,,,,,,,,,,,,618,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,616,60,112,111,617,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,618,,,247,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,',
',,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,699,,300',
',48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,',
'247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,415,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325',
',,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',241,,,247,,,62,63,,,64,,699,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,432,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302',
',300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76',
'77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,',
',,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
',49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,801',
',,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115',
'117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,699,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,',
',,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,189,200,190',
'213,186,206,196,195,216,217,211,194,193,188,214,218,219,198,187,201',
'205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184',
'191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170',
',,,,178,189,200,190,213,186,206,196,195,216,217,211,194,193,188,214',
'218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185',
'204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174',
',169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,',
',,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,',
',,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217',
'211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210',
'209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141',
'412,411,140,,413,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213',
'186,206,196,195,216,217,211,194,193,188,214,218,219,198,187,201,205',
'207,199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191',
'182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,',
',,,178,189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218',
'219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204',
'203,,,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,',
',,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,',
',,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,138',
',140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176',
'161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206',
'196,195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199',
'192,,,,208,215,210,382,381,383,380,185,204,203,,,,,,184,191,182,183',
'377,378,379,375,141,112,111,376,,114,,,,,,,173,174,,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,389,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,680,459,,,681',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,892,466,,,893,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',507,459,,,508,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,682,466,,,683,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,455,459,,,456,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,803,459,,,804',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,1069,466,,,1068,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',806,466,,,805,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,709,459,,,710,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,712,466,,,713,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1074,466,,,1075',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,680,459,,,681,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',682,466,,,683,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,1072,459,,,1073,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,462,466,,,461,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,582,177,579,578,577,587,580',
',,,,507,459,,,508,590,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,585,,,175,176,161,162,,,595,594,598,597,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,591,769,459',
',,770,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,',
',,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,582,,579,578,577,587,580,,,771,466,,,772,,,590',
',,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,585,175',
'176,161,162,,,,,,290,598,597,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,582,177,579,578,577,587,580,,,,,,591,,,,590,,,,,170',
',,,582,178,579,578,577,587,580,,,,,,,585,,582,590,579,578,577,587,580',
'595,594,598,597,,,,,582,590,579,578,577,587,580,,585,568,,,,,,,590,595',
'594,598,597,,,585,,,,582,591,579,578,577,587,580,598,597,,,585,,,,,590',
',,,595,594,598,597,,,591,582,,579,578,577,587,580,,,,,585,,,591,582',
'590,579,578,577,587,580,598,597,,,,,,591,582,590,579,578,577,587,580',
',585,,,,,,,,590,,,598,597,,,585,,582,591,579,578,577,587,580,595,594',
'598,597,,,585,,582,590,579,578,577,587,580,595,594,598,597,,,591,,,590',
',,,236,,,585,,,,,591,,,,595,594,598,597,,,585,,,,582,591,579,578,577',
'587,580,598,597,,,,,,,,590,,,,,,,,,,591,,,,,,,,,,,,585,,,591,,,,,,,',
'598,597,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,591' ]
        racc_action_table = arr = ::Array.new(26078, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'113,603,603,603,603,603,603,113,113,113,603,603,113,113,113,603,113',
'603,603,603,603,603,603,603,113,65,113,113,113,603,603,603,603,603,603',
'603,113,113,603,113,113,113,113,113,603,603,603,603,603,603,603,603',
'603,603,603,603,709,603,603,603,571,603,603,842,603,603,603,113,113',
'113,113,113,113,113,113,113,113,113,113,113,113,768,365,113,113,113',
'603,113,113,603,364,113,603,603,113,113,603,113,603,113,710,113,603',
'113,113,113,113,113,113,113,603,113,65,113,376,603,603,603,603,603,603',
'376,890,709,603,603,113,113,113,113,842,113,603,113,712,603,603,603',
'113,805,603,603,1086,113,1073,113,805,805,805,604,1075,902,805,805,368',
'805,902,769,709,357,22,709,403,471,471,842,614,710,842,618,687,356,1042',
'618,938,805,805,709,805,805,805,805,805,1000,842,330,996,365,406,770',
'734,771,689,361,772,364,22,889,361,1072,712,712,710,962,687,710,805',
'805,805,805,805,805,805,805,805,805,805,805,805,805,570,710,805,805',
'805,403,805,890,1075,239,805,719,719,805,1074,1018,712,1018,805,712',
'805,997,805,805,805,805,805,805,805,604,805,406,805,471,604,712,1086',
'771,1073,368,772,1086,769,1073,1075,805,805,462,805,1075,805,614,330',
'357,462,462,462,805,357,689,462,462,805,462,805,356,1042,239,938,566',
'356,1042,462,938,770,734,771,1000,563,772,996,526,1000,462,462,996,462',
'462,462,462,462,889,1074,1072,889,836,889,962,1072,29,92,719,962,789',
'789,391,377,561,92,641,561,562,617,377,462,462,462,462,462,462,462,462',
'462,462,462,462,462,462,1074,836,462,462,462,1074,462,997,794,804,462',
'720,997,462,526,526,526,720,462,914,462,557,462,462,462,462,462,462',
'462,556,462,462,462,335,335,526,29,617,391,391,391,616,641,641,617,462',
'462,683,462,617,462,641,704,617,683,683,683,462,29,683,683,683,462,683',
'462,789,555,804,704,794,794,617,27,683,683,683,548,914,794,27,892,477',
'546,683,683,825,683,683,683,683,683,383,366,543,616,538,382,536,383',
'366,393,616,617,382,44,44,616,439,366,533,616,532,335,335,683,683,683',
'683,683,683,683,683,683,683,683,683,683,683,616,681,683,683,683,892',
'683,683,798,27,683,477,892,683,683,825,683,892,683,800,683,892,683,683',
'683,683,683,683,683,366,683,616,683,393,393,393,802,439,787,892,787',
'787,787,787,787,683,683,683,683,20,683,456,683,680,787,44,44,683,461',
'681,516,644,683,970,683,461,461,461,970,736,892,461,461,978,461,751',
'787,751,751,751,736,751,242,515,978,787,787,787,787,385,240,20,803,456',
'461,461,385,461,461,461,461,461,958,893,958,958,958,20,958,456,893,680',
'455,736,736,893,504,978,978,893,488,787,644,644,644,461,461,461,461',
'461,461,461,461,461,461,461,461,461,461,438,242,461,461,461,398,461',
'438,736,240,461,803,978,461,751,455,438,487,461,408,461,486,461,461',
'461,461,461,461,461,893,461,455,461,19,898,238,998,620,810,898,19,958',
'238,998,620,461,461,110,461,19,461,238,998,620,110,110,110,461,485,110',
'110,110,461,110,461,438,398,398,398,381,380,110,379,110,110,110,381',
'380,542,379,408,408,408,110,110,542,110,110,110,110,110,339,713,473',
'542,463,1034,454,19,713,238,998,620,1034,713,41,453,878,713,878,878',
'878,1034,878,110,110,110,110,110,110,110,110,110,110,110,110,110,110',
'450,375,110,110,110,339,110,110,375,565,110,436,565,110,110,542,110',
'878,110,41,110,339,110,110,110,110,110,110,110,713,110,395,110,1034',
'395,41,560,433,951,560,951,951,951,951,951,110,110,110,110,378,110,834',
'110,991,951,431,378,110,682,841,991,428,110,309,110,682,682,682,309',
'991,682,682,682,405,682,775,951,47,47,17,17,852,775,682,682,682,682',
'951,951,322,853,775,395,395,682,682,322,682,682,682,682,682,402,323',
'5,322,400,324,326,5,323,860,47,47,324,326,42,1004,991,323,1004,951,861',
'324,326,682,682,682,682,682,682,682,682,682,682,682,682,682,682,862',
'775,682,682,682,341,682,682,856,866,682,856,341,682,682,322,682,867',
'682,42,682,341,682,682,682,682,682,682,682,323,682,682,682,324,326,42',
'869,740,664,740,740,740,740,740,50,682,682,682,682,138,682,50,682,740',
'138,138,484,682,806,870,50,872,682,875,682,806,806,806,757,757,341,806',
'806,397,806,740,739,739,355,355,664,1052,1052,806,740,740,740,740,484',
'783,783,877,484,484,806,806,664,806,806,806,806,806,348,348,348,348',
'348,880,748,50,748,748,748,876,748,876,876,876,886,876,740,891,895,899',
'901,806,806,806,806,806,806,806,806,806,806,806,806,806,806,910,913',
'806,806,806,369,806,748,367,363,806,920,876,806,921,923,748,924,806',
'925,806,876,806,806,806,806,806,806,806,927,806,806,806,1044,928,1044',
'1044,1044,585,1044,585,585,585,483,585,806,806,506,806,929,806,362,349',
'942,506,506,506,806,943,506,506,506,806,506,806,1061,343,1061,1061,1061',
'1061,1061,506,506,340,483,585,336,334,483,483,1061,329,506,506,585,506',
'506,506,506,506,328,960,959,325,959,959,959,944,959,944,944,944,1061',
'944,319,953,318,953,953,953,953,953,490,1061,1061,313,313,313,313,313',
'969,953,973,976,506,317,31,315,490,490,959,506,989,31,31,31,506,506',
'31,31,31,301,31,953,490,298,490,1061,490,490,490,490,31,31,953,953,992',
'994,506,506,297,286,31,31,282,31,31,31,31,31,790,790,506,248,790,790',
'790,506,531,531,531,531,531,999,506,244,1008,1009,953,506,1010,1011',
'1012,31,31,31,31,31,31,31,31,31,31,31,31,31,31,243,498,31,31,31,1014',
'241,31,220,31,31,136,1024,31,31,1027,31,1028,31,1029,31,1030,31,31,31',
'31,31,31,31,1032,31,102,31,498,101,1038,100,498,498,498,498,99,73,49',
'43,31,31,467,31,1051,31,1056,1057,40,467,467,467,31,25,467,467,467,31',
'467,503,9,9,9,9,9,18,1068,467,467,467,467,1069,1071,16,15,503,503,13',
'467,467,1077,467,467,467,467,467,1013,1078,1013,1013,1013,503,1013,503',
'1082,503,503,503,503,1083,1084,503,1050,503,1050,1050,1050,1085,1050',
'467,467,467,467,467,467,467,467,467,467,467,467,467,467,3,1013,467,467',
'467,685,1093,467,688,684,467,691,693,467,467,696,467,1050,467,698,467',
'676,467,467,467,467,467,467,467,670,467,467,467,1059,1,1059,1059,1059',
'1059,1059,665,706,708,657,651,467,467,467,467,1059,467,466,467,711,648',
'625,714,467,466,466,466,715,467,466,466,466,622,466,552,718,608,1059',
'607,606,605,601,466,466,466,466,1059,1059,1059,1059,552,552,735,466',
'466,599,466,466,466,466,466,1015,596,1015,1015,1015,552,1015,552,592',
'552,552,552,552,584,575,552,574,552,750,573,752,1059,759,466,466,466',
'466,466,466,466,466,466,466,466,466,466,466,765,1015,466,466,466,,,466',
',,466,,,466,466,,466,,466,,466,,466,466,466,466,466,466,466,,466,466',
'466,568,,568,568,568,568,568,,,,,,466,466,466,466,568,466,60,466,,,',
',466,60,60,60,,466,60,60,60,499,60,,,,568,,,,,,60,60,60,568,568,568',
'568,,,,60,60,,60,60,60,60,60,,,,499,,,,499,499,499,499,,,,,,,,,,,568',
',60,60,60,60,60,60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60',
'60,,60,,60,,60,,60,60,60,60,60,60,60,,60,,60,744,,744,744,744,744,744',
',,,,,60,60,60,60,744,60,457,60,,,,,60,457,457,457,,60,457,457,457,,457',
'489,,,744,,,,,457,457,457,,,,744,744,489,489,,457,457,,457,457,457,457',
'457,,,,,,489,,489,,489,489,489,489,,,,,,,,,744,,457,457,457,457,457',
'457,457,457,457,457,457,457,457,457,,,457,457,457,,,457,,457,457,,,457',
'457,,457,,457,,457,,457,457,457,457,457,457,457,,457,457,457,,,,,,,',
',,,,,457,457,30,457,,457,,,,30,30,30,457,,30,30,30,457,30,491,,,,,,',
',30,30,30,,,,,,491,491,,30,30,,30,30,30,30,30,,,,,,491,,,,491,491,491',
'491,,,,,,,,,,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,',
',30,,30,30,,,30,30,,30,,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,',
',,,,,,,30,30,,30,,30,600,600,600,600,600,600,30,,,600,600,30,,,600,',
'600,600,600,600,600,600,600,,,,,,600,600,600,600,600,600,600,,,600,',
',,,443,600,600,600,600,600,600,600,600,600,600,600,600,,600,600,600',
',600,600,,600,600,600,443,443,443,443,443,443,443,443,443,443,443,,443',
'443,,,443,443,,600,,,600,,,600,600,,,600,,600,443,,443,600,443,443,443',
'443,443,443,443,600,443,,,,600,600,600,600,600,600,,,,600,600,,443,',
'443,,,600,,,600,600,600,,,600,600,831,831,831,831,831,831,,,,831,831',
',,,831,,831,831,831,831,831,831,831,,,,,,831,831,831,831,831,831,831',
',,831,,,,,449,831,831,831,831,831,831,831,831,831,831,831,831,,831,831',
'831,,831,831,,831,831,831,449,449,449,449,449,449,449,449,449,449,449',
',449,449,,,449,449,,831,,,831,,,831,831,,,831,,831,449,,449,831,449',
'449,449,449,449,449,449,831,449,,,,831,831,831,831,831,831,,,,831,831',
',449,,,,,831,,,831,831,831,,,831,831,850,850,850,850,850,850,,,,850',
'850,,,,850,,850,850,850,850,850,850,850,,,,,,850,850,850,850,850,850',
'850,,,850,,,,,,850,850,850,850,850,850,850,850,850,850,850,850,,850',
'850,850,,850,850,,850,850,850,919,919,919,919,919,919,919,919,919,919',
'919,,919,919,,,919,919,,850,,,850,,,850,850,,,850,,850,919,,919,850',
'919,919,919,919,919,919,919,850,919,,,,850,850,850,850,850,850,,,,850',
'850,,919,,,,,850,,,850,850,850,,,850,850,858,858,858,858,858,858,,,',
'858,858,,,,858,,858,858,858,858,858,858,858,,,,,,858,858,858,858,858',
'858,858,,,858,,,,,,858,858,858,858,858,858,858,858,858,858,858,858,',
'858,858,858,,858,858,,858,858,858,807,807,807,807,807,807,807,807,807',
'807,807,,807,807,,,807,807,,858,,,858,,,858,858,,,858,,858,807,,807',
'858,807,807,807,807,807,807,807,858,807,,,,858,858,858,858,858,858,',
',,858,858,,807,,,,,858,,,858,858,858,,,858,858,859,859,859,859,859,859',
',,,859,859,,,,859,,859,859,859,859,859,859,859,,,,,,859,859,859,859',
'859,859,859,,,859,,,,,,859,859,859,859,859,859,859,859,859,859,859,859',
',859,859,859,,859,859,,859,859,859,24,24,24,24,24,24,24,24,24,24,24',
',24,24,,,24,24,,859,,,859,,,859,859,,,859,,859,24,,24,859,24,24,24,24',
'24,24,24,859,24,,,,859,859,859,859,859,859,,,,859,859,,24,,,,,859,,',
'859,859,859,,,859,859,885,885,885,885,885,885,,,,885,885,,,,885,,885',
'885,885,885,885,885,885,,,,,,885,885,885,885,885,885,885,,,885,,,,,',
'885,885,885,885,885,885,885,885,885,885,885,885,,885,885,885,,885,885',
',885,885,885,553,553,553,553,553,553,553,553,553,553,553,,553,553,,',
'553,553,,885,,,885,,,885,885,,,885,,885,553,,553,885,553,553,553,553',
'553,553,553,885,553,,,,885,885,885,885,885,885,,,,885,885,,553,,,,,885',
',,885,885,885,,,885,885,773,773,773,773,773,773,,,,773,773,,,,773,,773',
'773,773,773,773,773,773,,,,,,773,773,773,773,773,773,773,,,773,,,,,',
'773,773,773,773,773,773,773,773,773,773,773,773,,773,773,773,,773,773',
',773,773,773,295,295,295,295,295,295,295,295,295,295,295,,295,295,,',
'295,295,,773,,,773,,,773,773,,,773,,773,295,,295,773,295,295,295,295',
'295,295,295,773,295,,,,773,773,773,773,773,773,,,,773,773,,295,,,,,773',
',,773,773,773,,,773,773,784,784,784,784,784,784,,,,784,784,,,,784,,784',
'784,784,784,784,784,784,,,,,,784,784,784,784,784,784,784,,,784,,,,,',
'784,784,784,784,784,784,784,784,784,784,784,784,,784,784,784,,784,784',
',784,784,784,502,502,502,502,502,502,502,502,502,502,502,,502,502,,',
'502,502,,784,,,784,,,784,784,,,784,,784,502,,502,784,502,502,502,502',
'502,502,502,784,502,,,,784,784,784,784,784,784,,,,784,784,502,502,,',
',,784,,,784,784,784,,,784,784,896,896,896,896,896,896,,,,896,896,,,',
'896,,896,896,896,896,896,896,896,,,,,,896,896,896,896,896,896,896,,',
'896,,,,,,896,896,896,896,896,896,896,896,896,896,896,896,,896,896,896',
',896,896,,896,896,896,481,481,481,481,481,481,481,481,481,481,481,,481',
'481,,,481,481,,896,,,896,,,896,896,,,896,,896,481,,481,896,481,481,481',
'481,481,481,481,896,481,,,,896,896,896,896,896,896,,,,896,896,,,,,,',
'896,,,896,896,896,,,896,896,785,785,785,785,785,785,,,,785,785,,,,785',
',785,785,785,785,785,785,785,,,,,,785,785,785,785,785,785,785,,,785',
',,,,,785,785,785,785,785,785,785,785,785,785,785,785,,785,785,785,,785',
'785,,785,785,785,501,501,501,501,501,501,501,501,,501,501,,,,,,501,501',
',785,,,785,,,785,785,,,785,,785,501,,501,785,501,501,501,501,501,501',
'501,785,501,,,,785,785,785,785,785,785,,,,785,785,,,,,,,785,,,785,785',
'785,,,785,785,360,360,360,360,360,360,,,,360,360,,,,360,,360,360,360',
'360,360,360,360,,,,,,360,360,360,360,360,360,360,,,360,,,,,,360,360',
'360,360,360,360,360,360,360,360,360,360,,360,360,360,,360,360,,360,360',
'360,500,500,500,500,500,500,500,,,500,500,,,,,,500,500,,360,,,360,,',
'360,360,,,360,,360,500,,500,360,500,500,500,500,500,500,500,360,500',
',,,360,360,360,360,360,360,,,,360,360,,,,,,,360,,,360,360,360,,,360',
'360,791,791,791,791,791,791,,,,791,791,,,,791,,791,791,791,791,791,791',
'791,,,,,,791,791,791,791,791,791,791,,,791,,,,,,791,791,791,791,791',
'791,791,791,791,791,791,791,,791,791,791,,791,791,,791,791,791,495,495',
'495,495,495,495,495,,,495,495,,,,,,495,495,,791,,,791,,,791,791,,,791',
',791,495,,495,791,495,495,495,495,495,495,495,791,495,,,,791,791,791',
'791,791,791,,,,791,791,,,,,,,791,,,791,791,791,,,791,791,359,359,359',
'359,359,359,,,,359,359,,,,359,,359,359,359,359,359,359,359,,,,,,359',
'359,359,359,359,359,359,,,359,,,,,,359,359,359,359,359,359,359,359,359',
'359,359,359,,359,359,359,,359,359,,359,359,359,494,494,494,494,494,494',
'494,,,494,494,,,,,,494,494,,359,,,359,,,359,359,,,359,,359,494,,494',
'359,494,494,494,494,494,494,494,359,494,,,,359,359,359,359,359,359,',
',,359,359,,,,,,,359,,,359,359,359,,,359,359,935,935,935,935,935,935',
',,,935,935,,,,935,,935,935,935,935,935,935,935,,,,,,935,935,935,935',
'935,935,935,,,935,,,,,,935,935,935,935,935,935,935,935,935,935,935,935',
',935,935,935,,935,935,,935,935,935,493,493,493,493,493,493,493,,,493',
'493,,,,,,493,493,,935,,,935,,,935,935,,,935,,935,493,,493,935,493,493',
'493,493,493,493,493,935,493,,,,935,935,935,935,935,935,,,,935,935,,',
',,,,935,,,935,935,935,,,935,935,936,936,936,936,936,936,,,,936,936,',
',,936,,936,936,936,936,936,936,936,,,,,,936,936,936,936,936,936,936',
',,936,,,,,,936,936,936,936,936,936,936,936,936,936,936,936,,936,936',
'936,,936,936,,936,936,936,492,492,492,492,492,492,492,,,492,492,,,,',
',492,492,,936,,,936,,,936,936,,,936,,936,492,,492,936,492,492,492,492',
'492,492,492,936,492,,,,936,936,936,936,936,936,,,,936,936,,,,,,,936',
',,936,936,936,,,936,936,347,347,347,347,347,347,,,,347,347,,,,347,,347',
'347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,',
'347,347,347,347,347,347,347,347,347,347,347,347,,347,347,347,,347,347',
',347,347,347,496,496,496,496,496,496,496,,,496,496,,,,,,496,496,,347',
',,347,,,347,347,,,347,,347,496,,496,347,496,496,496,496,496,496,496',
'347,496,,,,347,347,347,347,347,347,,,,347,347,,,,,,,347,,,347,347,347',
',,347,347,321,321,321,321,321,321,,,,321,321,,,,321,,321,321,321,321',
'321,321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,321,321,321',
'321,321,321,321,321,321,321,321,321,,321,321,321,,321,321,,321,321,321',
'482,482,482,482,482,482,482,482,482,482,482,,482,482,,,482,482,,321',
',,321,,,321,321,,,321,,321,482,,482,321,482,482,482,482,482,482,482',
'321,482,,,,321,321,321,321,321,321,,,,321,321,,,,,,,321,,,321,321,321',
',,321,321,966,966,966,966,966,966,,,,966,966,,,,966,,966,966,966,966',
'966,966,966,,,,,,966,966,966,966,966,966,966,,,966,,,,,,966,966,966',
'966,966,966,966,966,966,966,966,966,,966,966,966,,966,966,,966,966,966',
'497,497,497,497,497,497,497,,,497,497,,,,,,497,497,,966,,,966,,,966',
'966,,,966,,966,497,,497,966,497,497,497,497,497,497,497,966,497,,,,966',
'966,966,966,966,966,,,,966,966,,,,,,,966,,,966,966,966,,,966,966,316',
'316,316,316,316,316,,,,316,316,,,,316,,316,316,316,316,316,316,316,',
',,,,316,316,316,316,316,316,316,,,316,,,,,,316,316,316,316,316,316,316',
'316,316,316,316,316,,316,316,316,,316,316,,316,316,316,,,,,,,,,,,,,',
',,,,,,316,,,316,,,316,316,,,316,,316,,,,316,,,,,,,,316,,,,,316,316,316',
'316,316,316,,,,316,316,,,,,,,316,,,316,316,316,,,316,316,995,995,995',
'995,995,995,,,,995,995,,,,995,,995,995,995,995,995,995,995,,,,,,995',
'995,995,995,995,995,995,,,995,,,,,,995,995,995,995,995,995,995,995,995',
'995,995,995,,995,995,995,,995,995,,995,995,995,,,,,,,,,,,,,,,,,,,,995',
',,995,,,995,995,,,995,,995,,,,995,,,,,,,,995,,,,,995,995,995,995,995',
'995,,,,995,995,,,,,,,995,,,995,995,995,,,995,995,247,247,247,247,247',
'247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247',
'247,247,247,247,,,247,,,,,,247,247,247,247,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247',
',,247,247,,,247,,247,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,',
',,247,247,,,,,,,247,,,247,247,247,,,247,247,1023,1023,1023,1023,1023',
'1023,,,,1023,1023,,,,1023,,1023,1023,1023,1023,1023,1023,1023,,,,,,1023',
'1023,1023,1023,1023,1023,1023,,,1023,,,,,,1023,1023,1023,1023,1023,1023',
'1023,1023,1023,1023,1023,1023,,1023,1023,1023,,1023,1023,,1023,1023',
'1023,,,,,,,,,,,,,,,,,,,,1023,,,1023,,,1023,1023,,,1023,,1023,,,,1023',
',,,,,,,1023,,,,,1023,1023,1023,1023,1023,1023,,,,1023,1023,,,,,,,1023',
',,1023,1023,1023,,,1023,1023,1021,1021,1021,1021,1021,1021,,,,1021,1021',
',,,1021,,1021,1021,1021,1021,1021,1021,1021,,,,,,1021,1021,1021,1021',
'1021,1021,1021,,,1021,,,,,,1021,1021,1021,1021,1021,1021,1021,1021,1021',
'1021,1021,1021,,1021,1021,1021,,1021,1021,,1021,1021,1021,,,,,,,,,,',
',,,,,,,,,1021,,,1021,,,1021,1021,,,1021,,1021,,,,1021,,,,,,,,1021,,',
',,1021,1021,1021,1021,1021,1021,,,,1021,1021,,,,,,,1021,,,1021,1021',
'1021,,,1021,1021,1016,1016,1016,1016,1016,1016,,,,1016,1016,,,,1016',
',1016,1016,1016,1016,1016,1016,1016,,,,,,1016,1016,1016,1016,1016,1016',
'1016,,,1016,,,,,,1016,1016,1016,1016,1016,1016,1016,1016,1016,1016,1016',
'1016,,1016,1016,1016,,1016,1016,,1016,1016,1016,,,,,,,,,,,,,,,,,,,,1016',
',,1016,,,1016,1016,,,1016,,1016,,,,1016,,,,,,,,1016,,,,,1016,1016,1016',
'1016,1016,1016,,,,1016,1016,,,,,,,1016,,,1016,1016,1016,,,1016,1016',
'222,222,222,222,222,222,,,,222,222,,,,222,,222,222,222,222,222,222,222',
',,,,,222,222,222,222,222,222,222,,,222,,,,,,222,222,222,222,222,222',
'222,222,222,222,222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,',
',,,,,,,,,,222,,,222,,,222,222,,,222,,222,,,,222,,,,,,,,222,,,,,222,222',
'222,222,222,222,,,,222,222,,,,,,,222,,,222,222,222,,,222,222,2,2,2,2',
'2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2',
'2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2',
',2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,,,2,2,653,653',
'653,653,653,653,,,,653,653,,,,653,,653,653,653,653,653,653,653,,,,,',
'653,653,653,653,653,653,653,,,653,,,,,,653,653,653,653,653,653,653,653',
'653,653,653,653,,653,653,653,,653,653,,653,653,653,,,,,,,,,,,,,,,,,',
',,653,,,653,,,653,653,,,653,,653,,,,653,,,,,,,,653,,,,,653,653,653,653',
'653,653,,,,653,653,,,,,,,653,,,653,653,653,,,653,653,36,36,36,36,36',
'36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,',
'36,,,,,,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36',
'36,,,,,,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,36,,,,36,,,,,,,,36,,,,,36',
'36,36,36,36,36,,,,36,36,,,,,,,36,,,36,36,36,,,36,36,730,730,730,,730',
',,,730,730,,,,730,,730,730,730,730,730,730,730,,,,,,730,730,730,730',
'730,730,730,,,730,,,,,,,730,,,730,730,730,730,730,730,730,730,730,730',
'730,730,,730,730,,730,730,730,,,,,,,,,,,,,,,,,,,,730,,,730,,,730,730',
',,730,,,,,,730,,,,,,,,730,,,,,730,730,730,730,730,730,,,,730,730,,,',
',,,730,,730,730,730,730,,,730,730,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8',
'8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8',
'8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8',
'8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23',
'23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23',
'23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,',
'23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23',
',,23,23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32',
',,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32',
'32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32',
',32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32',
'32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33',
'33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33',
',33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33',
',,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33',
'33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34',
',34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,',
',34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37',
'37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37',
'37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,',
',,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37',
'37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,',
'38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38',
'38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,',
'38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,',
',38,,,38,38,38,,,38,38,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45',
'45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45',
',45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,',
',,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45',
',,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46',
'46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46',
'46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,',
'46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,48,48',
'48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48',
',,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,',
',,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48',
'48,48,48,,,,48,48,,,,,,,48,,,48,48,48,,,48,48,62,62,62,62,62,,,,62,62',
',,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,62,62',
',62,62,62,62,62,62,62,62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,',
',,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62',
',,,62,62,,,,,,,62,,,62,62,62,,,62,62,67,67,67,,67,,,,67,67,,,,67,,67',
'67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67',
'67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67',
',,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,',
'67,,,67,67,67,,,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68',
'68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68',
',68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,',
',,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68',
',,68,68,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71',
'71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71',
'71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,',
'71,,,,,71,71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,,71,71,72',
'72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72',
'72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,',
',,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72',
'72,72,,,,72,72,,,,,,,72,,,72,72,72,,,72,72,1039,1039,1039,,1039,,,,1039',
'1039,,,,1039,,1039,1039,1039,1039,1039,1039,1039,,,,,,1039,1039,1039',
'1039,1039,1039,1039,,,1039,,,,,,,1039,,,1039,1039,1039,1039,1039,1039',
'1039,1039,1039,1039,1039,1039,,1039,1039,,1039,1039,1039,,,,,,,,,,,',
',,,,,,,,1039,,,1039,,,1039,1039,,,1039,,1039,,1039,,1039,,,,,,,,1039',
',,,,1039,1039,1039,1039,1039,1039,,,,1039,1039,,,,,,,1039,,1039,1039',
'1039,1039,,,1039,1039,126,126,126,126,126,,,,126,126,,,,126,,126,126',
'126,126,126,126,126,,,,,,126,126,126,126,126,126,126,,,126,,,,,,126',
'126,126,126,126,126,126,126,126,126,126,126,,126,126,126,,126,126,,126',
'126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,126,,,,126,,,',
',,,,126,,,,,126,126,126,126,126,126,,,,126,126,,,,,,126,126,,,126,126',
'126,,,126,126,131,131,131,,131,,,,131,131,,,,131,,131,131,131,131,131',
'131,131,,,,,,131,131,131,131,131,131,131,,,131,,,,,,,131,,,131,131,131',
'131,131,131,131,131,,131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,',
',,,,,,131,,,131,,,131,131,,,131,,,,,,131,,,,,,,,131,,,,,131,131,131',
'131,131,131,,,,131,131,,,,,,,131,,,131,131,131,,,131,131,132,132,132',
',132,,,,132,132,,,,132,,132,132,132,132,132,132,132,,,,,,132,132,132',
'132,132,132,132,,,132,,,,,,,132,,,132,132,132,132,132,132,132,132,,132',
'132,132,,132,132,,132,132,132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132',
',,132,,,,,,132,,,,,,,,132,,,,,132,132,132,132,132,132,,,,132,132,,,',
',,,132,,,132,132,132,,,132,132,133,133,133,,133,,,,133,133,,,,133,,133',
'133,133,133,133,133,133,,,,,,133,133,133,133,133,133,133,,,133,,,,,',
',133,,,133,133,133,133,133,133,133,133,,133,133,133,,133,133,,133,133',
'133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,,,,,133,,,,,,,,133',
',,,,133,133,133,133,133,133,,,,133,133,,,,,,,133,,,133,133,133,,,133',
'133,134,134,134,,134,,,,134,134,,,,134,,134,134,134,134,134,134,134',
',,,,,134,134,134,134,134,134,134,,,134,,,,,,,134,,,134,134,134,134,134',
'134,134,134,,134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134',
',,134,,,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134',
',,,134,134,,,,,,,134,,,134,134,134,,,134,134,135,135,135,135,135,,,',
'135,135,,,,135,,135,135,135,135,135,135,135,,,,,,135,135,135,135,135',
'135,135,,,135,,,,,,135,135,,135,135,135,135,135,135,135,135,135,,135',
'135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135',
',,135,,135,,,,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135,135',
',,,,,,135,,,135,135,135,,,135,135,223,223,223,,223,,,,223,223,,,,223',
',223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223',
',,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223,,223',
'223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,223,,,,223,,,',
',,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,,,223,223,223',
',,223,223,224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224',
'224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224',
'224,224,224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,',
',,224,,,224,,,224,224,,,224,,224,,,,224,,,,,,,,224,,,,,224,224,224,224',
'224,224,,,,224,224,,,,,,,224,,,224,224,224,,,224,224,225,225,225,,225',
',,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225',
'225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225',
'225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225',
',,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225',
',,225,225,225,,,225,225,226,226,226,,226,,,,226,226,,,,226,,226,226',
'226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226',
',,226,226,226,226,226,226,226,226,,226,226,226,,226,226,,226,226,226',
',,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,',
',226,226,226,226,226,226,,,,226,226,,,,,,,226,,,226,226,226,,,226,226',
'227,227,227,,227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,',
',227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227',
'227,227,,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,',
'227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227',
',,,227,227,,,,,,,227,,,227,227,227,,,227,227,228,228,228,,228,,,,228',
'228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228,228',
'228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228,228,228,228,228',
',228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,',
'228,,228,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,,,,',
',,228,,228,228,228,228,,,228,228,233,233,233,,233,,,,233,233,,,,233',
',233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233',
',,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233,,233',
'233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,',
',233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233,,,233,233,233',
',,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234,234',
'234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234',
'234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,',
',,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234',
'234,234,,,,234,234,,,,,,,234,,,234,234,234,,,234,234,235,235,235,,235',
',,,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235',
'235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235',
'235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235',
',,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,235,,,,,',
'235,,,235,235,235,,,235,235,246,246,246,,246,,,,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
',246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246',
'246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246',
',,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246',
'246,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249',
',,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249',
',,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249',
',,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250,,250,,,,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250,',
'250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250,',
',250,250,250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,',
',,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251',
'251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251,251,252',
'252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252',
'252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252',
'252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252',
',,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252',
'252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253,253,,',
',253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,',
',253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253',
',253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,',
',,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253',
'253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,',
',,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254',
'254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,255,255,255',
',255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255',
'255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,',
',,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256,256,,,,256,,256',
'256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,',
',256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,,256,256',
'256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256',
',,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256',
'256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257',
',,,257,257,,,,,,,257,,,257,257,257,,,257,257,258,258,258,,258,,,,258',
'258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258',
'258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,',
'258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,',
',258,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,',
',,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259',
'259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259,259,260',
'260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260,,,,,,260',
'260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260',
'260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260',
',,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260',
'260,,,,,,,260,,,260,260,260,,,260,260,261,261,261,,261,,,,261,261,,',
',261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,',
',261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261',
',261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,',
',,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261',
'261,,,261,261,262,262,262,,262,,,,262,262,,,,262,,262,262,262,262,262',
'262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262',
'262,262,262,262,262,,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,',
',,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262,262,262',
'262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,,262,262,263,263,263',
',263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263',
'263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263',
'263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263',
',,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,',
',,,263,,,263,263,263,,,263,263,264,264,264,,264,,,,264,264,,,,264,,264',
'264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,',
',264,,,264,264,264,264,264,264,264,264,,264,264,264,,264,264,,264,264',
'264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264',
',,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,,,264,264,264,,,264',
'264,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265,265',
',,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265',
'265,265,265,,265,265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265',
',,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265',
',,,265,265,,,,,,,265,,,265,265,265,,,265,265,266,266,266,,266,,,,266',
'266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266',
'266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266,,266,266,266,',
'266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,',
',,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,',
',266,266,266,,,266,266,267,267,267,,267,,,,267,267,,,,267,,267,267,267',
'267,267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267',
'267,267,267,267,267,267,267,,267,267,267,,267,267,,267,267,267,,,,,',
',,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267',
'267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267,267,,,267,267,268',
'268,268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268',
'268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268',
'268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268',
',,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268',
'268,,,,,,,268,,,268,268,268,,,268,268,269,269,269,,269,,,,269,269,,',
',269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269,',
',269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269,269,269,,269,269',
',269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,',
',,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,,,269,269',
'269,,,269,269,270,270,270,,270,,,,270,270,,,,270,,270,270,270,270,270',
'270,270,,,,,,270,270,270,270,270,270,270,,,270,,,,,,,270,,,270,270,270',
'270,270,270,270,270,,270,270,270,,270,270,,270,270,270,,,,,,,,,,,,,',
',,,,,,270,,,270,,,270,270,,,270,,,,,,270,,,,,,,,270,,,,,270,270,270',
'270,270,270,,,,270,270,,,,,,,270,,,270,270,270,,,270,270,275,275,275',
',275,,,,275,275,,,,275,,275,275,275,275,275,275,275,,,,,,275,275,275',
'275,275,275,275,,,275,,,,,,,275,,,275,275,275,275,275,275,275,275,,275',
'275,275,,275,275,,275,275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275',
',,275,,,,,,275,,,,,,,,275,,,,,275,275,275,275,275,275,,,,275,275,,,',
',,,275,,,275,275,275,,,275,275,283,283,283,,283,,,,283,283,,,,283,,283',
'283,283,283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,',
',283,,,283,283,283,283,283,283,283,283,283,283,283,283,,283,283,,283',
'283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,283,,283,,283',
',,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,,,,,,,283,,283,283',
'283,283,,,283,283,290,290,290,,290,,,,290,290,,,,290,,290,290,290,290',
'290,290,290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290,,,290,290',
'290,290,290,290,290,290,290,290,290,290,,290,290,,290,290,290,,,,,,',
',,,,,,,,,,,,,290,,,290,,,290,290,,,290,,290,,290,,290,,,,,,,,290,,,',
',290,290,290,290,290,290,,,,290,290,,,,,,,290,,290,290,290,290,,,290',
'290,293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293',
',,,,,293,293,293,293,293,293,293,,,293,,,,,,,293,,,293,293,293,293,293',
'293,293,293,293,293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,',
',293,,,293,,,293,293,,,293,,293,,293,,293,,,,,,,,293,,,,,293,293,293',
'293,293,293,,,,293,293,293,,,,,,293,,293,293,293,293,,,293,293,300,300',
'300,,300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300',
'300,300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300',
',300,300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300',
'300,,,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300,300',
',,,,,,300,,,300,300,300,,,300,300,990,990,990,,990,,,,990,990,,,,990',
',990,990,990,990,990,990,990,,,,,,990,990,990,990,990,990,990,,,990',
',,,,,,990,,,990,990,990,990,990,990,990,990,,990,990,990,,990,990,,',
',990,,,,,,,,,,,,,,,,,,,,990,,,990,,,990,990,,,990,,,,,,,,,,,,,,,,,,',
'990,990,990,990,990,990,,,,990,990,,,,,,,990,,,990,990,990,,,990,990',
'302,302,302,,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,',
',302,302,302,302,302,302,302,,,302,,,,,,,302,,,302,302,302,302,302,302',
'302,302,,302,302,302,,302,302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,',
'302,,,302,302,,,302,,,,,,302,,,,,,,,302,,,,,302,302,302,302,302,302',
',,,302,302,,,,,,,302,,,302,302,302,,,302,302,305,305,305,,305,,,,305',
'305,,,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305',
'305,,,305,,,,,,,305,,,305,305,305,305,305,305,305,305,,305,305,305,',
'305,305,,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305,,,305,305,,,305,,',
',,,305,,,,,,,,305,,,,,305,305,305,305,305,305,,,,305,305,,,,,,,305,',
',305,305,305,,,305,305,306,306,306,,306,,,,306,306,,,,306,,306,306,306',
'306,306,306,306,,,,,,306,306,306,306,306,306,306,,,306,,,,,,,306,,,306',
'306,306,306,306,306,306,306,,306,306,306,,306,306,,306,306,306,,,,,',
',,,,,,,,,,,,,,306,,,306,,,306,306,,,306,,,,,,306,,,,,,,,306,,,,,306',
'306,306,306,306,306,,,,306,306,,,,,,,306,,,306,306,306,,,306,306,312',
'312,312,312,312,,,,312,312,,,,312,,312,312,312,312,312,312,312,,,,,',
'312,312,312,312,312,312,312,,,312,,,,,,312,312,,312,312,312,312,312',
'312,312,312,312,,312,312,312,,312,312,,312,312,312,,,,,,,,,,,,,,,,,',
',,312,,,312,,,312,312,,,312,,312,,,,312,,,,,,,,312,,,,,312,312,312,312',
'312,312,,,,312,312,,,,,,,312,,,312,312,312,,,312,312,965,965,965,,965',
',,,965,965,,,,965,,965,965,965,965,965,965,965,,,,,,965,965,965,965',
'965,965,965,,,965,,,,,,,965,,,965,965,965,965,965,965,965,965,,965,965',
'965,,965,965,,965,965,965,,,,,,,,,,,,,,,,,,,,965,,,965,,,965,965,,,965',
',965,,,,965,,,,,,,,965,,,,,965,965,965,965,965,965,,,,965,965,,,,,,',
'965,,,965,965,965,,,965,965,320,320,320,,320,,,,320,320,,,,320,,320',
'320,320,320,320,320,320,,,,,,320,320,320,320,320,320,320,,,320,,,,,',
',320,,,320,320,320,320,320,320,320,320,,320,320,320,,320,320,,,,320',
',,,,,,,,,,,,,,,,,,,320,,,320,,,320,320,,,320,,,,,,,,,,,,,,,,,,,320,320',
'320,320,320,320,,,,320,320,,,,320,,,320,,,320,320,320,,,320,320,337',
'337,337,,337,,,,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337',
'337,337,337,337,337,337,,,337,,,,,,,337,,,337,337,337,337,337,337,337',
'337,,337,337,337,,337,337,,,,337,,,,,,,,,,,,,,,,,,,,337,,,337,,,337',
'337,,,337,,,,,,,,,,,,,,,,,,,337,337,337,337,337,337,,,,337,337,,,,,',
',337,,,337,337,337,,,337,337,344,344,344,,344,,,,344,344,,,,344,,344',
'344,344,344,344,344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,',
',344,,,344,344,344,344,344,344,344,344,,344,344,344,,344,344,,344,344',
'344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,,,,,344,,,,,,,,344',
',,,,344,344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,,344',
'344,346,346,346,,346,,,,346,346,,,,346,,346,346,346,346,346,346,346',
',,,,,346,346,346,346,346,346,346,,,346,,,,,,,346,,,346,346,346,346,346',
'346,346,346,,346,346,346,,346,346,,346,346,346,,,,,,,,,,,,,,,,,,,,346',
',,346,346,,346,346,,,346,,,,,,346,,,,,,,,346,,,,,346,346,346,346,346',
'346,,,,346,346,,,,,,,346,,,346,346,346,,,346,346,939,939,939,,939,,',
',939,939,,,,939,,939,939,939,939,939,939,939,,,,,,939,939,939,939,939',
'939,939,,,939,,,,,,,939,,,939,939,939,939,939,939,939,939,,939,939,939',
',939,939,,,,939,,,,,,,,,,,,,,,,,,,,939,,,939,,,939,939,,,939,,,,,,,',
',,,,,,,,,,,939,939,939,939,939,939,,,,939,939,,,,,,,939,,,939,939,939',
',,939,939,350,350,350,,350,,,,350,350,,,,350,,350,350,350,350,350,350',
'350,,,,,,350,350,350,350,350,350,350,,,350,,,,,,,350,,,350,350,350,350',
'350,350,350,350,350,350,350,350,,350,350,,350,350,350,,,,,,,,,,,,,,',
',,,,,350,,,350,,,350,350,,,350,,350,,,,350,,,,,,,,350,,,,,350,350,350',
'350,350,350,,,,350,350,,,,,,,350,,350,350,350,350,,,350,350,351,351',
'351,,351,,,,351,351,,,,351,,351,351,351,351,351,351,351,,,,,,351,351',
'351,351,351,351,351,,,351,,,,,,,351,,,351,351,351,351,351,351,351,351',
'351,351,351,351,,351,351,,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351,',
',351,351,,,351,,,,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351',
'351,,,,,,,351,,351,351,351,351,,,351,351,358,358,358,,358,,,,358,358',
',,,358,,358,358,358,358,358,358,358,,,,,,358,358,358,358,358,358,358',
',,358,,,,,,,358,,,358,358,358,358,358,358,358,358,,358,358,358,,358',
'358,,358,358,358,,,,,,,,,,,,,,,,,,,,358,,,358,,,358,358,,,358,,,,,,358',
',,,,,,,358,,,,,358,358,358,358,358,358,,,,358,358,,,,,,,358,,,358,358',
'358,,,358,358,930,930,930,,930,,,,930,930,,,,930,,930,930,930,930,930',
'930,930,,,,,,930,930,930,930,930,930,930,,,930,,,,,,,930,,,930,930,930',
'930,930,930,930,930,,930,930,930,,930,930,,,,930,,,,,,,,,,,,,,,,,,,',
'930,,,930,,,930,930,,,930,,,,,,,,,,,,,,,,,,,930,930,930,930,930,930',
',,,930,930,,,,,,,930,,,930,930,930,,,930,930,918,918,918,,918,,,,918',
'918,,,,918,,918,918,918,918,918,918,918,,,,,,918,918,918,918,918,918',
'918,,,918,,,,,,,918,,,918,918,918,918,918,918,918,918,,918,918,918,',
'918,918,,918,918,918,,,,,,,,,,,,,,,,,,,,918,,,918,,,918,918,,,918,,',
',,,918,,,,,,,,918,,,,,918,918,918,918,918,918,,,,918,918,,,,,,,918,',
',918,918,918,,,918,918,917,917,917,,917,,,,917,917,,,,917,,917,917,917',
'917,917,917,917,,,,,,917,917,917,917,917,917,917,,,917,,,,,,,917,,,917',
'917,917,917,917,917,917,917,917,917,917,917,,917,917,,917,917,917,,',
',,,,,,,,,,,,,,,,,917,,,917,,,917,917,,,917,,,,917,,917,,,,,,,,917,,',
',,917,917,917,917,917,917,,,,917,917,,,,,,,917,,917,917,917,917,,,917',
'917,372,372,372,,372,,,,372,372,,,,372,,372,372,372,372,372,372,372',
',,,,,372,372,372,372,372,372,372,,,372,,,,,,,372,,,372,372,372,372,372',
'372,372,372,,372,372,372,,372,372,,,,372,,,,,,,,,,,,,,,,,,,,372,,,372',
',,372,372,,,372,,,,,,,,,,,,,,,,,,,372,372,372,372,372,372,,,,372,372',
',,,,,,372,,,372,372,372,,,372,372,374,374,374,,374,,,,374,374,,,,374',
',374,374,374,374,374,374,374,,,,,,374,374,374,374,374,374,374,,,374',
',,,,,,374,,,374,374,374,374,374,374,374,374,,374,374,374,,374,374,,',
',374,,,,,,,,,,,,,,,,,,,,374,,,374,,,374,374,,,374,,,,,,,,,,,,,,,,,,',
'374,374,374,374,374,374,,,,374,374,,,,,,,374,,,374,374,374,,,374,374',
'897,897,897,,897,,,,897,897,,,,897,,897,897,897,897,897,897,897,,,,',
',897,897,897,897,897,897,897,,,897,,,,,,,897,,,897,897,897,897,897,897',
'897,897,,897,897,897,,897,897,,897,897,897,,,,,,,,,,,,,,,,,,,,897,,',
'897,,,897,897,,,897,,,,,,897,,,,,,,,897,,,,,897,897,897,897,897,897',
',,,897,897,,,,,,,897,,,897,897,897,,,897,897,883,883,883,,883,,,,883',
'883,,,,883,,883,883,883,883,883,883,883,,,,,,883,883,883,883,883,883',
'883,,,883,,,,,,,883,,,883,883,883,883,883,883,883,883,,883,883,883,',
'883,883,,883,883,883,,,,,,,,,,,,,,,,,,,,883,,,883,,,883,883,,,883,,',
',,,883,,,,,,,,883,,,,,883,883,883,883,883,883,,,,883,883,,,,,,,883,',
',883,883,883,,,883,883,432,432,432,,432,,,,432,432,,,,432,,432,432,432',
'432,432,432,432,,,,,,432,432,432,432,432,432,432,,,432,,,,,,,432,,,432',
'432,432,432,432,432,432,432,,432,432,432,,432,432,,432,432,432,,,,,',
',,,,,,,,,,,,,,432,,,432,,,432,432,,,432,,,,,,432,,,,,,,,432,,,,,432',
'432,432,432,432,432,,,,432,432,,,,,,,432,,,432,432,432,,,432,432,826',
'826,826,,826,,,,826,826,,,,826,,826,826,826,826,826,826,826,,,,,,826',
'826,826,826,826,826,826,,,826,,,,,,,826,,,826,826,826,826,826,826,826',
'826,,826,826,826,,826,826,,826,826,826,,,,,,,,,,,,,,,,,,,,826,,,826',
',,826,826,,,826,,,,,,826,,,,,,,,826,,,,,826,826,826,826,826,826,,,,826',
'826,,,,,,,826,,,826,826,826,,,826,826,824,824,824,,824,,,,824,824,,',
',824,,824,824,824,824,824,824,824,,,,,,824,824,824,824,824,824,824,',
',824,,,,,,,824,,,824,824,824,824,824,824,824,824,,824,824,824,,824,824',
',824,824,824,,,,,,,,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,,,,,824,',
',,,,,,824,,,,,824,824,824,824,824,824,,,,824,824,,,,,,,824,,,824,824',
'824,,,824,824,823,823,823,,823,,,,823,823,,,,823,,823,823,823,823,823',
'823,823,,,,,,823,823,823,823,823,823,823,,,823,,,,,,,823,,,823,823,823',
'823,823,823,823,823,,823,823,823,,823,823,,823,823,823,,,,,,,,,,,,,',
',,,,,,823,,,823,,,823,823,,,823,,,,,,823,,,,,,,,823,,,,,823,823,823',
'823,823,823,,,,823,823,,,,,,,823,,,823,823,823,,,823,823,822,822,822',
',822,,,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,,822,822,822',
'822,822,822,822,,,822,,,,,,,822,,,822,822,822,822,822,822,822,822,,822',
'822,822,,822,822,,822,822,822,,,,,,,,,,,,,,,,,,,,822,,,822,,,822,822',
',,822,,,,,,822,,,,,,,,822,,,,,822,822,822,822,822,822,,,,822,822,,,',
',,,822,,,822,822,822,,,822,822,476,476,476,,476,,,,476,476,,,,476,,476',
'476,476,476,476,476,476,,,,,,476,476,476,476,476,476,476,,,476,,,,,',
',476,,,476,476,476,476,476,476,476,476,476,476,476,476,,476,476,,476',
'476,476,,,,,,,,,,,,,,,,,,,,476,,,476,,,476,476,,,476,,476,,476,,476',
',,,,,,,476,,,,,476,476,476,476,476,476,,,,476,476,,,,,,,476,,476,476',
'476,476,,,476,476,478,478,478,,478,,,,478,478,,,,478,,478,478,478,478',
'478,478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478',
'478,478,478,478,478,478,,478,478,478,,478,478,,478,478,478,,,,,,,,,',
',,,,,,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,,,478,,,,,478,478',
'478,478,478,478,,,,478,478,,,,,,,478,,,478,478,478,,,478,478,479,479',
'479,,479,,,,479,479,,,,479,,479,479,479,479,479,479,479,,,,,,479,479',
'479,479,479,479,479,,,479,,,,,,,479,,,479,479,479,479,479,479,479,479',
',479,479,479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479',
'479,,,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479,479,479,,,,479,479',
',,,,,,479,,,479,479,479,,,479,479,480,480,480,,480,,,,480,480,,,,480',
',480,480,480,480,480,480,480,,,,,,480,480,480,480,480,480,480,,,480',
',,,,,,480,,,480,480,480,480,480,480,480,480,,480,480,480,,480,480,,480',
'480,480,,,,,,,,,,,,,,,,,,,,480,,,480,,,480,480,,,480,,,,,,480,,,,,,',
',480,,,,,480,480,480,480,480,480,,,,480,480,,,,,,,480,,,480,480,480',
',,480,480,821,821,821,,821,,,,821,821,,,,821,,821,821,821,821,821,821',
'821,,,,,,821,821,821,821,821,821,821,,,821,,,,,,,821,,,821,821,821,821',
'821,821,821,821,,821,821,821,,821,821,,821,821,821,,,,,,,,,,,,,,,,,',
',,821,,,821,,,821,821,,,821,,,,,,821,,,,,,,,821,,,,,821,821,821,821',
'821,821,,,,821,821,,,,,,,821,,,821,821,821,,,821,821,808,808,808,,808',
',,,808,808,,,,808,,808,808,808,808,808,808,808,,,,,,808,808,808,808',
'808,808,808,,,808,,,,,,,808,,,808,808,808,808,808,808,808,808,,808,808',
'808,,808,808,,808,808,808,,,,,,,,,,,,,,,,,,,,808,,,808,,,808,808,,,808',
',,,,,808,,,,,,,,808,,,,,808,808,808,808,808,808,,,,808,808,,,,,,,808',
',,808,808,808,,,808,808,519,519,519,,519,,,,519,519,,,,519,,519,519',
'519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,,,519',
',,519,519,519,519,519,519,519,519,519,519,519,519,,519,519,,519,519',
'519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,519,,519,,519,,,,',
',,,519,,,,,519,519,519,519,519,519,,,,519,519,,,,,,,519,,519,519,519',
'519,,,519,519,522,522,522,,522,,,,522,522,,,,522,,522,522,522,522,522',
'522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522',
'522,522,522,522,522,522,522,522,522,,522,522,,522,522,522,,,,,,,,,,',
',,,,,,,,,522,,,522,,,522,522,,,522,,,,522,,522,,,,,,,,522,,,,,522,522',
'522,522,522,522,,,,522,522,,,,,,,522,,522,522,522,522,,,522,522,524',
'524,524,,524,,,,524,524,,,,524,,524,524,524,524,524,524,524,,,,,,524',
'524,524,524,524,524,524,,,524,,,,,,,524,,,524,524,524,524,524,524,524',
'524,,524,524,524,,524,524,,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524',
',,524,524,,,524,,,,,,524,,,,,,,,524,,,,,524,524,524,524,524,524,,,,524',
'524,,,,,,,524,,,524,524,524,,,524,524,530,530,530,530,530,,,,530,530',
',,,530,,530,530,530,530,530,530,530,,,,,,530,530,530,530,530,530,530',
',,530,,,,,,530,530,530,530,530,530,530,530,530,530,530,530,,530,530',
'530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530',
',530,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,,,,,,530',
'530,,,530,530,530,,,530,530,801,801,801,,801,,,,801,801,,,,801,,801',
'801,801,801,801,801,801,,,,,,801,801,801,801,801,801,801,,,801,,,,,',
',801,,,801,801,801,801,801,801,801,801,,801,801,801,,801,801,,801,801',
'801,,,,,,,,,,,,,,,,,,,,801,,,801,,,801,801,,,801,,,,,,801,,,,,,,,801',
',,,,801,801,801,801,801,801,,,,801,801,,,,,,,801,,,801,801,801,,,801',
'801,537,537,537,,537,,,,537,537,,,,537,,537,537,537,537,537,537,537',
',,,,,537,537,537,537,537,537,537,,,537,,,,,,,537,,,537,537,537,537,537',
'537,537,537,,537,537,537,,537,537,,,,537,,,,,,,,,,,,,,,,,,,,537,,,537',
',,537,537,,,537,,,,,,,,,,,,,,,,,,,537,537,537,537,537,537,,,,537,537',
',,,,,,537,,,537,537,537,,,537,537,539,539,539,,539,,,,539,539,,,,539',
',539,539,539,539,539,539,539,,,,,,539,539,539,539,539,539,539,,,539',
',,,,,,539,,,539,539,539,539,539,539,539,539,539,539,539,539,,539,539',
',539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,539,,539',
',539,,,,,,,,539,,,,,539,539,539,539,539,539,,,,539,539,,,,,,,539,,539',
'539,539,539,,,539,539,545,545,545,,545,,,,545,545,,,,545,,545,545,545',
'545,545,545,545,,,,,,545,545,545,545,545,545,545,,,545,,,,,,,545,,,545',
'545,545,545,545,545,545,545,,545,545,545,,545,545,,,,545,,,,,,,,,,,',
',,,,,,,,545,,,545,,,545,545,,,545,,,,,,,,,,,,,,,,,,,545,545,545,545',
'545,545,,,,545,545,,,,,,,545,,,545,545,545,,,545,545,549,549,549,,549',
',,,549,549,,,,549,,549,549,549,549,549,549,549,,,,,,549,549,549,549',
'549,549,549,,,549,,,,,,,549,,,549,549,549,549,549,549,549,549,,549,549',
'549,,549,549,,549,549,549,,,,,,,,,,,,,,,,,,,,549,,,549,,,549,549,,,549',
',,,,,549,,,,,,,,549,,,,,549,549,549,549,549,549,,,,549,549,,,,,,,549',
',,549,549,549,,,549,549,554,554,554,,554,,,,554,554,,,,554,,554,554',
'554,554,554,554,554,,,,,,554,554,554,554,554,554,554,,,554,,,,,,,554',
',,554,554,554,554,554,554,554,554,,554,554,554,,554,554,,554,554,554',
',,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554,,,,,,554,,,,,,,,554,,,',
',554,554,554,554,554,554,,,,554,554,,,,,,,554,,,554,554,554,,,554,554',
'779,779,779,,779,,,,779,779,,,,779,,779,779,779,779,779,779,779,,,,',
',779,779,779,779,779,779,779,,,779,,,,,,,779,,,779,779,779,779,779,779',
'779,779,779,779,779,779,,779,779,,779,779,779,,,,,,,,,,,,,,,,,,,,779',
',,779,,,779,779,,,779,,779,,779,,779,,,,,,,,779,,,,,779,779,779,779',
'779,779,,,,779,779,,,,,,,779,,779,779,779,779,,,779,779,767,767,767',
',767,,,,767,767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767,767',
'767,767,767,767,,,767,,,,,,,767,,,767,767,767,767,767,767,767,767,,767',
'767,767,,767,767,,767,767,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767',
',,767,,767,,,,767,,,,,,,,767,,,,,767,767,767,767,767,767,,,,767,767',
',,,,,,767,,,767,767,767,,,767,767,746,746,746,,746,,,,746,746,,,,746',
',746,746,746,746,746,746,746,,,,,,746,746,746,746,746,746,746,,,746',
',,,,,,746,,,746,746,746,746,746,746,746,746,,746,746,746,,746,746,,746',
'746,746,,,,,,,,,,,,,,,,,,,,746,,,746,,,746,746,,,746,,,,,,746,,,,,,',
',746,,,,,746,746,746,746,746,746,,,,746,746,,,,,,,746,,,746,746,746',
',,746,746,588,588,588,,588,,,,588,588,,,,588,,588,588,588,588,588,588',
'588,,,,,,588,588,588,588,588,588,588,,,588,,,,,,,588,,,588,588,588,588',
'588,588,588,588,,588,588,588,,588,588,,588,588,588,,,,,,,,,,,,,,,,,',
',,588,,,588,,,588,588,,,588,,,,,,588,,,,,,,,588,,,,,588,588,588,588',
'588,588,,,,588,588,,,,,,,588,,,588,588,588,,,588,588,727,727,727,,727',
',,,727,727,,,,727,,727,727,727,727,727,727,727,,,,,,727,727,727,727',
'727,727,727,,,727,,,,,,,727,,,727,727,727,727,727,727,727,727,727,727',
'727,727,,727,727,,727,727,727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727',
',,727,,727,,,,727,,,,,,,,727,,,,,727,727,727,727,727,727,,,,727,727',
',,,,,,727,,727,727,727,727,,,727,727,722,722,722,,722,,,,722,722,,,',
'722,,722,722,722,722,722,722,722,,,,,,722,722,722,722,722,722,722,,',
'722,,,,,,,722,,,722,722,722,722,722,722,722,722,,722,722,722,,722,722',
',722,722,722,,,,,,,,,,,,,,,,,,,,722,,,722,,,722,722,,,722,,722,,,,722',
',,,,,,,722,,,,,722,722,722,722,722,722,,,,722,722,,,,,,,722,,,722,722',
'722,,,722,722,611,611,611,,611,,,,611,611,,,,611,,611,611,611,611,611',
'611,611,,,,,,611,611,611,611,611,611,611,,,611,,,,,,,611,,,611,611,611',
'611,611,611,611,611,611,611,611,611,,611,611,,611,611,611,,,,,,,,,,',
',,,,,,,,,611,,,611,,,611,611,,,611,,611,,611,,611,,,,,,,,611,,,,,611',
'611,611,611,611,611,,,,611,611,,,,,,,611,,611,611,611,611,,,611,611',
'717,717,717,,717,,,,717,717,,,,717,,717,717,717,717,717,717,717,,,,',
',717,717,717,717,717,717,717,,,717,,,,,,,717,,,717,717,717,717,717,717',
'717,717,,717,717,717,,717,717,,717,717,717,,,,,,,,,,,,,,,,,,,,717,,',
'717,,,717,717,,,717,,,,,,717,,,,,,,,717,,,,,717,717,717,717,717,717',
',,,717,717,,,,,,,717,,,717,717,717,,,717,717,716,716,716,,716,,,,716',
'716,,,,716,,716,716,716,716,716,716,716,,,,,,716,716,716,716,716,716',
'716,,,716,,,,,,,716,,,716,716,716,716,716,716,716,716,,716,716,716,',
'716,716,,,,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,,716,,,,,,,,',
',,,,,,,,,,716,716,716,716,716,716,,,,716,716,,,,,,,716,,,716,716,716',
',,716,716,623,623,623,,623,,,,623,623,,,,623,,623,623,623,623,623,623',
'623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,,623,,,623,623,623,623',
'623,623,623,623,,623,623,623,,623,623,,623,623,623,,,,,,,,,,,,,,,,,',
',,623,,,623,,,623,623,,,623,,,,,,623,,,,,,,,623,,,,,623,623,623,623',
'623,623,,,,623,623,,,,,,,623,,,623,623,623,,,623,623,629,629,629,,629',
',,,629,629,,,,629,,629,629,629,629,629,629,629,,,,,,629,629,629,629',
'629,629,629,,,629,,,,,,,629,,,629,629,629,629,629,629,629,629,,629,629',
'629,,629,629,,629,629,629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629,,,629',
',,,,,629,,,,,,,,629,,,,,629,629,629,629,629,629,,,,629,629,,,,,,,629',
',,629,629,629,,,629,629,658,658,658,,658,,,,658,658,,,,658,,658,658',
'658,658,658,658,658,,,,,,658,658,658,658,658,658,658,,,658,,,,,,,658',
',,658,658,658,658,658,658,658,658,,658,658,658,,658,658,,658,658,658',
',,,,,,,,,,,,,,,,,,,658,,,658,,,658,658,,,658,,658,,,,658,,,,,,,,658',
',,,,658,658,658,658,658,658,,,,658,658,,,,,,,658,,,658,658,658,,,658',
'658,659,659,659,,659,,,,659,659,,,,659,,659,659,659,659,659,659,659',
',,,,,659,659,659,659,659,659,659,,,659,,,,,,,659,,,659,659,659,659,659',
'659,659,659,,659,659,659,,659,659,,659,659,659,,,,,,,,,,,,,,,,,,,,659',
',,659,,,659,659,,,659,,,,,,659,,,,,,,,659,,,,,659,659,659,659,659,659',
',,,659,659,,,,,,,659,,,659,659,659,,,659,659,660,660,660,,660,,,,660',
'660,,,,660,,660,660,660,660,660,660,660,,,,,,660,660,660,660,660,660',
'660,,,660,,,,,,,660,,,660,660,660,660,660,660,660,660,660,660,660,660',
',660,660,,660,660,660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660,660,,,660,',
'660,,660,,660,,,,,,,,660,,,,,660,660,660,660,660,660,,,,660,660,,,,',
',,660,,660,660,660,660,,,660,660,663,663,663,,663,,,,663,663,,,,663',
',663,663,663,663,663,663,663,,,,,,663,663,663,663,663,663,663,,,663',
',,,,,,663,,,663,663,663,663,663,663,663,663,,663,663,663,,663,663,,663',
'663,663,,,,,,,,,,,,,,,,,,,,663,,,663,,,663,663,,,663,,,,,,663,,,,,,',
',663,,,,,663,663,663,663,663,663,,,,663,663,,,,,,,663,,,663,663,663',
',,663,663,705,705,705,,705,,,,705,705,,,,705,,705,705,705,705,705,705',
'705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705,,,705,705,705,705',
'705,705,705,705,,705,705,705,,705,705,,,,705,,,,,,,,,,,,,,,,,,,,705',
',,705,,,705,705,,,705,,,,,,,,,,,,,,,,,,,705,705,705,705,705,705,,,,705',
'705,,,,,,,705,,,705,705,705,,,705,705,666,666,666,,666,,,,666,666,,',
',666,,666,666,666,666,666,666,666,,,,,,666,666,666,666,666,666,666,',
',666,,,,,,,666,,,666,666,666,666,666,666,666,666,666,666,666,666,,666',
'666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,,666,',
'666,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666,666,,,,,,,666',
',666,666,666,666,,,666,666,667,667,667,,667,,,,667,667,,,,667,,667,667',
'667,667,667,667,667,,,,,,667,667,667,667,667,667,667,,,667,,,,,,,667',
',,667,667,667,667,667,667,667,667,667,667,667,667,,667,667,,667,667',
'667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,,,667,,667,,,,,,,',
'667,,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667,,667,667,667,667',
',,667,667,668,668,668,,668,,,,668,668,,,,668,,668,668,668,668,668,668',
'668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668,,,668,668,668,668',
'668,668,668,668,,668,668,668,,668,668,,668,668,668,,,,,,,,,,,,,,,,,',
',,668,,,668,,,668,668,,,668,,,,,,668,,,,,,,,668,,,,,668,668,668,668',
'668,668,,,,668,668,,,,,,,668,,,668,668,668,,,668,668,669,669,669,,669',
',,,669,669,,,,669,,669,669,669,669,669,669,669,,,,,,669,669,669,669',
'669,669,669,,,669,,,,,,,669,,,669,669,669,669,669,669,669,669,,669,669',
'669,,669,669,,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669,,,669',
',,,,,669,,,,,,,,669,,,,,669,669,669,669,669,669,,,,669,669,,,,,,,669',
',,669,669,669,,,669,669,702,702,702,,702,,,,702,702,,,,702,,702,702',
'702,702,702,702,702,,,,,,702,702,702,702,702,702,702,,,702,,,,,,,702',
',,702,702,702,702,702,702,702,702,,702,702,702,,702,702,,702,702,702',
',,,,,,,,,,,,,,,,,,,702,,,702,,,702,702,,,702,,,,,,702,,,,,,,,702,,,',
',702,702,702,702,702,702,,,,702,702,,,,,,,702,,,702,702,702,,,702,702',
'674,674,674,,674,,,,674,674,,,,674,,674,674,674,674,674,674,674,,,,',
',674,674,674,674,674,674,674,,,674,,,,,,,674,,,674,674,674,674,674,674',
'674,674,,674,674,674,,674,674,,674,674,674,,,,,,,,,,,,,,,,,,,,674,,',
'674,,,674,674,,,674,,,,,,674,,,,,,,,674,,,,,674,674,674,674,674,674',
',,,674,674,,,,,,,674,,,674,674,674,,,674,674,675,675,675,,675,,,,675',
'675,,,,675,,675,675,675,675,675,675,675,,,,,,675,675,675,675,675,675',
'675,,,675,,,,,,,675,,,675,675,675,675,675,675,675,675,,675,675,675,',
'675,675,,675,675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,',
',,,675,,,,,,,,675,,,,,675,675,675,675,675,675,,,,675,675,,,,,,,675,',
',675,675,675,,,675,675,699,699,699,,699,,,,699,699,,,,699,,699,699,699',
'699,699,699,699,,,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699',
'699,699,699,699,699,699,699,,699,699,699,,699,699,,699,699,699,,,,,',
',,,,,,,,,,,,,,699,,,699,,,699,699,,,699,,,,,,699,,,,,,,,699,,,,,699',
'699,699,699,699,699,,,,699,699,,,,,,,699,,,699,699,699,,,699,699,423',
'423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,423,423,423,423,,,,423,423,423,423,423,423,423,423,423,423,',
',,,,423,423,423,423,423,423,423,423,423,,,423,,,,,,,,,423,423,,423,423',
'423,423,423,423,423,,,423,423,,,,423,423,423,423,,,,,,,,,,,,,,423,423',
',423,423,423,423,423,423,423,423,423,423,423,,,423,423,,,,,,,,,,423',
',,,,,,,,423,,,,,423,655,655,655,655,655,655,655,655,655,655,655,655',
'655,655,655,655,655,655,655,655,655,655,655,655,,,,655,655,655,655,655',
'655,655,655,655,655,,,,,,655,655,655,655,655,655,655,655,655,,,655,',
',,,,,,,655,655,,655,655,655,655,655,655,655,,,655,655,,,,655,655,655',
'655,,,,,,,,,,,,,,655,655,,655,655,655,655,655,655,655,655,655,655,655',
',,655,655,,,,,,,,,,655,,,,,,,,,655,,,,,655,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
',,,103,103,103,103,103,103,103,103,103,103,,,,,,103,103,103,103,103',
'103,103,103,103,103,103,103,,103,,,,,,,103,103,,103,103,103,103,103',
'103,103,,,103,103,,,,103,103,103,103,,,,,,,,,,,,,,103,103,,103,103,103',
'103,103,103,103,103,103,103,103,,,103,,,,,,,,,,,,,,,,,,,,103,,,,,103',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12',
',,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,',
',,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12',
',,,,,,,,12,,,,,12,788,788,788,788,788,788,788,788,788,788,788,788,788',
'788,788,788,788,788,788,788,788,788,788,788,,,,788,788,788,788,788,788',
'788,788,788,788,,,,,,788,788,788,788,788,788,788,788,788,,,788,,,,,',
',,,788,788,,788,788,788,788,788,788,788,,,788,788,,,,788,788,788,788',
',,,,,,,,,,,,,788,788,,788,788,788,788,788,788,788,788,788,788,788,,',
'788,,,,,,,,,,,,,,,,,,,,788,,,,,788,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11',
'11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11',
'11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11',
'11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,,,11,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75',
'75,75,75,75,75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,',
',,,,75,75,,75,75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,',
',,75,75,,75,75,75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,474,474,,,474',
',,,,,75,,,474,474,75,474,474,474,474,474,474,474,,,474,474,,,,474,474',
'474,474,,,,,,474,,,,,,,,474,474,,474,474,474,474,474,474,474,474,474',
'474,474,,,474,,,,,,,,,,777,777,,,777,,,,,,474,,,777,777,474,777,777',
'777,777,777,777,777,,,777,777,,,,777,777,777,777,,,,,,777,,,,,,,,777',
'777,,777,777,777,777,777,777,777,777,777,777,777,,,777,,,,,,,,,,778',
'778,,,778,,,,,,777,,,778,778,777,778,778,778,778,778,778,778,,,778,778',
',,,778,778,778,778,,,,,,778,,,,,,,,778,778,,778,778,778,778,778,778',
'778,778,778,778,778,,,778,,,,,,,,,,475,475,,,475,,,,,,778,,,475,475',
'778,475,475,475,475,475,475,475,,,475,475,,,,475,475,475,475,,,,,,475',
',,,,,,,475,475,,475,475,475,475,475,475,475,475,475,475,475,,,475,,',
',,,,,,,229,229,,,229,,,,,,475,,,229,229,475,229,229,229,229,229,229',
'229,,,229,229,,,,229,229,229,229,,,,,,229,,,,,,,,229,229,,229,229,229',
'229,229,229,229,229,229,229,229,,,229,,,,,,,,,,661,661,,,661,,,,,,229',
',,661,661,229,661,661,661,661,661,661,661,,,661,661,,,,661,661,661,661',
',,,,,661,,,,,,,,661,661,,661,661,661,661,661,661,661,661,661,661,661',
',,661,,,,,,,,,,1035,1035,,,1035,,,,,,661,,,1035,1035,661,1035,1035,1035',
'1035,1035,1035,1035,,,1035,1035,,,,1035,1035,1035,1035,,,,,,1035,,,',
',,,,1035,1035,,1035,1035,1035,1035,1035,1035,1035,1035,1035,1035,1035',
',,1035,,,,,,,,,,662,662,,,662,,,,,,1035,,,662,662,1035,662,662,662,662',
'662,662,662,,,662,662,,,,662,662,662,662,,,,,,662,,,,,,,,662,662,,662',
'662,662,662,662,662,662,662,662,662,662,,,662,,,,,,,,,,540,540,,,540',
',,,,,662,,,540,540,662,540,540,540,540,540,540,540,,,540,540,,,,540',
'540,540,540,,,,,,540,,,,,,,,540,540,,540,540,540,540,540,540,540,540',
'540,540,540,,,540,,,,,,,,,,541,541,,,541,,,,,,540,,,541,541,540,541',
'541,541,541,541,541,541,,,541,541,,,,541,541,541,541,,,,,,541,,,,,,',
',541,541,,541,541,541,541,541,541,541,541,541,541,541,,,541,,,,,,,,',
',1041,1041,,,1041,,,,,,541,,,1041,1041,541,1041,1041,1041,1041,1041',
'1041,1041,,,1041,1041,,,,1041,1041,1041,1041,,,,,,1041,,,,,,,,1041,1041',
',1041,1041,1041,1041,1041,1041,1041,1041,1041,1041,1041,,,1041,,,,,',
',,,,550,550,,,550,,,,,,1041,,,550,550,1041,550,550,550,550,550,550,550',
',,550,550,,,,550,550,550,550,,,,,,550,,,,,,,,550,550,,550,550,550,550',
'550,550,550,550,550,550,550,,,550,,,,,,,,,,551,551,,,551,,,,,,550,,',
'551,551,550,551,551,551,551,551,551,551,,,551,551,,,,551,551,551,551',
',,,,,551,,,,,,,,551,551,,551,551,551,551,551,551,551,551,551,551,551',
',,551,,,,,,,,,,1040,1040,,,1040,,,,,,551,,,1040,1040,551,1040,1040,1040',
'1040,1040,1040,1040,,,1040,1040,,,,1040,1040,1040,1040,,,,,,1040,,,',
',,,,1040,1040,,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040',
',,1040,,,,,,,,,,230,230,,,230,,,,,,1040,,,230,230,1040,230,230,230,230',
'230,230,230,,,230,230,,,,230,230,230,230,,,,,,230,,,,,,,,230,230,,230',
'230,230,230,230,230,230,230,230,230,230,,981,230,981,981,981,981,981',
',,,,279,279,,,279,981,,,,,230,,,279,279,230,279,279,279,279,279,279',
'279,,,279,279,981,,,279,279,279,279,,,981,981,981,981,,,,,,,,279,279',
',279,279,279,279,279,279,279,279,279,279,279,,,279,,,,,,,,,981,612,612',
',,612,,,,,,279,,,612,612,279,612,612,612,612,612,612,612,,,612,612,',
',,612,612,612,612,,,,,,612,,,,,,,,612,612,,612,612,612,612,612,612,612',
'612,612,612,612,,,612,986,,986,986,986,986,986,,,613,613,,,613,,,986',
',,612,,,613,613,612,613,613,613,613,613,613,613,,,613,613,,,986,613',
'613,613,613,,,,,,613,986,986,,,,,,613,613,,613,613,613,613,613,613,613',
'613,613,613,613,,984,613,984,984,984,984,984,,,,,,986,,,,984,,,,,613',
',,,354,613,354,354,354,354,354,,,,,,,984,,1045,354,1045,1045,1045,1045',
'1045,984,984,984,984,,,,,742,1045,742,742,742,742,742,,354,354,,,,,',
',742,354,354,354,354,,,1045,,,,1063,984,1063,1063,1063,1063,1063,1045',
'1045,,,742,,,,,1063,,,,742,742,742,742,,,354,1065,,1065,1065,1065,1065',
'1065,,,,,1063,,,1045,829,1065,829,829,829,829,829,1063,1063,,,,,,742',
'786,829,786,786,786,786,786,,1065,,,,,,,,786,,,1065,1065,,,829,,947',
'1063,947,947,947,947,947,829,829,829,829,,,786,,949,947,949,949,949',
'949,949,786,786,786,786,,,1065,,,949,,,,829,,,947,,,,,829,,,,947,947',
'947,947,,,949,,,,1088,786,1088,1088,1088,1088,1088,949,949,,,,,,,,1088',
',,,,,,,,,947,,,,,,,,,,,,1088,,,949,,,,,,,,1088,1088,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,1088' ]
        racc_action_check = arr = ::Array.new(26078, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1391,  5456,  1357,   nil,   721,   nil,   nil,  6018,  1255,
   nil, 24208, 23932,  1199,   nil,  1163,  1162,   786,  1212,   570,
   438,   nil,    70,  6158,  2495,  1260,   nil,   342,   nil,   294,
  1800,  1148,  6298,  6438,  6578,   nil,  5738,  6718,  6858,   nil,
  1153,   633,   772,  1218,   391,  6998,  7138,   748,  7278,  1146,
   848,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1540,   nil,  7418,   nil,   nil,     0,   nil,  7558,  7698,   nil,
   nil,  7838,  7978,  1188,   nil, 24346,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   204,   nil,   nil,   nil,   nil,   nil,   nil,  1140,
  1135,  1133,  1130, 23794,   nil,   nil,   nil,   nil,   nil,   nil,
   662,   nil,   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  8258,   nil,   nil,   nil,
   nil,  8398,  8538,  8678,  8818,  8958,  1128,   nil,   878,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1108,   nil,  5315,  9098,  9238,  9378,  9518,  9658,  9798, 24711,
 25441,   nil,   nil,  9938, 10078, 10218,   nil,   nil,   572,   142,
   479,  1180,   471,  1084,  1120,   nil, 10358,  4751,  1105, 10498,
 10638, 10778, 10918, 11058, 11198, 11338, 11478, 11618, 11758, 11898,
 12038, 12178, 12318, 12458, 12598, 12738, 12878, 13018, 13158, 13298,
 13438,   nil,   nil,   nil,   nil, 13578,   nil,   nil,   nil, 25514,
   nil,   nil,  1089, 13718,   nil,   nil,  1093,   nil,   nil,   nil,
 13858,   nil,   nil, 13998,   nil,  2777,   nil,  1053,  1038,   nil,
 14138,  1075, 14418,   nil,   nil, 14558, 14698,   nil,   nil,   680,
   nil,   nil, 14838,  1098,   nil,  1004,  4469,  1021,  1037,   997,
 15118,  4187,   754,   768,   772,  1060,   773,   nil,  1022,   977,
   160,   nil,   nil,   nil,  1009,   320,   969, 15258,   nil,   619,
  1028,   809,   nil,  1020, 15398,   nil, 15538,  4046,   945,   947,
 15818, 15958,   nil,   nil, 25747,   924,   159,   147, 16098,  3623,
  3341,    67,  1056,   899,    66,    58,   362,   974,   130,  1002,
   nil,   nil, 16658,   nil, 16798,   666,    36,   248,   714,   609,
   607,   606,   366,   361,   nil,   487,   nil,   nil,   nil,   nil,
   nil,   265,   nil,   388,   nil,   714,   nil,   832,   560,   nil,
   726,   nil,   722,   102,   nil,   693,   128,   nil,   574,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 23518,   nil,   nil,   nil,   nil,   691,   nil,
   nil,   669, 17218,   651,   nil,   nil,   609,   nil,   537,   368,
   nil,   nil,   nil,  1931,   nil,   nil,   nil,   nil,   nil,  2072,
   617,   nil,   nil,   592,   583,   501,   440,  1672,   nil,   nil,
   nil,   534,   267,   620,   nil,   nil,  1408,  1276,   nil,   nil,
   nil,   127,   nil,   617, 24419, 24638, 17918,   342, 18058, 18198,
 18338,  3059,  4187,   997,   871,   606,   569,   565,   529,  1622,
  1067,  1750,  3905,  3764,  3623,  3482,  4046,  4328,  1163,  1488,
  3341,  3200,  2918,  1226,   583,   nil,  1068,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   433,   410,   nil,   nil, 18758,
   nil,   nil, 18898,   nil, 19038,   nil,   241,   nil,   nil,   nil,
 19178,  1161,   333,   328,   nil,   nil,   316, 19458,   317, 19598,
 25003, 25076,   615,   351,   nil, 19738,   301,   nil,   337, 19878,
 25222, 25295,  1358,  2636, 20018,   407,   368,   243,   nil,   nil,
   653,   201,   236,   185,   nil,   626,   201,   nil,  1471,   nil,
    91,   -69,   nil,  1342,  1339,  1337,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1320,  1008,   nil,   nil, 20578,   nil,
   nil,   nil,  1409,   nil,   nil,   nil,  1402,   nil,   nil,  1395,
  1931,  1420,   nil,     0,   123,  1422,  1421,  1413,  1418,   nil,
   nil, 20998, 25587, 25660,   142,   nil,   364,   307,   118,   nil,
   574,   nil,  1316, 21418,   nil,  1322,   nil,   nil,   nil, 21558,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   269,   nil,   nil,   477,   nil,   nil,   nil,  1281,   nil,
   nil,  1271,   nil,  5597,   nil, 23656,   nil,  1271, 21698, 21838,
 21978, 24784, 24930, 22118,   833,  1302, 22398, 22538, 22678, 22818,
  1289,   nil,   nil,   nil, 23098, 23238,  1281,   nil,   nil,   nil,
   442,   390,   801,   395,  1240,  1234,   nil,    95,  1338,   167,
   nil,  1255,   nil,  1360,   nil,   nil,  1243,   nil,  1288, 23378,
   nil,   nil, 22958,   nil,   271, 22258,  1269,   nil,  1273,    32,
    76,  1320,   110,   629,  1323,  1289, 21278, 21138,  1359,   195,
   351,   nil, 20858,   nil,   nil,   nil,   nil, 20718,   nil,   nil,
  5878,   nil,   nil,   nil,   162,  1317,   489,   nil,   nil,   858,
   868,   nil, 25777,   nil,  1603,   nil, 20438,   nil,   939,   nil,
  1341,   500,  1346,   nil,   nil,   nil,   nil,   937,   nil,  1460,
   nil,   nil,   nil,   nil,   nil,  1480,   nil, 20298,   -45,   133,
   165,   167,   170,  2777,   nil,   740,   nil, 24492, 24565, 20158,
   nil,   nil,   nil,   935,  2918,  3200, 25861,   463, 24070,   287,
  1139,  3482,   nil,   nil,   296,   nil,   nil,   nil,   371,   nil,
   366, 19318,   386,   481,   270,   139,   940,  2354, 18618,   nil,
   524,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 18478, 17778, 17638, 17498,   346, 17358,   nil,   nil, 25846,
   nil,  2072,   nil,   nil,   681,   nil,   240,   nil,   nil,   nil,
   nil,   673,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  2213,   nil,   695,   745,   nil,   nil,   764,   nil,  2354,  2495,
   723,   739,   753,   nil,   nil,   nil,   762,   770,   nil,   789,
   812,   nil,   814,   nil,   nil,   819,   944,   844,   671,   nil,
   980,   nil,   nil, 17078,   nil,  2636,   991,   nil,   nil,   185,
    98,   994,   403,   501,   nil,   878,  3059, 16938,   523,   996,
   nil,   880,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   883,   nil,   nil,   893,   280,   nil,   nil, 16518, 16378,  2213,
   903,   906,   nil,   907,   909,   911,   nil,   941,   929,   925,
 16238,   nil,   nil,   nil,   nil,  3764,  3905,   nil,   162, 15678,
   nil,   nil,   961,  1070,  1068,   nil,   nil, 25886,   nil, 25901,
   nil,   730,   nil,  1076,   nil,   nil,   nil,   nil,   527,  1063,
   984,   nil,   191,   nil,   nil, 14978,  4328,   nil,   nil,  1133,
   413,   nil,   nil,  1135,   nil,   nil,  1055,   nil,   493,   nil,
   nil, 25503,   nil,   nil, 25722,   nil, 25651,   nil,   nil,  1045,
 14278,   718,  1123,   nil,  1171,  4610,   174,   229,   573,  1150,
   171,   nil,   nil,   nil,   734,   nil,   nil,   nil,  1079,  1080,
  1083,  1084,  1085,  1269,  1105,  1401,  5174,   nil,   221,   nil,
   nil,  5033,   nil,  4892,  1112,   nil,   nil,  1115,  1117,  1119,
  1121,   nil,  1129,   nil,   633, 24857,   nil,   nil,  1257,  8118,
 25368, 25149,   160,   nil,  1003, 25762,   nil,   nil,   nil,   nil,
  1285,  1149,   950,   nil,   nil,   nil,  1271,  1272,   nil,  1339,
   nil,  1035,   nil, 25804,   nil, 25831,   nil,   nil,  1210,  1215,
   nil,  1180,   187,   132,   222,   138,   nil,  1185,  1192,   nil,
   nil,   nil,  1199,  1204,  1205,  1212,   130,   nil, 25943,   nil,
   nil,   nil,   nil,  1234,   nil ]

racc_action_default = [
    -1,  -651,  -650,  -651,    -2,  -637,    -4,    -5,  -651,    -8,
    -9,  -651,  -651,  -651,   -35,  -651,  -651,   -39,  -651,  -651,
  -294,   -50,  -639,  -651,   -55,   -60,   -61,   -62,   -66,  -271,
  -271,  -271,  -309,  -343,  -344,   -78,  -650,   -82,   -90,   -92,
  -651,  -538,  -539,  -651,  -651,  -651,  -651,  -230,  -651,  -639,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -623,  -296,  -298,  -305,  -307,  -317,  -423,  -651,  -651,   -57,
   -57,  -637,  -651,  -327,  -334,  -651,  -345,  -346,  -348,  -349,
  -350,  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -366,  -468,
  -469,  -470,  -471,  -472,  -473,  -650,  -476,  -650,  -650,  -650,
  -486,  -650,  -650,  -650,  -514,  -520,  -522,  -523,  -524,  -525,
  -621,  -527,  -528,  -622,  -530,  -531,  -532,  -533,  -534,  -535,
  -536,  -537,  -542,  -543,  1095,    -3,  -638,  -646,  -647,  -648,
    -7,  -651,  -651,  -651,  -651,  -651,  -651,   -23,  -651,  -121,
  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
   -28,  -130,  -650,  -651,  -651,  -651,  -651,  -651,  -650,  -651,
  -651,  -633,  -634,  -651,  -651,  -639,  -640,   -54,  -651,  -538,
  -539,  -651,  -294,  -651,  -651,  -236,  -651,  -650,  -651,  -651,
  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,
  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,
  -651,  -245,  -246,  -247,  -248,  -651,  -359,  -452,  -431,  -651,
  -635,  -636,   -67,  -651,  -316,  -358,  -651,  -445,  -447,   -73,
  -650,  -442,   -74,  -639,   -75,  -251,  -266,  -650,  -650,  -270,
  -651,  -276,  -651,  -650,  -615,  -651,  -651,   -76,   -77,  -637,
   -17,   -18,  -651,   -21,   -22,   -80,  -650,  -639,  -651,   -83,
   -86,  -650,   -98,   -99,  -651,  -651,  -106,  -309,  -312,  -639,
  -435,  -343,  -344,  -347,  -443,  -651,   -88,  -651,   -94,  -304,
  -521,  -651,  -224,  -225,  -651,  -237,  -651,  -650,  -300,  -639,
  -650,  -650,  -318,  -319,  -570,   -56,  -651,  -651,  -651,  -650,
  -650,  -637,  -651,  -638,  -538,  -539,  -651,  -651,  -294,  -651,
  -376,  -377,  -651,  -330,  -651,  -121,  -122,  -164,  -165,  -166,
  -182,  -187,  -194,  -197,  -337,  -651,  -538,  -539,  -610,  -611,
  -474,  -651,  -498,  -651,  -500,  -651,  -502,  -651,  -651,  -481,
  -651,  -650,  -651,  -651,  -494,  -651,  -651,  -496,  -651,  -513,
  -515,  -516,  -517,  -518,    -6,  -649,   -29,   -30,   -31,   -32,
   -33,   -10,   -11,  -651,   -25,   -26,   -27,  -131,  -651,   -36,
   -38,  -281,  -651,  -651,  -280,   -37,  -651,   -40,  -651,  -294,
   -48,   -49,  -205,  -256,  -276,   -51,   -52,   -41,  -206,  -256,
  -639,  -261,  -262,  -650,  -650,  -624,  -625,  -271,  -440,  -626,
  -627,  -625,  -624,  -271,  -439,  -441,  -626,  -627,   -47,  -214,
   -53,  -639,  -315,  -651,  -651,  -651,  -650,  -304,  -651,  -651,
  -651,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -226,
  -227,  -228,  -229,  -231,  -232,  -233,  -234,  -235,  -238,  -239,
  -240,  -241,  -639,  -249,  -651,  -453,  -271,  -624,  -625,   -64,
   -68,  -272,  -436,  -449,  -452,  -639,  -639,  -311,  -267,  -651,
  -275,  -268,  -651,  -273,  -651,  -277,  -651,  -618,  -620,   -16,
  -638,   -20,  -639,   -79,  -302,   -95,   -84,  -651,  -639,  -650,
  -651,  -651,  -105,  -651,  -521,  -651,   -91,   -96,  -651,  -651,
  -651,  -651,  -250,  -242,  -651,  -460,  -651,  -639,  -299,  -252,
  -643,  -643,  -651,  -651,  -613,  -643,  -651,  -424,  -570,  -427,
  -609,  -609,  -553,  -555,  -555,  -555,  -569,  -571,  -572,  -573,
  -574,  -575,  -576,  -577,  -578,  -651,  -580,  -582,  -584,  -589,
  -591,  -592,  -594,  -599,  -601,  -602,  -604,  -605,  -606,  -651,
  -650,  -367,  -368,  -650,  -651,  -651,  -651,  -651,  -651,  -362,
  -455,  -650,  -651,  -651,  -304,   -57,  -116,  -117,  -651,  -119,
  -651,  -294,  -650,  -651,  -335,  -548,  -340,  -631,  -632,  -651,
  -475,  -499,  -504,  -505,  -507,  -477,  -501,  -478,  -503,  -479,
  -480,  -651,  -483,  -485,  -651,  -488,  -490,  -491,  -651,  -492,
  -493,  -651,  -519,  -650,   -24,  -651,   -34,  -284,  -651,  -651,
  -650,  -651,  -651,  -651,  -444,  -651,  -263,  -265,  -651,  -651,
   -69,  -259,  -260,  -437,  -651,  -651,   -71,  -438,  -314,  -641,
  -624,  -625,  -624,  -625,  -639,  -651,  -430,  -650,   -63,  -432,
  -449,  -651,  -450,  -651,  -258,  -310,  -650,  -274,  -278,  -651,
  -616,  -617,  -651,   -19,   -81,  -651,   -87,   -93,  -639,  -624,
  -625,  -650,  -628,  -104,  -651,   -89,  -651,  -651,  -223,  -639,
  -650,  -360,  -650,  -297,  -365,  -301,  -253,  -645,  -644,  -255,
  -645,  -306,  -308,  -614,  -651,  -639,  -651,  -551,  -552,  -651,
  -651,  -562,  -651,  -565,  -651,  -567,  -651,  -378,  -651,  -380,
  -382,  -389,  -639,  -583,  -593,  -603,  -607,  -650,  -369,  -650,
   -58,  -370,  -371,  -322,  -323,  -651,  -325,  -651,  -639,  -624,
  -625,  -628,  -303,  -650,  -116,  -117,  -118,  -651,  -651,  -650,
  -328,  -544,  -546,  -331,  -650,  -650,  -570,  -570,  -651,  -639,
  -651,  -650,  -482,  -484,  -651,  -487,  -495,  -497,  -651,  -132,
  -282,  -651,  -639,  -624,  -625,  -625,  -624,  -257,  -651,  -642,
  -650,   -43,  -208,   -44,  -209,   -70,   -45,  -211,   -46,  -210,
   -72,  -651,  -651,  -651,  -651,  -444,  -651,  -412,  -413,  -639,
  -415,  -650,  -434,  -433,  -651,  -446,  -650,  -448,  -269,  -279,
  -619,   -85,  -444,   -97,  -213,  -313,   -13,   -15,  -361,  -363,
  -650,  -467,  -461,  -650,  -462,  -463,  -643,  -425,  -650,  -650,
  -417,  -639,  -609,  -590,  -608,  -554,  -555,  -555,  -581,  -555,
  -555,  -600,  -555,  -578,  -595,  -639,  -651,  -387,  -651,  -579,
  -651,  -364,  -372,  -651,  -374,  -650,  -651,   -59,  -324,  -651,
  -444,  -651,  -116,  -117,  -120,  -639,  -650,  -651,  -651,  -651,
  -338,  -639,  -651,  -341,  -612,  -506,  -509,  -510,  -511,  -512,
  -651,  -489,   -12,  -283,  -444,   -42,  -207,  -264,  -651,  -243,
  -609,  -609,  -394,  -650,  -650,  -650,  -411,  -651,  -639,  -578,
  -586,  -587,  -597,  -454,   -65,  -650,  -650,  -466,  -651,  -651,
  -465,  -254,  -651,  -651,  -651,  -426,  -550,  -651,  -558,  -651,
  -560,  -651,  -563,  -651,  -566,  -568,  -379,  -381,  -385,  -651,
  -390,  -320,  -651,  -375,  -321,  -651,  -650,  -326,  -444,  -651,
  -651,  -332,  -336,  -651,  -547,  -549,  -548,  -508,  -651,  -392,
  -393,  -402,  -396,  -404,  -651,  -407,  -651,  -409,  -414,  -651,
  -651,  -585,  -651,  -451,  -650,  -650,  -538,  -539,  -651,  -651,
  -294,  -464,  -428,  -429,  -639,  -419,  -421,  -422,  -555,  -555,
  -555,  -555,  -383,  -651,  -388,  -651,  -650,  -278,  -650,  -329,
  -545,  -650,  -339,  -650,  -609,  -588,  -395,  -650,  -650,  -650,
  -650,  -598,  -650,  -416,  -596,  -651,  -304,   -14,  -460,  -650,
  -651,  -651,  -304,  -418,  -651,  -651,  -556,  -559,  -561,  -564,
  -651,  -386,  -650,  -456,  -457,  -458,  -651,  -651,  -391,  -651,
  -399,  -651,  -401,  -651,  -405,  -651,  -408,  -410,  -303,  -628,
  -459,  -639,  -624,  -625,  -628,  -303,  -420,  -555,  -384,  -373,
  -333,  -342,  -650,  -650,  -650,  -650,  -444,  -557,  -651,  -397,
  -400,  -403,  -406,  -650,  -398 ]

clist = [
'6,608,234,384,278,296,296,296,229,356,357,4,291,361,521,352,280,29,126',
'318,664,137,221,29,556,142,142,737,738,346,720,410,297,297,297,319,129',
'569,29,600,603,450,145,145,9,359,360,29,29,29,9,29,700,447,355,355,510',
'546,355,468,147,147,282,289,292,457,463,434,435,697,333,333,697,416',
'417,418,419,29,584,125,785,237,29,29,880,886,29,847,641,142,298,298',
'298,392,340,394,396,399,576,404,407,394,129,515,348,333,726,729,636',
'336,638,733,391,642,861,506,448,142,355,355,355,355,469,636,741,743',
'745,504,871,691,317,315,924,957,752,776,294,307,308,1031,867,29,869',
'130,625,362,29,29,29,29,29,960,441,868,831,441,393,973,1005,1007,788',
'441,408,622,976,624,760,926,9,423,521,430,371,928,220,703,1004,420,567',
'857,354,734,936,513,514,836,687,1053,767,853,938,390,395,398,846,644',
'401,700,403,406,905,296,790,791,409,428,897,653,927,136,866,458,445',
'446,1031,421,697,697,863,1025,629,470,471,433,433,344,451,474,2,925',
'318,562,1014,655,689,388,563,29,29,29,29,29,29,29,467,353,765,690,29',
'29,29,735,1,369,825,780,296,706,1076,1007,700,414,29,296,279,715,296',
'887,512,385,626,347,957,349,557,350,351,372,842,896,623,429,440,297',
'1027,440,1051,898,451,684,1021,440,584,297,894,520,520,875,29,318,604',
'392,374,935,318,29,834,989,29,543,457,463,576,540,784,,291,,,946,526',
',530,1078,,,,29,,,550,29,,871,794,547,29,,890,,129,298,605,606,1054',
'355,,1008,559,564,560,298,708,333,531,612,793,,,642,,1037,29,,693,,868',
'469,,448,333,,914,29,29,29,711,979,980,1079,,1028,,529,1029,544,711',
'511,,,,536,129,,868,,,516,,645,,,941,,,333,,333,561,565,532,315,838',
',,538,315,948,950,,952,954,,955,768,841,,661,,,665,1023,,654,,607,,142',
',672,,,,,815,677,,700,711,296,820,520,520,,145,671,458,,,1082,,899,900',
',584,968,584,697,723,901,902,,147,802,451,,,,868,,,1058,685,,,,,747',
'672,467,670,29,,,811,813,676,457,463,,816,818,,,671,,,,,793,584,584',
'296,1070,,,,763,764,,766,,458,,,,838,,,,576,576,458,,,547,943,451,,688',
'472,719,,547,,29,,,,,,,,929,29,467,,812,814,1046,1047,1048,1049,817',
'819,467,854,,862,29,333,,966,969,,,,696,333,,,,,757,296,,759,441,,,',
'773,895,,458,,441,441,517,,,,441,441,,,844,,,451,783,,,,711,29,789,',
'29,,782,995,533,,,,29,467,1087,,,,,296,915,761,,,29,833,,1086,,458,29',
'1016,,,,,747,6,,877,558,,,1055,451,,,921,798,,665,799,,832,29,142,,584',
',,29,29,467,888,,,,,,29,29,827,145,,665,29,29,,,672,520,9,677,916,1056',
',1057,,,547,147,929,,,929,671,812,814,819,817,843,860,903,440,851,,855',
',433,,810,,440,440,,,,,440,440,,,441,,333,,,,,864,,,864,,665,333,,,296',
',,884,891,884,,,458,,,,,,,889,,,,,,,910,,678,451,747,,747,,665,929,',
'856,,,29,,,467,961,,29,,,,964,29,29,,142,967,,,29,916,520,860,1024,972',
',921,933,,921,,921,,694,695,,29,,962,,,,,,,,937,827,,922,704,,970,,942',
',707,,,29,,,,,940,1071,,,,930,,,,1012,747,725,,,29,440,,963,,355,,,29',
'29,665,711,,431,444,,1019,,,355,1022,,,,,,921,,921,,921,,921,29,,29',
',,,,,,,860,,19,29,29,,,747,19,747,993,994,921,982,982,982,,,,,,971,',
'238,,975,,,,,,,238,238,238,,19,324,324,,,1018,29,29,747,,,523,,525,',
',527,528,,333,,,,,1080,1081,19,,333,,,238,238,,1038,238,366,29,,,1043',
'864,,1040,922,,,922,851,922,,,,,,1052,,1020,,,,930,566,,930,,29,930',
'296,930,,,884,,,,,,458,333,845,982,982,982,982,,982,29,,,19,,29,451',
'29,238,238,238,238,19,,,,,,467,884,665,,,29,467,,879,,,,,,,,,922,,922',
',922,,922,,,,,,,32,982,982,982,982,,32,930,657,930,,930,982,930,,904',
'922,,,,,32,,,,,,,,,32,32,32,,32,,930,,,,,,,,,,,,870,,872,19,238,438',
'238,238,438,238,,,32,,438,238,238,32,32,,,32,,,,,,,19,983,985,987,,',
',,,,,945,,,,,,,,698,,,566,,701,956,,,,,,,,,,,238,,,,,,,238,,,238,,32',
',,974,,32,32,32,32,32,,923,,,,,,19,,,,19,,,,324,19,,,,,,,,,,,,,,753',
',324,,,,,,,,,,19,,,,,1060,1062,1064,1066,,1067,238,19,19,,,,,,,,,,,',
'620,,620,,,,,,,,,,,,,,,,,32,32,32,32,32,32,32,,,,,32,32,32,800,,1089',
'1090,1091,1092,,,698,566,,32,,1094,,,,,,1009,,1010,,1011,,,,,,,,18,',
',,,,18,,,,839,,,840,,,32,,,,,,,32,,1030,32,1032,,,,,,852,18,,,,698,',
'238,566,,,,32,,,,32,,,,,32,,,874,,,18,41,,,,,,41,,,,,,,,,,,444,,32,',
',,,,1077,,,,,32,32,32,19,41,322,322,,,1083,324,1084,238,1085,,,,,324',
',,913,,,,,,238,,,41,,,18,,,,,1093,,364,,18,386,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,19,,,19,,,,,,,,238,,,,,,,,,,41,,238,,,,,,238,41,,,,,,,,,,,,',
',,32,,,,,,,,19,,,18,,18,438,238,18,,,566,,,18,438,438,,,,,438,438,,',
',,,18,,,,,,,,,,,,,,,,,,32,,,,,,324,,,32,,,,1017,,,,324,41,,,,,,32,,',
',,,,,,,,,,,,,,,,41,,,,18,,,,18,,,,16,18,,,,,16,,,,,,,,,32,,,32,19,,',
',,,238,32,18,,,19,19,,,16,,,19,32,18,18,,,,32,,,,,,,,,41,438,,,41,,',
'16,322,41,,,,,,32,,370,,,,32,32,,19,322,,,,,32,32,,,,41,32,32,,,,,,19',
',,,41,41,,,19,19,,,,,,,,386,,386,,,,,,,,,16,,,,,238,,19,,16,,,,,,,,',
'19,238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,991,,,,,19,19,,,998,,,32,,,,',
',32,,,,,32,32,,,,,,32,,,,18,,19,,,,,,,,16,,436,32,,436,,,,,,436,,,,',
'1034,,,,,19,,,,16,32,,,,,,,,,,,,,,,,19,,,32,,19,,19,,41,,32,32,,,,322',
',18,,,18,,238,322,,,,,,,,,,,,32,,32,,,,,,,,,,16,32,32,,16,,,,,16,,,',
',,42,,,,,,42,,18,,,,,,18,,41,,,41,16,,,18,18,32,32,,,18,18,,16,16,42',
'323,323,,,,,,,,,,,,,,,,,,,,32,,,,42,,,,,,,,,41,365,,,387,,,,,,,,,,,',
'32,,,,,,,,,,,,,,,,,,,,,32,,,,,32,,32,,,,,,,,322,,,42,,,,18,32,,,322',
'42,,,,,,18,18,,,,,,18,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,18,,',
'41,,,,,,,,,,,41,41,,16,,18,,41,,,,,,18,18,,,,,,42,,,,,,,,,,,,,,,,,,',
',18,,,,,42,,41,,,,18,,,,,,,,,,,,,,,41,,,,,,,16,41,41,16,,,,,,,,,,,,',
',18,18,,,,,,,,,,41,,,,,,,,,42,,41,,42,,,,323,42,,18,,,,,16,,,,,,436',
',,323,,,,,,436,436,,,42,386,436,436,,18,41,41,,,996,,42,42,,20,,,,,',
'20,,,,387,18,387,,,,18,,18,,,,41,,,,,,,,,,,,20,326,326,,,,,,,,,,386',
',,,,41,,,,,,,,,20,,,,,,,,,,368,,41,,,,,41,,41,,,,,,,16,,,,,,,,,,,16',
'16,,,,,,16,,,,,,,,,,,,,,,,,436,,,20,,,,,,,,,20,,,,,,,,,,,16,,,,,,,,',
',,,,,,,,,,16,,,,,42,,,16,16,,,323,,,,,,,,323,,,,,,,,,,,,,,,16,,,,,,',
',,,,16,,,,,,,,,,,20,,439,,,439,,,,,,439,,,,,,,42,,,42,,,,20,,,16,16',
',,1001,,,,,,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,16',
',20,,,,20,,,,326,20,,,,,,,,,,16,,,,,16,326,16,,,,,,,323,,20,,,,,,,,',
'323,,,20,20,,,,,,,,,,,,621,,621,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,42,,,,,,,,,,,42,42,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'42,,,,,,,,,,,,,,,,,,,42,,245,,,,,,42,42,,295,295,295,,,,,,,,,,,342,343',
',345,,,,,,,,42,,,,,20,,,,,,42,326,,,,,,,,326,,,,,,,,,,,,,,,,,,,,,,,',
',387,,,,,42,42,,,997,,,,,,,,,,,,,,,,,,,,,20,,,20,,,42,,,,,,,,,,,,,,',
',,,,,,,,,387,,,,,42,,,,,,,,,,,,,,,,,,20,,,42,,,439,,42,,42,,,,,439,439',
',,,,439,439,,,,,,,,,,,,,,,,,295,443,,,449,295,,,,,449,,,326,,,,,,,,',
',245,326,,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495',
'496,497,498,499,500,501,502,,,,,503,,,,,,,,295,,,,,,,295,,,295,,,,,',
',295,,295,,20,295,295,,,,,,,,,20,20,,,,,909,20,,,,,,,,,,,,,,,,,439,',
',,,552,,553,,,,295,295,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,20,,,,,,,,20,20',
',,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,20,,,,,295,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,621,,,,,20,20,,,1000,,,,,,295,,449,449,449,,,,,,,,,,,,,,,,',
'20,,,,,,,,,,,,,,,,,,,,,,295,,621,295,,295,,20,,,,,,,,,,,,,295,,,,,,',
',20,,718,,,20,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,',
',,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,449,295',
',,807,,,295,295,449,449,,,,,449,449,,,,,,,,,,,,,,,,,,,,,,,,295,,,295',
',,,,,,,,,,,,,,449,,,,,295,,,,,295,,,295,,,,,,,,,,,,,,,,295,,,,,,,,,',
',,,,,,,,,,,295,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,449,,,',
',,,,,,,,,449,449,449,449,,919,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,449,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295' ]
        racc_goto_table = arr = ::Array.new(3854, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,115,39,69,173,45,45,45,37,23,23,2,87,23,89,104,37,53,8,14,36,21,21',
'53,12,70,70,155,155,39,15,69,84,84,84,62,120,172,53,108,108,35,73,73',
'9,41,41,53,53,53,9,53,221,32,30,30,51,64,30,32,74,74,50,50,50,49,49',
'28,28,90,79,79,90,23,23,23,23,53,210,5,123,26,53,53,109,111,53,17,194',
'70,86,86,86,6,77,6,6,6,205,6,6,6,120,35,9,79,85,85,195,63,195,85,190',
'195,164,49,76,70,30,30,30,30,76,195,208,208,208,174,216,52,59,58,160',
'148,150,67,57,57,57,217,161,53,161,7,138,5,53,53,53,53,53,151,24,211',
'162,24,191,139,166,167,140,24,191,68,141,68,42,152,9,31,89,29,25,158',
'22,20,165,9,168,169,170,171,18,177,178,180,182,183,184,185,186,189,192',
'193,16,196,197,221,198,199,200,45,201,202,203,14,204,13,164,11,209,87',
'30,30,217,10,90,90,213,214,220,30,30,84,84,80,6,37,3,161,14,83,151,75',
'88,100,103,53,53,53,53,53,53,53,70,106,115,54,53,53,53,172,1,117,36',
'119,45,64,166,167,221,7,53,45,48,64,45,44,87,124,125,126,148,127,128',
'129,130,131,36,132,133,26,26,84,160,26,151,134,6,35,135,26,210,84,67',
'6,6,150,53,14,23,6,136,162,14,53,52,164,53,39,49,49,205,37,137,,87,',
',155,190,,8,151,,,,53,,,37,53,,216,194,62,53,,36,,120,86,14,14,111,30',
',161,6,6,84,86,35,79,9,37,195,,,195,,17,53,,174,,211,76,,76,79,,36,53',
'53,53,49,155,155,109,,161,,5,161,77,49,57,,,,63,120,,211,,,57,,6,,,85',
',,79,,79,86,86,59,58,89,,,59,58,208,208,,208,208,,208,35,64,,37,,,39',
'123,,21,,5,,70,,87,,,,,51,87,,221,49,45,51,6,6,,73,6,87,,,161,,12,12',
',210,36,210,90,102,172,172,,74,35,6,,,,211,,,155,39,,,,,149,87,70,50',
'53,,,32,32,50,49,49,,32,32,,,6,,,,,195,210,210,45,15,,,,102,102,,102',
',87,,,,89,,,,205,205,87,,,62,12,6,,50,60,30,,62,,53,,,,,,,,210,53,70',
',76,76,208,208,208,208,76,76,70,28,,154,53,79,,108,12,,,,86,79,,,,,14',
'45,,14,24,,,,41,35,,87,,24,24,60,,,,24,24,,,76,,,6,30,,,,49,53,30,,53',
',6,108,60,,,,53,70,208,,,,,45,32,120,,,53,104,,36,,87,53,108,,,,,149',
'6,,149,60,,,115,6,,,154,2,,39,21,,173,53,70,,210,,,53,53,70,102,,,,',
',53,53,6,73,,39,53,53,,,87,6,9,87,76,12,,12,,,62,74,210,,,210,6,76,76',
'76,76,62,39,69,26,6,,6,,84,,86,,26,26,,,,,26,26,,,24,,79,,,,,156,,,156',
',39,79,,,45,,,6,14,6,,,87,,,,,,,84,,,,,,,14,,60,6,149,,149,,39,210,',
'86,,,53,,,70,102,,53,,,,102,53,53,,70,102,,,53,76,6,39,154,102,,154',
'14,,154,,154,,60,60,,53,,23,,,,,,,,14,6,,156,60,,23,,14,,60,,,53,,,',
',6,35,,,,212,,,,149,149,60,,,53,26,,14,,30,,,53,53,39,49,,82,82,,102',
',,30,102,,,,,,154,,154,,154,,154,53,,53,,,,,,,,39,,34,53,53,,,149,34',
'149,14,14,154,6,6,6,,,,,,120,,34,,120,,,,,,,34,34,34,,34,34,34,,,14',
'53,53,149,,,82,,82,,,82,82,,79,,,,,102,102,34,,79,,,34,34,,14,34,34',
'53,,,39,156,,37,156,,,156,6,156,,,,,,14,,120,,,,212,82,,212,,53,212',
'45,212,,,6,,,,,,87,79,60,6,6,6,6,,6,53,,,34,,53,6,53,34,34,34,34,34',
',,,,,70,6,39,,,53,70,,60,,,,,,,,,156,,156,,156,,156,,,,,,,56,6,6,6,6',
',56,212,82,212,,212,6,212,,60,156,,,,,56,,,,,,,,,56,56,56,,56,,212,',
',,,,,,,,,,159,,159,34,34,34,34,34,34,34,,,56,,34,34,34,56,56,,,56,,',
',,,,34,157,157,157,,,,,,,,60,,,,,,,,82,,,82,,82,60,,,,,,,,,,,34,,,,',
',,34,,,34,,56,,,60,,56,56,56,56,56,,159,,,,,,34,,,,34,,,,34,34,,,,,',
',,,,,,,,82,,34,,,,,,,,,,34,,,,,157,157,157,157,,157,34,34,34,,,,,,,',
',,,,34,,34,,,,,,,,,,,,,,,,,56,56,56,56,56,56,56,,,,,56,56,56,82,,157',
'157,157,157,,,82,82,,56,,157,,,,,,159,,159,,159,,,,,,,,33,,,,,,33,,',
',82,,,82,,,56,,,,,,,56,,159,56,159,,,,,,82,33,,,,82,,34,82,,,,56,,,',
'56,,,,,56,,,82,,,33,65,,,,,,65,,,,,,,,,,,82,,56,,,,,,159,,,,,56,56,56',
'34,65,65,65,,,159,34,159,34,159,,,,,34,,,82,,,,,,34,,,65,,,33,,,,,159',
',65,,33,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,,,,,,,34,,,,,,,,,,65',
',34,,,,,,34,65,,,,,,,,,,,,,,,56,,,,,,,,34,,,33,,33,34,34,33,,,82,,,33',
'34,34,,,,,34,34,,,,,,33,,,,,,,,,,,,,,,,,,56,,,,,,34,,,56,,,,82,,,,34',
'65,,,,,,56,,,,,,,,,,,,,,,,,,,65,,,,33,,,,33,,,,27,33,,,,,27,,,,,,,,',
'56,,,56,34,,,,,,34,56,33,,,34,34,,,27,,,34,56,33,33,,,,56,,,,,,,,,65',
'34,,,65,,,27,65,65,,,,,,56,,27,,,,56,56,,34,65,,,,,56,56,,,,65,56,56',
',,,,,34,,,,65,65,,,34,34,,,,,,,,65,,65,,,,,,,,,27,,,,,34,,34,,27,,,',
',,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,34,34,,,34,,,56,,',
',,,56,,,,,56,56,,,,,,56,,,,33,,34,,,,,,,,27,,27,56,,27,,,,,,27,,,,,34',
',,,,34,,,,27,56,,,,,,,,,,,,,,,,34,,,56,,34,,34,,65,,56,56,,,,65,,33',
',,33,,34,65,,,,,,,,,,,,56,,56,,,,,,,,,,27,56,56,,27,,,,,27,,,,,,66,',
',,,,66,,33,,,,,,33,,65,,,65,27,,,33,33,56,56,,,33,33,,27,27,66,66,66',
',,,,,,,,,,,,,,,,,,,56,,,,66,,,,,,,,,65,66,,,66,,,,,,,,,,,,56,,,,,,,',
',,,,,,,,,,,,,56,,,,,56,,56,,,,,,,,65,,,66,,,,33,56,,,65,66,,,,,,33,33',
',,,,,33,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,33,,,65,,,,,,,,,,,65',
'65,,27,,33,,65,,,,,,33,33,,,,,,66,,,,,,,,,,,,,,,,,,,,33,,,,,66,,65,',
',,33,,,,,,,,,,,,,,,65,,,,,,,27,65,65,27,,,,,,,,,,,,,,33,33,,,,,,,,,',
'65,,,,,,,,,66,,65,,66,,,,66,66,,33,,,,,27,,,,,,27,,,66,,,,,,27,27,,',
'66,65,27,27,,33,65,65,,,65,,66,66,,38,,,,,,38,,,,66,33,66,,,,33,,33',
',,,65,,,,,,,,,,,,38,38,38,,,,,,,,,,65,,,,,65,,,,,,,,,38,,,,,,,,,,38',
',65,,,,,65,,65,,,,,,,27,,,,,,,,,,,27,27,,,,,,27,,,,,,,,,,,,,,,,,27,',
',38,,,,,,,,,38,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,27,,,,,66,,,27,27,,,66',
',,,,,,,66,,,,,,,,,,,,,,,27,,,,,,,,,,,27,,,,,,,,,,,38,,38,,,38,,,,,,38',
',,,,,,66,,,66,,,,38,,,27,27,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,',
',,,,,66,,,,,,,,,,,,,,,,,27,,38,,,,38,,,,38,38,,,,,,,,,,27,,,,,27,38',
'27,,,,,,,66,,38,,,,,,,,,66,,,38,38,,,,,,,,,,,,38,,38,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,,,66,66,,,,,,66,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,66,,40,,,,,,66,66,,40,40,40',
',,,,,,,,,,40,40,,40,,,,,,,,66,,,,,38,,,,,,66,38,,,,,,,,38,,,,,,,,,,',
',,,,,,,,,,,,,,66,,,,,66,66,,,66,,,,,,,,,,,,,,,,,,,,,38,,,38,,,66,,,',
',,,,,,,,,,,,,,,,,,,,66,,,,,66,,,,,,,,,,,,,,,,,,38,,,66,,,38,,66,,66',
',,,,38,38,,,,,38,38,,,,,,,,,,,,,,,,,40,40,,,40,40,,,,,40,,,38,,,,,,',
',,,40,38,,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,,,,,40,,,,,,,,40,,,,,,,40,,,40,,,,,,,40,,40,,38,40,40,,,,,,,,',
'38,38,,,,,38,38,,,,,,,,,,,,,,,,,38,,,,,40,,40,,,,40,40,,,,,,,,,,,38',
',,,,,,,,,,,,,,,,,,38,,,,,,,,38,38,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,',
',,,,38,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,38,38,,,38,,,,,,40',
',40,40,40,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,40,,38,40,,40,,38',
',,,,,,,,,,,,40,,,,,,,,38,,40,,,38,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,40,40,40,,,40,,,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,',
',,40,,,40,,,,,,,,,,,,,,,40,,,,,40,,,,,40,,,40,,,,,,,,,,,,,,,,40,,,,',
',,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,40,,',
',,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3854, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   252,     9,   228,   nil,    74,    -2,   135,    13,    42,
    79,   199,  -323,  -215,   -17,  -525,  -526,  -633,  -664,   nil,
  -355,    10,   162,   -58,   -72,   100,    58,  1660,  -156,   -52,
   -13,    32,  -174,  1342,   908,  -187,  -430,   -11,  2345,   -20,
  2814,   -24,  -438,   nil,  -493,   -27,   nil,   nil,   237,  -164,
    33,  -226,  -384,    15,  -262,   nil,  1077,   104,    95,    94,
   305,   nil,    -2,    71,  -280,  1403,  1985,  -483,  -209,   -72,
    14,   nil,   nil,    31,    49,  -194,  -111,    50,   nil,    33,
   178,   nil,   655,  -119,     0,  -454,    58,   -18,  -272,  -284,
  -450,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   160,   nil,   -88,  -115,   -50,   nil,   179,   nil,  -317,  -673,
   nil,  -674,   nil,   nil,   nil,  -361,   nil,   181,   nil,  -367,
    31,   nil,   nil,  -545,   194,  -115,   210,   211,   -74,   212,
   212,   204,  -501,   -93,  -496,  -681,   228,  -310,  -240,  -743,
  -466,  -739,   nil,   nil,   nil,   nil,   nil,   nil,  -743,   -98,
  -451,  -727,  -662,   nil,  -168,  -543,     7,   233,  -656,   385,
  -697,  -600,  -533,   nil,  -621,  -768,  -786,  -785,  -176,  -555,
   114,  -386,  -317,   -21,  -150,   nil,   nil,  -104,  -104,   nil,
  -507,   nil,  -319,  -831,  -422,  -533,  -663,   nil,   nil,    99,
    17,    59,    94,    94,  -310,  -285,  -206,    96,    97,    97,
  -590,  -431,  -431,   101,  -575,  -256,   nil,   nil,  -449,  -530,
  -276,  -587,    27,  -518,  -759,   nil,  -614,  -845,   nil,   nil,
  -169,  -470 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   310,     7,   363,   313,
   nil,   nil,   nil,   nil,   555,   nil,   nil,   nil,   nil,   309,
   311,   nil,   nil,   nil,    14,    15,    21,   243,   nil,   nil,
    17,   nil,   437,   244,   341,   nil,   nil,   778,   242,   473,
    24,   nil,   nil,   358,   nil,    25,    26,    27,   nil,   714,
   nil,   nil,   nil,   330,   nil,    28,   327,   452,    35,   nil,
   nil,    37,    40,    39,   nil,   239,   240,   619,   nil,   144,
   460,   143,   146,    90,    91,   nil,   442,   105,    47,    50,
   275,   548,   301,   nil,   453,   nil,   454,   465,   673,   518,
   299,   283,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   284,    65,   nil,    67,   nil,   nil,
    68,   882,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   601,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   288,   277,   722,   850,   610,   883,   749,   583,
   nil,   750,  1026,   920,   571,   nil,   572,   nil,   nil,   573,
   nil,   575,   nil,   828,   nil,   nil,   nil,   581,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   464,   286,   nil,   nil,   692,
   nil,   505,   nil,   nil,   nil,   nil,   nil,    89,    92,    94,
   nil,   nil,   nil,   nil,   nil,   631,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   865,   787,   570,   nil,   574,
   873,   586,   588,   589,   931,   592,   593,   932,   596,   599,
   nil,   304 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_none,
  0, 157, :_reduce_9,
  3, 153, :_reduce_10,
  0, 159, :_reduce_11,
  4, 156, :_reduce_12,
  0, 164, :_reduce_13,
  6, 158, :_reduce_14,
  3, 158, :_reduce_15,
  2, 160, :_reduce_16,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  3, 165, :_reduce_19,
  2, 165, :_reduce_20,
  1, 166, :_reduce_none,
  1, 166, :_reduce_22,
  0, 177, :_reduce_23,
  4, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  2, 155, :_reduce_28,
  3, 155, :_reduce_29,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  4, 155, :_reduce_34,
  1, 155, :_reduce_none,
  3, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  1, 155, :_reduce_none,
  3, 170, :_reduce_40,
  3, 170, :_reduce_41,
  6, 170, :_reduce_42,
  5, 170, :_reduce_43,
  5, 170, :_reduce_44,
  5, 170, :_reduce_45,
  5, 170, :_reduce_46,
  3, 170, :_reduce_47,
  1, 178, :_reduce_48,
  1, 178, :_reduce_none,
  1, 176, :_reduce_none,
  3, 176, :_reduce_51,
  3, 176, :_reduce_52,
  3, 176, :_reduce_53,
  2, 176, :_reduce_54,
  1, 176, :_reduce_none,
  1, 169, :_reduce_56,
  0, 189, :_reduce_57,
  0, 190, :_reduce_58,
  4, 187, :_reduce_59,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 192, :_reduce_none,
  4, 192, :_reduce_63,
  0, 200, :_reduce_64,
  4, 197, :_reduce_65,
  1, 199, :_reduce_66,
  2, 191, :_reduce_67,
  3, 191, :_reduce_68,
  4, 191, :_reduce_69,
  5, 191, :_reduce_70,
  4, 191, :_reduce_71,
  5, 191, :_reduce_72,
  2, 191, :_reduce_73,
  2, 191, :_reduce_74,
  2, 191, :_reduce_75,
  2, 191, :_reduce_76,
  2, 191, :_reduce_77,
  1, 171, :_reduce_none,
  3, 171, :_reduce_79,
  1, 205, :_reduce_none,
  3, 205, :_reduce_81,
  1, 204, :_reduce_82,
  2, 204, :_reduce_83,
  3, 204, :_reduce_84,
  5, 204, :_reduce_85,
  2, 204, :_reduce_86,
  4, 204, :_reduce_87,
  2, 204, :_reduce_88,
  4, 204, :_reduce_89,
  1, 204, :_reduce_90,
  3, 204, :_reduce_91,
  1, 208, :_reduce_none,
  3, 208, :_reduce_93,
  2, 207, :_reduce_94,
  3, 207, :_reduce_95,
  1, 210, :_reduce_96,
  3, 210, :_reduce_97,
  1, 209, :_reduce_98,
  1, 209, :_reduce_99,
  4, 209, :_reduce_100,
  3, 209, :_reduce_101,
  3, 209, :_reduce_102,
  3, 209, :_reduce_103,
  3, 209, :_reduce_104,
  2, 209, :_reduce_105,
  1, 209, :_reduce_106,
  1, 173, :_reduce_107,
  1, 173, :_reduce_108,
  4, 173, :_reduce_109,
  3, 173, :_reduce_110,
  3, 173, :_reduce_111,
  3, 173, :_reduce_112,
  3, 173, :_reduce_113,
  2, 173, :_reduce_114,
  1, 173, :_reduce_115,
  1, 213, :_reduce_116,
  1, 213, :_reduce_none,
  2, 214, :_reduce_118,
  1, 214, :_reduce_119,
  3, 214, :_reduce_120,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_124,
  1, 215, :_reduce_125,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 167, :_reduce_128,
  1, 167, :_reduce_none,
  1, 168, :_reduce_130,
  0, 221, :_reduce_131,
  4, 168, :_reduce_132,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  3, 186, :_reduce_205,
  3, 186, :_reduce_206,
  6, 186, :_reduce_207,
  5, 186, :_reduce_208,
  5, 186, :_reduce_209,
  5, 186, :_reduce_210,
  5, 186, :_reduce_211,
  0, 227, :_reduce_212,
  5, 186, :_reduce_213,
  3, 186, :_reduce_214,
  3, 186, :_reduce_215,
  3, 186, :_reduce_216,
  3, 186, :_reduce_217,
  3, 186, :_reduce_218,
  3, 186, :_reduce_219,
  3, 186, :_reduce_220,
  3, 186, :_reduce_221,
  3, 186, :_reduce_222,
  4, 186, :_reduce_223,
  2, 186, :_reduce_224,
  2, 186, :_reduce_225,
  3, 186, :_reduce_226,
  3, 186, :_reduce_227,
  3, 186, :_reduce_228,
  3, 186, :_reduce_229,
  1, 186, :_reduce_none,
  3, 186, :_reduce_231,
  3, 186, :_reduce_232,
  3, 186, :_reduce_233,
  3, 186, :_reduce_234,
  3, 186, :_reduce_235,
  2, 186, :_reduce_236,
  2, 186, :_reduce_237,
  3, 186, :_reduce_238,
  3, 186, :_reduce_239,
  3, 186, :_reduce_240,
  3, 186, :_reduce_241,
  3, 186, :_reduce_242,
  6, 186, :_reduce_243,
  1, 186, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  3, 224, :_reduce_249,
  3, 224, :_reduce_250,
  1, 228, :_reduce_251,
  1, 229, :_reduce_none,
  2, 229, :_reduce_253,
  4, 229, :_reduce_254,
  2, 229, :_reduce_255,
  1, 222, :_reduce_none,
  3, 222, :_reduce_257,
  3, 233, :_reduce_258,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 181, :_reduce_263,
  4, 181, :_reduce_264,
  2, 181, :_reduce_265,
  1, 203, :_reduce_266,
  2, 203, :_reduce_267,
  2, 203, :_reduce_268,
  4, 203, :_reduce_269,
  1, 203, :_reduce_270,
  0, 237, :_reduce_271,
  2, 196, :_reduce_272,
  2, 236, :_reduce_273,
  2, 235, :_reduce_274,
  1, 235, :_reduce_none,
  1, 230, :_reduce_276,
  2, 230, :_reduce_277,
  3, 230, :_reduce_278,
  4, 230, :_reduce_279,
  1, 175, :_reduce_280,
  1, 175, :_reduce_281,
  3, 174, :_reduce_282,
  4, 174, :_reduce_283,
  2, 174, :_reduce_284,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_295,
  0, 272, :_reduce_296,
  4, 225, :_reduce_297,
  0, 273, :_reduce_298,
  3, 225, :_reduce_299,
  0, 274, :_reduce_300,
  4, 225, :_reduce_301,
  3, 225, :_reduce_302,
  3, 225, :_reduce_303,
  2, 225, :_reduce_304,
  0, 275, :_reduce_305,
  4, 225, :_reduce_306,
  0, 276, :_reduce_307,
  4, 225, :_reduce_308,
  1, 225, :_reduce_309,
  4, 225, :_reduce_310,
  3, 225, :_reduce_311,
  1, 225, :_reduce_312,
  5, 225, :_reduce_313,
  4, 225, :_reduce_314,
  3, 225, :_reduce_315,
  2, 225, :_reduce_316,
  1, 225, :_reduce_none,
  2, 225, :_reduce_318,
  2, 225, :_reduce_319,
  6, 225, :_reduce_320,
  6, 225, :_reduce_321,
  4, 225, :_reduce_322,
  4, 225, :_reduce_323,
  5, 225, :_reduce_324,
  4, 225, :_reduce_325,
  6, 225, :_reduce_326,
  0, 277, :_reduce_327,
  0, 278, :_reduce_328,
  7, 225, :_reduce_329,
  0, 279, :_reduce_330,
  0, 280, :_reduce_331,
  0, 281, :_reduce_332,
  9, 225, :_reduce_333,
  0, 282, :_reduce_334,
  0, 283, :_reduce_335,
  6, 225, :_reduce_336,
  0, 284, :_reduce_337,
  0, 285, :_reduce_338,
  7, 225, :_reduce_339,
  0, 286, :_reduce_340,
  0, 287, :_reduce_341,
  9, 225, :_reduce_342,
  1, 225, :_reduce_343,
  1, 225, :_reduce_344,
  1, 225, :_reduce_345,
  1, 225, :_reduce_346,
  1, 180, :_reduce_347,
  1, 247, :_reduce_none,
  1, 253, :_reduce_none,
  1, 256, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 262, :_reduce_none,
  1, 264, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 291, :_reduce_none,
  1, 292, :_reduce_none,
  1, 162, :_reduce_none,
  1, 293, :_reduce_none,
  1, 248, :_reduce_none,
  1, 202, :_reduce_none,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  2, 254, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 255, :_reduce_none,
  5, 255, :_reduce_373,
  1, 257, :_reduce_none,
  2, 257, :_reduce_375,
  1, 263, :_reduce_none,
  1, 263, :_reduce_377,
  1, 294, :_reduce_none,
  3, 294, :_reduce_379,
  1, 297, :_reduce_380,
  3, 297, :_reduce_381,
  1, 296, :_reduce_382,
  4, 296, :_reduce_383,
  6, 296, :_reduce_384,
  3, 296, :_reduce_385,
  5, 296, :_reduce_386,
  2, 296, :_reduce_387,
  4, 296, :_reduce_388,
  1, 296, :_reduce_389,
  3, 296, :_reduce_390,
  4, 298, :_reduce_391,
  2, 298, :_reduce_392,
  2, 298, :_reduce_393,
  1, 298, :_reduce_394,
  2, 303, :_reduce_395,
  1, 303, :_reduce_none,
  6, 304, :_reduce_397,
  8, 304, :_reduce_398,
  4, 304, :_reduce_399,
  6, 304, :_reduce_400,
  4, 304, :_reduce_401,
  2, 304, :_reduce_402,
  6, 304, :_reduce_403,
  2, 304, :_reduce_404,
  4, 304, :_reduce_405,
  6, 304, :_reduce_406,
  2, 304, :_reduce_407,
  4, 304, :_reduce_408,
  2, 304, :_reduce_409,
  4, 304, :_reduce_410,
  1, 304, :_reduce_411,
  1, 308, :_reduce_412,
  1, 308, :_reduce_413,
  3, 309, :_reduce_414,
  1, 309, :_reduce_415,
  4, 309, :_reduce_416,
  1, 310, :_reduce_none,
  4, 310, :_reduce_418,
  1, 311, :_reduce_419,
  3, 311, :_reduce_420,
  1, 312, :_reduce_421,
  1, 312, :_reduce_none,
  0, 316, :_reduce_423,
  0, 317, :_reduce_424,
  4, 252, :_reduce_425,
  4, 314, :_reduce_426,
  1, 314, :_reduce_427,
  3, 315, :_reduce_428,
  3, 315, :_reduce_429,
  3, 319, :_reduce_430,
  2, 193, :_reduce_431,
  4, 193, :_reduce_432,
  5, 193, :_reduce_433,
  5, 193, :_reduce_434,
  0, 322, :_reduce_435,
  3, 251, :_reduce_436,
  4, 251, :_reduce_437,
  4, 251, :_reduce_438,
  3, 251, :_reduce_439,
  3, 251, :_reduce_440,
  3, 251, :_reduce_441,
  2, 251, :_reduce_442,
  1, 251, :_reduce_443,
  4, 251, :_reduce_444,
  0, 323, :_reduce_445,
  4, 250, :_reduce_446,
  0, 324, :_reduce_447,
  4, 250, :_reduce_448,
  0, 325, :_reduce_449,
  0, 326, :_reduce_450,
  4, 198, :_reduce_451,
  0, 327, :_reduce_452,
  0, 328, :_reduce_453,
  4, 320, :_reduce_454,
  0, 330, :_reduce_455,
  6, 261, :_reduce_456,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  6, 161, :_reduce_459,
  0, 161, :_reduce_460,
  1, 331, :_reduce_461,
  1, 331, :_reduce_none,
  1, 331, :_reduce_none,
  2, 332, :_reduce_464,
  1, 332, :_reduce_none,
  2, 163, :_reduce_466,
  1, 163, :_reduce_none,
  1, 238, :_reduce_468,
  1, 238, :_reduce_469,
  1, 238, :_reduce_none,
  1, 239, :_reduce_471,
  1, 334, :_reduce_472,
  1, 334, :_reduce_none,
  2, 334, :_reduce_474,
  3, 335, :_reduce_475,
  1, 335, :_reduce_476,
  3, 240, :_reduce_477,
  3, 241, :_reduce_478,
  3, 242, :_reduce_479,
  3, 242, :_reduce_480,
  1, 339, :_reduce_481,
  3, 339, :_reduce_482,
  1, 340, :_reduce_none,
  2, 340, :_reduce_484,
  3, 244, :_reduce_485,
  0, 343, :_reduce_486,
  4, 244, :_reduce_487,
  1, 342, :_reduce_488,
  3, 342, :_reduce_489,
  3, 243, :_reduce_490,
  3, 243, :_reduce_491,
  3, 245, :_reduce_492,
  3, 245, :_reduce_493,
  1, 344, :_reduce_494,
  3, 344, :_reduce_495,
  1, 345, :_reduce_496,
  3, 345, :_reduce_497,
  1, 336, :_reduce_498,
  2, 336, :_reduce_499,
  1, 337, :_reduce_500,
  2, 337, :_reduce_501,
  1, 338, :_reduce_502,
  2, 338, :_reduce_503,
  1, 341, :_reduce_504,
  0, 347, :_reduce_505,
  3, 341, :_reduce_506,
  0, 348, :_reduce_507,
  4, 341, :_reduce_508,
  1, 346, :_reduce_509,
  1, 346, :_reduce_510,
  1, 346, :_reduce_511,
  1, 346, :_reduce_none,
  2, 219, :_reduce_513,
  1, 219, :_reduce_514,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  3, 220, :_reduce_519,
  1, 333, :_reduce_none,
  2, 333, :_reduce_521,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_531,
  1, 212, :_reduce_532,
  1, 212, :_reduce_533,
  1, 212, :_reduce_534,
  1, 212, :_reduce_535,
  1, 212, :_reduce_536,
  1, 212, :_reduce_537,
  1, 246, :_reduce_538,
  1, 246, :_reduce_539,
  1, 179, :_reduce_540,
  1, 179, :_reduce_541,
  1, 184, :_reduce_542,
  1, 184, :_reduce_543,
  0, 350, :_reduce_544,
  4, 265, :_reduce_545,
  1, 265, :_reduce_546,
  3, 269, :_reduce_547,
  0, 352, :_reduce_548,
  3, 269, :_reduce_549,
  4, 351, :_reduce_550,
  2, 351, :_reduce_551,
  2, 351, :_reduce_552,
  1, 351, :_reduce_none,
  2, 354, :_reduce_554,
  0, 354, :_reduce_555,
  6, 318, :_reduce_556,
  8, 318, :_reduce_557,
  4, 318, :_reduce_558,
  6, 318, :_reduce_559,
  4, 318, :_reduce_560,
  6, 318, :_reduce_561,
  2, 318, :_reduce_562,
  4, 318, :_reduce_563,
  6, 318, :_reduce_564,
  2, 318, :_reduce_565,
  4, 318, :_reduce_566,
  2, 318, :_reduce_567,
  4, 318, :_reduce_568,
  1, 318, :_reduce_569,
  0, 318, :_reduce_570,
  1, 313, :_reduce_571,
  1, 313, :_reduce_572,
  1, 313, :_reduce_573,
  1, 313, :_reduce_574,
  1, 295, :_reduce_none,
  1, 295, :_reduce_576,
  1, 356, :_reduce_none,
  1, 357, :_reduce_none,
  3, 357, :_reduce_579,
  1, 305, :_reduce_580,
  3, 305, :_reduce_581,
  1, 358, :_reduce_none,
  2, 359, :_reduce_583,
  1, 359, :_reduce_584,
  2, 360, :_reduce_585,
  1, 360, :_reduce_586,
  1, 299, :_reduce_none,
  3, 299, :_reduce_588,
  1, 353, :_reduce_none,
  3, 353, :_reduce_590,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 300, :_reduce_593,
  1, 300, :_reduce_594,
  3, 362, :_reduce_595,
  3, 363, :_reduce_596,
  1, 306, :_reduce_597,
  3, 306, :_reduce_598,
  1, 355, :_reduce_599,
  3, 355, :_reduce_600,
  1, 364, :_reduce_none,
  1, 364, :_reduce_none,
  2, 307, :_reduce_603,
  1, 307, :_reduce_604,
  1, 365, :_reduce_none,
  1, 365, :_reduce_none,
  2, 302, :_reduce_607,
  2, 301, :_reduce_608,
  0, 301, :_reduce_609,
  1, 270, :_reduce_none,
  0, 366, :_reduce_611,
  4, 270, :_reduce_612,
  1, 249, :_reduce_613,
  2, 249, :_reduce_none,
  1, 232, :_reduce_none,
  3, 232, :_reduce_616,
  3, 367, :_reduce_617,
  2, 367, :_reduce_618,
  4, 367, :_reduce_619,
  2, 367, :_reduce_620,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  1, 271, :_reduce_none,
  1, 271, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  2, 206, :_reduce_none,
  2, 182, :_reduce_none,
  0, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 266, :_reduce_646,
  1, 266, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_649,
  0, 152, :_reduce_650 ]

racc_reduce_n = 651

racc_shift_n = 1095

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tLOWEST => 144,
  :tEQL => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tLOWEST",
  "tEQL",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_43(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_54(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_57(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_59(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_64(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_65(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_66(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_67(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_68(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_69(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_70(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_71(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_72(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_73(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_74(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_75(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_76(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 78 omitted

def _reduce_79(val, _values, result)
                      result = val[1]

    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_82(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_83(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_84(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_85(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_86(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_87(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_88(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_89(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_90(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_91(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = val[1]

    result
end

def _reduce_94(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_95(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_96(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_97(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_102(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_107(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_109(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_110(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_111(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_112(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_113(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_114(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_116(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 117 omitted

def _reduce_118(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_119(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_120(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_125(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 126 omitted

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

def _reduce_205(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_211(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_212(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_213(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")


    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_235(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_236(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_242(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_243(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_258(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = args val

    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_267(val, _values, result)
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_270(val, _values, result)
                      result = call_args val

    result
end

def _reduce_271(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_272(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_273(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_274(val, _values, result)
                      result = val[1]

    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_277(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_278(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_279(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_283(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_284(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_296(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_298(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_299(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_301(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_303(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_304(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_305(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_306(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_308(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_310(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_311(val, _values, result)
                      result = new_yield

    result
end

def _reduce_312(val, _values, result)
                      result = new_yield

    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_314(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_315(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_316(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 317 omitted

def _reduce_318(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_319(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_325(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_326(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_329(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_330(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_331(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_334(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_335(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_336(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_338(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_339(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_340(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_341(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_342(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_343(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_346(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_347(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[1]

    result
end

def _reduce_380(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_381(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_382(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_383(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_385(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_386(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_387(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_388(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_389(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_390(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_391(val, _values, result)
                      result = call_args val

    result
end

def _reduce_392(val, _values, result)
                      result = call_args val

    result
end

def _reduce_393(val, _values, result)
                      result = call_args val

    result
end

def _reduce_394(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
 result = 0
    result
end

def _reduce_413(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_416(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      result = args val

    result
end

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_424(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_425(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_426(val, _values, result)
                      result = args val

    result
end

def _reduce_427(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_428(val, _values, result)
                      result = val[1]

    result
end

def _reduce_429(val, _values, result)
                      result = val[1]

    result
end

def _reduce_430(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_431(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_432(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_433(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_436(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_442(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_443(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_444(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_447(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_448(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_449(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_450(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_451(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_452(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_453(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_454(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_455(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_456(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 457 omitted

# reduce 458 omitted

def _reduce_459(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_460(val, _values, result)
                      result = nil

    result
end

def _reduce_461(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = val[1]

    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_469(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_472(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_475(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_476(val, _values, result)
                      result = new_string val

    result
end

def _reduce_477(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_478(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_479(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_480(val, _values, result)
                      result = val[1]

    result
end

def _reduce_481(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_482(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_485(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_486(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_487(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_488(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_489(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_490(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_491(val, _values, result)
                      result = val[1]

    result
end

def _reduce_492(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_493(val, _values, result)
                      result = val[1]

    result
end

def _reduce_494(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_495(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_496(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_497(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_498(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_499(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_500(val, _values, result)
                      result = nil

    result
end

def _reduce_501(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_502(val, _values, result)
                      result = nil

    result
end

def _reduce_503(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_504(val, _values, result)
                      result = new_string val

    result
end

def _reduce_505(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_506(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_507(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_508(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_509(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_510(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_511(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_514(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

def _reduce_531(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_536(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_537(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_538(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_539(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_540(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_541(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_542(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_543(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_544(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_545(val, _values, result)
                      result = val[2]

    result
end

def _reduce_546(val, _values, result)
                      result = nil

    result
end

def _reduce_547(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_548(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_549(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_550(val, _values, result)
                      result = args val

    result
end

def _reduce_551(val, _values, result)
                      result = args val

    result
end

def _reduce_552(val, _values, result)
                      result = args val

    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]

    result
end

def _reduce_555(val, _values, result)
                      result = nil

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_573(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_574(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      result = val[1]

    result
end

def _reduce_580(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_581(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_584(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_585(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_586(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      result = args val

    result
end

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_594(val, _values, result)
                      result = :"**"

    result
end

def _reduce_595(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_596(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_597(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_598(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_599(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_600(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_604(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 605 omitted

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_608(val, _values, result)
                      result = val[1]

    result
end

def _reduce_609(val, _values, result)
                      result = nil

    result
end

# reduce 610 omitted

def _reduce_611(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_612(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_613(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 614 omitted

# reduce 615 omitted

def _reduce_616(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_617(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_618(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_619(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value).line sym.line

    result
end

def _reduce_620(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

# reduce 645 omitted

def _reduce_646(val, _values, result)
 yyerrok
    result
end

# reduce 647 omitted

# reduce 648 omitted

def _reduce_649(val, _values, result)
 yyerrok
    result
end

def _reduce_650(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby23Parser
