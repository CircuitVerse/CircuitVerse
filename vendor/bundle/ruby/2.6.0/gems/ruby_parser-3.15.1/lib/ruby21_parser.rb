#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby21Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-303,598,598,-111,598,-115,284,-303,-303,-303,476,598,-303,-303,-303',
'284,-303,234,579,-108,576,575,574,-109,577,825,-303,-303,-303,-107,-111',
'-109,842,225,226,647,-303,-303,843,-303,-303,-303,-303,-303,1059,-101',
'-110,-103,-110,-114,853,-112,-112,235,-533,128,743,124,825,824,127,-533',
'598,225,226,746,-115,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-622,757,-303,-303,-303,222,819,-303,225,226,-303',
'824,286,-303,-303,-622,-303,646,-303,644,-303,286,-303,-303,-303,-303',
'-303,-303,-303,-106,-303,-101,-303,-103,128,128,-111,128,959,127,127',
'-111,127,-99,128,-303,-303,-303,-303,127,-303,-526,-303,-98,-102,-100',
'-109,-303,-526,-526,-526,-109,-113,-526,-526,-526,-101,-526,-103,-101',
'-101,-103,235,-105,852,-526,-103,-526,-526,-526,284,-110,643,-101,-112',
'-103,-110,-526,-526,-112,-526,-526,-526,-526,-526,128,583,-113,235,223',
'127,128,95,225,226,224,127,586,284,579,96,576,575,574,816,577,-626,227',
'-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'232,275,-526,-526,-526,-93,-526,-526,594,593,-526,336,128,-526,-526',
'-626,-526,127,-526,-79,-526,-541,-526,-526,-526,-526,-526,-526,-526',
'583,-526,-623,-526,106,107,286,723,-626,-110,725,586,-435,587,628,-626',
'-526,-526,-526,-526,-622,-526,-303,-526,-626,232,872,-115,-526,-303',
'-303,-303,235,-526,286,-303,-303,337,-303,-626,623,-104,-626,235,594',
'593,-626,624,-108,128,-619,-622,128,-532,127,-626,665,127,-303,-303',
'-532,-303,-303,-303,-303,-303,579,-106,576,575,574,235,577,-626,1038',
'630,629,626,587,-537,628,-115,371,108,109,-444,-537,-620,395,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-526,398',
'-303,-303,-303,628,670,-526,-540,-112,-303,400,-619,-303,106,107,-526',
'628,-303,403,-303,664,-303,-303,-303,-303,-303,-303,-303,769,-303,420',
'-303,770,-619,-444,628,-529,630,629,636,1007,-444,-541,-529,-303,-303',
'-626,-303,-620,-303,-444,912,-529,-626,-626,-626,-303,-536,425,-626',
'-626,-113,-626,-107,-536,630,629,879,-444,605,-620,-626,-212,628,787',
'475,-110,630,629,790,628,477,-626,-626,-99,-626,-626,-626,-626,-626',
'803,478,108,109,-294,128,630,629,-108,628,127,-294,633,234,-531,905',
'664,-109,803,817,-294,-531,507,-626,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,-626,-626,-626,289,-114,-626,-626,-626,-100,671,630,629',
'648,-626,-540,128,-626,630,629,631,127,-626,-109,-626,-101,-626,-626',
'-626,-626,-626,-626,-626,-212,-626,-626,-626,630,629,-110,665,-109,-112',
'517,723,520,-294,725,255,-626,-626,-626,-626,-294,-626,875,879,-98,-626',
'-626,-626,-626,-294,-626,-626,-626,-111,-626,522,723,723,-107,722,725',
'-526,-105,-626,-626,-626,-626,252,-526,-103,-78,254,253,235,-626,-626',
'-114,-626,-626,-626,-626,-626,579,-112,576,575,574,231,577,579,-529',
'576,575,574,538,577,579,-529,576,575,574,531,577,536,532,-626,-626,-626',
'-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,539,743,-626',
'-626,-626,-539,818,-626,743,292,-626,235,-539,-626,-626,743,-626,746',
'-626,289,-626,-539,-626,-626,-626,-626,-626,-626,-626,542,-626,-626',
'-626,579,231,576,575,574,583,577,546,280,225,226,255,-626,-626,-626',
'-626,586,-626,-529,-626,235,-535,875,879,-626,-529,-529,-529,-535,-111',
'-529,-529,-529,579,-529,576,575,574,581,577,255,605,-529,413,-529,-529',
'-529,591,590,594,593,594,593,610,-529,-529,-534,-529,-529,-529,-529',
'-529,579,-534,576,575,574,611,577,900,901,743,252,902,122,123,254,253',
'250,251,952,225,226,587,635,-529,-529,-529,-529,-529,-529,-529,-529',
'-529,-529,-529,-529,-529,-529,639,743,-529,-529,-529,-303,-529,-529',
'272,273,-529,642,-303,-529,-529,645,-529,-623,-529,652,-529,-303,-529',
'-529,-529,-529,-529,-529,-529,-276,-529,654,-529,579,655,576,575,574',
'583,577,235,255,662,271,270,-529,-529,-529,-529,586,-529,-626,-529,663',
'-538,289,675,-529,-626,-626,-626,-538,-529,255,-626,-626,255,-626,231',
'255,-538,581,255,252,255,473,-626,254,253,265,266,255,594,593,474,682',
'235,-626,-626,235,-626,-626,-626,-626,-626,252,231,258,235,254,253,250',
'251,548,252,256,-93,257,254,253,250,251,474,700,235,551,587,711,-626',
'-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,712',
'716,-626,-626,-626,579,671,576,575,574,-626,577,719,-626,235,726,727',
'522,-626,731,-626,734,-626,-626,-626,-626,-626,-626,-626,735,-626,-626',
'-626,579,737,576,575,574,739,577,741,749,-304,743,750,-626,-626,-303',
'-102,-304,-626,751,753,719,-303,-303,-303,-626,-304,719,-303,-303,-111',
'-303,255,259,260,261,262,272,273,743,605,263,264,-304,719,776,231,781',
'265,266,-304,-303,-303,772,-303,-303,-303,-303,-303,-304,791,792,774',
'-277,252,804,258,507,254,253,250,251,271,270,256,1000,257,576,575,574',
'507,577,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,231,-303,-303,-303,235,670,-303,1029,422,-303,821,-623',
'-303,424,423,-303,774,-303,275,-303,830,-303,-303,-303,-303,-303,-303',
'-303,832,-303,231,-303,-538,520,522,711,235,230,289,-538,289,711,255',
'235,-303,-303,228,-104,-538,-303,310,85,86,87,12,78,-303,870,-539,79',
'80,-113,235,879,83,-539,81,82,84,33,34,76,77,719,-539,235,906,-278,88',
'31,30,116,115,117,118,235,911,22,928,711,-276,933,659,11,49,312,13,120',
'119,121,110,60,112,111,113,938,114,122,123,235,106,107,734,45,46,44',
'255,259,260,261,262,272,273,267,268,263,264,231,248,249,231,941,265',
'266,1035,43,943,658,36,945,947,62,63,1033,947,64,656,38,252,235,258',
'48,254,253,250,251,271,270,256,23,257,953,719,-347,103,95,97,98,99,101',
'-347,719,719,96,104,235,269,719,-251,-347,235,66,971,-279,93,100,102',
'972,734,108,109,310,85,86,87,12,78,975,978,231,79,80,980,982,235,83',
'609,81,82,84,33,34,76,77,984,607,996,997,1009,88,31,30,116,115,117,118',
'719,719,22,781,1027,1030,842,659,11,49,312,13,120,119,121,110,60,112',
'111,113,1036,114,122,123,1039,106,107,947,45,46,44,255,259,260,261,262',
'272,273,267,268,263,264,231,248,249,-304,947,265,266,1029,43,947,-304',
'314,1044,1009,62,63,774,734,64,-304,38,252,1053,258,48,254,253,250,251',
'271,270,256,23,257,1055,1057,-303,103,95,97,98,99,101,-303,1059,1059',
'96,104,-623,269,716,1009,-303,719,66,719,-623,93,100,102,-622,235,108',
'109,310,85,86,87,12,78,947,1009,1082,79,80,1059,1059,1059,83,3,81,82',
'84,33,34,76,77,131,132,133,134,135,88,31,30,116,115,117,118,,1000,22',
'576,575,574,,577,11,49,312,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,',
'248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66',
',,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,131,132,133,134,135,88,31,30,116,115,117,118,,,22,131,132,133',
'134,135,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,',
',265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270',
'256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102',
',,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,131',
'132,133,134,135,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260',
'261,262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63',
',,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97',
'98,99,101,,,,96,104,,269,,,,,66,,,93,100,102,,,108,109,310,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248',
'249,,,265,266,,43,,,314,,,62,63,,,64,,38,252,,258,48,254,253,250,251',
'271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,235,269,,,,,66,',
',93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261',
'262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64',
',38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99',
'101,,,,96,104,,269,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,,248,249,',
',265,266,,43,,,314,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271',
'270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100',
'102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,,-648,-648,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,255,259,260,261,262,272,273,267,268,263,264,,-648,-648,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,-648,-648,-648,-648,272,273,,,-648',
'-648,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,-648,-648,-648',
'-648,272,273,,,-648,-648,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,255,-648,-648,-648,-648,272,273,,,-648,-648,,,,,,265,266,,43,',
',36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,8,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,255,-648,-648,-648,-648,272,273,,,-648,-648,',
',,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271',
'270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,255,-648,-648,-648,-648',
'272,273,,,-648,-648,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
'-648,-648,-648,-648,272,273,,,-648,-648,,,,,,265,266,,43,,,36,,,62,63',
',,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,255,259,260,261,262,272,273,267,,263,264,,,,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,255,,,,,,,,,,,,,,,,265,266,',
'43,,,36,,255,62,63,,,64,,38,252,,258,48,254,253,250,251,265,266,256',
'23,257,,,,103,95,97,98,99,101,,,252,96,104,,254,253,250,251,,66,,,93',
'100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,,,,,,,,,,,,,',
',,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,255,,,,,,,,,,,,,,,,265,266,,43,,,36,,,62',
'63,,,64,,38,252,,258,48,254,253,250,251,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'10,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,',
',,,,,,,986,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,',
'120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,',
',103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,235,,,,,,66,,304',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76',
'77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76',
'77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,',
',,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,327,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,318,,,,,,,,,,',
',,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332',
'116,115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,246,,,62,63,,,64,,',
',,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,335,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,246,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,534,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,',
',,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,',
',,,,,,,,,,,,,993,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,551,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,695,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,,,48,,,,,,',
',245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326',
'332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,986,,,246,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,612,60,112,111',
'613,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,614,,,246,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,612,60,112',
'111,613,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,614,,,246,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,128,,,,,127,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,327,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,333,,,,,,,,,,,,,,,,,,,,365,,,36,,,62,63,,,64,,38,,,,,,,,,,,,',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,413,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,695,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,',
'83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,',
',,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,413,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,327,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76',
'77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,',
',319,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,430,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,430,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,235,,,,',
',66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329',
'330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
',49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,796',
',,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,695,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49',
',,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326',
'332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,430,,,,48,,,,,',
',,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326',
'332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
'303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,695,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,-312,,108,109,,,,-312,-312,-312,,,-312,-312,-312,579,-312,576,575',
'574,583,577,,,,,-312,-312,,,,586,,,,,-312,-312,,-312,-312,-312,-312',
'-312,,,,,,,,,,581,,,,,,,,,591,590,594,593,,-312,-312,-312,-312,-312',
'-312,-312,-312,-312,-312,-312,-312,-312,-312,,,-312,-312,-312,,,-312',
',292,-312,,,-312,-312,,-312,587,-312,,-312,,-312,-312,-312,-312,-312',
'-312,-312,,-312,,-312,,,,,,,,,,,,,-312,-312,-647,-312,,-312,,,,-647',
'-647,-647,-312,,-647,-647,-647,579,-647,576,575,574,583,577,,,,-647',
'-647,,,,,586,,,,,-647,-647,,-647,-647,-647,-647,-647,,,,,,,,,,581,,',
',,,,,,591,590,594,593,,,,,,,,,,,,,-647,,-443,,,,,-647,,-443,-443,-443',
'289,-647,-443,-443,-443,,-443,,587,,,,,,,-443,-443,-443,,,,,-647,-647',
',,-443,-443,,-443,-443,-443,-443,-443,,,-647,,,,,-647,,,,,,,-647,,,',
',,,,,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443',
'-443,,,-443,-443,-443,,,-443,,289,-443,,,-443,-443,,-443,,-443,,-443',
',-443,-443,-443,-443,-443,-443,-443,,-443,-443,-443,,,,,,,,,,,,,-443',
'-443,-628,-443,,-443,,,,-628,-628,-628,-443,,-628,-628,-628,579,-628',
'576,575,574,583,577,,,,-628,-628,-628,-628,,,586,,,,,-628,-628,,-628',
'-628,-628,-628,-628,,,,,,,,,,581,,,,,,,,,,,594,593,,-628,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,,,-628,-628,-628,',
',-628,,,-628,,,-628,-628,,-628,587,-628,,-628,,-628,-628,-628,-628,-628',
'-628,-628,,-628,-628,-628,579,,576,575,574,583,577,,,,,,-628,-628,-628',
'-628,586,-628,-295,-628,,,,,-628,-295,-295,-295,,,-295,-295,-295,,-295',
',,,581,,,,,,-295,-295,-295,591,590,594,593,,,,-295,-295,,-295,-295,-295',
'-295,-295,,,,,,,,,,,,,,,,,,,,,,587,,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295,,,-295,,,-295,,',
'-295,-295,,-295,,-295,,-295,,-295,-295,-295,-295,-295,-295,-295,,-295',
',-295,579,,576,575,574,583,577,,,,,,-295,-295,-295,-295,586,-295,-647',
'-295,,,,,-295,-647,-647,-647,,,-647,-647,-647,,-647,,,,581,,,,,-647',
'-647,-647,,,,594,593,,,,-647,-647,,-647,-647,-647,-647,-647,,,,,,,,',
',,,,,,,,,,,,,587,,-647,-647,-647,-647,-647,-647,-647,-647,-647,-647',
'-647,-647,-647,-647,,,-647,-647,-647,,,-647,,289,-647,,,-647,-647,,-647',
',-647,,-647,,-647,-647,-647,-647,-647,-647,-647,,-647,-647,-647,,,,',
',,,,,,,,-647,-647,-627,-647,,-647,,,,-627,-627,-627,-647,,-627,-627',
'-627,579,-627,576,575,574,583,577,,,,-627,-627,-627,-627,,,586,,,,,-627',
'-627,,-627,-627,-627,-627,-627,,,,,,,,,,581,,,,,,,,,591,590,594,593',
',-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627',
',,-627,-627,-627,,,-627,,235,-627,,,-627,-627,,-627,587,-627,,-627,',
'-627,-627,-627,-627,-627,-627,-627,,-627,-627,-627,,,,,,,,,,,,,-627',
'-627,-627,-627,,-627,,-627,,,,,-627,189,200,190,213,186,206,196,195',
'216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208',
'215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181',
'139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190',
'213,186,206,196,195,216,217,211,194,193,188,214,218,219,198,187,201',
'205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184',
'191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170',
',,,,178,189,200,190,213,186,206,196,195,216,217,211,194,193,188,214',
'218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185',
'204,203,,,,,,184,191,182,183,179,180,181,139,141,138,,140,,,,,,,,,173',
'174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103',
',,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216',
'217,211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215',
'210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139',
'141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,',
'175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213',
'186,206,196,195,216,217,211,194,193,188,214,218,219,198,187,201,205',
'207,199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191',
'182,183,179,180,181,139,141,410,409,140,,411,,,,,,,173,174,,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,',
',,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211,194,193,188',
'214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197',
'185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173',
'174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217',
'211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210',
'380,379,381,378,185,204,203,,,,,,184,191,182,183,375,376,377,373,141',
'112,111,374,,114,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,387,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,678,464,,,679,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,1066,457,,,1067,,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,505,457,,,506,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,1063,464,,,1062,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,678,464,,,679',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,1068,464,,,1069,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',676,457,,,677,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,460,464,,,459,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,453,457,,,454,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,704,457,,,705',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,707,464,,,708,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',886,464,,,887,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,579,177,576,575,574,583,577,,,,,505,457',
',,506,586,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
'581,,,175,176,161,162,,,591,590,594,593,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,587,798,457,,,799,,,,',
',170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176',
'161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,,,,,,764,457,,,765,,,,,,170,,,173,174,178,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,801',
'464,,,800,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,766,464,,,767,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,579',
',576,575,574,583,577,,,676,457,,,677,,,586,,,170,,,173,174,178,169,151',
'152,153,160,157,159,,,154,155,,,581,175,176,161,162,,,,,,289,594,593',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,579,177,576',
'575,574,583,577,,,,,,587,,,,586,,,,,170,,,,579,178,576,575,574,583,577',
',,,,,,581,,579,586,576,575,574,583,577,,,594,593,,,,,579,586,576,575',
'574,583,577,,581,,,,,,,,586,,,594,593,,,581,565,,,,587,,,,591,590,594',
'593,,,581,579,,576,575,574,583,577,,591,590,594,593,,,587,579,586,576',
'575,574,583,577,,,,,,,,587,579,586,576,575,574,583,577,,581,,,,,,587',
',586,,,594,593,,,581,579,,576,575,574,583,577,,,,594,593,,,581,579,586',
'576,575,574,583,577,,,,594,593,,,587,579,586,576,575,574,583,577,,581',
',,,,,587,,586,591,590,594,593,,,581,,,,,,587,,,,,594,593,,,581,579,',
'576,575,574,583,577,,591,590,594,593,,,587,,586,,,,,,,,,,,,,587,,,,',
',,,,581,,,,,,587,,,591,590,594,593,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,587' ]
        racc_action_table = arr = ::Array.new(26050, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'679,354,883,1068,355,366,328,679,679,679,241,956,679,679,679,65,679',
'22,581,363,581,581,581,1080,581,683,679,679,679,362,766,884,715,353',
'353,404,679,679,715,679,679,679,679,679,1087,704,764,705,1066,610,729',
'1067,765,22,381,307,581,3,831,683,307,381,932,714,714,581,241,679,679',
'679,679,679,679,679,679,679,679,679,679,679,679,1068,600,679,679,679',
'13,679,679,784,784,679,831,328,679,679,766,679,404,679,401,679,65,679',
'679,679,679,679,679,679,366,679,704,679,705,354,883,1068,355,883,354',
'883,1068,355,363,956,679,679,679,679,956,679,110,679,362,766,884,1080',
'679,110,110,110,1080,679,110,110,110,704,110,705,704,764,705,714,610',
'729,110,765,110,110,110,685,1066,401,704,1067,705,1066,110,110,1067',
'110,110,110,110,110,932,972,767,784,15,932,600,92,469,469,16,600,972',
'29,746,92,746,746,746,676,746,707,18,110,110,110,110,110,110,110,110',
'110,110,110,110,110,110,437,25,110,110,110,699,110,110,972,972,110,40',
'892,110,110,886,110,892,110,699,110,239,110,110,110,110,110,110,110',
'731,110,767,110,333,333,685,562,707,676,562,731,29,972,389,707,110,110',
'110,110,707,110,800,110,707,20,746,437,110,800,800,800,469,110,29,800',
'800,43,800,886,383,767,707,49,731,731,886,383,239,896,612,886,359,380',
'896,886,799,359,800,800,380,800,800,800,800,800,952,20,952,952,952,998',
'952,886,998,389,389,389,731,377,396,20,73,333,333,836,377,613,99,800',
'800,800,800,800,800,800,800,800,800,800,800,800,800,612,100,800,800',
'800,637,800,612,238,799,800,101,612,800,44,44,612,640,800,102,800,798',
'800,800,800,800,800,800,800,614,800,136,800,614,612,836,789,613,396',
'396,396,952,836,42,613,800,800,801,800,613,800,836,820,613,801,801,801',
'800,375,220,801,801,800,801,238,375,637,637,1012,836,1012,613,801,475',
'406,637,240,798,640,640,640,391,242,801,801,42,801,801,801,801,801,660',
'243,44,44,994,5,789,789,42,393,5,994,393,247,379,789,453,820,908,677',
'994,379,281,801,801,801,801,801,801,801,801,801,801,801,801,801,801',
'285,475,801,801,801,660,801,406,406,406,801,41,964,801,391,391,391,964',
'801,660,801,453,801,801,801,801,801,801,801,337,801,801,801,393,393',
'453,454,908,677,296,558,297,324,558,481,801,801,678,801,324,801,752',
'752,41,678,678,678,801,324,678,678,678,801,678,300,557,850,41,557,850',
'373,337,678,678,678,678,481,373,454,313,481,481,315,678,678,337,678',
'678,678,678,678,1009,454,1009,1009,1009,322,1009,743,374,743,743,743',
'322,743,1007,374,1007,1007,1007,316,1007,322,317,678,678,678,678,678',
'678,678,678,678,678,678,678,678,678,323,1009,678,678,678,321,678,678',
'743,326,678,327,321,678,678,1007,678,743,678,332,678,321,678,678,678',
'678,678,678,678,334,678,678,678,978,27,978,978,978,978,978,338,27,17',
'17,341,678,678,678,678,978,678,113,678,347,376,1046,1046,678,113,113',
'113,376,678,113,113,113,870,113,870,870,870,978,870,496,360,113,361',
'113,113,113,978,978,978,978,734,734,365,113,113,378,113,113,113,113',
'113,953,378,953,953,953,367,953,785,785,870,496,785,785,785,496,496',
'496,496,870,778,778,978,395,113,113,113,113,113,113,113,113,113,113',
'113,113,113,113,398,953,113,113,113,887,113,113,47,47,113,400,887,113',
'113,403,113,887,113,426,113,887,113,113,113,113,113,113,113,429,113',
'431,113,1039,434,1039,1039,1039,1039,1039,448,482,451,47,47,113,113',
'113,113,1039,113,460,113,452,320,461,471,113,460,460,460,320,113,501',
'460,460,483,460,237,484,320,1039,497,482,485,237,460,482,482,501,501',
'486,1039,1039,237,502,513,460,460,514,460,460,460,460,460,501,339,501',
'529,501,501,501,501,339,497,501,530,501,497,497,497,497,339,533,535',
'540,1039,543,460,460,460,460,460,460,460,460,460,460,460,460,460,460',
'545,552,460,460,460,872,460,872,872,872,460,872,553,460,554,559,560',
'563,460,567,460,568,460,460,460,460,460,460,460,570,460,460,460,1044',
'571,1044,1044,1044,572,1044,580,588,770,872,592,460,460,459,460,770',
'460,595,597,601,459,459,459,460,770,602,459,459,460,459,498,498,498',
'498,498,498,498,1044,603,498,498,539,604,618,616,621,498,498,539,459',
'459,616,459,459,459,459,459,539,644,647,616,653,498,661,498,666,498',
'498,498,498,498,498,498,938,498,938,938,938,672,938,459,459,459,459',
'459,459,459,459,459,459,459,459,459,459,708,985,459,459,459,680,459',
'708,985,138,459,681,708,459,138,138,708,985,459,684,459,687,459,459',
'459,459,459,459,459,689,459,19,459,990,692,694,701,703,19,706,990,709',
'710,713,730,459,459,19,459,990,459,780,780,780,780,780,780,459,745,991',
'780,780,459,747,754,780,991,780,780,780,780,780,780,780,760,991,763',
'793,795,780,780,780,780,780,780,780,797,805,780,829,835,846,847,441',
'780,780,780,780,780,780,780,780,780,780,780,780,854,780,780,780,855',
'780,780,856,780,780,780,441,441,441,441,441,441,441,441,441,441,441',
'992,441,441,436,860,441,441,992,780,861,436,780,863,864,780,780,992',
'866,780,436,780,441,869,441,780,441,441,441,441,441,441,441,780,441',
'871,874,50,780,780,780,780,780,780,50,880,885,780,780,889,441,893,441',
'50,895,780,904,907,780,780,780,914,915,780,780,319,319,319,319,319,319',
'917,918,364,319,319,919,921,922,319,364,319,319,319,319,319,319,319',
'923,364,936,937,954,319,319,319,319,319,319,319,963,967,319,970,983',
'986,988,447,319,319,319,319,319,319,319,319,319,319,319,319,993,319',
'319,319,1002,319,319,1003,319,319,319,447,447,447,447,447,447,447,447',
'447,447,447,1028,447,447,1036,1004,447,447,1028,319,1005,1036,319,1006',
'1008,319,319,1028,1018,319,1036,319,447,1021,447,319,447,447,447,447',
'447,447,447,319,447,1022,1023,1069,319,319,319,319,319,319,1069,1024',
'1026,319,319,1069,447,1032,1045,1069,1050,319,1051,1062,319,319,319',
'1063,1065,319,319,852,852,852,852,852,852,1071,1072,1076,852,852,1077',
'1078,1079,852,1,852,852,852,852,852,852,852,9,9,9,9,9,852,852,852,852',
'852,852,852,,1038,852,1038,1038,1038,,1038,852,852,852,852,852,852,852',
'852,852,852,852,852,,852,852,852,,852,852,,852,852,852,24,24,24,24,24',
'24,24,24,24,24,24,,24,24,,,24,24,,852,,,852,,,852,852,,,852,,852,24',
',24,852,24,24,24,24,24,24,24,852,24,,,,852,852,852,852,852,852,,,,852',
'852,,24,,,,,852,,,852,852,852,,,852,852,853,853,853,853,853,853,,,,853',
'853,,,,853,,853,853,853,853,853,853,853,346,346,346,346,346,853,853',
'853,853,853,853,853,,,853,311,311,311,311,311,853,853,853,853,853,853',
'853,853,853,853,853,853,,853,853,853,,853,853,,853,853,853,550,550,550',
'550,550,550,550,550,550,550,550,,550,550,,,550,550,,853,,,853,,,853',
'853,,,853,,853,550,,550,853,550,550,550,550,550,550,550,853,550,,,,853',
'853,853,853,853,853,,,,853,853,,550,,,,,853,,,853,853,853,,,853,853',
'1017,1017,1017,1017,1017,1017,,,,1017,1017,,,,1017,,1017,1017,1017,1017',
'1017,1017,1017,528,528,528,528,528,1017,1017,1017,1017,1017,1017,1017',
',,1017,,,,,,1017,1017,1017,1017,1017,1017,1017,1017,1017,1017,1017,1017',
',1017,1017,1017,,1017,1017,,1017,1017,1017,802,802,802,802,802,802,802',
'802,802,802,802,,802,802,,,802,802,,1017,,,1017,,,1017,1017,,,1017,',
'1017,802,,802,1017,802,802,802,802,802,802,802,1017,802,,,,1017,1017',
'1017,1017,1017,1017,,,,1017,1017,,802,,,,,1017,,,1017,1017,1017,,,1017',
'1017,314,314,314,314,314,314,,,,314,314,,,,314,,314,314,314,314,314',
'314,314,,,,,,314,314,314,314,314,314,314,,,314,,,,,,314,314,314,314',
'314,314,314,314,314,314,314,314,,314,314,314,,314,314,,314,314,314,500',
'500,500,500,500,500,500,500,500,500,500,,500,500,,,500,500,,314,,,314',
',,314,314,,,314,,314,500,,500,314,500,500,500,500,500,500,500,314,500',
',,,314,314,314,314,314,314,,,,314,314,500,500,,,,,314,,,314,314,314',
',,314,314,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,,1015,,1015,1015',
'1015,1015,1015,1015,1015,,,,,,1015,1015,1015,1015,1015,1015,1015,,,1015',
',,,,,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,,1015',
'1015,1015,,1015,1015,,1015,1015,1015,913,913,913,913,913,913,913,913',
'913,913,913,,913,913,,,913,913,,1015,,,1015,,,1015,1015,,,1015,,1015',
'913,,913,1015,913,913,913,913,913,913,913,1015,913,,,,1015,1015,1015',
'1015,1015,1015,,,,1015,1015,,913,,,,,1015,,,1015,1015,1015,,,1015,1015',
'36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36',
'36,36,36,36,,,36,,,,,,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36',
',36,36,,36,36,36,294,294,294,294,294,294,294,294,294,294,294,,294,294',
',,294,294,,36,,,36,,,36,36,,,36,,36,294,,294,36,294,294,294,294,294',
'294,294,36,294,,,,36,36,36,36,36,36,,,,36,36,,294,,,,,36,,,36,36,36',
',,36,36,1010,1010,1010,1010,1010,1010,,,,1010,1010,,,,1010,,1010,1010',
'1010,1010,1010,1010,1010,,,,,,1010,1010,1010,1010,1010,1010,1010,,,1010',
',,,,,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,,1010',
'1010,1010,,1010,1010,,1010,1010,1010,479,479,479,479,479,479,479,479',
'479,479,479,,479,479,,,479,479,,1010,,,1010,,,1010,1010,,,1010,,1010',
'479,,479,1010,479,479,479,479,479,479,479,1010,479,,,,1010,1010,1010',
'1010,1010,1010,,,,1010,1010,,,,,,,1010,,,1010,1010,1010,,,1010,1010',
'358,358,358,358,358,358,,,,358,358,,,,358,,358,358,358,358,358,358,358',
',,,,,358,358,358,358,358,358,358,,,358,,,,,,358,358,358,358,358,358',
'358,358,358,358,358,358,,358,358,358,,358,358,,358,358,358,480,480,480',
'480,480,480,480,480,480,480,480,,480,480,,,480,480,,358,,,358,,,358',
'358,,,358,,358,480,,480,358,480,480,480,480,480,480,480,358,480,,,,358',
'358,358,358,358,358,,,,358,358,,,,,,,358,,,358,358,358,,,358,358,786',
'786,786,786,786,786,,,,786,786,,,,786,,786,786,786,786,786,786,786,',
',,,,786,786,786,786,786,786,786,,,786,,,,,,786,786,786,786,786,786,786',
'786,786,786,786,786,,786,786,786,,786,786,,786,786,786,490,490,490,490',
'490,490,490,,,490,490,,,,,,490,490,,786,,,786,,,786,786,,,786,,786,490',
',490,786,490,490,490,490,490,490,490,786,490,,,,786,786,786,786,786',
'786,,,,786,786,,,,,,,786,,,786,786,786,,,786,786,357,357,357,357,357',
'357,,,,357,357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357,357',
'357,357,357,357,,,357,,,,,,357,357,357,357,357,357,357,357,357,357,357',
'357,,357,357,357,,357,357,,357,357,357,491,491,491,491,491,491,491,',
',491,491,,,,,,491,491,,357,,,357,,,357,357,,,357,,357,491,,491,357,491',
'491,491,491,491,491,491,357,491,,,,357,357,357,357,357,357,,,,357,357',
',,,,,,357,,,357,357,357,,,357,357,989,989,989,989,989,989,,,,989,989',
',,,989,,989,989,989,989,989,989,989,,,,,,989,989,989,989,989,989,989',
',,989,,,,,,989,989,989,989,989,989,989,989,989,989,989,989,,989,989',
'989,,989,989,,989,989,989,492,492,492,492,492,492,492,,,492,492,,,,',
',492,492,,989,,,989,,,989,989,,,989,,989,492,,492,989,492,492,492,492',
'492,492,492,989,492,,,,989,989,989,989,989,989,,,,989,989,,,,,,,989',
',,989,989,989,,,989,989,649,649,649,649,649,649,,,,649,649,,,,649,,649',
'649,649,649,649,649,649,,,,,,649,649,649,649,649,649,649,,,649,,,,,',
'649,649,649,649,649,649,649,649,649,649,649,649,,649,649,649,,649,649',
',649,649,649,493,493,493,493,493,493,493,,,493,493,,,,,,493,493,,649',
',,649,,,649,649,,,649,,649,493,,493,649,493,493,493,493,493,493,493',
'649,493,,,,649,649,649,649,649,649,,,,649,649,,,,,,,649,,,649,649,649',
',,649,649,246,246,246,246,246,246,,,,246,246,,,,246,,246,246,246,246',
'246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,246,246,246',
'246,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246',
'494,494,494,494,494,494,494,,,494,494,,,,,,494,494,,246,,,246,,,246',
'246,,,246,,246,494,,494,246,494,494,494,494,494,494,494,246,494,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,345',
'345,345,345,345,345,,,,345,345,,,,345,,345,345,345,345,345,345,345,',
',,,,345,345,345,345,345,345,345,,,345,,,,,,345,345,345,345,345,345,345',
'345,345,345,345,345,,345,345,345,,345,345,,345,345,345,495,495,495,495',
'495,495,495,,,495,495,,,,,,495,495,,345,,,345,,,345,345,,,345,,345,495',
',495,345,495,495,495,495,495,495,495,345,495,,,,345,345,345,345,345',
'345,,,,345,345,,,,,,,345,,,345,345,345,,,345,345,960,960,960,960,960',
'960,,,,960,960,,,,960,,960,960,960,960,960,960,960,,,,,,960,960,960',
'960,960,960,960,,,960,,,,,,960,960,960,960,960,960,960,960,960,960,960',
'960,,960,960,960,,960,960,,960,960,960,499,499,499,499,499,499,499,499',
',499,499,,,,,,499,499,,960,,,960,,,960,960,,,960,,960,499,,499,960,499',
'499,499,499,499,499,499,960,499,,,,960,960,960,960,960,960,,,,960,960',
',,,,,,960,,,960,960,960,,,960,960,930,930,930,930,930,930,,,,930,930',
',,,930,,930,930,930,930,930,930,930,,,,,,930,930,930,930,930,930,930',
',,930,,,,,,930,930,930,930,930,930,930,930,930,930,930,930,,930,930',
'930,,930,930,,930,930,930,549,,,,,,,,,,,,,,,,549,549,,930,,,930,,489',
'930,930,,,930,,930,549,,549,930,549,549,549,549,489,489,549,930,549',
',,,930,930,930,930,930,930,,,489,930,930,,489,489,489,489,,930,,,930',
'930,930,,,930,930,599,599,599,599,599,599,,,,599,599,,,,599,,599,599',
'599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,,599,,,,,,599',
'599,599,599,599,599,599,599,599,599,599,599,,599,599,599,,599,599,,599',
'599,599,488,,,,,,,,,,,,,,,,488,488,,599,,,599,,,599,599,,,599,,599,488',
',488,599,488,488,488,488,,,,599,,,,,599,599,599,599,599,599,,,,599,599',
',,,,,,599,,,599,599,599,,,599,599,596,596,596,596,596,596,,,,596,596',
',,,596,,596,596,596,596,596,596,596,,,,,,596,596,596,596,596,596,596',
',,596,,,,,,596,596,596,596,596,596,596,596,596,596,596,596,,596,596',
'596,,596,596,,596,596,596,487,,,,,,,,,,,,,,,,487,487,,596,,,596,,,596',
'596,,,596,,596,487,,487,596,487,487,487,487,,,,596,,,,,596,596,596,596',
'596,596,,,,596,596,,,,,,,596,,,596,596,596,,,596,596,222,222,222,222',
'222,222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222',
'222,222,222,222,222,,,222,,,,,,222,222,222,222,222,222,222,222,222,222',
'222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,',
'222,,,222,222,,,222,,222,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222',
',,,222,222,,,,,,,222,,,222,222,222,,,222,222,768,768,768,768,768,768',
',,,768,768,,,,768,,768,768,768,768,768,768,768,,,,,,768,768,768,768',
'768,768,768,,,768,,,,,,768,768,768,768,768,768,768,768,768,768,768,768',
',768,768,768,,768,768,,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768',
'768,,,768,,768,,,,768,,,,,,,,768,,,,,768,768,768,768,768,768,,,,768',
'768,,,,,,,768,,,768,768,768,,,768,768,929,929,929,929,929,929,,,,929',
'929,,,,929,,929,929,929,929,929,929,929,,,,,,929,929,929,929,929,929',
'929,,,929,,,,,,929,929,929,929,929,929,929,929,929,929,929,929,,929',
'929,929,,929,929,,929,929,929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929',
',,929,,929,,,,929,,,,,,,,929,,,,,929,929,929,929,929,929,,,,929,929',
',,,,,,929,,,929,929,929,,,929,929,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2',
'2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2',
',2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2',
'2,2,2,,,,2,2,,,,,,,2,,,2,2,2,,,2,2,826,826,826,826,826,826,,,,826,826',
',,,826,,826,826,826,826,826,826,826,,,,,,826,826,826,826,826,826,826',
',,826,,,,,,826,826,826,826,826,826,826,826,826,826,826,826,,826,826',
'826,,826,826,,826,826,826,,,,,,,,,,,,,,,,,,,,826,,,826,,,826,826,,,826',
',826,,,,826,,,,,,,,826,,,,,826,826,826,826,826,826,,,,826,826,,,,,,',
'826,,,826,826,826,,,826,826,890,890,890,890,890,890,,,,890,890,,,,890',
',890,890,890,890,890,890,890,,,,,,890,890,890,890,890,890,890,,,890',
',,,,,890,890,890,890,890,890,890,890,890,890,890,890,,890,890,890,,890',
'890,,890,890,890,,,,,,,,,,,,,,,,,,,,890,,,890,,,890,890,,,890,,890,',
',,890,,,,,,,,890,,,,,890,890,890,890,890,890,,,,890,890,,,,,,,890,,',
'890,890,890,,,890,890,779,779,779,779,779,779,,,,779,779,,,,779,,779',
'779,779,779,779,779,779,,,,,,779,779,779,779,779,779,779,,,779,,,,,',
'779,779,779,779,779,779,779,779,779,779,779,779,,779,779,779,,779,779',
',779,779,779,,,,,,,,,,,,,,,,,,,,779,,,779,,,779,779,,,779,,779,,,,779',
',,,,,,,779,,,,,779,779,779,779,779,779,,,,779,779,,,,,,,779,,,779,779',
'779,,,779,779,879,879,879,879,879,879,,,,879,879,,,,879,,879,879,879',
'879,879,879,879,,,,,,879,879,879,879,879,879,879,,,879,,,,,,879,879',
'879,879,879,879,879,879,879,879,879,879,,879,879,879,,879,879,,879,879',
'879,,,,,,,,,,,,,,,,,,,,879,,,879,,,879,879,,,879,,879,,,,879,,,,,,,',
'879,,,,,879,879,879,879,879,879,,,,879,879,,,,,,,879,,,879,879,879,',
',879,879,844,844,844,844,844,844,,,,844,844,,,,844,,844,844,844,844',
'844,844,844,,,,,,844,844,844,844,844,844,844,,,844,,,,,,844,844,844',
'844,844,844,844,844,844,844,844,844,,844,844,844,,844,844,,844,844,844',
',,,,,,,,,,,,,,,,,,,844,,,844,,,844,844,,,844,,844,,,,844,,,,,,,,844',
',,,,844,844,844,844,844,844,,,,844,844,,,,,,,844,,,844,844,844,,,844',
'844,924,924,924,,924,,,,924,924,,,,924,,924,924,924,924,924,924,924',
',,,,,924,924,924,924,924,924,924,,,924,,,,,,,924,,,924,924,924,924,924',
'924,924,924,,924,924,924,,924,924,,,,924,,,,,,,,,,,,,,,,,,,,924,,,924',
',,924,924,,,924,,,,,,,,,,,,,,,,,,,924,924,924,924,924,924,,,,924,924',
',,,,,,924,,,924,924,924,,,924,924,282,282,282,,282,,,,282,282,,,,282',
',282,282,282,282,282,282,282,,,,,,282,282,282,282,282,282,282,,,282',
',,,,,,282,,,282,282,282,282,282,282,282,282,282,282,282,282,,282,282',
',282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,,282,,282,,282',
',282,,,,,,,,282,,,,,282,282,282,282,282,282,,,,282,282,,,,,,,282,,282',
'282,282,282,,,282,282,762,762,762,,762,,,,762,762,,,,762,,762,762,762',
'762,762,762,762,,,,,,762,762,762,762,762,762,762,,,762,,,,,,,762,,,762',
'762,762,762,762,762,762,762,,762,762,762,,762,762,,762,762,762,,,,,',
',,,,,,,,,,,,,,762,,,762,,,762,762,,,762,,762,,,,762,,,,,,,,762,,,,,762',
'762,762,762,762,762,,,,762,762,,,,,,,762,,,762,762,762,,,762,762,289',
'289,289,,289,,,,289,289,,,,289,,289,289,289,289,289,289,289,,,,,,289',
'289,289,289,289,289,289,,,289,,,,,,,289,,,289,289,289,289,289,289,289',
'289,289,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289',
',,289,289,,,289,,289,,289,,289,,,,,,,,289,,,,,289,289,289,289,289,289',
',,,289,289,,,,,,,289,,289,289,289,289,,,289,289,774,774,774,,774,,,',
'774,774,,,,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774',
'774,774,,,774,,,,,,,774,,,774,774,774,774,774,774,774,774,774,774,774',
'774,,774,774,,774,774,774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774',
',774,,774,,774,,,,,,,,774,,,,,774,774,774,774,774,774,,,,774,774,,,',
',,,774,,774,774,774,774,,,774,774,292,292,292,,292,,,,292,292,,,,292',
',292,292,292,292,292,292,292,,,,,,292,292,292,292,292,292,292,,,292',
',,,,,,292,,,292,292,292,292,292,292,292,292,292,292,292,292,,292,292',
',292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,292,,292',
',292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292,292,292,,,,,,292',
',292,292,292,292,,,292,292,796,796,796,,796,,,,796,796,,,,796,,796,796',
'796,796,796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796',
',,796,796,796,796,796,796,796,796,,796,796,796,,796,796,,796,796,796',
',,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796,,,',
',796,796,796,796,796,796,,,,796,796,,,,,,,796,,,796,796,796,,,796,796',
'32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32',
'32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32',
'32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32',
',,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,803,803',
'803,,803,,,,803,803,,,,803,,803,803,803,803,803,803,803,,,,,,803,803',
'803,803,803,803,803,,,803,,,,,,,803,,,803,803,803,803,803,803,803,803',
',803,803,803,,803,803,,803,803,803,,,,,,,,,,,,,,,,,,,,803,,,803,,,803',
'803,,,803,,,,,,803,,,,,,,,803,,,,,803,803,803,803,803,803,,,,803,803',
',,,,,,803,,,803,803,803,,,803,803,33,33,33,,33,,,,33,33,,,,33,,33,33',
'33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33',
'33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33',
',,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,',
',,,,33,,33,33,33,33,,,33,33,816,816,816,,816,,,,816,816,,,,816,,816',
'816,816,816,816,816,816,,,,,,816,816,816,816,816,816,816,,,816,,,,,',
',816,,,816,816,816,816,816,816,816,816,,816,816,816,,816,816,,816,816',
'816,,,,,,,,,,,,,,,,,,,,816,,,816,,,816,816,,,816,,,,,,816,,,,,,,,816',
',,,,816,816,816,816,816,816,,,,816,816,,,,,,,816,,,816,816,816,,,816',
'816,817,817,817,,817,,,,817,817,,,,817,,817,817,817,817,817,817,817',
',,,,,817,817,817,817,817,817,817,,,817,,,,,,,817,,,817,817,817,817,817',
'817,817,817,,817,817,817,,817,817,,817,817,817,,,,,,,,,,,,,,,,,,,,817',
',,817,,,817,817,,,817,,,,,,817,,,,,,,,817,,,,,817,817,817,817,817,817',
',,,817,817,,,,,,,817,,,817,817,817,,,817,817,818,818,818,,818,,,,818',
'818,,,,818,,818,818,818,818,818,818,818,,,,,,818,818,818,818,818,818',
'818,,,818,,,,,,,818,,,818,818,818,818,818,818,818,818,,818,818,818,',
'818,818,,818,818,818,,,,,,,,,,,,,,,,,,,,818,,,818,,,818,818,,,818,,',
',,,818,,,,,,,,818,,,,,818,818,818,818,818,818,,,,818,818,,,,,,,818,',
',818,818,818,,,818,818,819,819,819,,819,,,,819,819,,,,819,,819,819,819',
'819,819,819,819,,,,,,819,819,819,819,819,819,819,,,819,,,,,,,819,,,819',
'819,819,819,819,819,819,819,,819,819,819,,819,819,,819,819,819,,,,,',
',,,,,,,,,,,,,,819,,,819,,,819,819,,,819,,,,,,819,,,,,,,,819,,,,,819',
'819,819,819,819,819,,,,819,819,,,,,,,819,,,819,819,819,,,819,819,821',
'821,821,,821,,,,821,821,,,,821,,821,821,821,821,821,821,821,,,,,,821',
'821,821,821,821,821,821,,,821,,,,,,,821,,,821,821,821,821,821,821,821',
'821,,821,821,821,,821,821,,821,821,821,,,,,,,,,,,,,,,,,,,,821,,,821',
',,821,821,,,821,,,,,,821,,,,,,,,821,,,,,821,821,821,821,821,821,,,,821',
'821,,,,,,,821,,,821,821,821,,,821,821,299,299,299,,299,,,,299,299,,',
',299,,299,299,299,299,299,299,299,,,,,,299,299,299,299,299,299,299,',
',299,,,,,,,299,,,299,299,299,299,299,299,299,299,,299,299,299,,299,299',
',299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,299,',
',,,,,,299,,,,,299,299,299,299,299,299,,,,299,299,,,,,,,299,,,299,299',
'299,,,299,299,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,',
',34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34',
'34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,',
'34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34',
',,34,34,301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301',
'301,,,,,,301,301,301,301,301,301,301,,,301,,,,,,,301,,,301,301,301,301',
'301,301,301,301,,301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,',
',,301,,,301,,,301,301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301',
'301,301,,,,301,301,,,,,,,301,,,301,301,301,,,301,301,303,303,303,,303',
',,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303',
'303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303,303,303,,303,303',
'303,,303,303,,303,303,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303',
',,,,,303,,,,,,,,303,,,,,303,303,303,303,303,303,,,,303,303,,,,,,,303',
',,303,303,303,,,303,303,304,304,304,,304,,,,304,304,,,,304,,304,304',
'304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304',
',,304,304,304,304,304,304,304,304,,304,304,304,,304,304,,304,304,304',
',,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,304,,,,,,,,304,,,',
',304,304,304,304,304,304,,,,304,304,,,,,,,304,,,304,304,304,,,304,304',
'310,310,310,310,310,,,,310,310,,,,310,,310,310,310,310,310,310,310,',
',,,,310,310,310,310,310,310,310,,,310,,,,,,310,310,,310,310,310,310',
'310,310,310,310,310,,310,310,310,,310,310,,310,310,310,,,,,,,,,,,,,',
',,,,,,310,,,310,,,310,310,,,310,,310,,,,310,,,,,,,,310,,,,,310,310,310',
'310,310,310,,,,310,310,,,,,,,310,,,310,310,310,,,310,310,37,37,37,,37',
',,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37',
',,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,',
',,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37',
',,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38',
'38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38',
'38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38',
'38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38',
'38,38,,,38,38,318,318,318,,318,,,,318,318,,,,318,,318,318,318,318,318',
'318,318,,,,,,318,318,318,318,318,318,318,,,318,,,,,,,318,,,318,318,318',
'318,318,318,318,318,,318,318,318,,318,318,,,,318,,,,,,,,,,,,,,,,,,,',
'318,,,318,,,318,318,,,318,,,,,,,,,,,,,,,,,,,318,318,318,318,318,318',
',,,318,318,,,,318,,,318,,,318,318,318,,,318,318,877,877,877,,877,,,',
'877,877,,,,877,,877,877,877,877,877,877,877,,,,,,877,877,877,877,877',
'877,877,,,877,,,,,,,877,,,877,877,877,877,877,877,877,877,,877,877,877',
',877,877,,877,877,877,,,,,,,,,,,,,,,,,,,,877,,,877,,,877,877,,,877,',
',,,,877,,,,,,,,877,,,,,877,877,877,877,877,877,,,,877,877,,,,,,,877',
',,877,877,877,,,877,877,891,891,891,,891,,,,891,891,,,,891,,891,891',
'891,891,891,891,891,,,,,,891,891,891,891,891,891,891,,,891,,,,,,,891',
',,891,891,891,891,891,891,891,891,,891,891,891,,891,891,,891,891,891',
',,,,,,,,,,,,,,,,,,,891,,,891,,,891,891,,,891,,,,,,891,,,,,,,,891,,,',
',891,891,891,891,891,891,,,,891,891,,,,,,,891,,,891,891,891,,,891,891',
'911,911,911,,911,,,,911,911,,,,911,,911,911,911,911,911,911,911,,,,',
',911,911,911,911,911,911,911,,,911,,,,,,,911,,,911,911,911,911,911,911',
'911,911,911,911,911,911,,911,911,,911,911,911,,,,,,,,,,,,,,,,,,,,911',
',,911,,,911,911,,,911,,,,911,,911,,,,,,,,911,,,,,911,911,911,911,911',
'911,,,,911,911,,,,,,,911,,911,911,911,911,,,911,911,912,912,912,,912',
',,,912,912,,,,912,,912,912,912,912,912,912,912,,,,,,912,912,912,912',
'912,912,912,,,912,,,,,,,912,,,912,912,912,912,912,912,912,912,,912,912',
'912,,912,912,,912,912,912,,,,,,,,,,,,,,,,,,,,912,,,912,,,912,912,,,912',
',,,,,912,,,,,,,,912,,,,,912,912,912,912,912,912,,,,912,912,,,,,,,912',
',,912,912,912,,,912,912,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45',
'45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45',
'45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45',
',,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45',
',,45,45,335,335,335,,335,,,,335,335,,,,335,,335,335,335,335,335,335',
'335,,,,,,335,335,335,335,335,335,335,,,335,,,,,,,335,,,335,335,335,335',
'335,335,335,335,,335,335,335,,335,335,,,,335,,,,,,,,,,,,,,,,,,,,335',
',,335,,,335,335,,,335,,,,,,,,,,,,,,,,,,,335,335,335,335,335,335,,,,335',
'335,,,,,,,335,,,335,335,335,,,335,335,46,46,46,,46,,,,46,46,,,,46,,46',
'46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46',
'46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46',
',,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,',
'46,,,46,46,46,,,46,46,933,933,933,,933,,,,933,933,,,,933,,933,933,933',
'933,933,933,933,,,,,,933,933,933,933,933,933,933,,,933,,,,,,,933,,,933',
'933,933,933,933,933,933,933,,933,933,933,,933,933,,,,933,,,,,,,,,,,',
',,,,,,,,933,,,933,,,933,933,,,933,,,,,,,,,,,,,,,,,,,933,933,933,933',
'933,933,,,,933,933,,,,,,,933,,,933,933,933,,,933,933,342,342,342,,342',
',,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342,342',
'342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342,342',
'342,,342,342,,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342',
',,,,,342,,,,,,,,342,,,,,342,342,342,342,342,342,,,,342,342,,,,,,,342',
',,342,342,342,,,342,342,344,344,344,,344,,,,344,344,,,,344,,344,344',
'344,344,344,344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344',
',,344,344,344,344,344,344,344,344,,344,344,344,,344,344,,344,344,344',
',,,,,,,,,,,,,,,,,,,344,,,344,344,,344,344,,,344,,,,,,344,,,,,,,,344',
',,,,344,344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,,344',
'344,959,959,959,,959,,,,959,959,,,,959,,959,959,959,959,959,959,959',
',,,,,959,959,959,959,959,959,959,,,959,,,,,,,959,,,959,959,959,959,959',
'959,959,959,,959,959,959,,959,959,,959,959,959,,,,,,,,,,,,,,,,,,,,959',
',,959,,,959,959,,,959,,959,,,,959,,,,,,,,959,,,,,959,959,959,959,959',
'959,,,,959,959,,,,,,,959,,,959,959,959,,,959,959,48,48,48,,48,,,,48',
'48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,',
'48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,',
',,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48',
',,,48,48,,,,,,,48,,,48,48,48,,,48,48,348,348,348,,348,,,,348,348,,,',
'348,,348,348,348,348,348,348,348,,,,,,348,348,348,348,348,348,348,,',
'348,,,,,,,348,,,348,348,348,348,348,348,348,348,348,348,348,348,,348',
'348,,348,348,348,,,,,,,,,,,,,,,,,,,,348,,,348,,,348,348,,,348,,348,',
',,348,,,,,,,,348,,,,,348,348,348,348,348,348,,,,348,348,,,,,,,348,,348',
'348,348,348,,,348,348,984,984,984,,984,,,,984,984,,,,984,,984,984,984',
'984,984,984,984,,,,,,984,984,984,984,984,984,984,,,984,,,,,,,984,,,984',
'984,984,984,984,984,984,984,,984,984,984,,984,984,,,,984,,,,,,,,,,,',
',,,,,,,,984,,,984,,,984,984,,,984,,,,,,,,,,,,,,,,,,,984,984,984,984',
'984,984,,,,984,984,,,,,,,984,,,984,984,984,,,984,984,349,349,349,,349',
',,,349,349,,,,349,,349,349,349,349,349,349,349,,,,,,349,349,349,349',
'349,349,349,,,349,,,,,,,349,,,349,349,349,349,349,349,349,349,349,349',
'349,349,,349,349,,349,349,349,,,,,,,,,,,,,,,,,,,,349,,,349,,,349,349',
',,349,,,,,,349,,,,,,,,349,,,,,349,349,349,349,349,349,,,,349,349,,,',
',,,349,,349,349,349,349,,,349,349,356,356,356,,356,,,,356,356,,,,356',
',356,356,356,356,356,356,356,,,,,,356,356,356,356,356,356,356,,,356',
',,,,,,356,,,356,356,356,356,356,356,356,356,,356,356,356,,356,356,,356',
'356,356,,,,,,,,,,,,,,,,,,,,356,,,356,,,356,356,,,356,,,,,,356,,,,,,',
',356,,,,,356,356,356,356,356,356,,,,356,356,,,,,,,356,,,356,356,356',
',,356,356,1033,1033,1033,,1033,,,,1033,1033,,,,1033,,1033,1033,1033',
'1033,1033,1033,1033,,,,,,1033,1033,1033,1033,1033,1033,1033,,,1033,',
',,,,,1033,,,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033',
',1033,1033,,1033,1033,1033,,,,,,,,,,,,,,,,,,,,1033,,,1033,,,1033,1033',
',,1033,,1033,,1033,,1033,,,,,,,,1033,,,,,1033,1033,1033,1033,1033,1033',
',,,1033,1033,,,,,,,1033,,1033,1033,1033,1033,,,1033,1033,62,62,62,62',
'62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,',
'62,,,,,,62,62,,62,62,62,62,62,62,62,62,62,,62,62,62,,62,62,,62,62,62',
',,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62',
'62,62,62,62,,,,62,62,,,,,,,62,,,62,62,62,,,62,62,370,370,370,,370,,',
',370,370,,,,370,,370,370,370,370,370,370,370,,,,,,370,370,370,370,370',
'370,370,,,370,,,,,,,370,,,370,370,370,370,370,370,370,370,,370,370,370',
',370,370,,,,370,,,,,,,,,,,,,,,,,,,,370,,,370,,,370,370,,,370,,,,,,,',
',,,,,,,,,,,370,370,370,370,370,370,,,,370,370,,,,,,,370,,,370,370,370',
',,370,370,372,372,372,,372,,,,372,372,,,,372,,372,372,372,372,372,372',
'372,,,,,,372,372,372,372,372,372,372,,,372,,,,,,,372,,,372,372,372,372',
'372,372,372,372,,372,372,372,,372,372,,,,372,,,,,,,,,,,,,,,,,,,,372',
',,372,,,372,372,,,372,,,,,,,,,,,,,,,,,,,372,372,372,372,372,372,,,,372',
'372,,,,,,,372,,,372,372,372,,,372,372,67,67,67,,67,,,,67,67,,,,67,,67',
'67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67',
'67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67',
',,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,',
'67,,,67,67,67,,,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68',
'68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68',
',68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,',
',,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68',
',,68,68,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71',
'71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71',
'71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,',
'71,,,,,71,71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,,71,71,72',
'72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72',
'72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,',
',,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72',
'72,72,,,,72,72,,,,,,,72,,,72,72,72,,,72,72,8,8,8,8,8,,,,8,8,,,,8,,8',
'8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8',
'8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,',
',,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,430,430,430,,430,,,,430,430',
',,,430,,430,430,430,430,430,430,430,,,,,,430,430,430,430,430,430,430',
',,430,,,,,,,430,,,430,430,430,430,430,430,430,430,,430,430,430,,430',
'430,,430,430,430,,,,,,,,,,,,,,,,,,,,430,,,430,,,430,430,,,430,,,,,,430',
',,,,,,,430,,,,,430,430,430,430,430,430,,,,430,430,,,,,,,430,,,430,430',
'430,,,430,430,474,474,474,,474,,,,474,474,,,,474,,474,474,474,474,474',
'474,474,,,,,,474,474,474,474,474,474,474,,,474,,,,,,,474,,,474,474,474',
'474,474,474,474,474,474,474,474,474,,474,474,,474,474,474,,,,,,,,,,',
',,,,,,,,,474,,,474,,,474,474,,,474,,474,,474,,474,,,,,,,,474,,,,,474',
'474,474,474,474,474,,,,474,474,,,,,,,474,,474,474,474,474,,,474,474',
'476,476,476,,476,,,,476,476,,,,476,,476,476,476,476,476,476,476,,,,',
',476,476,476,476,476,476,476,,,476,,,,,,,476,,,476,476,476,476,476,476',
'476,476,,476,476,476,,476,476,,476,476,476,,,,,,,,,,,,,,,,,,,,476,,',
'476,,,476,476,,,476,,,,,,476,,,,,,,,476,,,,,476,476,476,476,476,476',
',,,476,476,,,,,,,476,,,476,476,476,,,476,476,477,477,477,,477,,,,477',
'477,,,,477,,477,477,477,477,477,477,477,,,,,,477,477,477,477,477,477',
'477,,,477,,,,,,,477,,,477,477,477,477,477,477,477,477,,477,477,477,',
'477,477,,477,477,477,,,,,,,,,,,,,,,,,,,,477,,,477,,,477,477,,,477,,',
',,,477,,,,,,,,477,,,,,477,477,477,477,477,477,,,,477,477,,,,,,,477,',
',477,477,477,,,477,477,478,478,478,,478,,,,478,478,,,,478,,478,478,478',
'478,478,478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478',
'478,478,478,478,478,478,478,,478,478,478,,478,478,,478,478,478,,,,,',
',,,,,,,,,,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,,,478,,,,,478',
'478,478,478,478,478,,,,478,478,,,,,,,478,,,478,478,478,,,478,478,126',
'126,126,126,126,,,,126,126,,,,126,,126,126,126,126,126,126,126,,,,,',
'126,126,126,126,126,126,126,,,126,,,,,,126,126,126,126,126,126,126,126',
'126,126,126,126,,126,126,126,,126,126,,126,126,126,,,,,,,,,,,,,,,,,',
',,126,,,126,,,126,126,,,126,,126,,,,126,,,,,,,,126,,,,,126,126,126,126',
'126,126,,,,126,126,,,,,,126,126,,,126,126,126,,,126,126,131,131,131',
',131,,,,131,131,,,,131,,131,131,131,131,131,131,131,,,,,,131,131,131',
'131,131,131,131,,,131,,,,,,,131,,,131,131,131,131,131,131,131,131,,131',
'131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131',
',,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131,131,131,,,,131,131,,,',
',,,131,,,131,131,131,,,131,131,132,132,132,,132,,,,132,132,,,,132,,132',
'132,132,132,132,132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,',
',132,,,132,132,132,132,132,132,132,132,,132,132,132,,132,132,,132,132',
'132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132,,,,,,132,,,,,,,,132',
',,,,132,132,132,132,132,132,,,,132,132,,,,,,,132,,,132,132,132,,,132',
'132,133,133,133,,133,,,,133,133,,,,133,,133,133,133,133,133,133,133',
',,,,,133,133,133,133,133,133,133,,,133,,,,,,,133,,,133,133,133,133,133',
'133,133,133,,133,133,133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133',
',,133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,,,133,133,133,133,133,133',
',,,133,133,,,,,,,133,,,133,133,133,,,133,133,134,134,134,,134,,,,134',
'134,,,,134,,134,134,134,134,134,134,134,,,,,,134,134,134,134,134,134',
'134,,,134,,,,,,,134,,,134,134,134,134,134,134,134,134,,134,134,134,',
'134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,',
',,,134,,,,,,,,134,,,,,134,134,134,134,134,134,,,,134,134,,,,,,,134,',
',134,134,134,,,134,134,517,517,517,,517,,,,517,517,,,,517,,517,517,517',
'517,517,517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517',
'517,517,517,517,517,517,517,517,517,517,517,,517,517,,517,517,517,,',
',,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517,,517,,517,,517,,,,,,,,517',
',,,,517,517,517,517,517,517,,,,517,517,,,,,,,517,,517,517,517,517,,',
'517,517,520,520,520,,520,,,,520,520,,,,520,,520,520,520,520,520,520',
'520,,,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520',
'520,520,520,520,520,520,520,520,,520,520,,520,520,520,,,,,,,,,,,,,,',
',,,,,520,,,520,,,520,520,,,520,,,,520,,520,,,,,,,,520,,,,,520,520,520',
'520,520,520,,,,520,520,,,,,,,520,,520,520,520,520,,,520,520,522,522',
'522,,522,,,,522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522',
'522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522',
',522,522,522,,522,522,,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522',
'522,,,522,,,,,,522,,,,,,,,522,,,,,522,522,522,522,522,522,,,,522,522',
',,,,,,522,,,522,522,522,,,522,522,527,527,527,527,527,,,,527,527,,,',
'527,,527,527,527,527,527,527,527,,,,,,527,527,527,527,527,527,527,,',
'527,,,,,,527,527,527,527,527,527,527,527,527,527,527,527,,527,527,527',
',527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,527,,,527,',
'527,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527,,,,527,527,,,,,,527',
'527,,,527,527,527,,,527,527,135,135,135,135,135,,,,135,135,,,,135,,135',
'135,135,135,135,135,135,,,,,,135,135,135,135,135,135,135,,,135,,,,,',
'135,135,,135,135,135,135,135,135,135,135,135,,135,135,135,,135,135,',
'135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135,,,135,,135,,,,135',
',,,,,,,135,,,,,135,135,135,135,135,135,,,,135,135,,,,,,,135,,,135,135',
'135,,,135,135,534,534,534,,534,,,,534,534,,,,534,,534,534,534,534,534',
'534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534,534,534',
'534,534,534,534,534,,534,534,534,,534,534,,,,534,,,,,,,,,,,,,,,,,,,',
'534,,,534,,,534,534,,,534,,,,,,,,,,,,,,,,,,,534,534,534,534,534,534',
',,,534,534,,,,,,,534,,,534,534,534,,,534,534,23,23,23,,23,,,,23,23,',
',,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,',
',23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,',
',,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23',
'23,,,,,,,23,,,23,23,23,,,23,23,536,536,536,,536,,,,536,536,,,,536,,536',
'536,536,536,536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,',
',536,,,536,536,536,536,536,536,536,536,536,536,536,536,,536,536,,536',
'536,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,536,,536,,536',
',,,,,,,536,,,,,536,536,536,536,536,536,,,,536,536,,,,,,,536,,536,536',
'536,536,,,536,536,542,542,542,,542,,,,542,542,,,,542,,542,542,542,542',
'542,542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542,542',
'542,542,542,542,542,542,,542,542,542,,542,542,,,,542,,,,,,,,,,,,,,,',
',,,,542,,,542,,,542,542,,,542,,,,,,,,,,,,,,,,,,,542,542,542,542,542',
'542,,,,542,542,,,,,,,542,,,542,542,542,,,542,542,223,223,223,,223,,',
',223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223,223,223,223',
'223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223',
',223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,',
'223,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223',
',,223,223,223,,,223,223,224,224,224,,224,,,,224,224,,,,224,,224,224',
'224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224',
',,224,224,224,224,224,224,224,224,,224,224,224,,224,224,,224,224,224',
',,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,224,,,,224,,,,,,,,224',
',,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,,,224,224,224,,,224',
'224,546,546,546,,546,,,,546,546,,,,546,,546,546,546,546,546,546,546',
',,,,,546,546,546,546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546',
'546,546,546,,546,546,546,,546,546,,546,546,546,,,,,,,,,,,,,,,,,,,,546',
',,546,,,546,546,,,546,,,,,,546,,,,,,,,546,,,,,546,546,546,546,546,546',
',,,546,546,,,,,,,546,,,546,546,546,,,546,546,551,551,551,,551,,,,551',
'551,,,,551,,551,551,551,551,551,551,551,,,,,,551,551,551,551,551,551',
'551,,,551,,,,,,,551,,,551,551,551,551,551,551,551,551,,551,551,551,',
'551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551,551,,,551,,',
',,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551,551,,,,,,,551,',
',551,551,551,,,551,551,225,225,225,,225,,,,225,225,,,,225,,225,225,225',
'225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225',
'225,225,225,225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,',
',,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225',
'225,225,225,225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225,225,226',
'226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226',
'226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226',
'226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226',
',,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226',
'226,,,,,,,226,,,226,226,226,,,226,226,227,227,227,,227,,,,227,227,,',
',227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227,227,',
',227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,,227,227',
',227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,',
',,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,,,227,227',
'227,,,227,227,228,228,228,,228,,,,228,228,,,,228,,228,228,228,228,228',
'228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228',
'228,228,228,228,228,228,228,228,228,,228,228,,228,228,228,,,,,,,,,,',
',,,,,,,,,228,,,228,,,228,228,,,228,,228,,228,,228,,,,,,,,228,,,,,228',
'228,228,228,228,228,,,,228,228,,,,,,,228,,228,228,228,228,,,228,228',
'232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232,,,,',
',232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232',
'232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,',
'232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232',
',,,232,232,,,,,,,232,,,232,232,232,,,232,232,233,233,233,,233,,,,233',
'233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233',
'233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233,',
'233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,',
',,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233,',
',233,233,233,,,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234,234',
'234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234',
'234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,',
',,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234',
'234,234,234,234,234,,,,234,234,234,,,,,,234,,,234,234,234,,,234,234',
'584,584,584,,584,,,,584,584,,,,584,,584,584,584,584,584,584,584,,,,',
',584,584,584,584,584,584,584,,,584,,,,,,,584,,,584,584,584,584,584,584',
'584,584,,584,584,584,,584,584,,584,584,584,,,,,,,,,,,,,,,,,,,,584,,',
'584,,,584,584,,,584,,,,,,584,,,,,,,,584,,,,,584,584,584,584,584,584',
',,,584,584,,,,,,,584,,,584,584,584,,,584,584,245,245,245,,245,,,,245',
'245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245',
'245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,',
'245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,',
',245,245,245,,,245,245,248,248,248,,248,,,,248,248,,,,248,,248,248,248',
'248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248',
'248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248,248,,,,,',
',,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248',
'248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,,,248,248,607',
'607,607,,607,,,,607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607',
'607,607,607,607,607,607,,,607,,,,,,,607,,,607,607,607,607,607,607,607',
'607,607,607,607,607,,607,607,,607,607,607,,,,,,,,,,,,,,,,,,,,607,,,607',
',,607,607,,,607,,607,,607,,607,,,,,,,,607,,,,,607,607,607,607,607,607',
',,,607,607,,,,,,,607,,607,607,607,607,,,607,607,249,249,249,,249,,,',
'249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,',
',,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249',
',,249,249,249,,,249,249,619,619,619,,619,,,,619,619,,,,619,,619,619',
'619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,,,619',
',,619,619,619,619,619,619,619,619,,619,619,619,,619,619,,619,619,619',
',,,,,,,,,,,,,,,,,,,619,,,619,,,619,619,,,619,,,,,,619,,,,,,,,619,,,',
',619,619,619,619,619,619,,,,619,619,,,,,,,619,,,619,619,619,,,619,619',
'250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,',
',250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250',
'250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,',
'250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250',
',,,250,250,,,,,,,250,,,250,250,250,,,250,250,625,625,625,,625,,,,625',
'625,,,,625,,625,625,625,625,625,625,625,,,,,,625,625,625,625,625,625',
'625,,,625,,,,,,,625,,,625,625,625,625,625,625,625,625,,625,625,625,',
'625,625,,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625,625,,,625,,',
',,,625,,,,,,,,625,,,,,625,625,625,625,625,625,,,,625,625,,,,,,,625,',
',625,625,625,,,625,625,251,251,251,,251,,,,251,251,,,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,',
',,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251',
'251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251,251,252',
'252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252',
'252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252',
'252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252',
',,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252',
'252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253,253,,',
',253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,',
',253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253',
',253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,',
',,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253',
'253,,,253,253,654,654,654,,654,,,,654,654,,,,654,,654,654,654,654,654',
'654,654,,,,,,654,654,654,654,654,654,654,,,654,,,,,,,654,,,654,654,654',
'654,654,654,654,654,,654,654,654,,654,654,,654,654,654,,,,,,,,,,,,,',
',,,,,,654,,,654,,,654,654,,,654,,654,,,,654,,,,,,,,654,,,,,654,654,654',
'654,654,654,,,,654,654,,,,,,,654,,,654,654,654,,,654,654,655,655,655',
',655,,,,655,655,,,,655,,655,655,655,655,655,655,655,,,,,,655,655,655',
'655,655,655,655,,,655,,,,,,,655,,,655,655,655,655,655,655,655,655,,655',
'655,655,,655,655,,655,655,655,,,,,,,,,,,,,,,,,,,,655,,,655,,,655,655',
',,655,,,,,,655,,,,,,,,655,,,,,655,655,655,655,655,655,,,,655,655,,,',
',,,655,,,655,655,655,,,655,655,656,656,656,,656,,,,656,656,,,,656,,656',
'656,656,656,656,656,656,,,,,,656,656,656,656,656,656,656,,,656,,,,,',
',656,,,656,656,656,656,656,656,656,656,656,656,656,656,,656,656,,656',
'656,656,,,,,,,,,,,,,,,,,,,,656,,,656,,,656,656,,,656,,656,,656,,656',
',,,,,,,656,,,,,656,656,656,656,656,656,,,,656,656,,,,,,,656,,656,656',
'656,656,,,656,656,659,659,659,,659,,,,659,659,,,,659,,659,659,659,659',
'659,659,659,,,,,,659,659,659,659,659,659,659,,,659,,,,,,,659,,,659,659',
'659,659,659,659,659,659,,659,659,659,,659,659,,659,659,659,,,,,,,,,',
',,,,,,,,,,659,,,659,,,659,659,,,659,,,,,,659,,,,,,,,659,,,,,659,659',
'659,659,659,659,,,,659,659,,,,,,,659,,,659,659,659,,,659,659,254,254',
'254,,254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254',
'254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254',
',254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254',
'254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254',
',,,,,,254,,,254,254,254,,,254,254,662,662,662,,662,,,,662,662,,,,662',
',662,662,662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,,662',
',,,,,,662,,,662,662,662,662,662,662,662,662,662,662,662,662,,662,662',
',662,662,662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,662,,662',
',662,,,,,,,,662,,,,,662,662,662,662,662,662,,,,662,662,,,,,,,662,,662',
'662,662,662,,,662,662,663,663,663,,663,,,,663,663,,,,663,,663,663,663',
'663,663,663,663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,,663,,,663',
'663,663,663,663,663,663,663,663,663,663,663,,663,663,,663,663,663,,',
',,,,,,,,,,,,,,,,,663,,,663,,,663,663,,,663,,,,663,,663,,,,,,,,663,,',
',,663,663,663,663,663,663,,,,663,663,,,,,,,663,,663,663,663,663,,,663',
'663,664,664,664,,664,,,,664,664,,,,664,,664,664,664,664,664,664,664',
',,,,,664,664,664,664,664,664,664,,,664,,,,,,,664,,,664,664,664,664,664',
'664,664,664,,664,664,664,,664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664',
',,664,,,664,664,,,664,,,,,,664,,,,,,,,664,,,,,664,664,664,664,664,664',
',,,664,664,,,,,,,664,,,664,664,664,,,664,664,665,665,665,,665,,,,665',
'665,,,,665,,665,665,665,665,665,665,665,,,,,,665,665,665,665,665,665',
'665,,,665,,,,,,,665,,,665,665,665,665,665,665,665,665,,665,665,665,',
'665,665,,665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,',
',,,665,,,,,,,,665,,,,,665,665,665,665,665,665,,,,665,665,,,,,,,665,',
',665,665,665,,,665,665,255,255,255,,255,,,,255,255,,,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,',
',,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,670',
'670,670,,670,,,,670,670,,,,670,,670,670,670,670,670,670,670,,,,,,670',
'670,670,670,670,670,670,,,670,,,,,,,670,,,670,670,670,670,670,670,670',
'670,,670,670,670,,670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670',
',,670,670,,,670,,,,,,670,,,,,,,,670,,,,,670,670,670,670,670,670,,,,670',
'670,,,,,,,670,,,670,670,670,,,670,670,671,671,671,,671,,,,671,671,,',
',671,,671,671,671,671,671,671,671,,,,,,671,671,671,671,671,671,671,',
',671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671,671,,671,671',
',671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,,,,,671,',
',,,,,,671,,,,,671,671,671,671,671,671,,,,671,671,,,,,,,671,,,671,671',
'671,,,671,671,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,',
',,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256',
'256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256,256,257,257,257',
',257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257',
'257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257',
'257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257',
',,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,',
',,,257,,,257,257,257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258',
'258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,',
',258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258',
'258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258',
',,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258',
'258,259,259,259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259',
',,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259',
'259,259,259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259',
',,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259',
',,,259,259,,,,,,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260',
'260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260',
'260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,',
'260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,',
',,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,',
',260,260,260,,,260,260,261,261,261,,261,,,,261,261,,,,261,,261,261,261',
'261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261',
'261,261,261,261,261,261,261,,261,261,261,,261,261,,261,261,261,,,,,',
',,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261',
'261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261,261,,,261,261,262',
'262,262,,262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262',
'262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262',
'262,,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262',
',,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262',
'262,,,,,,,262,,,262,262,262,,,262,262,263,263,263,,263,,,,263,263,,',
',263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263,',
',263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263,263,263,,263,263',
',263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,',
',,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263',
'263,,,263,263,695,695,695,,695,,,,695,695,,,,695,,695,695,695,695,695',
'695,695,,,,,,695,695,695,695,695,695,695,,,695,,,,,,,695,,,695,695,695',
'695,695,695,695,695,,695,695,695,,695,695,,695,695,695,,,,,,,,,,,,,',
',,,,,,695,,,695,,,695,695,,,695,,,,,,695,,,,,,,,695,,,,,695,695,695',
'695,695,695,,,,695,695,,,,,,,695,,,695,695,695,,,695,695,700,700,700',
',700,,,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700,700',
'700,700,700,700,,,700,,,,,,,700,,,700,700,700,700,700,700,700,700,,700',
'700,700,,700,700,,,,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,,700',
',,,,,,,,,,,,,,,,,,700,700,700,700,700,700,,,,700,700,,,,,,,700,,,700',
'700,700,,,700,700,264,264,264,,264,,,,264,264,,,,264,,264,264,264,264',
'264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264',
'264,264,264,264,264,264,,264,264,264,,264,264,,264,264,264,,,,,,,,,',
',,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264,264',
'264,264,264,264,,,,264,264,,,,,,,264,,,264,264,264,,,264,264,265,265',
'265,,265,,,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265',
'265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265',
',265,265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265',
'265,,,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265',
',,,,,,265,,,265,265,265,,,265,265,266,266,266,,266,,,,266,266,,,,266',
',266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266',
',,,,,,266,,,266,266,266,266,266,266,266,266,,266,266,266,,266,266,,266',
'266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,',
',266,,,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,,,266,266,266',
',,266,266,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267',
'267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267',
'267,267,267,267,,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,',
',,267,,,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267',
'267,267,,,,267,267,,,,,,,267,,,267,267,267,,,267,267,268,268,268,,268',
',,,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268,268,268',
'268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268,,268,268',
'268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268',
',,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,,,,,,,268',
',,268,268,268,,,268,268,711,711,711,,711,,,,711,711,,,,711,,711,711',
'711,711,711,711,711,,,,,,711,711,711,711,711,711,711,,,711,,,,,,,711',
',,711,711,711,711,711,711,711,711,,711,711,711,,711,711,,,,711,,,,,',
',,,,,,,,,,,,,,711,,,711,,,711,711,,,711,,,,,,,,,,,,,,,,,,,711,711,711',
'711,711,711,,,,711,711,,,,,,,711,,,711,711,711,,,711,711,712,712,712',
',712,,,,712,712,,,,712,,712,712,712,712,712,712,712,,,,,,712,712,712',
'712,712,712,712,,,712,,,,,,,712,,,712,712,712,712,712,712,712,712,,712',
'712,712,,712,712,,712,712,712,,,,,,,,,,,,,,,,,,,,712,,,712,,,712,712',
',,712,,,,,,712,,,,,,,,712,,,,,712,712,712,712,712,712,,,,712,712,,,',
',,,712,,,712,712,712,,,712,712,269,269,269,,269,,,,269,269,,,,269,,269',
'269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,',
',269,,,269,269,269,269,269,269,269,269,,269,269,269,,269,269,,269,269',
'269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,269',
',,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,,,269,269,269,,,269',
'269,717,717,717,,717,,,,717,717,,,,717,,717,717,717,717,717,717,717',
',,,,,717,717,717,717,717,717,717,,,717,,,,,,,717,,,717,717,717,717,717',
'717,717,717,,717,717,717,,717,717,,717,717,717,,,,,,,,,,,,,,,,,,,,717',
',,717,,,717,717,,,717,,717,,,,717,,,,,,,,717,,,,,717,717,717,717,717',
'717,,,,717,717,,,,,,,717,,,717,717,717,,,717,717,722,722,722,,722,,',
',722,722,,,,722,,722,722,722,722,722,722,722,,,,,,722,722,722,722,722',
'722,722,,,722,,,,,,,722,,,722,722,722,722,722,722,722,722,722,722,722',
'722,,722,722,,722,722,722,,,,,,,,,,,,,,,,,,,,722,,,722,,,722,722,,,722',
',722,,,,722,,,,,,,,722,,,,,722,722,722,722,722,722,,,,722,722,,,,,,',
'722,,722,722,722,722,,,722,722,725,725,725,,725,,,,725,725,,,,725,,725',
'725,725,725,725,725,725,,,,,,725,725,725,725,725,725,725,,,725,,,,,',
',725,,,725,725,725,725,725,725,725,725,725,725,725,725,,725,725,,725',
'725,725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725,,,725,,,,,,725,,,,,,',
',725,,,,,725,725,725,725,725,725,,,,725,725,,,,,,,725,,725,725,725,725',
',,725,725,274,274,274,,274,,,,274,274,,,,274,,274,274,274,274,274,274',
'274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274,274',
'274,274,274,274,,274,274,274,,274,274,,274,274,274,,,,,,,,,,,,,,,,,',
',,274,,,274,,,274,274,,,274,,,,,,274,,,,,,,,274,,,,,274,274,274,274',
'274,274,,,,274,274,,,,,,,274,,,274,274,274,,,274,274,741,741,741,,741',
',,,741,741,,,,741,,741,741,741,741,741,741,741,,,,,,741,741,741,741',
'741,741,741,,,741,,,,,,,741,,,741,741,741,741,741,741,741,741,,741,741',
'741,,741,741,,741,741,741,,,,,,,,,,,,,,,,,,,,741,,,741,,,741,741,,,741',
',,,,,741,,,,,,,,741,,,,,741,741,741,741,741,741,,,,741,741,,,,,,,741',
',,741,741,741,31,,741,741,,,,31,31,31,,,31,31,31,781,31,781,781,781',
'781,781,,,,,31,31,,,,781,,,,,31,31,,31,31,31,31,31,,,,,,,,,,781,,,,',
',,,,781,781,781,781,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31',
'31,31,,,31,,31,31,,,31,31,,31,781,31,,31,,31,31,31,31,31,31,31,,31,',
'31,,,,,,,,,,,,,31,31,504,31,,31,,,,504,504,504,31,,504,504,504,975,504',
'975,975,975,975,975,,,,504,504,,,,,975,,,,,504,504,,504,504,504,504',
'504,,,,,,,,,,975,,,,,,,,,975,975,975,975,,,,,,,,,,,,,504,,30,,,,,504',
',30,30,30,504,504,30,30,30,,30,,975,,,,,,,30,30,30,,,,,504,504,,,30',
'30,,30,30,30,30,30,,,504,,,,,504,,,,,,,504,,,,,,,,,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30,,30,',
'30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30,465,30,,30,,,,465,465',
'465,30,,465,465,465,980,465,980,980,980,980,980,,,,465,465,465,465,',
',980,,,,,465,465,,465,465,465,465,465,,,,,,,,,,980,,,,,,,,,,,980,980',
',465,465,465,465,465,465,465,465,465,465,465,465,465,465,,,465,465,465',
',,465,,,465,,,465,465,,465,980,465,,465,,465,465,465,465,465,465,465',
',465,465,465,565,,565,565,565,565,565,,,,,,465,465,465,465,565,465,60',
'465,,,,,465,60,60,60,,,60,60,60,,60,,,,565,,,,,,60,60,60,565,565,565',
'565,,,,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,,,565,,60,60,60,60,60',
'60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60,60,,60,,60,,60',
',60,60,60,60,60,60,60,,60,,60,739,,739,739,739,739,739,,,,,,60,60,60',
'60,739,60,455,60,,,,,60,455,455,455,,,455,455,455,,455,,,,739,,,,,455',
'455,455,,,,739,739,,,,455,455,,455,455,455,455,455,,,,,,,,,,,,,,,,,',
',,,,739,,455,455,455,455,455,455,455,455,455,455,455,455,455,455,,,455',
'455,455,,,455,,455,455,,,455,455,,455,,455,,455,,455,455,455,455,455',
'455,455,,455,455,455,,,,,,,,,,,,,455,455,464,455,,455,,,,464,464,464',
'455,,464,464,464,824,464,824,824,824,824,824,,,,464,464,464,464,,,824',
',,,,464,464,,464,464,464,464,464,,,,,,,,,,824,,,,,,,,,824,824,824,824',
',464,464,464,464,464,464,464,464,464,464,464,464,464,464,,,464,464,464',
',,464,,824,464,,,464,464,,464,824,464,,464,,464,464,464,464,464,464',
'464,,464,464,464,,,,,,,,,,,,,464,464,464,464,,464,,464,,,,,464,421,421',
'421,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421',
'421,421,421,421,421,,,,421,421,421,421,421,421,421,421,421,421,,,,,',
'421,421,421,421,421,421,421,421,421,,,421,,,,,,,,,421,421,,421,421,421',
'421,421,421,421,,,421,421,,,,421,421,421,421,,,,,,,,,,,,,,421,421,,421',
'421,421,421,421,421,421,421,421,421,421,,,421,421,,,,,,,,,,421,,,,,',
',,,421,,,,,421,651,651,651,651,651,651,651,651,651,651,651,651,651,651',
'651,651,651,651,651,651,651,651,651,651,,,,651,651,651,651,651,651,651',
'651,651,651,,,,,,651,651,651,651,651,651,651,651,651,,,651,,,,,,,,,651',
'651,,651,651,651,651,651,651,651,,,651,651,,,,651,651,651,651,,,,,,',
',,,,,,,651,651,,651,651,651,651,651,651,651,651,651,651,651,,,651,651',
',,,,,,,,,651,,,,,,,,,651,,,,,651,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11',
',,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11',
'11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11',
'11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,,,11,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12',
'12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12',
',12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12',
'12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,,,,,12',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,,,,103,103,103,103,103,103,103,103,103,103',
',,,,,103,103,103,103,103,103,103,103,103,103,103,103,,103,,,,,,,103',
'103,,103,103,103,103,103,103,103,,,103,103,,,,103,103,103,103,,,,,,',
',,,,,,,103,103,,103,103,103,103,103,103,103,103,103,103,103,,,103,,',
',,,,,,,,,,,,,,,,,103,,,,,103,783,783,783,783,783,783,783,783,783,783',
'783,783,783,783,783,783,783,783,783,783,783,783,783,783,,,,783,783,783',
'783,783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,783,783',
',,783,,,,,,,,,783,783,,783,783,783,783,783,783,783,,,783,783,,,,783',
'783,783,783,,,,,,,,,,,,,,783,783,,783,783,783,783,783,783,783,783,783',
'783,783,,,783,,,,,,,,,,,,,,,,,,,,783,,,,,783,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75',
'75,75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75',
',75,75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75',
'75,75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,548,548,,,548,,,,,,75,,',
'548,548,75,548,548,548,548,548,548,548,,,548,548,,,,548,548,548,548',
',,,,,548,,,,,,,,548,548,,548,548,548,548,548,548,548,548,548,548,548',
',,548,,,,,,,,,,1034,1034,,,1034,,,,,,548,,,1034,1034,548,1034,1034,1034',
'1034,1034,1034,1034,,,1034,1034,,,,1034,1034,1034,1034,,,,,,1034,,,',
',,,,1034,1034,,1034,1034,1034,1034,1034,1034,1034,1034,1034,1034,1034',
',,1034,,,,,,,,,,773,773,,,773,,,,,,1034,,,773,773,1034,773,773,773,773',
'773,773,773,,,773,773,,,,773,773,773,773,,,,,,773,,,,,,,,773,773,,773',
'773,773,773,773,773,773,773,773,773,773,,,773,,,,,,,,,,1029,1029,,,1029',
',,,,,773,,,1029,1029,773,1029,1029,1029,1029,1029,1029,1029,,,1029,1029',
',,,1029,1029,1029,1029,,,,,,1029,,,,,,,,1029,1029,,1029,1029,1029,1029',
'1029,1029,1029,1029,1029,1029,1029,,,1029,,,,,,,,,,473,473,,,473,,,',
',,1029,,,473,473,1029,473,473,473,473,473,473,473,,,473,473,,,,473,473',
'473,473,,,,,,473,,,,,,,,473,473,,473,473,473,473,473,473,473,473,473',
'473,473,,,473,,,,,,,,,,1035,1035,,,1035,,,,,,473,,,1035,1035,473,1035',
'1035,1035,1035,1035,1035,1035,,,1035,1035,,,,1035,1035,1035,1035,,,',
',,1035,,,,,,,,1035,1035,,1035,1035,1035,1035,1035,1035,1035,1035,1035',
'1035,1035,,,1035,,,,,,,,,,472,472,,,472,,,,,,1035,,,472,472,1035,472',
'472,472,472,472,472,472,,,472,472,,,,472,472,472,472,,,,,,472,,,,,,',
',472,472,,472,472,472,472,472,472,472,472,472,472,472,,,472,,,,,,,,',
',230,230,,,230,,,,,,472,,,230,230,472,230,230,230,230,230,230,230,,',
'230,230,,,,230,230,230,230,,,,,,230,,,,,,,,230,230,,230,230,230,230',
'230,230,230,230,230,230,230,,,230,,,,,,,,,,229,229,,,229,,,,,,230,,',
'229,229,230,229,229,229,229,229,229,229,,,229,229,,,,229,229,229,229',
',,,,,229,,,,,,,,229,229,,229,229,229,229,229,229,229,229,229,229,229',
',,229,,,,,,,,,,537,537,,,537,,,,,,229,,,537,537,229,537,537,537,537',
'537,537,537,,,537,537,,,,537,537,537,537,,,,,,537,,,,,,,,537,537,,537',
'537,537,537,537,537,537,537,537,537,537,,,537,,,,,,,,,,538,538,,,538',
',,,,,537,,,538,538,537,538,538,538,538,538,538,538,,,538,538,,,,538',
'538,538,538,,,,,,538,,,,,,,,538,538,,538,538,538,538,538,538,538,538',
'538,538,538,,,538,,,,,,,,,,772,772,,,772,,,,,,538,,,772,772,538,772',
'772,772,772,772,772,772,,,772,772,,,,772,772,772,772,,,,,,772,,,,,,',
',772,772,,772,772,772,772,772,772,772,772,772,772,772,,1053,772,1053',
'1053,1053,1053,1053,,,,,278,278,,,278,1053,,,,,772,,,278,278,772,278',
'278,278,278,278,278,278,,,278,278,1053,,,278,278,278,278,,,1053,1053',
'1053,1053,,,,,,,,278,278,,278,278,278,278,278,278,278,278,278,278,278',
',,278,,,,,,,,,1053,657,657,,,657,,,,,,278,,,657,657,278,657,657,657',
'657,657,657,657,,,657,657,,,,657,657,657,657,,,,,,657,,,,,,,,657,657',
',657,657,657,657,657,657,657,657,657,657,657,,,657,,,,,,,,,,608,608',
',,608,,,,,,657,,,608,608,657,608,608,608,608,608,608,608,,,608,608,',
',,608,608,608,608,,,,,,608,,,,,,,,608,608,,608,608,608,608,608,608,608',
'608,608,608,608,,,608,,,,,,,,,,658,658,,,658,,,,,,608,,,658,658,608',
'658,658,658,658,658,658,658,,,658,658,,,,658,658,658,658,,,,,,658,,',
',,,,,658,658,,658,658,658,658,658,658,658,658,658,658,658,,,658,,,,',
',,,,,609,609,,,609,,,,,,658,,,609,609,658,609,609,609,609,609,609,609',
',,609,609,,,,609,609,609,609,,,,,,609,,,,,,,,609,609,,609,609,609,609',
'609,609,609,609,609,609,609,,,609,1055,,1055,1055,1055,1055,1055,,,547',
'547,,,547,,,1055,,,609,,,547,547,609,547,547,547,547,547,547,547,,,547',
'547,,,1055,547,547,547,547,,,,,,547,1055,1055,,,,,,547,547,,547,547',
'547,547,547,547,547,547,547,547,547,,1057,547,1057,1057,1057,1057,1057',
',,,,,1055,,,,1057,,,,,547,,,,1059,547,1059,1059,1059,1059,1059,,,,,',
',1057,,352,1059,352,352,352,352,352,,,1057,1057,,,,,782,352,782,782',
'782,782,782,,1059,,,,,,,,782,,,1059,1059,,,352,352,,,,1057,,,,352,352',
'352,352,,,782,1082,,1082,1082,1082,1082,1082,,782,782,782,782,,,1059',
'945,1082,945,945,945,945,945,,,,,,,,352,947,945,947,947,947,947,947',
',1082,,,,,,782,,947,,,1082,1082,,,945,735,,735,735,735,735,735,,,,945',
'945,,,947,943,735,943,943,943,943,943,,,,947,947,,,1082,737,943,737',
'737,737,737,737,,735,,,,,,945,,737,735,735,735,735,,,943,,,,,,947,,',
',,943,943,,,737,941,,941,941,941,941,941,,737,737,737,737,,,735,,941',
',,,,,,,,,,,,943,,,,,,,,,941,,,,,,737,,,941,941,941,941,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,941' ]
        racc_action_check = arr = ::Array.new(26050, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1341,  4286,    57,   nil,   315,   nil,   nil, 11851,  1310,
   nil, 23770, 23908,   -26,   nil,    37,    43,   607,   111,   946,
   180,   nil,   -73, 14231,  1325,   187,   nil,   557,   nil,   164,
 22837, 22629,  6111,  6391,  7371,   nil,  2030,  8071,  8211,   nil,
    95,   397,   301,   224,   298,  9051,  9331,   669, 10031,   159,
  1079,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 23097,   nil, 10871,   nil,   nil,   -10,   nil, 11291, 11431,   nil,
   nil, 11571, 11711,   241,   nil, 24322,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,   200,
   216,   226,   234, 24046,   nil,   nil,   nil,   nil,   nil,   nil,
   132,   nil,   nil,   652,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 12691,   nil,   nil,   nil,
   nil, 12831, 12971, 13111, 13251, 13951,   264,   nil,   949,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   275,   nil,  3863, 14651, 14791, 15211, 15351, 15491, 15631, 24979,
 24906,   nil, 15771, 15911, 16051,   nil,   nil,   723,   266,   147,
   366,   -77,   284,   350,   nil, 16331,  3017,   359, 16471, 16751,
 17031, 17311, 17451, 17591, 18291, 18991, 19411, 19551, 19691, 19831,
 19971, 20111, 20251, 20391, 20811, 20951, 21091, 21231, 21371, 21791,
   nil,   nil,   nil,   nil, 22351,   nil,   nil,   nil, 25271,   nil,
   nil,   361,  5271,   nil,   nil,   383,   nil,   nil,   nil,  5551,
   nil,   nil,  5831,   nil,  2030,   nil,   383,   385,   nil,  7231,
   449,  7511,   nil,  7651,  7791,   nil,   nil,   -71,   nil,   nil,
  7931,  1466,   nil,   409,  1748,   429,   492,   457,  8351,  1184,
   709,   528,   491,   546,   437,   nil,   520,   486,   -19,   nil,
   nil,   nil,   530,   185,   501,  9191,   nil,   415,   574,   751,
   nil,   578,  9611,   nil,  9751,  3158,  1451,   528, 10171, 10451,
   nil,   nil, 25738,    -3,   -11,    -8, 10591,  2594,  2312,   168,
   659,   546,     5,    -5,  1115,   632,   -19,   677,   nil,   nil,
 11011,   nil, 11151,   465,   494,   325,   577,   243,   612,   372,
   217,   -24,   nil,   204,   nil,   nil,   nil,   nil,   nil,   196,
   nil,   366,   nil,   385,   nil,   595,   262,   nil,   610,   nil,
   621,    40,   nil,   625,   -25,   nil,   359,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 23494,   nil,   nil,   nil,   nil,   639,   nil,   nil,   633,
 11991,   635,   nil,   nil,   624,   nil,  1046,   126,   nil,   nil,
   nil,  1043,   nil,   nil,   nil,   nil,   nil,  1184,   647,   nil,
   nil,   646,   657,   365,   422, 23229,   nil,   nil,   nil,   912,
   784,   698,   nil,   nil, 23357, 22965,   nil,   nil,   nil,   148,
   nil,   698, 24833, 24687, 12131,   331, 12271, 12411, 12551,  2171,
  2312,   450,   707,   732,   735,   740,   747,  3722,  3581,  3464,
  2453,  2594,  2735,  2876,  3017,  3158,   607,   738,   862,  3299,
  1748,   729,   809,   nil, 22757,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   693,   696,   nil,   nil, 13391,   nil,   nil,
 13531,   nil, 13671,   nil,   nil,   nil,   nil, 13811,  1592,   705,
   710,   nil,   nil,   717, 14091,   721, 14371, 25052, 25125,   862,
   758,   nil, 14511,   721,   nil,   778, 14931, 25636, 24395,  3440,
  1466, 15071,   859,   868,   753,   nil,   nil,   412,   387,   785,
   768,   nil,   123,   794,   nil, 23028,   nil,   755,   757,   nil,
   765,   770,   774,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   762,   -33,   nil,   nil, 16191,   nil,   nil,   nil,   855,   nil,
   nil,   nil,   858,   nil,   nil,   865,  3722,   905,   nil,  3581,
    56,   909,   915,   921,   932,   nil,   nil, 16611, 25417, 25563,
    25,   nil,   267,   304,   323,   nil,   865,   nil,   835, 16891,
   nil,   854,   nil,   nil,   nil, 17171,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   290,   nil,   nil,
   302,   nil,   nil,   nil,   827,   nil,   nil,   828,   nil,  2876,
   nil, 23632,   nil,   831, 17731, 17871, 18011, 25344, 25490, 18151,
   349,   867, 18431, 18571, 18711, 18851,   867,   nil,   nil,   nil,
 19131, 19271,   880,   nil,   nil,   nil,   108,   368,   520,     0,
   872,   876,   nil,   -50,   985,   136,   nil,   901,   nil,  1013,
   nil,   nil,   898,   nil,   940, 20531,   nil,   nil,   nil,    89,
 20671,   900,   nil,   904,    21,    23,   942,   172,   915,   944,
   906, 21511, 21651,   969,    27,    24,   nil, 21931,   nil,   nil,
   nil,   nil, 22071,   nil,   nil, 22211,   nil,   nil,   nil,    22,
   911,   186,   nil,   nil,   585, 25846,   nil, 25876,   nil, 23160,
   nil, 22491,   nil,   520,   nil,   922,   139,   930,   nil,   nil,
   nil,   nil,   511,   nil,  1043,   nil,   nil,   nil,   nil,   nil,
  1058,   nil,  5411,   943,    22,    28,     6,   154,  4004,   nil,
   829,   nil, 25198, 24541,  5691,   nil,   nil,   nil,   679,  4709,
  1043, 22593, 25753, 24184,    53,   650,  2453,   nil,   nil,   321,
   nil,   nil,   nil,   957,   nil,   942,  5971,   953,   279,   211,
   264,   392,  1607,  6251,   nil,   951,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  6531,  6671,  6811,  6951,
   310,  7091,   nil,   nil, 23321,   nil,  4427,   nil,   nil,   969,
   nil,   -17,   nil,   nil,   nil,   954,   302,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  4991,   nil,   955,   997,   nil,   nil,
   413,   nil,  1325,  1466,   968,   977,   977,   nil,   nil,   nil,
   996,  1001,   nil,  1004,  1005,   nil,  1009,   nil,   nil,  1017,
   616,  1026,   819,   nil,  1147,   nil,   nil,  8491,   nil,  4850,
  1156,   nil,   nil,   -10,     7,  1157,   203,   660,   nil,  1043,
  4568,  8631,    99,  1162,   nil,  1048,   165,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1038,   nil,   nil,  1048,   367,   nil,
   nil,  8771,  8911,  1889,  1052,  1053,   nil,  1062,  1063,  1067,
   nil,  1088,  1072,  1065,  5131,   nil,   nil,   nil,   nil,  4145,
  3440,   nil,    50,  9471,   nil,   nil,  1097,  1202,   921,   nil,
   nil, 25915,   nil, 25861,   nil, 25807,   nil, 25822,   nil,   nil,
   nil,   nil,   257,   645,  1083,   nil,    -1,   nil,   nil,  9891,
  3299,   nil,   nil,  1211,   359,   nil,   nil,  1212,   nil,   nil,
  1133,   nil,   121,   nil,   nil, 22721,   nil,   nil,   583,   nil,
 22929,   nil,   nil,  1115, 10311,   916,  1170,   nil,  1218,  2735,
   948,   974,  1043,  1185,   362,   nil,   nil,   nil,   187,   nil,
   nil,   nil,  1115,  1118,  1137,  1142,  1145,   527,  1146,   513,
  2171,   nil,   399,   nil,   nil,  1889,   nil,  1607,  1150,   nil,
   nil,  1155,  1167,  1168,  1177,   nil,  1178,   nil,  1184, 24614,
   nil,   nil,  1305, 10731, 24468, 24760,  1187,   nil,  1311,   715,
   nil,   nil,   nil,   nil,   847,  1184,   643,   nil,   nil,   nil,
  1306,  1308,   nil, 25260,   nil, 25627,   nil, 25698,   nil, 25723,
   nil,   nil,  1228,  1232,   nil,  1197,    36,    39,    -9,  1220,
   nil,  1203,  1204,   nil,   nil,   nil,  1205,  1208,  1209,  1210,
    11,   nil, 25792,   nil,   nil,   nil,   nil,   -85,   nil ]

racc_action_default = [
    -1,  -648,  -647,  -648,    -2,  -634,    -4,    -5,  -648,    -8,
    -9,  -648,  -648,  -648,   -35,  -648,  -648,   -39,  -648,  -648,
  -294,   -50,  -636,  -648,   -55,   -60,   -61,   -62,   -66,  -271,
  -271,  -271,  -309,  -343,  -344,   -78,  -647,   -82,   -90,   -92,
  -648,  -538,  -539,  -648,  -648,  -648,  -648,  -230,  -648,  -636,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -621,  -296,  -298,  -305,  -307,  -317,  -423,  -648,  -648,   -57,
   -57,  -634,  -648,  -327,  -334,  -648,  -345,  -346,  -348,  -349,
  -350,  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -366,  -468,
  -469,  -470,  -471,  -472,  -473,  -647,  -476,  -647,  -647,  -647,
  -486,  -647,  -647,  -647,  -514,  -520,  -522,  -523,  -524,  -525,
  -619,  -527,  -528,  -620,  -530,  -531,  -532,  -533,  -534,  -535,
  -536,  -537,  -542,  -543,  1089,    -3,  -635,  -643,  -644,  -645,
    -7,  -648,  -648,  -648,  -648,  -648,  -648,   -23,  -648,  -121,
  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
   -28,  -130,  -647,  -648,  -648,  -648,  -648,  -648,  -647,  -648,
  -648,  -631,  -648,  -648,  -636,  -637,   -54,  -648,  -538,  -539,
  -648,  -294,  -648,  -648,  -236,  -648,  -647,  -648,  -648,  -648,
  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,
  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,
  -245,  -246,  -247,  -248,  -648,  -359,  -452,  -431,  -648,  -632,
  -633,   -67,  -648,  -316,  -358,  -648,  -445,  -447,   -73,  -647,
  -442,   -74,  -636,   -75,  -251,  -266,  -647,  -647,  -270,  -648,
  -276,  -648,  -614,  -648,  -648,   -76,   -77,  -634,   -17,   -18,
  -648,   -21,   -22,   -80,  -647,  -636,  -648,   -83,   -86,  -647,
   -98,   -99,  -648,  -648,  -106,  -309,  -312,  -636,  -435,  -343,
  -344,  -347,  -443,  -648,   -88,  -648,   -94,  -304,  -521,  -648,
  -224,  -225,  -648,  -237,  -648,  -647,  -300,  -636,  -647,  -647,
  -318,  -319,  -570,   -56,  -648,  -648,  -648,  -647,  -647,  -634,
  -648,  -635,  -538,  -539,  -648,  -648,  -294,  -648,  -376,  -377,
  -648,  -330,  -648,  -121,  -122,  -164,  -165,  -166,  -182,  -187,
  -194,  -197,  -337,  -648,  -538,  -539,  -609,  -610,  -474,  -648,
  -498,  -648,  -500,  -648,  -502,  -648,  -648,  -481,  -648,  -647,
  -648,  -648,  -494,  -648,  -648,  -496,  -648,  -513,  -515,  -516,
  -517,  -518,    -6,  -646,   -29,   -30,   -31,   -32,   -33,   -10,
   -11,  -648,   -25,   -26,   -27,  -131,  -648,   -36,   -38,  -281,
  -648,  -648,  -280,   -37,  -648,   -40,  -648,  -294,   -48,   -49,
  -205,  -256,  -276,   -51,   -52,   -41,  -206,  -256,  -636,  -261,
  -262,  -647,  -647,  -622,  -623,  -271,  -440,  -624,  -625,  -623,
  -622,  -271,  -439,  -441,  -624,  -625,   -47,  -214,   -53,  -636,
  -315,  -648,  -648,  -648,  -647,  -304,  -648,  -648,  -648,  -215,
  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -226,  -227,  -228,
  -229,  -231,  -232,  -233,  -234,  -235,  -238,  -239,  -240,  -241,
  -636,  -249,  -648,  -453,  -271,  -622,  -623,   -64,   -68,  -272,
  -436,  -449,  -452,  -636,  -636,  -311,  -267,  -648,  -275,  -268,
  -648,  -273,  -648,  -277,  -617,  -618,   -16,  -635,   -20,  -636,
   -79,  -302,   -95,   -84,  -648,  -636,  -647,  -648,  -648,  -105,
  -648,  -521,  -648,   -91,   -96,  -648,  -648,  -648,  -648,  -250,
  -242,  -648,  -460,  -648,  -636,  -299,  -252,  -640,  -640,  -648,
  -648,  -612,  -640,  -648,  -424,  -570,  -427,  -608,  -608,  -553,
  -555,  -555,  -555,  -569,  -571,  -572,  -573,  -574,  -575,  -576,
  -577,  -648,  -579,  -581,  -583,  -588,  -590,  -591,  -593,  -598,
  -600,  -601,  -603,  -604,  -605,  -648,  -647,  -367,  -368,  -647,
  -648,  -648,  -648,  -648,  -648,  -362,  -455,  -647,  -648,  -648,
  -304,   -57,  -116,  -117,  -648,  -119,  -648,  -294,  -647,  -648,
  -335,  -548,  -340,  -629,  -630,  -648,  -475,  -499,  -504,  -505,
  -507,  -477,  -501,  -478,  -503,  -479,  -480,  -648,  -483,  -485,
  -648,  -488,  -490,  -491,  -648,  -492,  -493,  -648,  -519,  -647,
   -24,  -648,   -34,  -284,  -648,  -648,  -647,  -648,  -648,  -648,
  -444,  -648,  -263,  -265,  -648,  -648,   -69,  -259,  -260,  -437,
  -648,  -648,   -71,  -438,  -314,  -638,  -622,  -623,  -622,  -623,
  -636,  -648,  -430,  -647,   -63,  -432,  -449,  -648,  -450,  -648,
  -258,  -310,  -647,  -274,  -278,  -648,  -615,  -616,   -19,   -81,
  -648,   -87,   -93,  -636,  -622,  -623,  -647,  -102,  -104,  -648,
   -89,  -648,  -648,  -223,  -636,  -647,  -360,  -647,  -297,  -365,
  -301,  -253,  -642,  -641,  -255,  -642,  -306,  -308,  -613,  -648,
  -636,  -648,  -551,  -552,  -648,  -648,  -562,  -648,  -565,  -648,
  -567,  -648,  -378,  -648,  -380,  -382,  -389,  -636,  -582,  -592,
  -602,  -606,  -647,  -369,  -647,   -58,  -370,  -371,  -322,  -323,
  -648,  -325,  -648,  -636,  -622,  -623,  -626,  -303,  -647,  -116,
  -117,  -118,  -648,  -648,  -647,  -328,  -544,  -546,  -331,  -647,
  -647,  -570,  -570,  -648,  -636,  -648,  -647,  -482,  -484,  -648,
  -487,  -495,  -497,  -648,  -132,  -282,  -648,  -636,  -622,  -623,
  -623,  -622,  -257,  -648,  -639,  -647,   -43,  -208,   -44,  -209,
   -70,   -45,  -211,   -46,  -210,   -72,  -648,  -648,  -648,  -648,
  -444,  -648,  -412,  -413,  -636,  -415,  -647,  -434,  -433,  -648,
  -446,  -647,  -448,  -269,  -279,   -85,  -100,   -97,  -213,  -313,
   -13,   -15,  -361,  -363,  -647,  -467,  -461,  -647,  -462,  -463,
  -640,  -425,  -647,  -647,  -417,  -636,  -608,  -589,  -607,  -554,
  -555,  -555,  -580,  -555,  -555,  -599,  -555,  -577,  -594,  -636,
  -648,  -387,  -648,  -578,  -648,  -364,  -372,  -648,  -374,  -647,
  -648,   -59,  -324,  -648,  -444,  -648,  -116,  -117,  -120,  -636,
  -647,  -648,  -648,  -648,  -338,  -636,  -648,  -341,  -611,  -506,
  -509,  -510,  -511,  -512,  -648,  -489,   -12,  -283,  -444,   -42,
  -207,  -264,  -648,  -243,  -608,  -608,  -394,  -647,  -647,  -647,
  -411,  -648,  -636,  -577,  -585,  -586,  -596,  -454,   -65,  -647,
  -647,  -466,  -648,  -648,  -465,  -254,  -648,  -648,  -648,  -426,
  -550,  -648,  -558,  -648,  -560,  -648,  -563,  -648,  -566,  -568,
  -379,  -381,  -385,  -648,  -390,  -320,  -648,  -375,  -321,  -648,
  -647,  -326,  -444,  -648,  -648,  -332,  -336,  -648,  -547,  -549,
  -548,  -508,  -648,  -392,  -393,  -402,  -396,  -404,  -648,  -407,
  -648,  -409,  -414,  -648,  -648,  -584,  -648,  -451,  -647,  -647,
  -107,  -108,  -648,  -648,  -115,  -464,  -428,  -429,  -636,  -419,
  -421,  -422,  -555,  -555,  -555,  -555,  -383,  -648,  -388,  -648,
  -647,  -278,  -647,  -329,  -545,  -647,  -339,  -647,  -608,  -587,
  -395,  -647,  -647,  -647,  -647,  -597,  -647,  -416,  -595,  -648,
  -304,   -14,  -460,  -647,  -648,  -648,  -114,  -418,  -648,  -648,
  -556,  -559,  -561,  -564,  -648,  -386,  -647,  -456,  -457,  -458,
  -648,  -648,  -391,  -648,  -399,  -648,  -401,  -648,  -405,  -648,
  -408,  -410,  -303,  -626,  -459,  -636,  -622,  -623,  -626,  -113,
  -420,  -555,  -384,  -373,  -333,  -342,  -647,  -647,  -647,  -647,
  -444,  -557,  -648,  -397,  -400,  -403,  -406,  -647,  -398 ]

clist = [
'6,290,233,129,382,350,229,448,331,331,29,277,4,660,279,604,29,455,461',
'596,599,296,296,296,715,295,295,295,125,344,543,29,408,317,147,147,357',
'358,696,553,29,29,29,331,29,508,9,137,221,145,145,780,9,445,142,142',
'353,353,466,566,353,519,432,433,573,126,504,338,513,129,29,841,732,733',
'862,29,29,874,880,29,281,288,291,354,355,313,855,359,297,297,297,315',
'236,390,360,392,394,397,334,402,405,392,747,502,865,439,346,627,439',
'687,951,634,771,439,638,637,918,999,142,1025,353,353,353,353,349,293',
'305,306,826,130,954,736,738,740,29,618,370,620,470,29,29,29,29,29,1001',
'391,142,414,415,416,417,406,890,619,721,724,892,1015,372,728,779,621',
'967,783,970,881,693,920,755,693,9,421,428,922,369,220,998,564,851,418',
'921,696,352,729,698,930,511,512,831,683,1047,762,847,932,1025,388,515',
'389,393,396,456,1,840,640,399,401,404,899,785,786,407,1008,431,431,443',
'444,519,1070,891,530,649,295,468,469,472,136,449,860,419,701,29,29,29',
'29,29,29,29,710,857,1019,29,29,29,696,1001,820,625,412,685,951,2,555',
'386,680,29,559,510,560,760,342,455,461,351,651,869,1045,686,1021,836',
'367,888,296,730,465,775,295,929,573,983,278,383,296,295,622,829,295',
'862,449,345,331,29,347,427,438,518,518,438,29,554,348,29,438,1072,290',
',129,331,540,865,537,,693,693,,862,703,,,29,,,,29,316,,706,547,29,884',
',526,544,,,,706,1048,557,297,689,,331,,331,1031,353,556,561,297,,,608',
',29,528,788,541,129,638,789,,940,908,313,29,29,29,527,313,529,,1073',
'600,674,535,509,,,533,861,,863,603,,,514,763,,,,,,,,,835,706,641,862',
',1017,,,,558,562,,,,,,,,,,,,690,691,973,974,942,944,657,946,948,668',
'949,661,696,810,,673,699,,797,815,,,702,,,,456,147,455,461,935,,518',
'518,,,667,962,,833,650,720,145,,,,,142,,,295,919,,,,449,893,894,668',
'446,,,,681,467,29,,,,,,895,896,806,808,,573,573,,811,813,,,,,667,,1064',
'331,666,788,456,426,,,672,331,,,465,,456,,,,,1052,,,,,,295,544,,,316',
'449,29,439,,544,,714,,,,29,439,439,937,960,,,439,439,889,,684,848,,',
'29,693,706,,1040,1041,1042,1043,,,833,,,,692,,,,,768,456,,465,,,963',
'1002,,,,,,465,,,,,,989,756,,295,316,856,,29,449,316,29,778,,,,,,784',
'29,777,,839,1022,,1010,1023,,,828,,29,456,909,1080,,1081,29,,,,,,,,',
',,601,602,,6,,295,,873,465,,449,,,29,,793,661,,,29,29,,,1049,,,827,331',
'29,29,147,,,668,29,29,673,822,331,661,439,,,794,898,145,518,,,9,142',
'915,544,1076,,,,465,,,667,,431,837,,1050,854,1051,897,845,,849,,,805',
',,,,,438,467,32,446,,,,,32,438,438,,,,,438,438,,,661,456,,,32,,,878',
'883,878,,,,32,32,32,939,32,,,,,,,295,,,718,,449,950,,,29,661,850,,,',
'29,,,,32,29,29,,,32,32,,29,32,,,,968,,,,518,854,,,,,,,29,1065,,,465',
',,758,759,,761,706,,,,142,,,822,,,,,29,,,,,,,,,1018,,934,915,,,915,32',
'915,29,,,32,32,32,32,32,29,29,,,,,353,,,661,,,438,858,,,858,,,,353,',
',752,,29,754,29,,,965,,,956,969,331,,,29,29,,,854,864,331,866,,964,',
',,,,807,809,976,976,976,,812,814,,,,915,,915,,915,,915,,,,,,,29,29,',
',,,,,,32,32,32,32,32,32,32,915,,331,32,32,32,,,838,1014,,,,916,,29,',
'32,,,,,,,882,1037,1034,,,,,,,845,,,,917,,,,,,,29,,924,,,,,,456,32,,',
',878,,,32,,,32,,29,976,976,976,976,29,976,29,295,,,,,449,,,32,,,,32',
',,29,,32,878,661,,,,,,,910,,,885,,,19,,,,,,19,807,809,814,812,32,,,465',
'904,976,976,976,976,465,237,32,32,32,,,976,,,237,237,237,955,19,322',
'322,,,958,,,,,961,,,,,1003,,1004,966,1005,,927,858,,,916,19,,916,,916',
'237,237,,,237,364,,,931,,,,,,,,936,,,,,1024,,1026,924,,,924,,,924,,924',
',,,,,910,,,,,957,,,,,,,,,,,,,,1013,,19,,1016,,,237,237,237,237,19,,',
',916,,916,32,916,,916,,,42,1071,,,,,42,,,,,,987,988,,1077,,1078,,1079',
'916,,,,924,,924,,924,,924,,,,42,321,321,,,,,,,1012,1087,,,32,,,,,,924',
',,32,,,,42,,580,1074,1075,,,,,,363,32,1032,385,19,237,436,237,237,436',
'237,,,,436,237,237,,,,,,,1046,977,979,981,,19,,,,,,,,,,,,,,,,,,32,,',
'32,,,,,42,,,32,,,,,,42,237,,,,,32,,237,,,237,32,,,,,,,,,,,,,,,,,19,',
',,19,,,32,322,19,,,,32,32,,,,,,,,32,32,,322,,,32,32,,,,,,19,1054,1056',
'1058,1060,,1061,,,,,237,19,19,,,,,,,,,,42,,616,,616,,,,,,,,,,,,,,,,',
',,16,42,,,,,16,,,,1083,1084,1085,1086,,,,,,,,1088,,,,,,,,,,,580,,16',
',,,,,,,,,,32,,,742,,,32,,,,,32,32,,,16,,,32,,42,,,,42,368,,,321,42,',
',,,,32,,,237,,,,,,,321,,,,,,,,,,42,,,32,,,,,,,,,42,42,41,,,,,,41,32',
',,16,385,,385,,32,32,,,16,,,19,,,,,,,322,,237,,,41,320,320,322,,,32',
',32,,,,237,,,,,,,32,32,,,,,,41,,,,,,,,,,362,,,384,,,,,,,,,,,,,,,580',
',580,19,32,32,19,,742,,,871,,,237,,,,16,,434,,,434,,,237,,434,,,,237',
',,32,41,,,,,,16,,,41,580,580,,,,,,,,,19,,,,,,436,237,32,,,,,,,436,436',
',,,,436,436,,42,,,,,32,,321,,923,32,,32,,,321,,,,,,,,,,,16,322,32,,16',
',,,,16,,,322,,,,,,,,,,,,,,41,,,742,,742,,,,16,,,,,,,,42,,,42,16,16,',
'41,,,,,,,,,,,,,,,,,,,19,,,,18,,237,,,,18,19,19,,,,,,19,,,,,,,,,42,,',
',580,,,,436,,,18,,,,1006,742,,41,,,,41,,,,320,41,,,,19,,,,,,18,923,',
',923,,320,,,,,,19,,321,,41,,,,19,19,,,,321,,,41,41,,,,742,,742,,,,,',
'384,,384,,237,,19,,,,,,,,,,,19,237,,,,,18,,,,,,742,,,18,,,,,,923,,,42',
',16,,,,,,,,985,42,42,,,19,19,,42,992,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,',
',,,,,,,,,42,,,,,,,,,,,,1028,16,,,16,19,42,,18,,18,,,18,42,42,,,18,,',
',,,,,19,,,,,19,18,19,,,,,,,,42,,,,,41,,,237,,,42,320,16,,,,,,434,320',
',,,,,,,434,434,,,,,434,434,,,,,,,,,,385,,,,,42,42,,,991,18,,,,18,,,',
',18,,,,,,,,,,41,,,41,,,,42,,,,,,,,20,18,,,,,20,,,,,,,18,18,,385,,,,',
'42,,,,,,,,,,,,,20,324,324,,41,,429,442,42,16,,,,42,,42,,,,,16,16,,,',
',20,16,,,,,,,,,366,,,,,,,,434,,,,,,,,,,,320,,,,,,,,,,,320,16,,,,,,,',
',,,,,,,521,,523,16,524,525,,,20,,,16,16,,,,,20,,,,,,,,,,,,,,,,,,,,,16',
',,41,,,,,,,,16,563,,41,41,,,,,,41,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,16,16',
',,995,,,,,,,41,,,,,20,,437,,,437,,,,,437,,,41,,16,,,,,,41,41,,20,,,653',
',,,,18,,,18,,,,,,,,,16,,,,41,,,,,,,,,,,41,,,,,,16,,,,,16,,16,,,,,,,',
',,,,,18,,,20,,,18,20,384,,,324,20,41,41,18,18,990,,,,18,18,,,,,,324',
'694,,,563,,697,,,,20,,,,,,41,,,,,,20,20,,,,,,,,,,,,617,,617,,,384,,',
',,41,,,,,,,,,,,,,,,,,,,,,41,,748,,,41,,41,,,,,,,,,,,,,,,,,,18,,,,,,',
',,,,18,18,,,,,,18,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,795,,,,,,,,694,563,',
'18,,,,,,,,,,,,,,,,,,18,,,,,,,,18,18,,,834,,,,,,,,,,,,,20,,,,,,,324,',
'846,18,,,,694,324,,563,,,,18,,,,,,,,,,,,868,,,,,,,,,,,,,,,,,,,,,442',
',,,,,18,18,,,,,,,,20,,,20,,,,,,,,,,,,,,,,907,,,18,,,,,,,,,,,244,,,,',
',,,,294,294,294,,,,,,,18,,20,,340,341,,343,437,,,,,,,,,437,437,,,18',
',437,437,,18,,18,,,,,,,,,,,,,,,,,,,,,,,,,324,,,,,,,,,,,324,,,,,,,,,',
',,,,,,,,,563,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,1011,20',
'20,,,,,903,20,,,,,,,,,,,,,,,,,437,,,,,,,,,,,,,,,,,,,,,,,20,,,294,441',
',,447,294,,,,447,,,,,,20,,,,,,,244,20,20,479,480,481,482,483,484,485',
'486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,,,,20,501',
',,,,,,,294,,20,,,,,294,,,294,,,,,,,294,,294,,294,294,,,,,,,,,,,,,,617',
',,,,20,20,,,994,,,,,,,,,,,,,,,549,,550,,,,294,294,,,,,20,,,,,,,,,,,',
',,,,,,,,,,,,617,,,,,20,,,,,,,,,,,,,,,,,,,,,20,,,,,20,,20,,,,,,,,,,,',
',,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,,447,447,447',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,294,,294,,,,,,,,,,,,,,294',
',,,,,,,,,713,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,',
',,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,447,294',
',,802,,,294,294,447,447,,,,,447,447,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,',
',,,,,,,,,,,447,,,,,294,,,,,294,,,294,,,,,,,,,,,,,,,,294,,,,,,,,,,,,',
',,,,,,,,294,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,447,,,,,,',
',,,,,,447,447,447,447,,913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,447,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294' ]
        racc_goto_table = arr = ::Array.new(3808, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,87,39,120,69,104,37,35,79,79,53,173,2,36,37,115,53,49,49,108,108,84',
'84,84,15,45,45,45,5,39,64,53,69,62,74,74,41,41,220,12,53,53,53,79,53',
'51,9,21,21,73,73,123,9,32,70,70,30,30,32,172,30,89,28,28,205,8,49,77',
'35,120,53,17,155,155,210,53,53,109,111,53,50,50,50,23,23,58,164,23,86',
'86,86,59,26,6,5,6,6,6,63,6,6,6,150,174,215,24,9,195,24,52,148,195,67',
'24,195,194,160,166,70,216,30,30,30,30,130,57,57,57,162,7,151,208,208',
'208,53,68,131,68,60,53,53,53,53,53,167,191,70,23,23,23,23,191,132,133',
'85,85,134,135,136,85,137,138,139,140,141,44,90,152,42,90,9,31,29,158',
'25,22,165,168,169,9,164,220,170,171,20,18,177,178,180,182,183,184,185',
'186,216,189,60,190,192,193,87,1,16,196,197,198,199,200,201,202,203,151',
'84,84,30,30,89,166,204,60,13,45,30,30,37,11,6,209,10,64,53,53,53,53',
'53,53,53,64,212,213,53,53,53,220,167,36,219,7,88,148,3,60,100,35,53',
'83,87,103,115,80,49,49,106,75,150,151,54,160,36,117,67,84,172,70,119',
'45,162,205,164,48,124,84,45,125,52,45,210,6,126,79,53,127,26,26,6,6',
'26,53,128,129,53,26,151,87,,120,79,39,215,37,,90,90,,210,35,,,53,,,',
'53,14,,49,37,53,36,,5,62,,,,49,111,84,86,174,,79,,79,17,30,6,6,86,,',
'37,,53,9,195,77,120,195,194,,155,36,58,53,53,53,8,58,59,,109,23,60,59',
'57,,,63,161,,161,5,,,57,35,,,,,,,,,64,49,6,210,,123,,,,86,86,,,,,,,',
',,,,60,60,155,155,208,208,37,208,208,87,208,39,220,51,,87,60,,35,51',
',,60,,,,87,74,49,49,85,,6,6,,,6,36,,89,21,60,73,,,,,70,,,45,161,,,,6',
'12,12,87,76,,,,39,76,53,,,,,,172,172,32,32,,205,205,,32,32,,,,,6,,15',
'79,50,195,87,14,,,50,79,,,70,,87,,,,,155,,,,,,45,62,,,14,6,53,24,,62',
',30,,,,53,24,24,12,108,,,24,24,35,,50,28,,,53,90,49,,208,208,208,208',
',,89,,,,86,,,,,41,87,,70,,,12,161,,,,,,70,,,,,,108,120,,45,14,154,,53',
'6,14,53,30,,,,,,30,53,6,,60,161,,108,161,,,104,,53,87,32,36,,208,53',
',,,,,,,,,,14,14,,6,,45,,60,70,,6,,,53,,2,39,,,53,53,,,115,,,173,79,53',
'53,74,,,87,53,53,87,6,79,39,24,,,21,60,73,6,,,9,70,154,62,161,,,,70',
',,6,,84,62,,12,39,12,69,6,,6,,,86,,,,,,26,76,56,76,,,,,56,26,26,,,,',
'26,26,,,39,87,,,56,,,6,84,6,,,,56,56,56,60,56,,,,,,,45,,,102,,6,60,',
',53,39,86,,,,53,,,,56,53,53,,,56,56,,53,56,,,,60,,,,6,39,,,,,,,53,35',
',,70,,,102,102,,102,49,,,,70,,,6,,,,,53,,,,,,,,,154,,6,154,,,154,56',
'154,53,,,56,56,56,56,56,53,53,,,,,30,,,39,,,26,156,,,156,,,,30,,,14',
',53,14,53,,,120,,,23,120,79,,,53,53,,,39,159,79,159,,23,,,,,,76,76,6',
'6,6,,76,76,,,,154,,154,,154,,154,,,,,,,53,53,,,,,,,,56,56,56,56,56,56',
'56,154,,79,56,56,56,,,76,120,,,,156,,53,,56,,,,,,,102,39,37,,,,,,,6',
',,,159,,,,,,,53,,211,,,,,,87,56,,,,6,,,56,,,56,,53,6,6,6,6,53,6,53,45',
',,,,6,,,56,,,,56,,,53,,56,6,39,,,,,,,76,,,14,,,34,,,,,,34,76,76,76,76',
'56,,,70,14,6,6,6,6,70,34,56,56,56,,,6,,,34,34,34,102,34,34,34,,,102',
',,,,102,,,,,159,,159,102,159,,14,156,,,156,34,,156,,156,34,34,,,34,34',
',,14,,,,,,,,14,,,,,159,,159,211,,,211,,,211,,211,,,,,,76,,,,,14,,,,',
',,,,,,,,,102,,34,,102,,,34,34,34,34,34,,,,156,,156,56,156,,156,,,66',
'159,,,,,66,,,,,,14,14,,159,,159,,159,156,,,,211,,211,,211,,211,,,,66',
'66,66,,,,,,,14,159,,,56,,,,,,211,,,56,,,,66,,149,102,102,,,,,,66,56',
'14,66,34,34,34,34,34,34,34,,,,34,34,34,,,,,,,14,157,157,157,,34,,,,',
',,,,,,,,,,,,,56,,,56,,,,,66,,,56,,,,,,66,34,,,,,56,,34,,,34,56,,,,,',
',,,,,,,,,,,34,,,,34,,,56,34,34,,,,56,56,,,,,,,,56,56,,34,,,56,56,,,',
',,34,157,157,157,157,,157,,,,,34,34,34,,,,,,,,,,66,,34,,34,,,,,,,,,',
',,,,,,,,,27,66,,,,,27,,,,157,157,157,157,,,,,,,,157,,,,,,,,,,,149,,27',
',,,,,,,,,,56,,,149,,,56,,,,,56,56,,,27,,,56,,66,,,,66,27,,,66,66,,,',
',,56,,,34,,,,,,,66,,,,,,,,,,66,,,56,,,,,,,,,66,66,65,,,,,,65,56,,,27',
'66,,66,,56,56,,,27,,,34,,,,,,,34,,34,,,65,65,65,34,,,56,,56,,,,34,,',
',,,,56,56,,,,,,65,,,,,,,,,,65,,,65,,,,,,,,,,,,,,,149,,149,34,56,56,34',
',149,,,149,,,34,,,,27,,27,,,27,,,34,,27,,,,34,,,56,65,,,,,,27,,,65,149',
'149,,,,,,,,,34,,,,,,34,34,56,,,,,,,34,34,,,,,34,34,,66,,,,,56,,66,,149',
'56,,56,,,66,,,,,,,,,,,27,34,56,,27,,,,,27,,,34,,,,,,,,,,,,,,65,,,149',
',149,,,,27,,,,,,,,66,,,66,27,27,,65,,,,,,,,,,,,,,,,,,,34,,,,33,,34,',
',,33,34,34,,,,,,34,,,,,,,,,66,,,,149,,,,34,,,33,,,,149,149,,65,,,,65',
',,,65,65,,,,34,,,,,,33,149,,,149,,65,,,,,,34,,66,,65,,,,34,34,,,,66',
',,65,65,,,,149,,149,,,,,,65,,65,,34,,34,,,,,,,,,,,34,34,,,,,33,,,,,',
'149,,,33,,,,,,149,,,66,,27,,,,,,,,34,66,66,,,34,34,,66,34,,,,,,,,,,',
',,,,,,,,,,,,,,,,34,,,,,,,,,,,,66,,,,,,,,,,,,34,27,,,27,34,66,,33,,33',
',,33,66,66,,,33,,,,,,,,34,,,,,34,33,34,,,,,,,,66,,,,,65,,,34,,,66,65',
'27,,,,,,27,65,,,,,,,,27,27,,,,,27,27,,,,,,,,,,66,,,,,66,66,,,66,33,',
',,33,,,,,33,,,,,,,,,,65,,,65,,,,66,,,,,,,,38,33,,,,,38,,,,,,,33,33,',
'66,,,,,66,,,,,,,,,,,,,38,38,38,,65,,82,82,66,27,,,,66,,66,,,,,27,27',
',,,,38,27,,,,,,,,,38,,,,,,,,27,,,,,,,,,,,65,,,,,,,,,,,65,27,,,,,,,,',
',,,,,,82,,82,27,82,82,,,38,,,27,27,,,,,38,,,,,,,,,,,,,,,,,,,,,27,,,65',
',,,,,,,27,82,,65,65,,,,,,65,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,27,27,,,27',
',,,,,,65,,,,,38,,38,,,38,,,,,38,,,65,,27,,,,,,65,65,,38,,,82,,,,,33',
',,33,,,,,,,,,27,,,,65,,,,,,,,,,,65,,,,,,27,,,,,27,,27,,,,,,,,,,,,,33',
',,38,,,33,38,65,,,38,38,65,65,33,33,65,,,,33,33,,,,,,38,82,,,82,,82',
',,,38,,,,,,65,,,,,,38,38,,,,,,,,,,,,38,,38,,,65,,,,,65,,,,,,,,,,,,,',
',,,,,,,65,,82,,,65,,65,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,33,33,,,,,,33,',
',,,,,,,,,,,,,,,33,,,,,,,,,,,,82,,,,,,,,82,82,,33,,,,,,,,,,,,,,,,,,33',
',,,,,,,33,33,,,82,,,,,,,,,,,,,38,,,,,,,38,,82,33,,,,82,38,,82,,,,33',
',,,,,,,,,,,82,,,,,,,,,,,,,,,,,,,,,82,,,,,,33,33,,,,,,,,38,,,38,,,,,',
',,,,,,,,,,82,,,33,,,,,,,,,,,40,,,,,,,,,40,40,40,,,,,,,33,,38,,40,40',
',40,38,,,,,,,,,38,38,,,33,,38,38,,33,,33,,,,,,,,,,,,,,,,,,,,,,,,,38',
',,,,,,,,,,38,,,,,,,,,,,,,,,,,,,82,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,38,,,,,,,,,,82,38,38,,,,,38,38,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,',
',,,,,,,38,,,40,40,,,40,40,,,,40,,,,,,38,,,,,,,40,38,38,40,40,40,40,40',
'40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,,,,38,40,,,,,,,,40',
',38,,,,,40,,,40,,,,,,,40,,40,,40,40,,,,,,,,,,,,,,38,,,,,38,38,,,38,',
',,,,,,,,,,,,,40,,40,,,,40,40,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,38',
',,,,,,,,,,,,,,,,,,,,38,,,,,38,,38,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40,40,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,,,40,,,,,,,,,,40,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,40,,,40,40,40,40,,,,,40,40,,',
',,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,40,,,,,40,,,,,40,,,40,,,,,,',
',,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,',
',,40,,,,,,,40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3808, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   201,    10,   250,   nil,    23,    -2,   121,    60,    44,
    92,   215,  -306,  -200,   287,  -528,  -513,  -644,  -655,   nil,
  -343,    36,   163,    16,  -119,   102,    69,  1445,  -161,   -51,
   -11,    34,  -174,  1826,  1056,  -221,  -435,   -13,  2168,   -20,
  2774,   -33,  -432,   nil,  -590,    -7,   nil,   nil,   252,  -212,
    51,  -236,  -402,     8,  -241,   nil,   724,    93,    49,    55,
   -96,   nil,    -4,    60,  -305,  1559,  1202,  -502,  -235,   -71,
    43,   nil,   nil,    38,    23,  -162,   249,    23,   nil,   -29,
   212,   nil,  1987,   -93,   -11,  -403,    56,   -29,  -256,  -236,
  -351,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   177,   nil,   217,   -92,   -60,   nil,   196,   nil,  -335,  -675,
   nil,  -676,   nil,   nil,   nil,  -345,   nil,   197,   nil,  -344,
    -2,   nil,   nil,  -570,   205,  -100,   227,   229,   -48,   236,
    60,    63,  -623,  -218,  -622,  -808,    84,  -460,  -221,  -732,
  -459,  -733,   nil,   nil,   nil,   nil,   nil,   nil,  -760,   914,
  -479,  -742,  -657,   nil,  -129,  -495,   142,   381,  -651,   166,
  -708,  -356,  -555,   nil,  -644,  -762,  -821,  -794,  -175,  -551,
   116,  -381,  -293,   -14,  -173,   nil,   nil,  -100,  -100,   nil,
  -500,   nil,  -314,  -822,  -415,  -525,  -654,   nil,   nil,   103,
   102,    48,   100,   100,  -281,  -282,  -196,   104,   104,   104,
  -578,  -421,  -421,   107,  -558,  -288,   nil,   nil,  -439,  -508,
  -661,   175,  -493,  -733,   nil,  -633,  -859,   nil,   nil,  -141,
  -482 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   308,     7,   361,   311,
   nil,   nil,   nil,   nil,   552,   nil,   nil,   nil,   nil,   307,
   309,   nil,   nil,   nil,    14,    15,    21,   242,   nil,   nil,
    17,   nil,   435,   243,   339,   nil,   nil,   773,   241,   471,
    24,   nil,   nil,   356,   nil,    25,    26,    27,   nil,   709,
   nil,   nil,   nil,   328,   nil,    28,   325,   450,    35,   nil,
   nil,    37,    40,    39,   nil,   238,   239,   615,   nil,   144,
   458,   143,   146,    90,    91,   nil,   440,   105,    47,    50,
   274,   545,   300,   nil,   451,   nil,   452,   463,   669,   516,
   298,   282,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   283,    65,   nil,    67,   nil,   nil,
    68,   876,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   597,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   287,   276,   717,   844,   606,   877,   744,   867,
   nil,   745,  1020,   914,   568,   nil,   569,   nil,   nil,   570,
   nil,   572,   nil,   823,   nil,   nil,   nil,   578,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   462,   285,   nil,   nil,   688,
   nil,   503,   nil,   nil,   nil,   nil,   nil,    89,    92,    94,
   nil,   nil,   nil,   nil,   nil,   632,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   859,   782,   567,   nil,   571,
   582,   584,   585,   925,   588,   589,   926,   592,   595,   nil,
   302 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 147, :_reduce_1,
  2, 145, :_reduce_2,
  2, 146, :_reduce_3,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 148, :_reduce_6,
  2, 148, :_reduce_none,
  1, 151, :_reduce_none,
  0, 155, :_reduce_9,
  3, 151, :_reduce_10,
  0, 157, :_reduce_11,
  4, 154, :_reduce_12,
  0, 162, :_reduce_13,
  6, 156, :_reduce_14,
  3, 156, :_reduce_15,
  2, 158, :_reduce_16,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  3, 163, :_reduce_19,
  2, 163, :_reduce_20,
  1, 164, :_reduce_none,
  1, 164, :_reduce_22,
  0, 175, :_reduce_23,
  4, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  2, 153, :_reduce_28,
  3, 153, :_reduce_29,
  3, 153, :_reduce_30,
  3, 153, :_reduce_31,
  3, 153, :_reduce_32,
  3, 153, :_reduce_33,
  4, 153, :_reduce_34,
  1, 153, :_reduce_none,
  3, 153, :_reduce_36,
  3, 153, :_reduce_37,
  3, 153, :_reduce_38,
  1, 153, :_reduce_none,
  3, 168, :_reduce_40,
  3, 168, :_reduce_41,
  6, 168, :_reduce_42,
  5, 168, :_reduce_43,
  5, 168, :_reduce_44,
  5, 168, :_reduce_45,
  5, 168, :_reduce_46,
  3, 168, :_reduce_47,
  1, 176, :_reduce_48,
  1, 176, :_reduce_none,
  1, 174, :_reduce_none,
  3, 174, :_reduce_51,
  3, 174, :_reduce_52,
  3, 174, :_reduce_53,
  2, 174, :_reduce_54,
  1, 174, :_reduce_none,
  1, 167, :_reduce_56,
  0, 187, :_reduce_57,
  0, 188, :_reduce_58,
  4, 185, :_reduce_59,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 190, :_reduce_none,
  4, 190, :_reduce_63,
  0, 198, :_reduce_64,
  4, 195, :_reduce_65,
  1, 197, :_reduce_66,
  2, 189, :_reduce_67,
  3, 189, :_reduce_68,
  4, 189, :_reduce_69,
  5, 189, :_reduce_70,
  4, 189, :_reduce_71,
  5, 189, :_reduce_72,
  2, 189, :_reduce_73,
  2, 189, :_reduce_74,
  2, 189, :_reduce_75,
  2, 189, :_reduce_76,
  2, 189, :_reduce_77,
  1, 169, :_reduce_none,
  3, 169, :_reduce_79,
  1, 203, :_reduce_none,
  3, 203, :_reduce_81,
  1, 202, :_reduce_82,
  2, 202, :_reduce_83,
  3, 202, :_reduce_84,
  5, 202, :_reduce_85,
  2, 202, :_reduce_86,
  4, 202, :_reduce_87,
  2, 202, :_reduce_88,
  4, 202, :_reduce_89,
  1, 202, :_reduce_90,
  3, 202, :_reduce_91,
  1, 206, :_reduce_none,
  3, 206, :_reduce_93,
  2, 205, :_reduce_94,
  3, 205, :_reduce_95,
  1, 208, :_reduce_96,
  3, 208, :_reduce_97,
  1, 207, :_reduce_98,
  1, 207, :_reduce_99,
  4, 207, :_reduce_100,
  3, 207, :_reduce_101,
  3, 207, :_reduce_102,
  3, 207, :_reduce_103,
  3, 207, :_reduce_104,
  2, 207, :_reduce_105,
  1, 207, :_reduce_106,
  1, 171, :_reduce_107,
  1, 171, :_reduce_108,
  4, 171, :_reduce_109,
  3, 171, :_reduce_110,
  3, 171, :_reduce_111,
  3, 171, :_reduce_112,
  3, 171, :_reduce_113,
  2, 171, :_reduce_114,
  1, 171, :_reduce_115,
  1, 211, :_reduce_116,
  1, 211, :_reduce_none,
  2, 212, :_reduce_118,
  1, 212, :_reduce_119,
  3, 212, :_reduce_120,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_124,
  1, 213, :_reduce_125,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 165, :_reduce_128,
  1, 165, :_reduce_none,
  1, 166, :_reduce_130,
  0, 219, :_reduce_131,
  4, 166, :_reduce_132,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  3, 184, :_reduce_205,
  3, 184, :_reduce_206,
  6, 184, :_reduce_207,
  5, 184, :_reduce_208,
  5, 184, :_reduce_209,
  5, 184, :_reduce_210,
  5, 184, :_reduce_211,
  0, 225, :_reduce_212,
  5, 184, :_reduce_213,
  3, 184, :_reduce_214,
  3, 184, :_reduce_215,
  3, 184, :_reduce_216,
  3, 184, :_reduce_217,
  3, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 184, :_reduce_220,
  3, 184, :_reduce_221,
  3, 184, :_reduce_222,
  4, 184, :_reduce_223,
  2, 184, :_reduce_224,
  2, 184, :_reduce_225,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  1, 184, :_reduce_none,
  3, 184, :_reduce_231,
  3, 184, :_reduce_232,
  3, 184, :_reduce_233,
  3, 184, :_reduce_234,
  3, 184, :_reduce_235,
  2, 184, :_reduce_236,
  2, 184, :_reduce_237,
  3, 184, :_reduce_238,
  3, 184, :_reduce_239,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  3, 184, :_reduce_242,
  6, 184, :_reduce_243,
  1, 184, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  3, 222, :_reduce_249,
  3, 222, :_reduce_250,
  1, 226, :_reduce_251,
  1, 227, :_reduce_none,
  2, 227, :_reduce_253,
  4, 227, :_reduce_254,
  2, 227, :_reduce_255,
  1, 220, :_reduce_none,
  3, 220, :_reduce_257,
  3, 231, :_reduce_258,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 179, :_reduce_263,
  4, 179, :_reduce_264,
  2, 179, :_reduce_265,
  1, 201, :_reduce_266,
  2, 201, :_reduce_267,
  2, 201, :_reduce_268,
  4, 201, :_reduce_269,
  1, 201, :_reduce_270,
  0, 235, :_reduce_271,
  2, 194, :_reduce_272,
  2, 234, :_reduce_273,
  2, 233, :_reduce_274,
  1, 233, :_reduce_none,
  1, 228, :_reduce_276,
  2, 228, :_reduce_277,
  3, 228, :_reduce_278,
  4, 228, :_reduce_279,
  1, 173, :_reduce_280,
  1, 173, :_reduce_281,
  3, 172, :_reduce_282,
  4, 172, :_reduce_283,
  2, 172, :_reduce_284,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_295,
  0, 270, :_reduce_296,
  4, 223, :_reduce_297,
  0, 271, :_reduce_298,
  3, 223, :_reduce_299,
  0, 272, :_reduce_300,
  4, 223, :_reduce_301,
  3, 223, :_reduce_302,
  3, 223, :_reduce_303,
  2, 223, :_reduce_304,
  0, 273, :_reduce_305,
  4, 223, :_reduce_306,
  0, 274, :_reduce_307,
  4, 223, :_reduce_308,
  1, 223, :_reduce_309,
  4, 223, :_reduce_310,
  3, 223, :_reduce_311,
  1, 223, :_reduce_312,
  5, 223, :_reduce_313,
  4, 223, :_reduce_314,
  3, 223, :_reduce_315,
  2, 223, :_reduce_316,
  1, 223, :_reduce_none,
  2, 223, :_reduce_318,
  2, 223, :_reduce_319,
  6, 223, :_reduce_320,
  6, 223, :_reduce_321,
  4, 223, :_reduce_322,
  4, 223, :_reduce_323,
  5, 223, :_reduce_324,
  4, 223, :_reduce_325,
  6, 223, :_reduce_326,
  0, 275, :_reduce_327,
  0, 276, :_reduce_328,
  7, 223, :_reduce_329,
  0, 277, :_reduce_330,
  0, 278, :_reduce_331,
  0, 279, :_reduce_332,
  9, 223, :_reduce_333,
  0, 280, :_reduce_334,
  0, 281, :_reduce_335,
  6, 223, :_reduce_336,
  0, 282, :_reduce_337,
  0, 283, :_reduce_338,
  7, 223, :_reduce_339,
  0, 284, :_reduce_340,
  0, 285, :_reduce_341,
  9, 223, :_reduce_342,
  1, 223, :_reduce_343,
  1, 223, :_reduce_344,
  1, 223, :_reduce_345,
  1, 223, :_reduce_346,
  1, 178, :_reduce_347,
  1, 245, :_reduce_none,
  1, 251, :_reduce_none,
  1, 254, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 260, :_reduce_none,
  1, 262, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 160, :_reduce_none,
  1, 291, :_reduce_none,
  1, 246, :_reduce_none,
  1, 200, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  2, 252, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 253, :_reduce_none,
  5, 253, :_reduce_373,
  1, 255, :_reduce_none,
  2, 255, :_reduce_375,
  1, 261, :_reduce_none,
  1, 261, :_reduce_377,
  1, 292, :_reduce_none,
  3, 292, :_reduce_379,
  1, 295, :_reduce_380,
  3, 295, :_reduce_381,
  1, 294, :_reduce_382,
  4, 294, :_reduce_383,
  6, 294, :_reduce_384,
  3, 294, :_reduce_385,
  5, 294, :_reduce_386,
  2, 294, :_reduce_387,
  4, 294, :_reduce_388,
  1, 294, :_reduce_389,
  3, 294, :_reduce_390,
  4, 296, :_reduce_391,
  2, 296, :_reduce_392,
  2, 296, :_reduce_393,
  1, 296, :_reduce_394,
  2, 301, :_reduce_395,
  1, 301, :_reduce_none,
  6, 302, :_reduce_397,
  8, 302, :_reduce_398,
  4, 302, :_reduce_399,
  6, 302, :_reduce_400,
  4, 302, :_reduce_401,
  2, 302, :_reduce_402,
  6, 302, :_reduce_403,
  2, 302, :_reduce_404,
  4, 302, :_reduce_405,
  6, 302, :_reduce_406,
  2, 302, :_reduce_407,
  4, 302, :_reduce_408,
  2, 302, :_reduce_409,
  4, 302, :_reduce_410,
  1, 302, :_reduce_411,
  1, 306, :_reduce_412,
  1, 306, :_reduce_413,
  3, 307, :_reduce_414,
  1, 307, :_reduce_415,
  4, 307, :_reduce_416,
  1, 308, :_reduce_none,
  4, 308, :_reduce_418,
  1, 309, :_reduce_419,
  3, 309, :_reduce_420,
  1, 310, :_reduce_421,
  1, 310, :_reduce_none,
  0, 314, :_reduce_423,
  0, 315, :_reduce_424,
  4, 250, :_reduce_425,
  4, 312, :_reduce_426,
  1, 312, :_reduce_427,
  3, 313, :_reduce_428,
  3, 313, :_reduce_429,
  3, 317, :_reduce_430,
  2, 191, :_reduce_431,
  4, 191, :_reduce_432,
  5, 191, :_reduce_433,
  5, 191, :_reduce_434,
  0, 320, :_reduce_435,
  3, 249, :_reduce_436,
  4, 249, :_reduce_437,
  4, 249, :_reduce_438,
  3, 249, :_reduce_439,
  3, 249, :_reduce_440,
  3, 249, :_reduce_441,
  2, 249, :_reduce_442,
  1, 249, :_reduce_443,
  4, 249, :_reduce_444,
  0, 321, :_reduce_445,
  4, 248, :_reduce_446,
  0, 322, :_reduce_447,
  4, 248, :_reduce_448,
  0, 323, :_reduce_449,
  0, 324, :_reduce_450,
  4, 196, :_reduce_451,
  0, 325, :_reduce_452,
  0, 326, :_reduce_453,
  4, 318, :_reduce_454,
  0, 328, :_reduce_455,
  6, 259, :_reduce_456,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  6, 159, :_reduce_459,
  0, 159, :_reduce_460,
  1, 329, :_reduce_461,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 330, :_reduce_464,
  1, 330, :_reduce_none,
  2, 161, :_reduce_466,
  1, 161, :_reduce_none,
  1, 236, :_reduce_468,
  1, 236, :_reduce_469,
  1, 236, :_reduce_none,
  1, 237, :_reduce_471,
  1, 332, :_reduce_472,
  1, 332, :_reduce_none,
  2, 332, :_reduce_474,
  3, 333, :_reduce_475,
  1, 333, :_reduce_476,
  3, 238, :_reduce_477,
  3, 239, :_reduce_478,
  3, 240, :_reduce_479,
  3, 240, :_reduce_480,
  1, 337, :_reduce_481,
  3, 337, :_reduce_482,
  1, 338, :_reduce_none,
  2, 338, :_reduce_484,
  3, 242, :_reduce_485,
  0, 341, :_reduce_486,
  4, 242, :_reduce_487,
  1, 340, :_reduce_488,
  3, 340, :_reduce_489,
  3, 241, :_reduce_490,
  3, 241, :_reduce_491,
  3, 243, :_reduce_492,
  3, 243, :_reduce_493,
  1, 342, :_reduce_494,
  3, 342, :_reduce_495,
  1, 343, :_reduce_496,
  3, 343, :_reduce_497,
  1, 334, :_reduce_498,
  2, 334, :_reduce_499,
  1, 335, :_reduce_500,
  2, 335, :_reduce_501,
  1, 336, :_reduce_502,
  2, 336, :_reduce_503,
  1, 339, :_reduce_504,
  0, 345, :_reduce_505,
  3, 339, :_reduce_506,
  0, 346, :_reduce_507,
  4, 339, :_reduce_508,
  1, 344, :_reduce_509,
  1, 344, :_reduce_510,
  1, 344, :_reduce_511,
  1, 344, :_reduce_none,
  2, 217, :_reduce_513,
  1, 217, :_reduce_514,
  1, 347, :_reduce_none,
  1, 347, :_reduce_none,
  1, 347, :_reduce_none,
  1, 347, :_reduce_none,
  3, 218, :_reduce_519,
  1, 331, :_reduce_none,
  2, 331, :_reduce_521,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_531,
  1, 210, :_reduce_532,
  1, 210, :_reduce_533,
  1, 210, :_reduce_534,
  1, 210, :_reduce_535,
  1, 210, :_reduce_536,
  1, 210, :_reduce_537,
  1, 244, :_reduce_538,
  1, 244, :_reduce_539,
  1, 177, :_reduce_540,
  1, 177, :_reduce_541,
  1, 182, :_reduce_542,
  1, 182, :_reduce_543,
  0, 348, :_reduce_544,
  4, 263, :_reduce_545,
  1, 263, :_reduce_546,
  3, 267, :_reduce_547,
  0, 350, :_reduce_548,
  3, 267, :_reduce_549,
  4, 349, :_reduce_550,
  2, 349, :_reduce_551,
  2, 349, :_reduce_552,
  1, 349, :_reduce_none,
  2, 352, :_reduce_554,
  0, 352, :_reduce_555,
  6, 316, :_reduce_556,
  8, 316, :_reduce_557,
  4, 316, :_reduce_558,
  6, 316, :_reduce_559,
  4, 316, :_reduce_560,
  6, 316, :_reduce_561,
  2, 316, :_reduce_562,
  4, 316, :_reduce_563,
  6, 316, :_reduce_564,
  2, 316, :_reduce_565,
  4, 316, :_reduce_566,
  2, 316, :_reduce_567,
  4, 316, :_reduce_568,
  1, 316, :_reduce_569,
  0, 316, :_reduce_570,
  1, 311, :_reduce_571,
  1, 311, :_reduce_572,
  1, 311, :_reduce_573,
  1, 311, :_reduce_574,
  1, 293, :_reduce_none,
  1, 293, :_reduce_576,
  1, 354, :_reduce_none,
  3, 354, :_reduce_578,
  1, 303, :_reduce_579,
  3, 303, :_reduce_580,
  1, 355, :_reduce_none,
  2, 356, :_reduce_582,
  1, 356, :_reduce_583,
  2, 357, :_reduce_584,
  1, 357, :_reduce_585,
  1, 297, :_reduce_none,
  3, 297, :_reduce_587,
  1, 351, :_reduce_none,
  3, 351, :_reduce_589,
  1, 358, :_reduce_none,
  1, 358, :_reduce_none,
  2, 298, :_reduce_592,
  1, 298, :_reduce_593,
  3, 359, :_reduce_594,
  3, 360, :_reduce_595,
  1, 304, :_reduce_596,
  3, 304, :_reduce_597,
  1, 353, :_reduce_598,
  3, 353, :_reduce_599,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 305, :_reduce_602,
  1, 305, :_reduce_603,
  1, 362, :_reduce_none,
  1, 362, :_reduce_none,
  2, 300, :_reduce_606,
  2, 299, :_reduce_607,
  0, 299, :_reduce_608,
  1, 268, :_reduce_none,
  0, 363, :_reduce_610,
  4, 268, :_reduce_611,
  1, 247, :_reduce_612,
  2, 247, :_reduce_none,
  1, 230, :_reduce_none,
  3, 230, :_reduce_615,
  3, 364, :_reduce_616,
  2, 364, :_reduce_617,
  2, 364, :_reduce_618,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 181, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 204, :_reduce_none,
  2, 180, :_reduce_none,
  0, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 264, :_reduce_643,
  1, 264, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_646,
  0, 150, :_reduce_647 ]

racc_reduce_n = 648

racc_shift_n = 1089

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLOWEST => 142,
  :tEQL => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLOWEST",
  "tEQL",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_43(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_54(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_57(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_59(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_64(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_65(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_66(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_67(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_68(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_69(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_70(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_71(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_72(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_73(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_74(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_75(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_76(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 78 omitted

def _reduce_79(val, _values, result)
                      result = val[1]

    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_82(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_83(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_84(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_85(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_86(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_87(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_88(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_89(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_90(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_91(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = val[1]

    result
end

def _reduce_94(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_95(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_96(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_97(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_102(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_107(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_109(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_110(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_111(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_112(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_113(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_114(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_116(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 117 omitted

def _reduce_118(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_119(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_120(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_125(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 126 omitted

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

def _reduce_205(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_211(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_212(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_213(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")


    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_235(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_236(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_242(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_243(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_258(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = args val

    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_267(val, _values, result)
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_270(val, _values, result)
                      result = call_args val

    result
end

def _reduce_271(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_272(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_273(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_274(val, _values, result)
                      result = val[1]

    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_277(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_278(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_279(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_283(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_284(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_296(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_298(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_299(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_301(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_303(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_304(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_305(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_306(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_308(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_310(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_311(val, _values, result)
                      result = new_yield

    result
end

def _reduce_312(val, _values, result)
                      result = new_yield

    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_314(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_315(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_316(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 317 omitted

def _reduce_318(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_319(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_325(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_326(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_329(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_330(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_331(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_334(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_335(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_336(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_338(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_339(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_340(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_341(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_342(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_343(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_346(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_347(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[1]

    result
end

def _reduce_380(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_381(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_382(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_383(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_385(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_386(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_387(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_388(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_389(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_390(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_391(val, _values, result)
                      result = call_args val

    result
end

def _reduce_392(val, _values, result)
                      result = call_args val

    result
end

def _reduce_393(val, _values, result)
                      result = call_args val

    result
end

def _reduce_394(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
 result = 0
    result
end

def _reduce_413(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_416(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      result = args val

    result
end

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_424(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_425(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_426(val, _values, result)
                      result = args val

    result
end

def _reduce_427(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_428(val, _values, result)
                      result = val[1]

    result
end

def _reduce_429(val, _values, result)
                      result = val[1]

    result
end

def _reduce_430(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_431(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_432(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_433(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_436(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_442(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_443(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_444(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_447(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_448(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_449(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_450(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_451(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_452(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_453(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_454(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_455(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_456(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 457 omitted

# reduce 458 omitted

def _reduce_459(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_460(val, _values, result)
                      result = nil

    result
end

def _reduce_461(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = val[1]

    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_469(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_472(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_475(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_476(val, _values, result)
                      result = new_string val

    result
end

def _reduce_477(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_478(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_479(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_480(val, _values, result)
                      result = val[1]

    result
end

def _reduce_481(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_482(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_485(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_486(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_487(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_488(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_489(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_490(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_491(val, _values, result)
                      result = val[1]

    result
end

def _reduce_492(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_493(val, _values, result)
                      result = val[1]

    result
end

def _reduce_494(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_495(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_496(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_497(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_498(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_499(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_500(val, _values, result)
                      result = nil

    result
end

def _reduce_501(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_502(val, _values, result)
                      result = nil

    result
end

def _reduce_503(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_504(val, _values, result)
                      result = new_string val

    result
end

def _reduce_505(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_506(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_507(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_508(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_509(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_510(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_511(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_514(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

def _reduce_531(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_536(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_537(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_538(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_539(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_540(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_541(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_542(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_543(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_544(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_545(val, _values, result)
                      result = val[2]

    result
end

def _reduce_546(val, _values, result)
                      result = nil

    result
end

def _reduce_547(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_548(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_549(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_550(val, _values, result)
                      result = args val

    result
end

def _reduce_551(val, _values, result)
                      result = args val

    result
end

def _reduce_552(val, _values, result)
                      result = args val

    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]

    result
end

def _reduce_555(val, _values, result)
                      result = nil

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_573(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_574(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 577 omitted

def _reduce_578(val, _values, result)
                      result = val[1]

    result
end

def _reduce_579(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_580(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

# reduce 581 omitted

def _reduce_582(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_583(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_584(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_585(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      result = args val

    result
end

# reduce 590 omitted

# reduce 591 omitted

def _reduce_592(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_593(val, _values, result)
                      result = :"**"

    result
end

def _reduce_594(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_595(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_596(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_597(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_598(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_599(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 600 omitted

# reduce 601 omitted

def _reduce_602(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_603(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 604 omitted

# reduce 605 omitted

def _reduce_606(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_607(val, _values, result)
                      result = val[1]

    result
end

def _reduce_608(val, _values, result)
                      result = nil

    result
end

# reduce 609 omitted

def _reduce_610(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_611(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_612(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 613 omitted

# reduce 614 omitted

def _reduce_615(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_616(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_617(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_618(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

def _reduce_643(val, _values, result)
 yyerrok
    result
end

# reduce 644 omitted

# reduce 645 omitted

def _reduce_646(val, _values, result)
 yyerrok
    result
end

def _reduce_647(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
