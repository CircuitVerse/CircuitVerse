module FriendlyId
  class Slug < ::ActiveRecord::Base
    extend _ActiveRecord_Relation_ClassMethods[FriendlyId::Slug, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def slug: () -> String

      def slug=: (String) -> String

      def slug?: () -> bool

      def slug_changed?: () -> bool

      def slug_change: () -> [ String?, String? ]

      def slug_will_change!: () -> void

      def slug_was: () -> String?

      def slug_previously_changed?: () -> bool

      def slug_previous_change: () -> Array[String?]?

      def slug_previously_was: () -> String?

      def slug_before_last_save: () -> String?

      def slug_change_to_be_saved: () -> Array[String?]?

      def slug_in_database: () -> String?

      def saved_change_to_slug: () -> Array[String?]?

      def saved_change_to_slug?: () -> bool

      def will_save_change_to_slug?: () -> bool

      def restore_slug!: () -> void

      def clear_slug_change: () -> void

      def sluggable_id: () -> Integer

      def sluggable_id=: (Integer) -> Integer

      def sluggable_id?: () -> bool

      def sluggable_id_changed?: () -> bool

      def sluggable_id_change: () -> [ Integer?, Integer? ]

      def sluggable_id_will_change!: () -> void

      def sluggable_id_was: () -> Integer?

      def sluggable_id_previously_changed?: () -> bool

      def sluggable_id_previous_change: () -> Array[Integer?]?

      def sluggable_id_previously_was: () -> Integer?

      def sluggable_id_before_last_save: () -> Integer?

      def sluggable_id_change_to_be_saved: () -> Array[Integer?]?

      def sluggable_id_in_database: () -> Integer?

      def saved_change_to_sluggable_id: () -> Array[Integer?]?

      def saved_change_to_sluggable_id?: () -> bool

      def will_save_change_to_sluggable_id?: () -> bool

      def restore_sluggable_id!: () -> void

      def clear_sluggable_id_change: () -> void

      def sluggable_type: () -> String?

      def sluggable_type=: (String?) -> String?

      def sluggable_type?: () -> bool

      def sluggable_type_changed?: () -> bool

      def sluggable_type_change: () -> [ String?, String? ]

      def sluggable_type_will_change!: () -> void

      def sluggable_type_was: () -> String?

      def sluggable_type_previously_changed?: () -> bool

      def sluggable_type_previous_change: () -> Array[String?]?

      def sluggable_type_previously_was: () -> String?

      def sluggable_type_before_last_save: () -> String?

      def sluggable_type_change_to_be_saved: () -> Array[String?]?

      def sluggable_type_in_database: () -> String?

      def saved_change_to_sluggable_type: () -> Array[String?]?

      def saved_change_to_sluggable_type?: () -> bool

      def will_save_change_to_sluggable_type?: () -> bool

      def restore_sluggable_type!: () -> void

      def clear_sluggable_type_change: () -> void

      def scope: () -> String?

      def scope=: (String?) -> String?

      def scope?: () -> bool

      def scope_changed?: () -> bool

      def scope_change: () -> [ String?, String? ]

      def scope_will_change!: () -> void

      def scope_was: () -> String?

      def scope_previously_changed?: () -> bool

      def scope_previous_change: () -> Array[String?]?

      def scope_previously_was: () -> String?

      def scope_before_last_save: () -> String?

      def scope_change_to_be_saved: () -> Array[String?]?

      def scope_in_database: () -> String?

      def saved_change_to_scope: () -> Array[String?]?

      def saved_change_to_scope?: () -> bool

      def will_save_change_to_scope?: () -> bool

      def restore_scope!: () -> void

      def clear_scope_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone?

      def created_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void
    end
    include GeneratedAttributeMethods

    def sluggable: () -> untyped
    def sluggable=: (untyped?) -> untyped?
    def reload_sluggable: () -> untyped?
    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[FriendlyId::Slug, Integer]
      include Enumerable[FriendlyId::Slug]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[FriendlyId::Slug, Integer]
    end
  end
end
