class NoticedNotification < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[NoticedNotification, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def recipient_type: () -> String

    def recipient_type=: (String) -> String

    def recipient_type?: () -> bool

    def recipient_type_changed?: () -> bool

    def recipient_type_change: () -> [ String?, String? ]

    def recipient_type_will_change!: () -> void

    def recipient_type_was: () -> String?

    def recipient_type_previously_changed?: () -> bool

    def recipient_type_previous_change: () -> Array[String?]?

    def recipient_type_previously_was: () -> String?

    def recipient_type_before_last_save: () -> String?

    def recipient_type_change_to_be_saved: () -> Array[String?]?

    def recipient_type_in_database: () -> String?

    def saved_change_to_recipient_type: () -> Array[String?]?

    def saved_change_to_recipient_type?: () -> bool

    def will_save_change_to_recipient_type?: () -> bool

    def restore_recipient_type!: () -> void

    def clear_recipient_type_change: () -> void

    def recipient_id: () -> Integer

    def recipient_id=: (Integer) -> Integer

    def recipient_id?: () -> bool

    def recipient_id_changed?: () -> bool

    def recipient_id_change: () -> [ Integer?, Integer? ]

    def recipient_id_will_change!: () -> void

    def recipient_id_was: () -> Integer?

    def recipient_id_previously_changed?: () -> bool

    def recipient_id_previous_change: () -> Array[Integer?]?

    def recipient_id_previously_was: () -> Integer?

    def recipient_id_before_last_save: () -> Integer?

    def recipient_id_change_to_be_saved: () -> Array[Integer?]?

    def recipient_id_in_database: () -> Integer?

    def saved_change_to_recipient_id: () -> Array[Integer?]?

    def saved_change_to_recipient_id?: () -> bool

    def will_save_change_to_recipient_id?: () -> bool

    def restore_recipient_id!: () -> void

    def clear_recipient_id_change: () -> void

    def type: () -> String

    def type=: (String) -> String

    def type?: () -> bool

    def type_changed?: () -> bool

    def type_change: () -> [ String?, String? ]

    def type_will_change!: () -> void

    def type_was: () -> String?

    def type_previously_changed?: () -> bool

    def type_previous_change: () -> Array[String?]?

    def type_previously_was: () -> String?

    def type_before_last_save: () -> String?

    def type_change_to_be_saved: () -> Array[String?]?

    def type_in_database: () -> String?

    def saved_change_to_type: () -> Array[String?]?

    def saved_change_to_type?: () -> bool

    def will_save_change_to_type?: () -> bool

    def restore_type!: () -> void

    def clear_type_change: () -> void

    def params: () -> untyped?

    def params=: (untyped?) -> untyped?

    def params?: () -> bool

    def params_changed?: () -> bool

    def params_change: () -> [ untyped?, untyped? ]

    def params_will_change!: () -> void

    def params_was: () -> untyped?

    def params_previously_changed?: () -> bool

    def params_previous_change: () -> Array[untyped?]?

    def params_previously_was: () -> untyped?

    def params_before_last_save: () -> untyped?

    def params_change_to_be_saved: () -> Array[untyped?]?

    def params_in_database: () -> untyped?

    def saved_change_to_params: () -> Array[untyped?]?

    def saved_change_to_params?: () -> bool

    def will_save_change_to_params?: () -> bool

    def restore_params!: () -> void

    def clear_params_change: () -> void

    def read_at: () -> ActiveSupport::TimeWithZone?

    def read_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def read_at?: () -> bool

    def read_at_changed?: () -> bool

    def read_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def read_at_will_change!: () -> void

    def read_at_was: () -> ActiveSupport::TimeWithZone?

    def read_at_previously_changed?: () -> bool

    def read_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def read_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def read_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def read_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def read_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_read_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_read_at?: () -> bool

    def will_save_change_to_read_at?: () -> bool

    def restore_read_at!: () -> void

    def clear_read_at_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def recipient: () -> untyped
  def recipient=: (untyped?) -> untyped?
  def reload_recipient: () -> untyped?
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[NoticedNotification, Integer]
    include Enumerable[NoticedNotification]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[NoticedNotification, Integer]
  end
end
