module Mailkick
  class OptOut < ::ActiveRecord::Base
    extend _ActiveRecord_Relation_ClassMethods[Mailkick::OptOut, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def email: () -> String?

      def email=: (String?) -> String?

      def email?: () -> bool

      def email_changed?: () -> bool

      def email_change: () -> [ String?, String? ]

      def email_will_change!: () -> void

      def email_was: () -> String?

      def email_previously_changed?: () -> bool

      def email_previous_change: () -> Array[String?]?

      def email_previously_was: () -> String?

      def email_before_last_save: () -> String?

      def email_change_to_be_saved: () -> Array[String?]?

      def email_in_database: () -> String?

      def saved_change_to_email: () -> Array[String?]?

      def saved_change_to_email?: () -> bool

      def will_save_change_to_email?: () -> bool

      def restore_email!: () -> void

      def clear_email_change: () -> void

      def user_type: () -> String?

      def user_type=: (String?) -> String?

      def user_type?: () -> bool

      def user_type_changed?: () -> bool

      def user_type_change: () -> [ String?, String? ]

      def user_type_will_change!: () -> void

      def user_type_was: () -> String?

      def user_type_previously_changed?: () -> bool

      def user_type_previous_change: () -> Array[String?]?

      def user_type_previously_was: () -> String?

      def user_type_before_last_save: () -> String?

      def user_type_change_to_be_saved: () -> Array[String?]?

      def user_type_in_database: () -> String?

      def saved_change_to_user_type: () -> Array[String?]?

      def saved_change_to_user_type?: () -> bool

      def will_save_change_to_user_type?: () -> bool

      def restore_user_type!: () -> void

      def clear_user_type_change: () -> void

      def user_id: () -> Integer?

      def user_id=: (Integer?) -> Integer?

      def user_id?: () -> bool

      def user_id_changed?: () -> bool

      def user_id_change: () -> [ Integer?, Integer? ]

      def user_id_will_change!: () -> void

      def user_id_was: () -> Integer?

      def user_id_previously_changed?: () -> bool

      def user_id_previous_change: () -> Array[Integer?]?

      def user_id_previously_was: () -> Integer?

      def user_id_before_last_save: () -> Integer?

      def user_id_change_to_be_saved: () -> Array[Integer?]?

      def user_id_in_database: () -> Integer?

      def saved_change_to_user_id: () -> Array[Integer?]?

      def saved_change_to_user_id?: () -> bool

      def will_save_change_to_user_id?: () -> bool

      def restore_user_id!: () -> void

      def clear_user_id_change: () -> void

      def active: () -> bool

      def active=: (bool) -> bool

      def active?: () -> bool

      def active_changed?: () -> bool

      def active_change: () -> [ bool?, bool? ]

      def active_will_change!: () -> void

      def active_was: () -> bool?

      def active_previously_changed?: () -> bool

      def active_previous_change: () -> Array[bool?]?

      def active_previously_was: () -> bool?

      def active_before_last_save: () -> bool?

      def active_change_to_be_saved: () -> Array[bool?]?

      def active_in_database: () -> bool?

      def saved_change_to_active: () -> Array[bool?]?

      def saved_change_to_active?: () -> bool

      def will_save_change_to_active?: () -> bool

      def restore_active!: () -> void

      def clear_active_change: () -> void

      def reason: () -> String?

      def reason=: (String?) -> String?

      def reason?: () -> bool

      def reason_changed?: () -> bool

      def reason_change: () -> [ String?, String? ]

      def reason_will_change!: () -> void

      def reason_was: () -> String?

      def reason_previously_changed?: () -> bool

      def reason_previous_change: () -> Array[String?]?

      def reason_previously_was: () -> String?

      def reason_before_last_save: () -> String?

      def reason_change_to_be_saved: () -> Array[String?]?

      def reason_in_database: () -> String?

      def saved_change_to_reason: () -> Array[String?]?

      def saved_change_to_reason?: () -> bool

      def will_save_change_to_reason?: () -> bool

      def restore_reason!: () -> void

      def clear_reason_change: () -> void

      def list: () -> String?

      def list=: (String?) -> String?

      def list?: () -> bool

      def list_changed?: () -> bool

      def list_change: () -> [ String?, String? ]

      def list_will_change!: () -> void

      def list_was: () -> String?

      def list_previously_changed?: () -> bool

      def list_previous_change: () -> Array[String?]?

      def list_previously_was: () -> String?

      def list_before_last_save: () -> String?

      def list_change_to_be_saved: () -> Array[String?]?

      def list_in_database: () -> String?

      def saved_change_to_list: () -> Array[String?]?

      def saved_change_to_list?: () -> bool

      def will_save_change_to_list?: () -> bool

      def restore_list!: () -> void

      def clear_list_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone

      def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ActiveSupport::TimeWithZone

      def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void
    end
    include GeneratedAttributeMethods

    def user: () -> untyped?
    def user=: (untyped?) -> untyped?
    def reload_user: () -> untyped?
    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Mailkick::OptOut, Integer]
      include Enumerable[Mailkick::OptOut]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Mailkick::OptOut, Integer]
    end
  end
end
