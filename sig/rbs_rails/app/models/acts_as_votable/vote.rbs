module ActsAsVotable
  class Vote < ::ActiveRecord::Base
    extend _ActiveRecord_Relation_ClassMethods[ActsAsVotable::Vote, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def votable_type: () -> String?

      def votable_type=: (String?) -> String?

      def votable_type?: () -> bool

      def votable_type_changed?: () -> bool

      def votable_type_change: () -> [ String?, String? ]

      def votable_type_will_change!: () -> void

      def votable_type_was: () -> String?

      def votable_type_previously_changed?: () -> bool

      def votable_type_previous_change: () -> Array[String?]?

      def votable_type_previously_was: () -> String?

      def votable_type_before_last_save: () -> String?

      def votable_type_change_to_be_saved: () -> Array[String?]?

      def votable_type_in_database: () -> String?

      def saved_change_to_votable_type: () -> Array[String?]?

      def saved_change_to_votable_type?: () -> bool

      def will_save_change_to_votable_type?: () -> bool

      def restore_votable_type!: () -> void

      def clear_votable_type_change: () -> void

      def votable_id: () -> Integer?

      def votable_id=: (Integer?) -> Integer?

      def votable_id?: () -> bool

      def votable_id_changed?: () -> bool

      def votable_id_change: () -> [ Integer?, Integer? ]

      def votable_id_will_change!: () -> void

      def votable_id_was: () -> Integer?

      def votable_id_previously_changed?: () -> bool

      def votable_id_previous_change: () -> Array[Integer?]?

      def votable_id_previously_was: () -> Integer?

      def votable_id_before_last_save: () -> Integer?

      def votable_id_change_to_be_saved: () -> Array[Integer?]?

      def votable_id_in_database: () -> Integer?

      def saved_change_to_votable_id: () -> Array[Integer?]?

      def saved_change_to_votable_id?: () -> bool

      def will_save_change_to_votable_id?: () -> bool

      def restore_votable_id!: () -> void

      def clear_votable_id_change: () -> void

      def voter_type: () -> String?

      def voter_type=: (String?) -> String?

      def voter_type?: () -> bool

      def voter_type_changed?: () -> bool

      def voter_type_change: () -> [ String?, String? ]

      def voter_type_will_change!: () -> void

      def voter_type_was: () -> String?

      def voter_type_previously_changed?: () -> bool

      def voter_type_previous_change: () -> Array[String?]?

      def voter_type_previously_was: () -> String?

      def voter_type_before_last_save: () -> String?

      def voter_type_change_to_be_saved: () -> Array[String?]?

      def voter_type_in_database: () -> String?

      def saved_change_to_voter_type: () -> Array[String?]?

      def saved_change_to_voter_type?: () -> bool

      def will_save_change_to_voter_type?: () -> bool

      def restore_voter_type!: () -> void

      def clear_voter_type_change: () -> void

      def voter_id: () -> Integer?

      def voter_id=: (Integer?) -> Integer?

      def voter_id?: () -> bool

      def voter_id_changed?: () -> bool

      def voter_id_change: () -> [ Integer?, Integer? ]

      def voter_id_will_change!: () -> void

      def voter_id_was: () -> Integer?

      def voter_id_previously_changed?: () -> bool

      def voter_id_previous_change: () -> Array[Integer?]?

      def voter_id_previously_was: () -> Integer?

      def voter_id_before_last_save: () -> Integer?

      def voter_id_change_to_be_saved: () -> Array[Integer?]?

      def voter_id_in_database: () -> Integer?

      def saved_change_to_voter_id: () -> Array[Integer?]?

      def saved_change_to_voter_id?: () -> bool

      def will_save_change_to_voter_id?: () -> bool

      def restore_voter_id!: () -> void

      def clear_voter_id_change: () -> void

      def vote_flag: () -> bool?

      def vote_flag=: (bool?) -> bool?

      def vote_flag?: () -> bool

      def vote_flag_changed?: () -> bool

      def vote_flag_change: () -> [ bool?, bool? ]

      def vote_flag_will_change!: () -> void

      def vote_flag_was: () -> bool?

      def vote_flag_previously_changed?: () -> bool

      def vote_flag_previous_change: () -> Array[bool?]?

      def vote_flag_previously_was: () -> bool?

      def vote_flag_before_last_save: () -> bool?

      def vote_flag_change_to_be_saved: () -> Array[bool?]?

      def vote_flag_in_database: () -> bool?

      def saved_change_to_vote_flag: () -> Array[bool?]?

      def saved_change_to_vote_flag?: () -> bool

      def will_save_change_to_vote_flag?: () -> bool

      def restore_vote_flag!: () -> void

      def clear_vote_flag_change: () -> void

      def vote_scope: () -> String?

      def vote_scope=: (String?) -> String?

      def vote_scope?: () -> bool

      def vote_scope_changed?: () -> bool

      def vote_scope_change: () -> [ String?, String? ]

      def vote_scope_will_change!: () -> void

      def vote_scope_was: () -> String?

      def vote_scope_previously_changed?: () -> bool

      def vote_scope_previous_change: () -> Array[String?]?

      def vote_scope_previously_was: () -> String?

      def vote_scope_before_last_save: () -> String?

      def vote_scope_change_to_be_saved: () -> Array[String?]?

      def vote_scope_in_database: () -> String?

      def saved_change_to_vote_scope: () -> Array[String?]?

      def saved_change_to_vote_scope?: () -> bool

      def will_save_change_to_vote_scope?: () -> bool

      def restore_vote_scope!: () -> void

      def clear_vote_scope_change: () -> void

      def vote_weight: () -> Integer?

      def vote_weight=: (Integer?) -> Integer?

      def vote_weight?: () -> bool

      def vote_weight_changed?: () -> bool

      def vote_weight_change: () -> [ Integer?, Integer? ]

      def vote_weight_will_change!: () -> void

      def vote_weight_was: () -> Integer?

      def vote_weight_previously_changed?: () -> bool

      def vote_weight_previous_change: () -> Array[Integer?]?

      def vote_weight_previously_was: () -> Integer?

      def vote_weight_before_last_save: () -> Integer?

      def vote_weight_change_to_be_saved: () -> Array[Integer?]?

      def vote_weight_in_database: () -> Integer?

      def saved_change_to_vote_weight: () -> Array[Integer?]?

      def saved_change_to_vote_weight?: () -> bool

      def will_save_change_to_vote_weight?: () -> bool

      def restore_vote_weight!: () -> void

      def clear_vote_weight_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone?

      def created_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ActiveSupport::TimeWithZone?

      def updated_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void
    end
    include GeneratedAttributeMethods

    def votable: () -> untyped
    def votable=: (untyped?) -> untyped?
    def reload_votable: () -> untyped?
    def voter: () -> untyped
    def voter=: (untyped?) -> untyped?
    def reload_voter: () -> untyped?
    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[ActsAsVotable::Vote, Integer]
      include Enumerable[ActsAsVotable::Vote]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[ActsAsVotable::Vote, Integer]
    end
  end
end
