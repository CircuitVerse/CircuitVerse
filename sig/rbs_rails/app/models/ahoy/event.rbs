module Ahoy
  class Event < ::ApplicationRecord
    extend _ActiveRecord_Relation_ClassMethods[Ahoy::Event, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def visit_id: () -> Integer?

      def visit_id=: (Integer?) -> Integer?

      def visit_id?: () -> bool

      def visit_id_changed?: () -> bool

      def visit_id_change: () -> [ Integer?, Integer? ]

      def visit_id_will_change!: () -> void

      def visit_id_was: () -> Integer?

      def visit_id_previously_changed?: () -> bool

      def visit_id_previous_change: () -> Array[Integer?]?

      def visit_id_previously_was: () -> Integer?

      def visit_id_before_last_save: () -> Integer?

      def visit_id_change_to_be_saved: () -> Array[Integer?]?

      def visit_id_in_database: () -> Integer?

      def saved_change_to_visit_id: () -> Array[Integer?]?

      def saved_change_to_visit_id?: () -> bool

      def will_save_change_to_visit_id?: () -> bool

      def restore_visit_id!: () -> void

      def clear_visit_id_change: () -> void

      def user_id: () -> Integer?

      def user_id=: (Integer?) -> Integer?

      def user_id?: () -> bool

      def user_id_changed?: () -> bool

      def user_id_change: () -> [ Integer?, Integer? ]

      def user_id_will_change!: () -> void

      def user_id_was: () -> Integer?

      def user_id_previously_changed?: () -> bool

      def user_id_previous_change: () -> Array[Integer?]?

      def user_id_previously_was: () -> Integer?

      def user_id_before_last_save: () -> Integer?

      def user_id_change_to_be_saved: () -> Array[Integer?]?

      def user_id_in_database: () -> Integer?

      def saved_change_to_user_id: () -> Array[Integer?]?

      def saved_change_to_user_id?: () -> bool

      def will_save_change_to_user_id?: () -> bool

      def restore_user_id!: () -> void

      def clear_user_id_change: () -> void

      def name: () -> String?

      def name=: (String?) -> String?

      def name?: () -> bool

      def name_changed?: () -> bool

      def name_change: () -> [ String?, String? ]

      def name_will_change!: () -> void

      def name_was: () -> String?

      def name_previously_changed?: () -> bool

      def name_previous_change: () -> Array[String?]?

      def name_previously_was: () -> String?

      def name_before_last_save: () -> String?

      def name_change_to_be_saved: () -> Array[String?]?

      def name_in_database: () -> String?

      def saved_change_to_name: () -> Array[String?]?

      def saved_change_to_name?: () -> bool

      def will_save_change_to_name?: () -> bool

      def restore_name!: () -> void

      def clear_name_change: () -> void

      def properties: () -> untyped?

      def properties=: (untyped?) -> untyped?

      def properties?: () -> bool

      def properties_changed?: () -> bool

      def properties_change: () -> [ untyped?, untyped? ]

      def properties_will_change!: () -> void

      def properties_was: () -> untyped?

      def properties_previously_changed?: () -> bool

      def properties_previous_change: () -> Array[untyped?]?

      def properties_previously_was: () -> untyped?

      def properties_before_last_save: () -> untyped?

      def properties_change_to_be_saved: () -> Array[untyped?]?

      def properties_in_database: () -> untyped?

      def saved_change_to_properties: () -> Array[untyped?]?

      def saved_change_to_properties?: () -> bool

      def will_save_change_to_properties?: () -> bool

      def restore_properties!: () -> void

      def clear_properties_change: () -> void

      def time: () -> ActiveSupport::TimeWithZone?

      def time=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

      def time?: () -> bool

      def time_changed?: () -> bool

      def time_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def time_will_change!: () -> void

      def time_was: () -> ActiveSupport::TimeWithZone?

      def time_previously_changed?: () -> bool

      def time_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def time_previously_was: () -> ActiveSupport::TimeWithZone?

      def time_before_last_save: () -> ActiveSupport::TimeWithZone?

      def time_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def time_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_time: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_time?: () -> bool

      def will_save_change_to_time?: () -> bool

      def restore_time!: () -> void

      def clear_time_change: () -> void
    end
    include GeneratedAttributeMethods

    def visit: () -> Ahoy::Visit
    def visit=: (Ahoy::Visit?) -> Ahoy::Visit?
    def reload_visit: () -> Ahoy::Visit?
    def build_visit: (untyped) -> Ahoy::Visit
    def create_visit: (untyped) -> Ahoy::Visit
    def create_visit!: (untyped) -> Ahoy::Visit
    def user: () -> User?
    def user=: (User?) -> User?
    def reload_user: () -> User?
    def build_user: (untyped) -> User
    def create_user: (untyped) -> User
    def create_user!: (untyped) -> User
    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Ahoy::Event, Integer]
      include Enumerable[Ahoy::Event]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Ahoy::Event, Integer]
    end
  end
end
