module Commontator
  class Subscription < ::ActiveRecord::Base
    extend _ActiveRecord_Relation_ClassMethods[Commontator::Subscription, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def subscriber_type: () -> String

      def subscriber_type=: (String) -> String

      def subscriber_type?: () -> bool

      def subscriber_type_changed?: () -> bool

      def subscriber_type_change: () -> [ String?, String? ]

      def subscriber_type_will_change!: () -> void

      def subscriber_type_was: () -> String?

      def subscriber_type_previously_changed?: () -> bool

      def subscriber_type_previous_change: () -> Array[String?]?

      def subscriber_type_previously_was: () -> String?

      def subscriber_type_before_last_save: () -> String?

      def subscriber_type_change_to_be_saved: () -> Array[String?]?

      def subscriber_type_in_database: () -> String?

      def saved_change_to_subscriber_type: () -> Array[String?]?

      def saved_change_to_subscriber_type?: () -> bool

      def will_save_change_to_subscriber_type?: () -> bool

      def restore_subscriber_type!: () -> void

      def clear_subscriber_type_change: () -> void

      def subscriber_id: () -> Integer

      def subscriber_id=: (Integer) -> Integer

      def subscriber_id?: () -> bool

      def subscriber_id_changed?: () -> bool

      def subscriber_id_change: () -> [ Integer?, Integer? ]

      def subscriber_id_will_change!: () -> void

      def subscriber_id_was: () -> Integer?

      def subscriber_id_previously_changed?: () -> bool

      def subscriber_id_previous_change: () -> Array[Integer?]?

      def subscriber_id_previously_was: () -> Integer?

      def subscriber_id_before_last_save: () -> Integer?

      def subscriber_id_change_to_be_saved: () -> Array[Integer?]?

      def subscriber_id_in_database: () -> Integer?

      def saved_change_to_subscriber_id: () -> Array[Integer?]?

      def saved_change_to_subscriber_id?: () -> bool

      def will_save_change_to_subscriber_id?: () -> bool

      def restore_subscriber_id!: () -> void

      def clear_subscriber_id_change: () -> void

      def thread_id: () -> Integer

      def thread_id=: (Integer) -> Integer

      def thread_id?: () -> bool

      def thread_id_changed?: () -> bool

      def thread_id_change: () -> [ Integer?, Integer? ]

      def thread_id_will_change!: () -> void

      def thread_id_was: () -> Integer?

      def thread_id_previously_changed?: () -> bool

      def thread_id_previous_change: () -> Array[Integer?]?

      def thread_id_previously_was: () -> Integer?

      def thread_id_before_last_save: () -> Integer?

      def thread_id_change_to_be_saved: () -> Array[Integer?]?

      def thread_id_in_database: () -> Integer?

      def saved_change_to_thread_id: () -> Array[Integer?]?

      def saved_change_to_thread_id?: () -> bool

      def will_save_change_to_thread_id?: () -> bool

      def restore_thread_id!: () -> void

      def clear_thread_id_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone

      def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ActiveSupport::TimeWithZone

      def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void
    end
    include GeneratedAttributeMethods

    def subscriber: () -> untyped
    def subscriber=: (untyped?) -> untyped?
    def reload_subscriber: () -> untyped?
    def thread: () -> Commontator::Thread
    def thread=: (Commontator::Thread?) -> Commontator::Thread?
    def reload_thread: () -> Commontator::Thread?
    def build_thread: (untyped) -> Commontator::Thread
    def create_thread: (untyped) -> Commontator::Thread
    def create_thread!: (untyped) -> Commontator::Thread
    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Commontator::Subscription, Integer]
      include Enumerable[Commontator::Subscription]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Commontator::Subscription, Integer]
    end
  end
end
