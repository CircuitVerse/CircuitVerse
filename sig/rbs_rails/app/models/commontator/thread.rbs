module Commontator
  class Thread < ::ActiveRecord::Base
    extend _ActiveRecord_Relation_ClassMethods[Commontator::Thread, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def commontable_type: () -> String?

      def commontable_type=: (String?) -> String?

      def commontable_type?: () -> bool

      def commontable_type_changed?: () -> bool

      def commontable_type_change: () -> [ String?, String? ]

      def commontable_type_will_change!: () -> void

      def commontable_type_was: () -> String?

      def commontable_type_previously_changed?: () -> bool

      def commontable_type_previous_change: () -> Array[String?]?

      def commontable_type_previously_was: () -> String?

      def commontable_type_before_last_save: () -> String?

      def commontable_type_change_to_be_saved: () -> Array[String?]?

      def commontable_type_in_database: () -> String?

      def saved_change_to_commontable_type: () -> Array[String?]?

      def saved_change_to_commontable_type?: () -> bool

      def will_save_change_to_commontable_type?: () -> bool

      def restore_commontable_type!: () -> void

      def clear_commontable_type_change: () -> void

      def commontable_id: () -> Integer?

      def commontable_id=: (Integer?) -> Integer?

      def commontable_id?: () -> bool

      def commontable_id_changed?: () -> bool

      def commontable_id_change: () -> [ Integer?, Integer? ]

      def commontable_id_will_change!: () -> void

      def commontable_id_was: () -> Integer?

      def commontable_id_previously_changed?: () -> bool

      def commontable_id_previous_change: () -> Array[Integer?]?

      def commontable_id_previously_was: () -> Integer?

      def commontable_id_before_last_save: () -> Integer?

      def commontable_id_change_to_be_saved: () -> Array[Integer?]?

      def commontable_id_in_database: () -> Integer?

      def saved_change_to_commontable_id: () -> Array[Integer?]?

      def saved_change_to_commontable_id?: () -> bool

      def will_save_change_to_commontable_id?: () -> bool

      def restore_commontable_id!: () -> void

      def clear_commontable_id_change: () -> void

      def closed_at: () -> ActiveSupport::TimeWithZone?

      def closed_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

      def closed_at?: () -> bool

      def closed_at_changed?: () -> bool

      def closed_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def closed_at_will_change!: () -> void

      def closed_at_was: () -> ActiveSupport::TimeWithZone?

      def closed_at_previously_changed?: () -> bool

      def closed_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def closed_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def closed_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def closed_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def closed_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_closed_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_closed_at?: () -> bool

      def will_save_change_to_closed_at?: () -> bool

      def restore_closed_at!: () -> void

      def clear_closed_at_change: () -> void

      def closer_type: () -> String?

      def closer_type=: (String?) -> String?

      def closer_type?: () -> bool

      def closer_type_changed?: () -> bool

      def closer_type_change: () -> [ String?, String? ]

      def closer_type_will_change!: () -> void

      def closer_type_was: () -> String?

      def closer_type_previously_changed?: () -> bool

      def closer_type_previous_change: () -> Array[String?]?

      def closer_type_previously_was: () -> String?

      def closer_type_before_last_save: () -> String?

      def closer_type_change_to_be_saved: () -> Array[String?]?

      def closer_type_in_database: () -> String?

      def saved_change_to_closer_type: () -> Array[String?]?

      def saved_change_to_closer_type?: () -> bool

      def will_save_change_to_closer_type?: () -> bool

      def restore_closer_type!: () -> void

      def clear_closer_type_change: () -> void

      def closer_id: () -> Integer?

      def closer_id=: (Integer?) -> Integer?

      def closer_id?: () -> bool

      def closer_id_changed?: () -> bool

      def closer_id_change: () -> [ Integer?, Integer? ]

      def closer_id_will_change!: () -> void

      def closer_id_was: () -> Integer?

      def closer_id_previously_changed?: () -> bool

      def closer_id_previous_change: () -> Array[Integer?]?

      def closer_id_previously_was: () -> Integer?

      def closer_id_before_last_save: () -> Integer?

      def closer_id_change_to_be_saved: () -> Array[Integer?]?

      def closer_id_in_database: () -> Integer?

      def saved_change_to_closer_id: () -> Array[Integer?]?

      def saved_change_to_closer_id?: () -> bool

      def will_save_change_to_closer_id?: () -> bool

      def restore_closer_id!: () -> void

      def clear_closer_id_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone

      def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ActiveSupport::TimeWithZone

      def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void
    end
    include GeneratedAttributeMethods
    def comments: () -> Commontator::Comment::ActiveRecord_Associations_CollectionProxy
    def comments=: (Commontator::Comment::ActiveRecord_Associations_CollectionProxy | Array[Commontator::Comment]) -> (Commontator::Comment::ActiveRecord_Associations_CollectionProxy | Array[Commontator::Comment])
    def comment_ids: () -> Array[Integer]
    def comment_ids=: (Array[Integer]) -> Array[Integer]
    def subscriptions: () -> Commontator::Subscription::ActiveRecord_Associations_CollectionProxy
    def subscriptions=: (Commontator::Subscription::ActiveRecord_Associations_CollectionProxy | Array[Commontator::Subscription]) -> (Commontator::Subscription::ActiveRecord_Associations_CollectionProxy | Array[Commontator::Subscription])
    def subscription_ids: () -> Array[Integer]
    def subscription_ids=: (Array[Integer]) -> Array[Integer]

    def closer: () -> untyped?
    def closer=: (untyped?) -> untyped?
    def reload_closer: () -> untyped?
    def commontable: () -> untyped?
    def commontable=: (untyped?) -> untyped?
    def reload_commontable: () -> untyped?
    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Commontator::Thread, Integer]
      include Enumerable[Commontator::Thread]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Commontator::Thread, Integer]
    end
  end
end
