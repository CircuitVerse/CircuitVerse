version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    parallelism: 1 # run three instances of this job in parallel
    branches: # run this job with branch filters
        ignore: # ignore these branches
          - gh-pages
    docker: # run the steps with Docker
      - image: circleci/ruby:2.6.5-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: postgres:12.4-alpine # database image
        environment: # environment variables for database
          POSTGRES_USER: postgres
          POSTGRES_DB: circuitverse_test
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      - run:
          name: generate private key for token auth
          command: openssl genrsa -out config/private.pem 2048

      - run:
          name: generate public key for token auth
          command: openssl rsa -in config/private.pem -outform PEM -pubout -out config/public.pem

      # Install bundler
      - run:
          name: Install bundler
          command: gem install bundler

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - circuiteverse-{{ checksum "Gemfile.lock" }}
            - circuiteverse-

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle install --with postgresql

      - run: # Install JS dependencies
          name: Yarn Install
          command: yarn

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: circuiteverse-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Copy sample database configuration
          command: cp config/database.example.yml config/database.yml

      - run:
          name: Database setup
          command: bin/rails db:schema:load

      - run:
          name: Run rspec in parallel
          command: |
            COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)


      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
